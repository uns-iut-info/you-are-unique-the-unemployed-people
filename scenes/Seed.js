// Seed.js
var DEBUG;
(function (DEBUG) {
    var Debugger = /** @class */ (function () {
        function Debugger() {
        }
        Debugger.log = function (message) {
            console.log(message);
        };
        Debugger.warn = function (message) {
            console.warn(message);
        };
        Debugger.error = function (message) {
            console.error(message);
        };
        Debugger.assert = function (condition, message) {
            if (!condition) {
                console.assert(condition, message);
            }
        };
        Debugger.debugAssert = function (condition, message) {
            // #if DEBUG
            if (!condition) {
                console.assert(condition, message);
            }
            // #endif
        };
        return Debugger;
    }());
    DEBUG.Debugger = Debugger;
})(DEBUG || (DEBUG = {}));
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var PROJECT;
(function (PROJECT) {
    /**
     * Babylon universal camera rig system pro class
     * @class UniversalCameraSystem - All rights reserved (c) 2020 Mackey Kinard
     * https://doc.babylonjs.com/divingDeeper/postProcesses/defaultRenderingPipeline
     */
    var UniversalCameraSystem = /** @class */ (function (_super) {
        __extends(UniversalCameraSystem, _super);
        function UniversalCameraSystem() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.mainCamera = false;
            _this.cameraType = 0;
            _this.cameraInertia = 0.5;
            _this.cameraController = null;
            _this.immersiveOptions = null;
            _this.arcRotateConfig = null;
            _this.multiPlayerSetup = null;
            _this.editorPostProcessing = null;
            _this.m_cameraRig = null;
            return _this;
        }
        UniversalCameraSystem.GetRenderingPipeline = function () { return PROJECT.UniversalCameraSystem.renderingPipeline; };
        ;
        UniversalCameraSystem.GetScreenSpacePipeline = function () { return PROJECT.UniversalCameraSystem.screenSpacePipeline; };
        ;
        UniversalCameraSystem.IsCameraSystemReady = function () { return PROJECT.UniversalCameraSystem.cameraReady; };
        UniversalCameraSystem.prototype.isMainCamera = function () { return this.mainCamera; };
        UniversalCameraSystem.prototype.getCameraType = function () { return this.cameraType; };
        UniversalCameraSystem.prototype.awake = function () { this.awakeCameraSystemState(); };
        UniversalCameraSystem.prototype.start = function () { this.startCameraSystemState(); };
        UniversalCameraSystem.prototype.update = function () { this.updateCameraSystemState(); };
        UniversalCameraSystem.prototype.destroy = function () { this.destroyCameraSystemState(); };
        /////////////////////////////////////////////
        // Universal Camera System State Functions //
        /////////////////////////////////////////////
        UniversalCameraSystem.prototype.awakeCameraSystemState = function () {
            this.mainCamera = (this.getTransformTag() === "MainCamera");
            this.cameraType = this.getProperty("mainCameraType", this.cameraType);
            this.cameraInertia = this.getProperty("setCameraInertia", this.cameraInertia);
            this.immersiveOptions = this.getProperty("immersiveOptions", this.immersiveOptions);
            this.arcRotateConfig = this.getProperty("arcRotateConfig", this.arcRotateConfig);
            this.multiPlayerSetup = this.getProperty("multiPlayerSetup", this.multiPlayerSetup);
            this.cameraController = this.getProperty("cameraController", this.cameraController);
            this.editorPostProcessing = this.getProperty("renderingPipeline", this.editorPostProcessing);
            this.cleanCameraSystemState();
        };
        UniversalCameraSystem.prototype.startCameraSystemState = function () {
            return __awaiter(this, void 0, void 0, function () {
                var cinput, mouseInput, localStorageRequired, webvrFloorMeshes, webvrHelperOptions, webvrImmersiveMode, webvrReferenceType, _a, navmesh, cameraName, playerOneTransform, playerOneName, playerOneCamerax, playerTwoTransform, playerTwoName, playerTwoCamerax, playerThreeTransform, playerThreeName, playerThreeCamerax, playerFourTransform, playerFourName, playerFourCamerax, quality, allowProcessing, defaultPipeline, vcolor, colorGradingTexture, curve, ssaoRatio, ssaoPipeline;
                var _this = this;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            BABYLON.Utilities.ValidateTransformQuaternion(this.transform);
                            if (this.multiPlayerSetup != null) {
                                PROJECT.UniversalCameraSystem.startupMode = this.multiPlayerSetup.playerStartupMode;
                                PROJECT.UniversalCameraSystem.stereoCameras = this.multiPlayerSetup.stereoSideBySide;
                            }
                            // ..
                            // Default Camera System Support
                            // ..
                            this.m_cameraRig = this.getCameraRig();
                            if (!(this.m_cameraRig != null)) return [3 /*break*/, 6];
                            this.m_cameraRig.inertia = this.cameraInertia;
                            if (this.cameraController != null) {
                                this.m_cameraRig.speed = this.cameraController.cameraSpeed;
                                this.m_cameraRig.inverseRotationSpeed = this.cameraController.invRotationSpeed;
                                if (this.m_cameraRig instanceof BABYLON.UniversalCamera) {
                                    this.m_cameraRig.gamepadAngularSensibility = this.cameraController.gamepadRotation;
                                    this.m_cameraRig.gamepadMoveSensibility = this.cameraController.gamepadMovement;
                                    this.m_cameraRig.touchAngularSensibility = this.cameraController.touchRotation;
                                    this.m_cameraRig.touchMoveSensibility = this.cameraController.touchMovement;
                                }
                                if (this.cameraController.keyboardWASD === true) {
                                    if (this.m_cameraRig.inputs != null && this.m_cameraRig.inputs.attached != null && this.m_cameraRig.inputs.attached.keyboard != null) {
                                        if (this.m_cameraRig.inputs.attached.keyboard instanceof BABYLON.FreeCameraKeyboardMoveInput) {
                                            cinput = this.m_cameraRig.inputs.attached.keyboard;
                                            cinput.keysUp.push(BABYLON.UserInputKey.W);
                                            cinput.keysLeft.push(BABYLON.UserInputKey.A);
                                            cinput.keysDown.push(BABYLON.UserInputKey.S);
                                            cinput.keysRight.push(BABYLON.UserInputKey.D);
                                            cinput.rotationSpeed = this.cameraController.rotationSpeed;
                                            if (this.cameraController.arrowKeyRotation === true) {
                                                cinput.keysLeft = [BABYLON.UserInputKey.A];
                                                cinput.keysRight = [BABYLON.UserInputKey.D];
                                                cinput.keysRotateLeft = [BABYLON.UserInputKey.LeftArrow];
                                                cinput.keysRotateRight = [BABYLON.UserInputKey.RightArrow];
                                            }
                                        }
                                    }
                                }
                            }
                            if (this.m_cameraRig.inputs != null && this.m_cameraRig.inputs.attached != null && this.m_cameraRig.inputs.attached.mouse != null) {
                                mouseInput = this.m_cameraRig.inputs.attached.mouse;
                                // ..
                                // NOTE: Touch Enabled Mouse Hack
                                // ..
                                if (BABYLON.Utilities.HasOwnProperty(mouseInput, "touchEnabled")) {
                                    mouseInput.touchEnabled = true;
                                }
                            }
                            if (!(this.cameraType === 0 || this.cameraType === 4)) return [3 /*break*/, 1];
                            //if (PROJECT.UniversalCameraSystem.PlayerOneCamera == null) {
                            PROJECT.UniversalCameraSystem.PlayerOneCamera = this.m_cameraRig;
                            PROJECT.UniversalCameraSystem.PlayerOneCamera.inertia = this.cameraInertia;
                            PROJECT.UniversalCameraSystem.PlayerOneCamera.transform = this.transform;
                            return [3 /*break*/, 5];
                        case 1:
                            if (!(this.cameraType === 1 || this.cameraType === 2)) return [3 /*break*/, 4];
                            //if (PROJECT.UniversalCameraSystem.PlayerOneCamera == null) {
                            PROJECT.UniversalCameraSystem.PlayerOneCamera = this.m_cameraRig;
                            PROJECT.UniversalCameraSystem.PlayerOneCamera.inertia = this.cameraInertia;
                            PROJECT.UniversalCameraSystem.PlayerOneCamera.transform = this.transform;
                            if (!(this.immersiveOptions != null)) return [3 /*break*/, 3];
                            localStorageRequired = (this.immersiveOptions.localStorageOption === true);
                            if (!(localStorageRequired === false || (localStorageRequired === true && BABYLON.SceneManager.GetVirtualRealityEnabled()))) return [3 /*break*/, 3];
                            webvrFloorMeshes = null;
                            webvrHelperOptions = null;
                            webvrImmersiveMode = (this.cameraType === 1) ? "immersive-ar" : "immersive-vr";
                            webvrReferenceType = "local-floor";
                            switch (this.immersiveOptions.referenceSpaceType) {
                                case 0:
                                    webvrReferenceType = "viewer";
                                    break;
                                case 1:
                                    webvrReferenceType = "local";
                                    break;
                                case 2:
                                    webvrReferenceType = "local-floor";
                                    break;
                                case 4:
                                    webvrReferenceType = "unbounded";
                                    break;
                                default:
                                    webvrReferenceType = "local-floor";
                                    break;
                            }
                            if (this.immersiveOptions.setFloorMeshesTags == null || this.immersiveOptions.setFloorMeshesTags === "")
                                this.immersiveOptions.setFloorMeshesTags = "Navigation";
                            if (this.immersiveOptions.defaultTeleportationSetup.useTeleportation === true)
                                webvrFloorMeshes = this.scene.getMeshesByTags(this.immersiveOptions.setFloorMeshesTags);
                            if (this.immersiveOptions.defaultTeleportationSetup.useTeleportation === true && webvrFloorMeshes != null && webvrFloorMeshes.length > 0) {
                                webvrHelperOptions = {
                                    floorMeshes: webvrFloorMeshes,
                                    optionalFeatures: this.immersiveOptions.optionalFeatures,
                                    useStablePlugins: this.immersiveOptions.useStablePlugins,
                                    renderingGroupId: this.immersiveOptions.renderingGroupNum,
                                    disableDefaultUI: this.immersiveOptions.disableUserInterface,
                                    disableTeleportation: (this.immersiveOptions.defaultTeleportationSetup.useTeleportation === false),
                                    disablePointerSelection: this.immersiveOptions.disablePointerSelect,
                                    ignoreNativeCameraTransformation: this.immersiveOptions.ignoreNativeCamera,
                                    inputOptions: {
                                        doNotLoadControllerMeshes: this.immersiveOptions.experienceInputOptions.disableMeshLoad,
                                        forceInputProfile: this.immersiveOptions.experienceInputOptions.forceInputProfile,
                                        disableOnlineControllerRepository: this.immersiveOptions.experienceInputOptions.disableRepository,
                                        customControllersRepositoryURL: this.immersiveOptions.experienceInputOptions.customRepository,
                                        disableControllerAnimation: this.immersiveOptions.experienceInputOptions.disableModelAnim,
                                        controllerOptions: {
                                            disableMotionControllerAnimation: this.immersiveOptions.experienceInputOptions.controllerOptions.disableCtrlAnim,
                                            doNotLoadControllerMesh: this.immersiveOptions.experienceInputOptions.controllerOptions.disableCtrlMesh,
                                            forceControllerProfile: this.immersiveOptions.experienceInputOptions.controllerOptions.forceCtrlProfile,
                                            renderingGroupId: this.immersiveOptions.experienceInputOptions.controllerOptions.renderingGroup
                                        }
                                    },
                                    uiOptions: {
                                        sessionMode: webvrImmersiveMode,
                                        referenceSpaceType: webvrReferenceType
                                    }
                                };
                            }
                            else {
                                webvrHelperOptions = {
                                    optionalFeatures: this.immersiveOptions.optionalFeatures,
                                    useStablePlugins: this.immersiveOptions.useStablePlugins,
                                    renderingGroupId: this.immersiveOptions.renderingGroupNum,
                                    disableDefaultUI: this.immersiveOptions.disableUserInterface,
                                    disableTeleportation: (this.immersiveOptions.defaultTeleportationSetup.useTeleportation === false),
                                    disablePointerSelection: this.immersiveOptions.disablePointerSelect,
                                    ignoreNativeCameraTransformation: this.immersiveOptions.ignoreNativeCamera,
                                    inputOptions: {
                                        doNotLoadControllerMeshes: this.immersiveOptions.experienceInputOptions.disableMeshLoad,
                                        forceInputProfile: this.immersiveOptions.experienceInputOptions.forceInputProfile,
                                        disableOnlineControllerRepository: this.immersiveOptions.experienceInputOptions.disableRepository,
                                        customControllersRepositoryURL: this.immersiveOptions.experienceInputOptions.customRepository,
                                        disableControllerAnimation: this.immersiveOptions.experienceInputOptions.disableModelAnim,
                                        controllerOptions: {
                                            disableMotionControllerAnimation: this.immersiveOptions.experienceInputOptions.controllerOptions.disableCtrlAnim,
                                            doNotLoadControllerMesh: this.immersiveOptions.experienceInputOptions.controllerOptions.disableCtrlMesh,
                                            forceControllerProfile: this.immersiveOptions.experienceInputOptions.controllerOptions.forceCtrlProfile,
                                            renderingGroupId: this.immersiveOptions.renderingGroupNum
                                        }
                                    },
                                    uiOptions: {
                                        sessionMode: webvrImmersiveMode,
                                        referenceSpaceType: webvrReferenceType
                                    }
                                };
                            }
                            _a = PROJECT.UniversalCameraSystem;
                            return [4 /*yield*/, this.scene.createDefaultXRExperienceAsync(webvrHelperOptions)];
                        case 2:
                            _a.XRExperienceHelper = _b.sent();
                            if (PROJECT.UniversalCameraSystem.XRExperienceHelper != null && PROJECT.UniversalCameraSystem.XRExperienceHelper.baseExperience != null) {
                                if (PROJECT.UniversalCameraSystem.XRExperienceHelper.teleportation != null) {
                                    PROJECT.UniversalCameraSystem.XRExperienceHelper.teleportation.rotationAngle = BABYLON.Tools.ToRadians(this.immersiveOptions.defaultTeleportationSetup.turningAxisAngle);
                                    PROJECT.UniversalCameraSystem.XRExperienceHelper.teleportation.rotationEnabled = this.immersiveOptions.defaultTeleportationSetup.rotationsEnabled;
                                    PROJECT.UniversalCameraSystem.XRExperienceHelper.teleportation.backwardsMovementEnabled = this.immersiveOptions.defaultTeleportationSetup.backwardsEnabled;
                                    PROJECT.UniversalCameraSystem.XRExperienceHelper.teleportation.backwardsTeleportationDistance = this.immersiveOptions.defaultTeleportationSetup.backwardsDistance;
                                    PROJECT.UniversalCameraSystem.XRExperienceHelper.teleportation.parabolicCheckRadius = this.immersiveOptions.defaultTeleportationSetup.parabolicRadius;
                                }
                                if (PROJECT.UniversalCameraSystem.OnXRExperienceHelperObservable.hasObservers() === true) {
                                    PROJECT.UniversalCameraSystem.OnXRExperienceHelperObservable.notifyObservers(PROJECT.UniversalCameraSystem.XRExperienceHelper);
                                }
                                if (BABYLON.SceneManager.HasNavigationData()) {
                                    navmesh = BABYLON.SceneManager.GetNavigationMesh();
                                    PROJECT.UniversalCameraSystem.SetupNavigationWebXR(navmesh, this.immersiveOptions.setFloorMeshesTags);
                                }
                                else {
                                    BABYLON.SceneManager.OnNavMeshReadyObservable.addOnce(function (navmesh) {
                                        PROJECT.UniversalCameraSystem.SetupNavigationWebXR(navmesh, _this.immersiveOptions.setFloorMeshesTags);
                                    });
                                }
                            }
                            else {
                                BABYLON.SceneManager.LogWarning("WebXR not supported in current browser.");
                            }
                            _b.label = 3;
                        case 3: return [3 /*break*/, 5];
                        case 4:
                            if (this.cameraType === 3) { // Multi Player Camera
                                cameraName = this.m_cameraRig.name;
                                playerOneTransform = new BABYLON.TransformNode("Player Camera 1", this.scene);
                                playerOneTransform.rotationQuaternion = this.transform.rotationQuaternion.clone();
                                playerOneTransform.position = this.transform.position.clone();
                                playerOneTransform.parent = this.transform.parent;
                                playerOneName = cameraName + ".1";
                                playerOneCamerax = this.m_cameraRig.clone(playerOneName);
                                playerOneCamerax.name = playerOneName;
                                playerOneCamerax.parent = playerOneTransform;
                                playerOneCamerax.position = new BABYLON.Vector3(0, 0, 0);
                                playerOneCamerax.rotationQuaternion = new BABYLON.Quaternion(0, 0, 0, 1);
                                playerOneCamerax.viewport = new BABYLON.Viewport(0, 0, 0, 0);
                                playerOneCamerax.setEnabled(false);
                                PROJECT.UniversalCameraSystem.PlayerOneCamera = playerOneCamerax;
                                PROJECT.UniversalCameraSystem.PlayerOneCamera.inertia = this.cameraInertia;
                                PROJECT.UniversalCameraSystem.PlayerOneCamera.transform = playerOneTransform;
                                playerOneTransform.cameraRig = PROJECT.UniversalCameraSystem.PlayerOneCamera;
                                playerTwoTransform = new BABYLON.TransformNode("Player Camera 2", this.scene);
                                playerTwoTransform.rotationQuaternion = this.transform.rotationQuaternion.clone();
                                playerTwoTransform.position = this.transform.position.clone();
                                playerTwoTransform.parent = this.transform.parent;
                                playerTwoName = cameraName + ".2";
                                playerTwoCamerax = this.m_cameraRig.clone(playerTwoName);
                                playerTwoCamerax.name = playerTwoName;
                                playerTwoCamerax.parent = playerTwoTransform;
                                playerTwoCamerax.position = new BABYLON.Vector3(0, 0, 0);
                                playerTwoCamerax.rotationQuaternion = new BABYLON.Quaternion(0, 0, 0, 1);
                                playerTwoCamerax.viewport = new BABYLON.Viewport(0, 0, 0, 0);
                                playerTwoCamerax.setEnabled(false);
                                PROJECT.UniversalCameraSystem.PlayerTwoCamera = playerTwoCamerax;
                                PROJECT.UniversalCameraSystem.PlayerTwoCamera.inertia = this.cameraInertia;
                                PROJECT.UniversalCameraSystem.PlayerTwoCamera.transform = playerTwoTransform;
                                playerTwoTransform.cameraRig = PROJECT.UniversalCameraSystem.PlayerTwoCamera;
                                playerThreeTransform = new BABYLON.TransformNode("Player Camera 3", this.scene);
                                playerThreeTransform.rotationQuaternion = this.transform.rotationQuaternion.clone();
                                playerThreeTransform.position = this.transform.position.clone();
                                playerThreeTransform.parent = this.transform.parent;
                                playerThreeName = cameraName + ".3";
                                playerThreeCamerax = this.m_cameraRig.clone(playerThreeName);
                                playerThreeCamerax.name = playerThreeName;
                                playerThreeCamerax.parent = playerThreeTransform;
                                playerThreeCamerax.position = new BABYLON.Vector3(0, 0, 0);
                                playerThreeCamerax.rotationQuaternion = new BABYLON.Quaternion(0, 0, 0, 1);
                                playerThreeCamerax.viewport = new BABYLON.Viewport(0, 0, 0, 0);
                                playerThreeCamerax.setEnabled(false);
                                PROJECT.UniversalCameraSystem.PlayerThreeCamera = playerThreeCamerax;
                                PROJECT.UniversalCameraSystem.PlayerThreeCamera.inertia = this.cameraInertia;
                                PROJECT.UniversalCameraSystem.PlayerThreeCamera.transform = playerThreeTransform;
                                playerThreeTransform.cameraRig = PROJECT.UniversalCameraSystem.PlayerThreeCamera;
                                playerFourTransform = new BABYLON.TransformNode("Player Camera 4", this.scene);
                                playerFourTransform.rotationQuaternion = this.transform.rotationQuaternion.clone();
                                playerFourTransform.position = this.transform.position.clone();
                                playerFourTransform.parent = this.transform.parent;
                                playerFourName = cameraName + ".4";
                                playerFourCamerax = this.m_cameraRig.clone(playerFourName);
                                playerFourCamerax.name = playerFourName;
                                playerFourCamerax.parent = playerFourTransform;
                                playerFourCamerax.position = new BABYLON.Vector3(0, 0, 0);
                                playerFourCamerax.rotationQuaternion = new BABYLON.Quaternion(0, 0, 0, 1);
                                playerFourCamerax.viewport = new BABYLON.Viewport(0, 0, 0, 0);
                                playerFourCamerax.setEnabled(false);
                                PROJECT.UniversalCameraSystem.PlayerFourCamera = playerFourCamerax;
                                PROJECT.UniversalCameraSystem.PlayerFourCamera.inertia = this.cameraInertia;
                                PROJECT.UniversalCameraSystem.PlayerFourCamera.transform = playerFourTransform;
                                playerFourTransform.cameraRig = PROJECT.UniversalCameraSystem.PlayerFourCamera;
                                //}
                                PROJECT.UniversalCameraSystem.multiPlayerView = true;
                                PROJECT.UniversalCameraSystem.SetMultiPlayerViewLayout(this.scene, PROJECT.UniversalCameraSystem.startupMode);
                            }
                            _b.label = 5;
                        case 5:
                            // ..
                            // Validate Camera Attach Control
                            // ..
                            if (this.cameraController.attachControl === true) {
                                this.m_cameraRig.parent = null; // Detach Camera Parent When Attaching Control
                                this.m_cameraRig.position.copyFrom(this.transform.position);
                                this.m_cameraRig.rotationQuaternion = (this.transform.rotationQuaternion != null) ? this.transform.rotationQuaternion.clone() : BABYLON.Quaternion.FromEulerAngles(this.transform.rotation.x, this.transform.rotation.y, this.transform.rotation.z);
                                if (this.m_cameraRig instanceof BABYLON.FreeCamera) { // Note: Check Base Class For Universal Camera
                                    this.m_cameraRig.checkCollisions = this.cameraController.checkCollisions;
                                    this.m_cameraRig.applyGravity = this.cameraController.setApplyGravity;
                                }
                                this.m_cameraRig.attachControl(this.cameraController.preventDefault);
                            }
                            _b.label = 6;
                        case 6:
                            quality = BABYLON.SceneManager.GetRenderQuality();
                            allowProcessing = (quality === BABYLON.RenderQuality.High);
                            //if (PROJECT.UniversalCameraSystem.renderingPipeline == null) {
                            if (allowProcessing === true && this.editorPostProcessing != null && this.editorPostProcessing.usePostProcessing === true) {
                                PROJECT.UniversalCameraSystem.renderingPipeline = new BABYLON.DefaultRenderingPipeline("UniversalCameraSystem", this.editorPostProcessing.highDynamicRange, this.scene, this.scene.cameras, true);
                                if (PROJECT.UniversalCameraSystem.renderingPipeline.isSupported === true) {
                                    defaultPipeline = PROJECT.UniversalCameraSystem.renderingPipeline;
                                    defaultPipeline.samples = this.editorPostProcessing.screenAntiAliasing.msaaSamples; // 1 by default (MSAA)
                                    /* Image Processing */
                                    defaultPipeline.imageProcessingEnabled = this.editorPostProcessing.imageProcessingConfig.imageProcessing; //true by default
                                    if (defaultPipeline.imageProcessingEnabled) {
                                        defaultPipeline.imageProcessing.contrast = this.editorPostProcessing.imageProcessingConfig.imageContrast; // 1 by default
                                        defaultPipeline.imageProcessing.exposure = this.editorPostProcessing.imageProcessingConfig.imageExposure; // 1 by default
                                        defaultPipeline.imageProcessing.vignetteEnabled = this.editorPostProcessing.imageProcessingConfig.vignetteEnabled;
                                        if (defaultPipeline.imageProcessing.vignetteEnabled) {
                                            defaultPipeline.imageProcessing.vignetteBlendMode = this.editorPostProcessing.imageProcessingConfig.vignetteBlendMode;
                                            defaultPipeline.imageProcessing.vignetteCameraFov = this.editorPostProcessing.imageProcessingConfig.vignetteCameraFov;
                                            defaultPipeline.imageProcessing.vignetteCentreX = this.editorPostProcessing.imageProcessingConfig.vignetteCentreX;
                                            defaultPipeline.imageProcessing.vignetteCentreY = this.editorPostProcessing.imageProcessingConfig.vignetteCentreY;
                                            defaultPipeline.imageProcessing.vignetteStretch = this.editorPostProcessing.imageProcessingConfig.vignetteStretch;
                                            defaultPipeline.imageProcessing.vignetteWeight = this.editorPostProcessing.imageProcessingConfig.vignetteWeight;
                                            if (this.editorPostProcessing.imageProcessingConfig.vignetteColor != null) {
                                                vcolor = BABYLON.Utilities.ParseColor4(this.editorPostProcessing.imageProcessingConfig.vignetteColor);
                                                if (vcolor != null)
                                                    defaultPipeline.imageProcessing.vignetteColor = vcolor;
                                            }
                                        }
                                        /* Color Grading */
                                        defaultPipeline.imageProcessing.colorGradingEnabled = this.editorPostProcessing.imageProcessingConfig.useColorGrading; // false by default
                                        if (defaultPipeline.imageProcessing.colorGradingEnabled) {
                                            // KEEP FOR REFERENCE
                                            /* using .3dl (best) : defaultPipeline.imageProcessing.colorGradingTexture = new BABYLON.ColorGradingTexture("textures/LateSunset.3dl", this.scene); */
                                            /* using .png :
                                            var colorGradingTexture = new BABYLON.Texture("textures/colorGrade-highContrast.png", this.scene, true, false);
                                            colorGradingTexture.wrapU = BABYLON.Texture.CLAMP_ADDRESSMODE;
                                            colorGradingTexture.wrapV = BABYLON.Texture.CLAMP_ADDRESSMODE;
                                            defaultPipeline.imageProcessing.colorGradingTexture = colorGradingTexture;
                                            defaultPipeline.imageProcessing.colorGradingWithGreenDepth = false; */
                                            //////////////////////////////////////////////////////////////////////////
                                            if (this.editorPostProcessing.imageProcessingConfig.setGradingTexture != null) {
                                                colorGradingTexture = BABYLON.Utilities.ParseTexture(this.editorPostProcessing.imageProcessingConfig.setGradingTexture, this.scene, true, false);
                                                colorGradingTexture.wrapU = BABYLON.Texture.CLAMP_ADDRESSMODE;
                                                colorGradingTexture.wrapV = BABYLON.Texture.CLAMP_ADDRESSMODE;
                                                defaultPipeline.imageProcessing.colorGradingTexture = colorGradingTexture;
                                                defaultPipeline.imageProcessing.colorGradingWithGreenDepth = false;
                                            }
                                        }
                                        /* Color Curves */
                                        defaultPipeline.imageProcessing.colorCurvesEnabled = this.editorPostProcessing.imageProcessingConfig.imagingColorCurves.curvesEnabled; // false by default
                                        if (defaultPipeline.imageProcessing.colorCurvesEnabled) {
                                            curve = new BABYLON.ColorCurves();
                                            curve.globalDensity = this.editorPostProcessing.imageProcessingConfig.imagingColorCurves.globalDen; // 0 by default
                                            curve.globalExposure = this.editorPostProcessing.imageProcessingConfig.imagingColorCurves.globalExp; // 0 by default
                                            curve.globalHue = this.editorPostProcessing.imageProcessingConfig.imagingColorCurves.globalHue; // 30 by default
                                            curve.globalSaturation = this.editorPostProcessing.imageProcessingConfig.imagingColorCurves.globalSat; // 0 by default
                                            curve.highlightsDensity = this.editorPostProcessing.imageProcessingConfig.imagingColorCurves.highlightsDen; // 0 by default
                                            curve.highlightsExposure = this.editorPostProcessing.imageProcessingConfig.imagingColorCurves.highlightsExp; // 0 by default
                                            curve.highlightsHue = this.editorPostProcessing.imageProcessingConfig.imagingColorCurves.highlightsHue; // 30 by default
                                            curve.highlightsSaturation = this.editorPostProcessing.imageProcessingConfig.imagingColorCurves.highlightsSat; // 0 by default
                                            curve.midtonesDensity = this.editorPostProcessing.imageProcessingConfig.imagingColorCurves.midtonesDen; // 0 by default
                                            curve.midtonesExposure = this.editorPostProcessing.imageProcessingConfig.imagingColorCurves.midtonesExp; // 0 by default
                                            curve.midtonesHue = this.editorPostProcessing.imageProcessingConfig.imagingColorCurves.midtonesHue; // 30 by default
                                            curve.midtonesSaturation = this.editorPostProcessing.imageProcessingConfig.imagingColorCurves.midtonesSat; // 0 by default
                                            curve.shadowsDensity = this.editorPostProcessing.imageProcessingConfig.imagingColorCurves.shadowsDen; // 0 by default
                                            curve.shadowsExposure = this.editorPostProcessing.imageProcessingConfig.imagingColorCurves.shadowsExp; // 800 by default
                                            curve.shadowsHue = this.editorPostProcessing.imageProcessingConfig.imagingColorCurves.shadowsHue; // 30 by default
                                            curve.shadowsSaturation = this.editorPostProcessing.imageProcessingConfig.imagingColorCurves.shadowsSat; // 0 by default;
                                            defaultPipeline.imageProcessing.colorCurves = curve;
                                        }
                                    }
                                    /* Bloom */
                                    defaultPipeline.bloomEnabled = this.editorPostProcessing.bloomEffectProperties.bloomEnabled; // false by default
                                    if (defaultPipeline.bloomEnabled) {
                                        defaultPipeline.bloomKernel = this.editorPostProcessing.bloomEffectProperties.bloomKernel; // 64 by default
                                        defaultPipeline.bloomScale = this.editorPostProcessing.bloomEffectProperties.bloomScale; // 0.5 by default
                                        defaultPipeline.bloomWeight = this.editorPostProcessing.bloomEffectProperties.bloomWeight; // 0.15 by default
                                        defaultPipeline.bloomThreshold = this.editorPostProcessing.bloomEffectProperties.bloomThreshold; // 0.9 by default
                                    }
                                    /* Chromatic Abberation */
                                    defaultPipeline.chromaticAberrationEnabled = this.editorPostProcessing.chromaticAberration.aberrationEnabled; // false by default
                                    if (defaultPipeline.chromaticAberrationEnabled) {
                                        defaultPipeline.chromaticAberration.aberrationAmount = this.editorPostProcessing.chromaticAberration.aberrationAmount; // 30 by default
                                        defaultPipeline.chromaticAberration.adaptScaleToCurrentViewport = this.editorPostProcessing.chromaticAberration.adaptScaleViewport; // false by default
                                        defaultPipeline.chromaticAberration.alphaMode = this.editorPostProcessing.chromaticAberration.alphaMode; // 0 by default
                                        defaultPipeline.chromaticAberration.alwaysForcePOT = this.editorPostProcessing.chromaticAberration.alwaysForcePOT; // false by default
                                        defaultPipeline.chromaticAberration.enablePixelPerfectMode = this.editorPostProcessing.chromaticAberration.pixelPerfectMode; // false by default
                                        defaultPipeline.chromaticAberration.forceFullscreenViewport = this.editorPostProcessing.chromaticAberration.fullscreenViewport; // true by default
                                    }
                                    /* DOF */
                                    defaultPipeline.depthOfFieldEnabled = this.editorPostProcessing.focalDepthOfField.depthOfField; // false by default
                                    if (defaultPipeline.depthOfFieldEnabled && defaultPipeline.depthOfField.isSupported) {
                                        defaultPipeline.depthOfFieldBlurLevel = this.editorPostProcessing.focalDepthOfField.blurLevel; // 0 by default
                                        defaultPipeline.depthOfField.fStop = this.editorPostProcessing.focalDepthOfField.focalStop; // 1.4 by default
                                        defaultPipeline.depthOfField.focalLength = this.editorPostProcessing.focalDepthOfField.focalLength; // 50 by default, mm
                                        defaultPipeline.depthOfField.focusDistance = this.editorPostProcessing.focalDepthOfField.focusDistance; // 2000 by default, mm
                                        defaultPipeline.depthOfField.lensSize = this.editorPostProcessing.focalDepthOfField.maxLensSize; // 50 by default
                                    }
                                    /* FXAA */
                                    defaultPipeline.fxaaEnabled = this.editorPostProcessing.screenAntiAliasing.fxaaEnabled; // false by default
                                    if (defaultPipeline.fxaaEnabled) {
                                        defaultPipeline.fxaa.samples = this.editorPostProcessing.screenAntiAliasing.fxaaSamples; // 1 by default
                                        defaultPipeline.fxaa.adaptScaleToCurrentViewport = this.editorPostProcessing.screenAntiAliasing.fxaaScaling; // false by default
                                    }
                                    /* GlowLayer */
                                    defaultPipeline.glowLayerEnabled = this.editorPostProcessing.glowLayerProperties.glowEnabled;
                                    if (defaultPipeline.glowLayerEnabled) {
                                        defaultPipeline.glowLayer.intensity = this.editorPostProcessing.glowLayerProperties.glowIntensity; // 1 by default
                                        defaultPipeline.glowLayer.blurKernelSize = this.editorPostProcessing.glowLayerProperties.blurKernelSize; // 16 by default
                                    }
                                    /* Grain */
                                    defaultPipeline.grainEnabled = this.editorPostProcessing.grainEffectProperties.grainEnabled;
                                    if (defaultPipeline.grainEnabled) {
                                        defaultPipeline.grain.animated = this.editorPostProcessing.grainEffectProperties.grainAnimated; // false by default
                                        defaultPipeline.grain.intensity = this.editorPostProcessing.grainEffectProperties.grainIntensity; // 30 by default
                                        defaultPipeline.grain.adaptScaleToCurrentViewport = this.editorPostProcessing.grainEffectProperties.adaptScaleViewport; // false by default
                                    }
                                    /* Sharpen */
                                    defaultPipeline.sharpenEnabled = this.editorPostProcessing.sharpEffectProperties.sharpenEnabled;
                                    if (defaultPipeline.sharpenEnabled) {
                                        defaultPipeline.sharpen.edgeAmount = this.editorPostProcessing.sharpEffectProperties.sharpEdgeAmount; // 0.3 by default
                                        defaultPipeline.sharpen.colorAmount = this.editorPostProcessing.sharpEffectProperties.sharpColorAmount; // 1 by default
                                        defaultPipeline.sharpen.adaptScaleToCurrentViewport = this.editorPostProcessing.sharpEffectProperties.adaptScaleViewport; // false by default
                                    }
                                }
                                else {
                                    BABYLON.SceneManager.LogWarning("Babylon.js default rendering pipeline not supported");
                                }
                                // ..
                                // Screen Space Ambient Occlusion
                                // ..
                                if (this.editorPostProcessing.screenSpaceRendering != null && this.editorPostProcessing.screenSpaceRendering.SSAO === true) {
                                    ssaoRatio = {
                                        ssaoRatio: this.editorPostProcessing.screenSpaceRendering.SSAORatio,
                                        combineRatio: this.editorPostProcessing.screenSpaceRendering.combineRatio // Ratio of the combine post-process (combines the SSAO and the scene)
                                    };
                                    PROJECT.UniversalCameraSystem.screenSpacePipeline = new BABYLON.SSAORenderingPipeline("UniversalCameraSystem-SSAO", this.scene, ssaoRatio, this.scene.cameras);
                                    if (PROJECT.UniversalCameraSystem.screenSpacePipeline.isSupported === true) {
                                        ssaoPipeline = PROJECT.UniversalCameraSystem.screenSpacePipeline;
                                        ssaoPipeline.fallOff = this.editorPostProcessing.screenSpaceRendering.fallOff;
                                        ssaoPipeline.area = this.editorPostProcessing.screenSpaceRendering.area;
                                        ssaoPipeline.radius = this.editorPostProcessing.screenSpaceRendering.radius;
                                        ssaoPipeline.totalStrength = this.editorPostProcessing.screenSpaceRendering.totalStrength;
                                        ssaoPipeline.base = this.editorPostProcessing.screenSpaceRendering.baseValue;
                                    }
                                    else {
                                        BABYLON.SceneManager.LogWarning("Babylon.js SSAO rendering pipeline not supported");
                                    }
                                }
                            }
                            //}
                            PROJECT.UniversalCameraSystem.cameraReady = true;
                            return [2 /*return*/];
                    }
                });
            });
        };
        UniversalCameraSystem.prototype.updateCameraSystemState = function () {
            if (this.m_cameraRig != null) {
                if (this.cameraType === 0) { // Default Universal Camera
                }
                else if (this.cameraType === 1) { // Augmented Reality Camera
                }
                else if (this.cameraType === 2) { // Virtual Reality Camera
                }
                else if (this.cameraType === 3) { // Multi Player Camera
                }
            }
        };
        UniversalCameraSystem.prototype.cleanCameraSystemState = function () {
            if (PROJECT.UniversalCameraSystem.PlayerOneCamera != null) {
                //PROJECT.UniversalCameraSystem.PlayerOneCamera.dispose();
                PROJECT.UniversalCameraSystem.PlayerOneCamera = null;
            }
            if (PROJECT.UniversalCameraSystem.PlayerTwoCamera != null) {
                //PROJECT.UniversalCameraSystem.PlayerTwoCamera.dispose();
                PROJECT.UniversalCameraSystem.PlayerTwoCamera = null;
            }
            if (PROJECT.UniversalCameraSystem.PlayerThreeCamera != null) {
                //PROJECT.UniversalCameraSystem.PlayerThreeCamera.dispose();
                PROJECT.UniversalCameraSystem.PlayerThreeCamera = null;
            }
            if (PROJECT.UniversalCameraSystem.PlayerFourCamera != null) {
                //PROJECT.UniversalCameraSystem.PlayerFourCamera.dispose();
                PROJECT.UniversalCameraSystem.PlayerFourCamera = null;
            }
        };
        UniversalCameraSystem.prototype.destroyCameraSystemState = function () {
            this.immersiveOptions = null;
        };
        ////////////////////////////////////////////////////////////////////////////////////
        // Universal Camera Virtual Reality Functions
        ////////////////////////////////////////////////////////////////////////////////////
        /** Get the WebXR default experience helper */
        UniversalCameraSystem.GetWebXR = function () { return PROJECT.UniversalCameraSystem.XRExperienceHelper; };
        /** Is universal camera system in WebXR mode */
        UniversalCameraSystem.IsInWebXR = function () { return (PROJECT.UniversalCameraSystem.XRExperienceHelper != null && PROJECT.UniversalCameraSystem.XRExperienceHelper.baseExperience != null && PROJECT.UniversalCameraSystem.XRExperienceHelper.baseExperience.state === BABYLON.WebXRState.IN_XR); };
        /** Setup navigation mesh for WebXR */
        UniversalCameraSystem.SetupNavigationWebXR = function (mesh, tag) {
            var webxr = PROJECT.UniversalCameraSystem.XRExperienceHelper;
            if (webxr != null && webxr.teleportation != null && mesh != null && tag != null && tag != "") {
                var hastag = BABYLON.Tags.MatchesQuery(mesh, tag);
                if (hastag === true)
                    webxr.teleportation.addFloorMesh(mesh);
            }
        };
        ////////////////////////////////////////////////////////////////////////////////////
        // Universal Camera System Player Functions
        ////////////////////////////////////////////////////////////////////////////////////
        /** Get main camera rig for the scene */
        UniversalCameraSystem.GetMainCamera = function (scene, detach) {
            if (detach === void 0) { detach = false; }
            return PROJECT.UniversalCameraSystem.GetPlayerCamera(scene, BABYLON.PlayerNumber.One, detach);
        };
        /** Get universal camera rig for desired player */
        UniversalCameraSystem.GetPlayerCamera = function (scene, player, detach) {
            if (player === void 0) { player = BABYLON.PlayerNumber.One; }
            if (detach === void 0) { detach = false; }
            var result = null;
            if (PROJECT.UniversalCameraSystem.IsCameraSystemReady()) {
                if (player === BABYLON.PlayerNumber.One && PROJECT.UniversalCameraSystem.PlayerOneCamera != null)
                    result = PROJECT.UniversalCameraSystem.PlayerOneCamera;
                else if (player === BABYLON.PlayerNumber.Two && PROJECT.UniversalCameraSystem.PlayerTwoCamera != null)
                    result = PROJECT.UniversalCameraSystem.PlayerTwoCamera;
                else if (player === BABYLON.PlayerNumber.Three && PROJECT.UniversalCameraSystem.PlayerThreeCamera != null)
                    result = PROJECT.UniversalCameraSystem.PlayerThreeCamera;
                else if (player === BABYLON.PlayerNumber.Four && PROJECT.UniversalCameraSystem.PlayerFourCamera != null)
                    result = PROJECT.UniversalCameraSystem.PlayerFourCamera;
                if (result != null && detach === true && parent != null)
                    result.parent = null;
            }
            return result;
        };
        /** Get camera transform node for desired player */
        UniversalCameraSystem.GetCameraTransform = function (scene, player) {
            if (player === void 0) { player = BABYLON.PlayerNumber.One; }
            var result = null;
            if (PROJECT.UniversalCameraSystem.IsCameraSystemReady()) {
                if (player === BABYLON.PlayerNumber.One && PROJECT.UniversalCameraSystem.PlayerOneCamera != null && PROJECT.UniversalCameraSystem.PlayerOneCamera.transform != null)
                    result = PROJECT.UniversalCameraSystem.PlayerOneCamera.transform;
                else if (player === BABYLON.PlayerNumber.Two && PROJECT.UniversalCameraSystem.PlayerTwoCamera != null && PROJECT.UniversalCameraSystem.PlayerTwoCamera.transform != null)
                    result = PROJECT.UniversalCameraSystem.PlayerTwoCamera.transform;
                else if (player === BABYLON.PlayerNumber.Three && PROJECT.UniversalCameraSystem.PlayerThreeCamera != null && PROJECT.UniversalCameraSystem.PlayerThreeCamera.transform != null)
                    result = PROJECT.UniversalCameraSystem.PlayerThreeCamera.transform;
                else if (player === BABYLON.PlayerNumber.Four && PROJECT.UniversalCameraSystem.PlayerFourCamera != null && PROJECT.UniversalCameraSystem.PlayerFourCamera.transform != null)
                    result = PROJECT.UniversalCameraSystem.PlayerFourCamera.transform;
            }
            return result;
        };
        ////////////////////////////////////////////////////////////////////////////////////
        // Universal Camera System Multi Player Functions
        ////////////////////////////////////////////////////////////////////////////////////
        /** Are stereo side side camera services available. */
        UniversalCameraSystem.IsStereoCameras = function () {
            return PROJECT.UniversalCameraSystem.stereoCameras;
        };
        /** Are local multi player view services available. */
        UniversalCameraSystem.IsMultiPlayerView = function () {
            return PROJECT.UniversalCameraSystem.multiPlayerView;
        };
        /** Get the current local multi player count */
        UniversalCameraSystem.GetMultiPlayerCount = function () {
            return PROJECT.UniversalCameraSystem.multiPlayerCount;
        };
        /** Activates current local multi player cameras. */
        UniversalCameraSystem.ActivateMultiPlayerCameras = function (scene) {
            var result = false;
            if (PROJECT.UniversalCameraSystem.multiPlayerCameras != null && PROJECT.UniversalCameraSystem.multiPlayerCameras.length > 0) {
                scene.activeCameras = PROJECT.UniversalCameraSystem.multiPlayerCameras;
                result = true;
            }
            return result;
        };
        /** Disposes current local multiplayer cameras */
        UniversalCameraSystem.DisposeMultiPlayerCameras = function () {
            if (PROJECT.UniversalCameraSystem.PlayerOneCamera != null) {
                PROJECT.UniversalCameraSystem.PlayerOneCamera.dispose();
                PROJECT.UniversalCameraSystem.PlayerOneCamera = null;
            }
            if (PROJECT.UniversalCameraSystem.PlayerTwoCamera != null) {
                PROJECT.UniversalCameraSystem.PlayerTwoCamera.dispose();
                PROJECT.UniversalCameraSystem.PlayerTwoCamera = null;
            }
            if (PROJECT.UniversalCameraSystem.PlayerThreeCamera != null) {
                PROJECT.UniversalCameraSystem.PlayerThreeCamera.dispose();
                PROJECT.UniversalCameraSystem.PlayerThreeCamera = null;
            }
            if (PROJECT.UniversalCameraSystem.PlayerFourCamera != null) {
                PROJECT.UniversalCameraSystem.PlayerFourCamera.dispose();
                PROJECT.UniversalCameraSystem.PlayerFourCamera = null;
            }
        };
        /** Sets the multi player camera view layout */
        UniversalCameraSystem.SetMultiPlayerViewLayout = function (scene, totalNumPlayers) {
            var result = false;
            var players = BABYLON.Scalar.Clamp(totalNumPlayers, 1, 4);
            if (PROJECT.UniversalCameraSystem.IsMultiPlayerView()) {
                if (PROJECT.UniversalCameraSystem.PlayerOneCamera != null && PROJECT.UniversalCameraSystem.PlayerTwoCamera != null && PROJECT.UniversalCameraSystem.PlayerThreeCamera != null && PROJECT.UniversalCameraSystem.PlayerFourCamera != null) {
                    PROJECT.UniversalCameraSystem.multiPlayerCameras = [];
                    if (players === 1) {
                        PROJECT.UniversalCameraSystem.PlayerOneCamera.viewport = new BABYLON.Viewport(0, 0, 1, 1);
                        PROJECT.UniversalCameraSystem.PlayerTwoCamera.viewport = new BABYLON.Viewport(0, 0, 0, 0);
                        PROJECT.UniversalCameraSystem.PlayerTwoCamera.setEnabled(false);
                        PROJECT.UniversalCameraSystem.PlayerThreeCamera.viewport = new BABYLON.Viewport(0, 0, 0, 0);
                        PROJECT.UniversalCameraSystem.PlayerThreeCamera.setEnabled(false);
                        PROJECT.UniversalCameraSystem.PlayerFourCamera.viewport = new BABYLON.Viewport(0, 0, 0, 0);
                        PROJECT.UniversalCameraSystem.PlayerFourCamera.setEnabled(false);
                        PROJECT.UniversalCameraSystem.multiPlayerCameras.push(PROJECT.UniversalCameraSystem.PlayerOneCamera);
                    }
                    else if (players === 2) {
                        if (PROJECT.UniversalCameraSystem.stereoCameras === true) {
                            PROJECT.UniversalCameraSystem.PlayerOneCamera.viewport = new BABYLON.Viewport(0, 0, 0.5, 1);
                            PROJECT.UniversalCameraSystem.PlayerTwoCamera.viewport = new BABYLON.Viewport(0.5, 0, 0.5, 1);
                        }
                        else {
                            PROJECT.UniversalCameraSystem.PlayerOneCamera.viewport = new BABYLON.Viewport(0, 0.5, 1, 0.5);
                            PROJECT.UniversalCameraSystem.PlayerTwoCamera.viewport = new BABYLON.Viewport(0, 0, 1, 0.5);
                        }
                        PROJECT.UniversalCameraSystem.PlayerTwoCamera.setEnabled(true);
                        PROJECT.UniversalCameraSystem.PlayerThreeCamera.viewport = new BABYLON.Viewport(0, 0, 0, 0);
                        PROJECT.UniversalCameraSystem.PlayerThreeCamera.setEnabled(false);
                        PROJECT.UniversalCameraSystem.PlayerFourCamera.viewport = new BABYLON.Viewport(0, 0, 0, 0);
                        PROJECT.UniversalCameraSystem.PlayerFourCamera.setEnabled(false);
                        PROJECT.UniversalCameraSystem.multiPlayerCameras.push(PROJECT.UniversalCameraSystem.PlayerOneCamera);
                        PROJECT.UniversalCameraSystem.multiPlayerCameras.push(PROJECT.UniversalCameraSystem.PlayerTwoCamera);
                    }
                    else if (players === 3) {
                        PROJECT.UniversalCameraSystem.PlayerOneCamera.viewport = new BABYLON.Viewport(0, 0, 0.5, 1);
                        PROJECT.UniversalCameraSystem.PlayerTwoCamera.viewport = new BABYLON.Viewport(0.5, 0.5, 0.5, 0.5);
                        PROJECT.UniversalCameraSystem.PlayerTwoCamera.setEnabled(true);
                        PROJECT.UniversalCameraSystem.PlayerThreeCamera.viewport = new BABYLON.Viewport(0.5, 0, 0.5, 0.5);
                        PROJECT.UniversalCameraSystem.PlayerThreeCamera.setEnabled(true);
                        PROJECT.UniversalCameraSystem.PlayerFourCamera.viewport = new BABYLON.Viewport(0, 0, 0, 0);
                        PROJECT.UniversalCameraSystem.PlayerFourCamera.setEnabled(false);
                        PROJECT.UniversalCameraSystem.multiPlayerCameras.push(PROJECT.UniversalCameraSystem.PlayerOneCamera);
                        PROJECT.UniversalCameraSystem.multiPlayerCameras.push(PROJECT.UniversalCameraSystem.PlayerTwoCamera);
                        PROJECT.UniversalCameraSystem.multiPlayerCameras.push(PROJECT.UniversalCameraSystem.PlayerThreeCamera);
                    }
                    else if (players === 4) {
                        PROJECT.UniversalCameraSystem.PlayerOneCamera.viewport = new BABYLON.Viewport(0, 0.5, 0.5, 0.5);
                        PROJECT.UniversalCameraSystem.PlayerTwoCamera.viewport = new BABYLON.Viewport(0, 0, 0.5, 0.5);
                        PROJECT.UniversalCameraSystem.PlayerTwoCamera.setEnabled(true);
                        PROJECT.UniversalCameraSystem.PlayerThreeCamera.viewport = new BABYLON.Viewport(0.5, 0.5, 0.5, 0.5);
                        PROJECT.UniversalCameraSystem.PlayerThreeCamera.setEnabled(true);
                        PROJECT.UniversalCameraSystem.PlayerFourCamera.viewport = new BABYLON.Viewport(0.5, 0, 0.5, 0.5);
                        PROJECT.UniversalCameraSystem.PlayerFourCamera.setEnabled(true);
                        PROJECT.UniversalCameraSystem.multiPlayerCameras.push(PROJECT.UniversalCameraSystem.PlayerOneCamera);
                        PROJECT.UniversalCameraSystem.multiPlayerCameras.push(PROJECT.UniversalCameraSystem.PlayerTwoCamera);
                        PROJECT.UniversalCameraSystem.multiPlayerCameras.push(PROJECT.UniversalCameraSystem.PlayerThreeCamera);
                        PROJECT.UniversalCameraSystem.multiPlayerCameras.push(PROJECT.UniversalCameraSystem.PlayerFourCamera);
                    }
                    else {
                        BABYLON.SceneManager.LogWarning("Babylon.js camera rig invalid player count specified: " + players);
                    }
                }
                else {
                    BABYLON.SceneManager.LogWarning("Babylon.js camera rig failed to initialize multi player cameras");
                }
                PROJECT.UniversalCameraSystem.multiPlayerCount = players;
                result = PROJECT.UniversalCameraSystem.ActivateMultiPlayerCameras(scene);
                if (result === false)
                    BABYLON.SceneManager.LogWarning("Babylon.js camera rig failed to initialize multi player views");
            }
            else {
                BABYLON.SceneManager.LogWarning("Babylon.js camera rig multi player view option not enabled");
            }
            return result;
        };
        UniversalCameraSystem.PlayerOneCamera = null;
        UniversalCameraSystem.PlayerTwoCamera = null;
        UniversalCameraSystem.PlayerThreeCamera = null;
        UniversalCameraSystem.PlayerFourCamera = null;
        UniversalCameraSystem.XRExperienceHelper = null;
        UniversalCameraSystem.multiPlayerView = false;
        UniversalCameraSystem.multiPlayerCount = 1;
        UniversalCameraSystem.multiPlayerCameras = null;
        UniversalCameraSystem.stereoCameras = true;
        UniversalCameraSystem.startupMode = 1;
        UniversalCameraSystem.cameraReady = false;
        UniversalCameraSystem.renderingPipeline = null;
        UniversalCameraSystem.screenSpacePipeline = null;
        /** Register handler that is triggered when the webxr experience helper has been created */
        UniversalCameraSystem.OnXRExperienceHelperObservable = new BABYLON.Observable();
        return UniversalCameraSystem;
    }(BABYLON.ScriptComponent));
    PROJECT.UniversalCameraSystem = UniversalCameraSystem;
})(PROJECT || (PROJECT = {}));
var PROJECT;
(function (PROJECT) {
    var ParticleAlgo = /** @class */ (function () {
        function ParticleAlgo(bone) {
            this.bone = bone;
            this.particles = [];
        }
        ParticleAlgo.prototype.addParticle = function (particle) {
            this.particles.push(particle);
        };
        return ParticleAlgo;
    }());
    PROJECT.ParticleAlgo = ParticleAlgo;
})(PROJECT || (PROJECT = {}));
///<reference path="ParticleAlgo.ts"/>
var PROJECT;
(function (PROJECT) {
    var Vector3 = BABYLON.Vector3;
    var CircleAlgo = /** @class */ (function (_super) {
        __extends(CircleAlgo, _super);
        function CircleAlgo(bone, radius, rotationPerSecond, height, forwardSpeed) {
            if (height === void 0) { height = 0; }
            if (forwardSpeed === void 0) { forwardSpeed = 0; }
            var _this = _super.call(this, bone) || this;
            _this.radius = radius;
            _this.rps = 1 / rotationPerSecond;
            _this.forwardSpeed = forwardSpeed;
            _this.height = height;
            _this.i = 0;
            return _this;
        }
        CircleAlgo.prototype.updateAlgo = function (upc) {
            var _this = this;
            var index = 0;
            var positionBone = upc.transform.position;
            if (this.bone != null) {
                positionBone = this.bone.getAbsolutePosition();
            }
            var newRadius = this.i * 0.05 >= this.radius ? this.radius : this.i * 0.05;
            this.particles.forEach(function (particle) {
                var offset = ((2 * Math.PI) / _this.particles.length) * index;
                var circleVector = new Vector3(Math.sin(offset + _this.i / Math.PI) * newRadius, Math.cos(offset + _this.i / Math.PI) * newRadius);
                var otherVector = new Vector3(0, _this.height, _this.forwardSpeed * _this.i);
                particle.emitter = PROJECT.MathUtils.rotate(PROJECT.MathUtils.addVectors([circleVector, positionBone, otherVector]), upc.transform.position, upc.transform.rotationQuaternion.toEulerAngles().y * 180 / Math.PI);
                index++;
            });
            this.i += (Math.PI / this.rps) / (1 / upc.getDeltaSeconds());
        };
        CircleAlgo.prototype.getDamagePoint = function () {
            throw new Error("Method not implemented.");
        };
        CircleAlgo.prototype.reset = function () {
            this.i = 0;
        };
        return CircleAlgo;
    }(PROJECT.ParticleAlgo));
    PROJECT.CircleAlgo = CircleAlgo;
})(PROJECT || (PROJECT = {}));
var PROJECT;
(function (PROJECT) {
    var SphereAlgo = /** @class */ (function (_super) {
        __extends(SphereAlgo, _super);
        function SphereAlgo(bone, height) {
            var _this = _super.call(this, bone) || this;
            _this.height = height;
            return _this;
        }
        SphereAlgo.prototype.updateAlgo = function (upc) {
            var _this = this;
            var positionBone = upc.transform.position;
            if (this.bone != null) {
                positionBone = this.bone.getAbsolutePosition();
            }
            this.particles.forEach(function (particle) {
                particle.emitter = new BABYLON.Vector3(positionBone.x, _this.height + positionBone.y, positionBone.z);
            });
        };
        SphereAlgo.prototype.getDamagePoint = function () {
            throw new Error("Method not implemented.");
        };
        SphereAlgo.prototype.reset = function () {
            // ignored
        };
        return SphereAlgo;
    }(PROJECT.ParticleAlgo));
    PROJECT.SphereAlgo = SphereAlgo;
})(PROJECT || (PROJECT = {}));
var PROJECT;
(function (PROJECT) {
    var ParticleFactory = /** @class */ (function () {
        function ParticleFactory() {
        }
        ParticleFactory.createSphereParticle = function (scene, color, sphereSize, minSize, maxSize, minEmitPower, maxEmitPower, emitRate, minLifeTime, maxLifeTime, capacity) {
            if (capacity === void 0) { capacity = 2000; }
            var sphereParticle = new PROJECT.SphereParticle("", { capacity: capacity }, scene);
            sphereParticle.createParticles(color, sphereSize, { minSize: minSize, maxSize: maxSize }, {
                minEmitPower: minEmitPower,
                maxEmitPower: maxEmitPower,
                emitRate: emitRate
            }, { minLifeTime: minLifeTime, maxLifeTime: maxLifeTime });
            return sphereParticle;
        };
        ParticleFactory.createSpheresParticle = function (sphereCount, scene, colors, sphereSize, minSize, maxSize, minEmitPower, maxEmitPower, emitRate, minLifeTime, maxLifeTime, capacity) {
            if (capacity === void 0) { capacity = 2000; }
            var sphereParticles = [];
            for (var i = 0; i < sphereCount; i++) {
                sphereParticles.push(ParticleFactory.createSphereParticle(scene, colors[i], sphereSize, minSize, maxSize, minEmitPower, maxEmitPower, emitRate, minLifeTime, maxLifeTime, capacity));
            }
            return sphereParticles;
        };
        return ParticleFactory;
    }());
    PROJECT.ParticleFactory = ParticleFactory;
})(PROJECT || (PROJECT = {}));
var PROJECT;
(function (PROJECT) {
    var SphereParticle = /** @class */ (function (_super) {
        __extends(SphereParticle, _super);
        function SphereParticle(name, options, sceneOrEngine) {
            return _super.call(this, name, options, sceneOrEngine) || this;
        }
        SphereParticle.prototype.createParticles = function (color, sphereSize, sizes, powers, life) {
            // todo Upload image to ou server
            this.particleTexture = new BABYLON.Texture("https://www.babylonjs-playground.com/textures/flare.png", this._scene);
            this.emitter = BABYLON.Vector3.Zero();
            this.color1 = color[0];
            this.color2 = color[1];
            this.colorDead = color[2];
            this.minSize = sizes.minSize;
            this.maxSize = sizes.maxSize;
            this.minLifeTime = life.minLifeTime;
            this.maxLifeTime = life.maxLifeTime;
            this.createSphereEmitter(sphereSize);
            this.minEmitPower = powers.minEmitPower;
            this.maxEmitPower = powers.maxEmitPower;
            this.emitRate = powers.emitRate;
            this.updateSpeed = 0.005;
        };
        return SphereParticle;
    }(BABYLON.GPUParticleSystem));
    PROJECT.SphereParticle = SphereParticle;
})(PROJECT || (PROJECT = {}));
var PROJECT;
(function (PROJECT) {
    var Spell = /** @class */ (function () {
        function Spell(particleAlgo, options) {
            this.particleAlgo = particleAlgo;
            this.startTime = options.startTime == null ? Number.MIN_SAFE_INTEGER : options.startTime;
            this.stopTime = options.stopTime == null ? Number.MAX_SAFE_INTEGER : options.stopTime;
        }
        Spell.prototype.reset = function () {
            this.particleAlgo.reset();
        };
        Spell.prototype.update = function (upc) {
            this.particleAlgo.updateAlgo(upc);
        };
        Spell.prototype.setParticles = function (particles) {
            var _this = this;
            particles.forEach(function (particle) {
                _this.particleAlgo.addParticle(particle);
            });
        };
        Spell.prototype.getStartTime = function () {
            return this.startTime;
        };
        Spell.prototype.getStopTime = function () {
            return this.stopTime;
        };
        return Spell;
    }());
    PROJECT.Spell = Spell;
})(PROJECT || (PROJECT = {}));
var PROJECT;
(function (PROJECT) {
    var Vector3 = BABYLON.Vector3;
    var SpellTransition = /** @class */ (function () {
        function SpellTransition(posB, options) {
            this.startTime = options.startTime;
            this.stopTime = options.stopTime;
            this.transitionTime = this.stopTime - this.startTime;
            this.timeElapsed = 0;
            this.posB = posB;
        }
        SpellTransition.prototype.reset = function () {
            this.timeElapsed = 0;
        };
        SpellTransition.prototype.update = function (upc) {
            var _this = this;
            this.particles.forEach(function (particle) {
                var playerPosition = upc.transform.position;
                particle.emitter = PROJECT.AnimationUtils.lerpVector(particle.emitter, new Vector3(playerPosition.x + _this.posB.x, playerPosition.y + _this.posB.y, playerPosition.z + _this.posB.z), _this.timeElapsed / _this.transitionTime);
            });
            this.timeElapsed += upc.getDeltaSeconds();
        };
        SpellTransition.prototype.setParticles = function (particles) {
            this.particles = particles;
        };
        SpellTransition.prototype.getStartTime = function () {
            return this.startTime;
        };
        SpellTransition.prototype.getStopTime = function () {
            return this.stopTime;
        };
        return SpellTransition;
    }());
    PROJECT.SpellTransition = SpellTransition;
})(PROJECT || (PROJECT = {}));
var PROJECT;
(function (PROJECT) {
    var Vector3 = BABYLON.Vector3;
    var AnimationManager = /** @class */ (function () {
        function AnimationManager(setName, transformBones, scene) {
            this.spellAnimSyncs = [];
            this.spellStates = [];
            this.setName = setName;
            this.transformBones = transformBones;
            this.scene = scene;
            this.loadSpellnSet();
        }
        AnimationManager.prototype.loadSpellnSet = function () {
            var _this = this;
            var spellSets = [new PROJECT.SpellTestSet(this.transformBones)];
            var spellSet = spellSets.find(function (spellSet) {
                return spellSet.canSetBeUsed(_this.setName);
            });
            console.log("SPELL : " + spellSet);
            if (spellSet === undefined)
                return;
            this.registerAllAnimationTrigger(spellSet.getAll(this.scene));
        };
        AnimationManager.prototype.registerAnimationTrigger = function (animationSpellSync) {
            var _a, _b;
            this.spellAnimSyncs.push((_a = {},
                _a[animationSpellSync.getTriggerAnimationName()] = animationSpellSync,
                _a));
            this.spellStates.push((_b = {},
                _b[animationSpellSync.getTriggerAnimationName()] = AnimationState.WAS_NOT_CALLED,
                _b));
        };
        AnimationManager.prototype.registerAllAnimationTrigger = function (animationsSpellSync) {
            var _this = this;
            animationsSpellSync.forEach(function (animationSpellSync) {
                _this.registerAnimationTrigger(animationSpellSync);
            });
        };
        AnimationManager.prototype.updateAnimationState = function (currentAnimationState, upc) {
            var _this = this;
            if (currentAnimationState == null)
                return;
            if (currentAnimationState.getCurrentState(0) == null)
                return;
            if (currentAnimationState.getCurrentState(0).name == null)
                return;
            var animationName = currentAnimationState.getCurrentState(0).name;
            var animationTime = currentAnimationState.getCurrentState(0).time;
            this.spellStates.forEach(function (spellStateName) {
                var animationStateNames = Object.keys(spellStateName)[0];
                if (animationStateNames == animationName &&
                    Object.values(spellStateName)[0] == AnimationState.WAS_NOT_CALLED) {
                    _this.spellStates.find(function (x) { return animationStateNames == Object.keys(x)[0]; })[animationStateNames] = AnimationState.IS_CALLED;
                    _this.getValueByName(_this.spellAnimSyncs, animationStateNames).start();
                }
                else if (animationStateNames == animationName &&
                    Object.values(spellStateName)[0] == AnimationState.IS_CALLED) {
                    _this.getValueByName(_this.spellAnimSyncs, animationStateNames).update(animationTime, upc);
                }
                else if (animationStateNames != animationName &&
                    Object.values(spellStateName)[0] == AnimationState.IS_CALLED) {
                    _this.spellStates.find(function (x) { return animationStateNames == Object.keys(x)[0]; })[animationStateNames] = AnimationState.WAS_NOT_CALLED;
                    _this.getValueByName(_this.spellAnimSyncs, animationStateNames).stop();
                }
            });
        };
        AnimationManager.prototype.reportBoneTime = function (currentAnimationState, bone, playerPos, animationNameTarget) {
            if (currentAnimationState == null)
                return;
            if (currentAnimationState.getCurrentState(0) == null)
                return;
            if (currentAnimationState.getCurrentState(0).name == null)
                return;
            if (animationNameTarget != currentAnimationState.getCurrentState(0).name)
                return;
            var posBone = bone.getAbsolutePosition();
            console.log(bone.name +
                " AT " +
                new Vector3(posBone.x - playerPos.x, posBone.y - playerPos.y, posBone.z - playerPos.z) +
                " AT " +
                currentAnimationState.getCurrentState(0).time);
        };
        AnimationManager.prototype.getValueByName = function (array, name) {
            return array.find(function (x) { return name == Object.keys(x)[0]; })[name];
        };
        return AnimationManager;
    }());
    PROJECT.AnimationManager = AnimationManager;
    var AnimationState;
    (function (AnimationState) {
        AnimationState[AnimationState["WAS_NOT_CALLED"] = 0] = "WAS_NOT_CALLED";
        AnimationState[AnimationState["WAS_CALLED"] = 1] = "WAS_CALLED";
        AnimationState[AnimationState["IS_CALLED"] = 2] = "IS_CALLED";
    })(AnimationState = PROJECT.AnimationState || (PROJECT.AnimationState = {}));
})(PROJECT || (PROJECT = {}));
var PROJECT;
(function (PROJECT) {
    var AnimationSpellSync = /** @class */ (function () {
        function AnimationSpellSync(triggerAnimationName) {
            this.spellLayers = [];
            this.triggerAnimationName = triggerAnimationName;
        }
        AnimationSpellSync.prototype.addLayer = function (layer) {
            this.spellLayers.push(layer);
        };
        AnimationSpellSync.prototype.update = function (animationTime, upc) {
            this.spellLayers.forEach(function (layer) {
                layer.update(animationTime, upc);
            });
        };
        AnimationSpellSync.prototype.start = function () {
            this.spellLayers.forEach(function (spellLayer) {
                spellLayer.start();
            });
        };
        AnimationSpellSync.prototype.stop = function () {
            this.spellLayers.forEach(function (spellLayer) {
                spellLayer.stop();
            });
        };
        AnimationSpellSync.prototype.getTriggerAnimationName = function () {
            return this.triggerAnimationName;
        };
        return AnimationSpellSync;
    }());
    PROJECT.AnimationSpellSync = AnimationSpellSync;
})(PROJECT || (PROJECT = {}));
var PROJECT;
(function (PROJECT) {
    var SpellLayer = /** @class */ (function () {
        function SpellLayer(particles, spells) {
            var _this = this;
            this.particles = particles;
            this.spells = spells;
            this.index = 0;
            this.spells.forEach(function (x) {
                x.setParticles(_this.particles);
            });
        }
        SpellLayer.prototype.update = function (animationTime, upc) {
            this.updateLayer(animationTime);
            var actualAnimation = this.spells[this.index];
            if (actualAnimation != null) {
                actualAnimation.update(upc);
            }
        };
        SpellLayer.prototype.updateLayer = function (animationTime) {
            if (!PROJECT.AnimationUtils.isWithinSpell(animationTime, this.spells[this.index]))
                if (this.index + 1 < this.spells.length) {
                    this.index++;
                }
        };
        SpellLayer.prototype.start = function () {
            this.particles.forEach(function (particle) {
                particle.reset();
                particle.resetDrawCache();
                particle.start();
            });
        };
        SpellLayer.prototype.stop = function () {
            this.index = 0;
            this.particles.forEach(function (particle) {
                particle.stop();
            });
            this.spells.forEach(function (spell) {
                spell.reset();
            });
        };
        return SpellLayer;
    }());
    PROJECT.SpellLayer = SpellLayer;
})(PROJECT || (PROJECT = {}));
var PROJECT;
(function (PROJECT) {
    var SpellSet = /** @class */ (function () {
        function SpellSet(setName, transformBones) {
            this.setName = setName;
            this.transformBones = transformBones;
        }
        SpellSet.prototype.getBone = function (name) {
            var bone = this.transformBones._linkedBone._skeleton;
            for (var boneKey in bone.bones) {
                if (name == bone.bones[boneKey].name)
                    return bone.bones[boneKey];
            }
            return null;
        };
        return SpellSet;
    }());
    PROJECT.SpellSet = SpellSet;
})(PROJECT || (PROJECT = {}));
///<reference path="SpellSet.ts"/>
var PROJECT;
(function (PROJECT) {
    var Vector3 = BABYLON.Vector3;
    var SpellTestSet = /** @class */ (function (_super) {
        __extends(SpellTestSet, _super);
        function SpellTestSet(transformBones) {
            return _super.call(this, "Sakura", transformBones) || this;
        }
        SpellTestSet.prototype.canSetBeUsed = function (setName) {
            return setName === this.setName;
        };
        SpellTestSet.prototype.getAll = function (scene) {
            var particlesMagicOne = PROJECT.ParticleFactory.createSpheresParticle(2, scene, [PROJECT.ColorPattern.red, PROJECT.ColorPattern.blue], 0.02, 0.01, 0.03, 0.25, 0.5, 100, 0.3, 0.5);
            var spellOneMagicOne = new PROJECT.Spell(new PROJECT.SphereAlgo(this.getBone("J_Bip_R_Hand"), 0.1), { stopTime: 4 });
            var transitionMagicOne = new PROJECT.SpellTransition(new Vector3(0.37, 1.081, 0.084), {
                startTime: 4,
                stopTime: 4.4,
            });
            var spellTwoMagicOne = new PROJECT.Spell(new PROJECT.CircleAlgo(this.getBone("J_Bip_R_Hand"), 0.7, 5), { startTime: 4.4 });
            var layerOneMagicOne = new PROJECT.SpellLayer(particlesMagicOne, [
                spellOneMagicOne,
                transitionMagicOne,
                spellTwoMagicOne,
            ]);
            var assMagicOne = new PROJECT.AnimationSpellSync("MagicOnePhaseOne");
            assMagicOne.addLayer(layerOneMagicOne);
            var particlesMagicTwo = PROJECT.ParticleFactory.createSpheresParticle(2, scene, [PROJECT.ColorPattern.green, PROJECT.ColorPattern.yellow], 0.05, 0.03, 0.05, 1, 2, 1000, 0.3, 1);
            var spellOneMagicTwo = new PROJECT.Spell(new PROJECT.CircleAlgo(null, 1, 10, 1.2), {
                stopTime: 1,
            });
            var spellTwoMagicTwo = new PROJECT.Spell(new PROJECT.CircleAlgo(null, 1, 10, 1.2, 0.3), {
                startTime: 1,
            });
            var layerOneMagiTwo = new PROJECT.SpellLayer(particlesMagicTwo, [
                spellOneMagicTwo,
                spellTwoMagicTwo,
            ]);
            var assMagicTwo = new PROJECT.AnimationSpellSync("MagicOnePhaseTwo");
            assMagicTwo.addLayer(layerOneMagiTwo);
            return [assMagicOne, assMagicTwo];
        };
        return SpellTestSet;
    }(PROJECT.SpellSet));
    PROJECT.SpellTestSet = SpellTestSet;
})(PROJECT || (PROJECT = {}));
var PROJECT;
(function (PROJECT) {
    var Vector3 = BABYLON.Vector3;
    var AnimationUtils = /** @class */ (function () {
        function AnimationUtils() {
        }
        AnimationUtils.isWithinSpell = function (x, spell) {
            return x >= spell.getStartTime() && x <= spell.getStopTime();
        };
        AnimationUtils.lerp = function (v1, v2, t) {
            return (1 - t) * v1 + t * v2;
        };
        AnimationUtils.lerpVector = function (v1, v2, speed) {
            return new Vector3(AnimationUtils.lerp(v1.x, v2.x, speed), AnimationUtils.lerp(v1.y, v2.y, speed), AnimationUtils.lerp(v1.z, v2.z, speed));
        };
        return AnimationUtils;
    }());
    PROJECT.AnimationUtils = AnimationUtils;
})(PROJECT || (PROJECT = {}));
var PROJECT;
(function (PROJECT) {
    var ColorPattern = /** @class */ (function () {
        function ColorPattern() {
        }
        ColorPattern.red = [
            new BABYLON.Color4(1, 0.7, 0.7),
            new BABYLON.Color4(1, 0.2, 0.2),
            new BABYLON.Color4(0.2, 0, 0, 0.0)
        ];
        ColorPattern.blue = [
            new BABYLON.Color4(0.7, 0.8, 1.0, 1.0),
            new BABYLON.Color4(0.2, 0.5, 1.0, 1.0),
            new BABYLON.Color4(0, 0, 0.2, 0.0)
        ];
        ColorPattern.green = [
            new BABYLON.Color4(0.7, 1, 0.7, 1.0),
            new BABYLON.Color4(0.2, 1, 0.2, 1.0),
            new BABYLON.Color4(0, 0.2, 0, 0.0)
        ];
        ColorPattern.yellow = [
            new BABYLON.Color4(1, 1, 0.7, 1.0),
            new BABYLON.Color4(1, 1, 0.2, 1.0),
            new BABYLON.Color4(0.2, 0.2, 0, 0.0)
        ];
        return ColorPattern;
    }());
    PROJECT.ColorPattern = ColorPattern;
})(PROJECT || (PROJECT = {}));
var PROJECT;
(function (PROJECT) {
    var Vector3 = BABYLON.Vector3;
    var MathUtils = /** @class */ (function () {
        function MathUtils() {
        }
        MathUtils.rotate = function (pointToMove, origin, angle) {
            var xM, zM, x, z;
            angle *= Math.PI / 180;
            xM = pointToMove.x - origin.x;
            zM = pointToMove.z - origin.z;
            x = xM * Math.cos(angle) + zM * Math.sin(angle) + origin.x;
            z = -xM * Math.sin(angle) + zM * Math.cos(angle) + origin.z;
            return new BABYLON.Vector3(x, pointToMove.y, z);
        };
        MathUtils.addVectors = function (vectors) {
            var result = new Vector3();
            vectors.forEach(function (vector) {
                result.x += vector.x;
                result.y += vector.y;
                result.z += vector.z;
            });
            return result;
        };
        MathUtils.multiplyVectors = function (vectors) {
            var result = new Vector3();
            vectors.forEach(function (vector) {
                result.x *= vector.x;
                result.y *= vector.y;
                result.z *= vector.z;
            });
            return result;
        };
        return MathUtils;
    }());
    PROJECT.MathUtils = MathUtils;
})(PROJECT || (PROJECT = {}));
var PROJECT;
(function (PROJECT) {
    /**
     * Babylon Script Component
     * @class ObjRender
     */
    // TODO Reducing calls to gl.clear()
    // TODO Using depth pre-pass
    // TODO Using unindexed meshes
    // TODO Turning AdaptToDeviceRatio Off/On
    // TODO Using Animation Ratio
    var ObjRender = /** @class */ (function (_super) {
        __extends(ObjRender, _super);
        function ObjRender() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.meshes = [];
            return _this;
        }
        ObjRender.prototype.awake = function () { };
        ObjRender.prototype.start = function () {
            var _this = this;
            this.optimizeScene();
            var meshTypes = [];
            this.scene.getMeshesByTags(ObjRender.RENDER_TAG).forEach(function (mesh) {
                var getClonedMesh = meshTypes.filter(function (m) { return m.name === mesh.name; });
                var isExist = getClonedMesh.length === 1;
                var currentMesh;
                if (!isExist) {
                    meshTypes.push(mesh);
                    currentMesh = mesh;
                    PROJECT.ToonMaterial.applyMaterial(_this.scene, [currentMesh]);
                }
                else {
                    currentMesh = getClonedMesh[0].clone(mesh.name, mesh.parent);
                    currentMesh.position = mesh.position.clone();
                    currentMesh.rotation = mesh.rotation.clone();
                    currentMesh.scaling = mesh.scaling.clone();
                    currentMesh.rotationQuaternion = mesh.rotationQuaternion.clone();
                    mesh.dispose();
                }
                _this.optimizeMesh(currentMesh);
                _this.meshes.push(currentMesh);
            });
        };
        ObjRender.prototype.ready = function () {
            /* Ready component function */
        };
        ObjRender.prototype.update = function () {
            this.enableDisableDistanceObject();
        };
        ObjRender.prototype.enableDisableDistanceObject = function () {
            var _this = this;
            var i = 0;
            this.meshes.forEach(function (mesh) {
                var result = BABYLON.Vector3.Distance(_this.getAbstractMesh().position, mesh.position) <= ObjRender.RENDER_DISTANCE;
                mesh.setEnabled(result);
                if (mesh.isEnabled())
                    i++;
            });
        };
        ObjRender.prototype.optimizeMesh = function (mesh) {
            var _this = this;
            if (mesh.subMeshes.length > 0) {
                mesh.getChildMeshes().forEach(function (mesh) {
                    _this.optimizeMesh(mesh);
                });
            }
            else {
                mesh.freezeWorldMatrix();
                mesh.doNotSyncBoundingInfo = true;
                mesh.isPickable = false;
                mesh.cullingStrategy =
                    BABYLON.AbstractMesh.CULLINGSTRATEGY_BOUNDINGSPHERE_ONLY;
            }
        };
        ObjRender.prototype.optimizeScene = function () {
            this.scene.blockMaterialDirtyMechanism = true;
            this.scene.debugLayer.show();
        };
        ObjRender.prototype.late = function () {
            /* Late update render loop function */
        };
        ObjRender.prototype.after = function () {
            /* After update render loop function */
        };
        ObjRender.prototype.fixed = function () {
            /* Fixed update physics step function */
        };
        ObjRender.prototype.destroy = function () {
            /* Destroy component function */
        };
        ObjRender.RENDER_TAG = "Render";
        ObjRender.RENDER_DISTANCE = 150;
        return ObjRender;
    }(BABYLON.ScriptComponent));
    PROJECT.ObjRender = ObjRender;
})(PROJECT || (PROJECT = {}));
var PROJECT;
(function (PROJECT) {
    var Toon = /** @class */ (function (_super) {
        __extends(Toon, _super);
        function Toon() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.shaderName = _this.getClassName();
            return _this;
        }
        Toon.prototype.start = function () {
            console.log(this.transform.getChildren());
            var color = this.getProperty("color");
            var name = this.getProperty("id");
            if (color.length === 0) {
                console.log("This object received 0 materials (" + this.transform.name + ")");
                return;
            }
            var isTerrain = this.getProperty("isTerrain");
            if (isTerrain) {
                console.log(this.transform.getChildren());
                this.applyMaterialTerrain(this.transform.getChildren()[0].getChildMeshes(), color, name);
            }
            else {
                this.applyMaterialStandard(this.transform.getChildMeshes(), color);
            }
        };
        Toon.prototype.applyMaterialTerrain = function (meshs, color, name) {
            var _this = this;
            meshs.forEach(function (mesh) {
                mesh.material = _this.getNodeMaterial(color, true, Toon.TEXTURE_LINK.replace(Toon.TEXTURE_REPLACE_STRING, name));
                mesh.markAsDirty();
            });
        };
        Toon.prototype.applyMaterialStandard = function (meshs, color) {
            var _this = this;
            meshs.forEach(function (mesh) {
                console.log(mesh.material);
                if (mesh.material instanceof BABYLON.MultiMaterial) {
                    mesh.material = _this.getNodeMaterialsStandardMesh(color);
                    mesh.markAsDirty();
                }
                else {
                    mesh.material = _this.getNodeMaterial(color[0], false);
                    mesh.markAsDirty();
                }
            });
        };
        Toon.prototype.getNodeMaterialsStandardMesh = function (colors) {
            var _this = this;
            var multimat = new BABYLON.MultiMaterial(this.shaderName, this.scene);
            colors.forEach(function (color) {
                var c = color;
                multimat.subMaterials.push(_this.getNodeMaterial(c, false));
            });
            return multimat;
        };
        Toon.prototype.getNodeMaterial = function (color, isTexture, textureLink) {
            if (isTexture && textureLink === undefined) {
                console.log("Material using texture has no texture link");
                return;
            }
            var nodeMaterial = new BABYLON.NodeMaterial(this.shaderName);
            // InputBlock
            var position = new BABYLON.InputBlock("position");
            position.visibleInInspector = false;
            position.visibleOnFrame = false;
            position.target = 1;
            position.setAsAttribute("position");
            // TransformBlock
            var worldPos = new BABYLON.TransformBlock("worldPos");
            worldPos.visibleInInspector = false;
            worldPos.visibleOnFrame = false;
            worldPos.target = 1;
            worldPos.complementZ = 0;
            worldPos.complementW = 1;
            // InputBlock
            var world = new BABYLON.InputBlock("world");
            world.visibleInInspector = false;
            world.visibleOnFrame = false;
            world.target = 1;
            world.setAsSystemValue(BABYLON.NodeMaterialSystemValues.World);
            // TransformBlock
            var Worldnormal = new BABYLON.TransformBlock("World normal");
            Worldnormal.visibleInInspector = false;
            Worldnormal.visibleOnFrame = false;
            Worldnormal.target = 1;
            Worldnormal.complementZ = 0;
            Worldnormal.complementW = 0;
            // InputBlock
            var normal = new BABYLON.InputBlock("normal");
            normal.visibleInInspector = false;
            normal.visibleOnFrame = false;
            normal.target = 1;
            normal.setAsAttribute("normal");
            // VectorSplitterBlock
            var N = new BABYLON.VectorSplitterBlock("N");
            N.visibleInInspector = false;
            N.visibleOnFrame = false;
            N.target = 4;
            // NormalizeBlock
            var NNormalized = new BABYLON.NormalizeBlock("N (Normalized)");
            NNormalized.visibleInInspector = false;
            NNormalized.visibleOnFrame = false;
            NNormalized.target = 4;
            // DotBlock
            var NDotLDiffuseLightIntensity = new BABYLON.DotBlock("N Dot L (Diffuse Light Intensity)");
            NDotLDiffuseLightIntensity.visibleInInspector = false;
            NDotLDiffuseLightIntensity.visibleOnFrame = false;
            NDotLDiffuseLightIntensity.target = 4;
            // NormalizeBlock
            var LNormalized = new BABYLON.NormalizeBlock("L (Normalized)");
            LNormalized.visibleInInspector = false;
            LNormalized.visibleOnFrame = false;
            LNormalized.target = 4;
            // LightInformationBlock
            var Lightinformation = new BABYLON.LightInformationBlock("Light information");
            Lightinformation.visibleInInspector = false;
            Lightinformation.visibleOnFrame = false;
            Lightinformation.target = 1;
            // AddBlock
            var H = new BABYLON.AddBlock("H");
            H.visibleInInspector = false;
            H.visibleOnFrame = false;
            H.target = 4;
            // NormalizeBlock
            var VNormalized = new BABYLON.NormalizeBlock("V (Normalized)");
            VNormalized.visibleInInspector = false;
            VNormalized.visibleOnFrame = false;
            VNormalized.target = 4;
            // ViewDirectionBlock
            var Viewdirection = new BABYLON.ViewDirectionBlock("View direction");
            Viewdirection.visibleInInspector = false;
            Viewdirection.visibleOnFrame = false;
            Viewdirection.target = 4;
            // InputBlock
            var cameraPosition = new BABYLON.InputBlock("cameraPosition");
            cameraPosition.visibleInInspector = false;
            cameraPosition.visibleOnFrame = false;
            cameraPosition.target = 1;
            cameraPosition.setAsSystemValue(BABYLON.NodeMaterialSystemValues.CameraPosition);
            // DotBlock
            var NDotV = new BABYLON.DotBlock("N Dot V");
            NDotV.visibleInInspector = false;
            NDotV.visibleOnFrame = false;
            NDotV.target = 4;
            // OneMinusBlock
            var NDotV1 = new BABYLON.OneMinusBlock("1 - N Dot V");
            NDotV1.visibleInInspector = false;
            NDotV1.visibleOnFrame = false;
            NDotV1.target = 4;
            // MultiplyBlock
            var RimINtensity = new BABYLON.MultiplyBlock("Rim INtensity");
            RimINtensity.visibleInInspector = false;
            RimINtensity.visibleOnFrame = false;
            RimINtensity.target = 4;
            // PowBlock
            var RimFactor = new BABYLON.PowBlock("Rim Factor");
            RimFactor.visibleInInspector = false;
            RimFactor.visibleOnFrame = false;
            RimFactor.target = 4;
            // InputBlock
            var RimIntensity = new BABYLON.InputBlock("Rim Intensity");
            RimIntensity.visibleInInspector = false;
            RimIntensity.visibleOnFrame = false;
            RimIntensity.target = 1;
            RimIntensity.value = 0.4;
            RimIntensity.min = 0;
            RimIntensity.max = 0;
            RimIntensity.isBoolean = false;
            RimIntensity.matrixMode = 0;
            RimIntensity.animationType = BABYLON.AnimatedInputBlockTypes.None;
            RimIntensity.isConstant = false;
            // StepBlock
            var QuantizedRimLightIntensity = new BABYLON.StepBlock("Quantized Rim Light Intensity");
            QuantizedRimLightIntensity.visibleInInspector = false;
            QuantizedRimLightIntensity.visibleOnFrame = false;
            QuantizedRimLightIntensity.target = 4;
            // InputBlock
            var RimCutoff = new BABYLON.InputBlock("Rim Cutoff");
            RimCutoff.visibleInInspector = false;
            RimCutoff.visibleOnFrame = false;
            RimCutoff.target = 1;
            RimCutoff.value = 0.6;
            RimCutoff.min = 0;
            RimCutoff.max = 0;
            RimCutoff.isBoolean = false;
            RimCutoff.matrixMode = 0;
            RimCutoff.animationType = BABYLON.AnimatedInputBlockTypes.None;
            RimCutoff.isConstant = false;
            // ScaleBlock
            var Scale = new BABYLON.ScaleBlock("Scale");
            Scale.visibleInInspector = false;
            Scale.visibleOnFrame = false;
            Scale.target = 4;
            // InputBlock
            var RimLightColor = new BABYLON.InputBlock("Rim Light Color");
            RimLightColor.visibleInInspector = false;
            RimLightColor.visibleOnFrame = false;
            RimLightColor.target = 1;
            RimLightColor.value = new BABYLON.Color3(1, 1, 1);
            RimLightColor.isConstant = false;
            // AddBlock
            var AddRimSpecDiffuseAmbient = new BABYLON.AddBlock("Add Rim + Spec + Diffuse + Ambient");
            AddRimSpecDiffuseAmbient.visibleInInspector = false;
            AddRimSpecDiffuseAmbient.visibleOnFrame = false;
            AddRimSpecDiffuseAmbient.target = 4;
            // AddBlock
            var AddSpecularDiffuseAmbient = new BABYLON.AddBlock("Add Specular + Diffuse + Ambient");
            AddSpecularDiffuseAmbient.visibleInInspector = false;
            AddSpecularDiffuseAmbient.visibleOnFrame = false;
            AddSpecularDiffuseAmbient.target = 4;
            // AddBlock
            var AddAmbienttoDiffuseLight = new BABYLON.AddBlock("Add Ambient to Diffuse Light");
            AddAmbienttoDiffuseLight.visibleInInspector = false;
            AddAmbienttoDiffuseLight.visibleOnFrame = false;
            AddAmbienttoDiffuseLight.target = 4;
            // InputBlock
            var AmbientLightColor = new BABYLON.InputBlock("Ambient Light Color");
            AmbientLightColor.visibleInInspector = false;
            AmbientLightColor.visibleOnFrame = false;
            AmbientLightColor.target = 1;
            AmbientLightColor.value = new BABYLON.Color3(0.1803921568627451, 0.1803921568627451, 0.1803921568627451);
            AmbientLightColor.isConstant = false;
            // ScaleBlock
            var DiffuseLightCalculation = new BABYLON.ScaleBlock("Diffuse Light Calculation");
            DiffuseLightCalculation.visibleInInspector = false;
            DiffuseLightCalculation.visibleOnFrame = false;
            DiffuseLightCalculation.target = 4;
            // InputBlock
            var DiffuseLightColor = new BABYLON.InputBlock("Diffuse Light Color");
            DiffuseLightColor.visibleInInspector = false;
            DiffuseLightColor.visibleOnFrame = false;
            DiffuseLightColor.target = 1;
            DiffuseLightColor.value = new BABYLON.Color3(0.6901960784313725, 0.6901960784313725, 0.6901960784313725);
            DiffuseLightColor.isConstant = false;
            // StepBlock
            var QuantizedDiffuseLightIntensity = new BABYLON.StepBlock("Quantized Diffuse Light Intensity");
            QuantizedDiffuseLightIntensity.visibleInInspector = false;
            QuantizedDiffuseLightIntensity.visibleOnFrame = false;
            QuantizedDiffuseLightIntensity.target = 4;
            // InputBlock
            var DiffuseCutoff = new BABYLON.InputBlock("Diffuse Cutoff");
            DiffuseCutoff.visibleInInspector = false;
            DiffuseCutoff.visibleOnFrame = false;
            DiffuseCutoff.target = 1;
            DiffuseCutoff.value = 0;
            DiffuseCutoff.min = 0;
            DiffuseCutoff.max = 0;
            DiffuseCutoff.isBoolean = false;
            DiffuseCutoff.matrixMode = 0;
            DiffuseCutoff.animationType = BABYLON.AnimatedInputBlockTypes.None;
            DiffuseCutoff.isConstant = false;
            // MultiplyBlock
            var SpecularFactor = new BABYLON.MultiplyBlock("Specular Factor");
            SpecularFactor.visibleInInspector = false;
            SpecularFactor.visibleOnFrame = false;
            SpecularFactor.target = 4;
            // DotBlock
            var NDotH = new BABYLON.DotBlock("N Dot H");
            NDotH.visibleInInspector = false;
            NDotH.visibleOnFrame = false;
            NDotH.target = 4;
            // NormalizeBlock
            var HNormalized = new BABYLON.NormalizeBlock("H (Normalized)");
            HNormalized.visibleInInspector = false;
            HNormalized.visibleOnFrame = false;
            HNormalized.target = 4;
            // PowBlock
            var SpecularIntensity = new BABYLON.PowBlock("Specular Intensity");
            SpecularIntensity.visibleInInspector = false;
            SpecularIntensity.visibleOnFrame = false;
            SpecularIntensity.target = 4;
            // MultiplyBlock
            var Glossiness = new BABYLON.MultiplyBlock("Glossiness ^2");
            Glossiness.visibleInInspector = false;
            Glossiness.visibleOnFrame = false;
            Glossiness.target = 4;
            // InputBlock
            var Glossiness1 = new BABYLON.InputBlock("Glossiness");
            Glossiness1.visibleInInspector = false;
            Glossiness1.visibleOnFrame = false;
            Glossiness1.target = 1;
            Glossiness1.value = 5;
            Glossiness1.min = 0;
            Glossiness1.max = 0;
            Glossiness1.isBoolean = false;
            Glossiness1.matrixMode = 0;
            Glossiness1.animationType = BABYLON.AnimatedInputBlockTypes.None;
            Glossiness1.isConstant = false;
            // StepBlock
            var QuantizedSpecularIntensity = new BABYLON.StepBlock("Quantized Specular Intensity");
            QuantizedSpecularIntensity.visibleInInspector = false;
            QuantizedSpecularIntensity.visibleOnFrame = false;
            QuantizedSpecularIntensity.target = 4;
            // InputBlock
            var SpecularCutoff = new BABYLON.InputBlock("Specular Cutoff");
            SpecularCutoff.visibleInInspector = false;
            SpecularCutoff.visibleOnFrame = false;
            SpecularCutoff.target = 1;
            SpecularCutoff.value = 0.5;
            SpecularCutoff.min = 0;
            SpecularCutoff.max = 0;
            SpecularCutoff.isBoolean = false;
            SpecularCutoff.matrixMode = 0;
            SpecularCutoff.animationType = BABYLON.AnimatedInputBlockTypes.None;
            SpecularCutoff.isConstant = false;
            // ScaleBlock
            var CalculateSpecularLight = new BABYLON.ScaleBlock("Calculate Specular Light");
            CalculateSpecularLight.visibleInInspector = false;
            CalculateSpecularLight.visibleOnFrame = false;
            CalculateSpecularLight.target = 4;
            // InputBlock
            var Color = new BABYLON.InputBlock("Color3");
            Color.visibleInInspector = false;
            Color.visibleOnFrame = false;
            Color.target = 1;
            Color.value = new BABYLON.Color3(1, 1, 1);
            Color.isConstant = false;
            // MultiplyBlock
            var MultiplyLightingbyColor = new BABYLON.MultiplyBlock("Multiply Lighting by Color");
            MultiplyLightingbyColor.visibleInInspector = false;
            MultiplyLightingbyColor.visibleOnFrame = false;
            MultiplyLightingbyColor.target = 4;
            // TextureBlock (TEXTURE)
            var Texture = new BABYLON.TextureBlock("Texture");
            // InputBlock (TEXTURE)
            var uv = new BABYLON.InputBlock("uv");
            // ImageSourceBlock (TEXTURE)
            var SurfaceTexture = new BABYLON.ImageSourceBlock("Surface Texture");
            // InputBlock (COLOR)
            var SurfaceColor = new BABYLON.InputBlock("Surface Color");
            if (isTexture) {
                // TextureBlock (TEXTURE)
                Texture.visibleInInspector = false;
                Texture.visibleOnFrame = false;
                Texture.target = 3;
                Texture.convertToGammaSpace = false;
                Texture.convertToLinearSpace = false;
                Texture.disableLevelMultiplication = false;
                Texture.texture = new BABYLON.Texture(textureLink, this.scene);
                Texture.texture.wrapU = 1;
                Texture.texture.wrapV = 1;
                Texture.texture.uAng = 0;
                Texture.texture.vAng = 0;
                Texture.texture.wAng = 0;
                Texture.texture.uOffset = 0;
                Texture.texture.vOffset = 0;
                Texture.texture.uScale = 1;
                Texture.texture.vScale = 1;
                Texture.texture.coordinatesMode = 7;
                // InputBlock (TEXTURE)
                uv.visibleInInspector = false;
                uv.visibleOnFrame = false;
                uv.target = 1;
                uv.setAsAttribute("uv");
                // ImageSourceBlock (TEXTURE)
                SurfaceTexture.visibleInInspector = false;
                SurfaceTexture.visibleOnFrame = false;
                SurfaceTexture.target = 3;
                SurfaceTexture.texture = new BABYLON.Texture(textureLink, this.scene);
                SurfaceTexture.texture.wrapU = 1;
                SurfaceTexture.texture.wrapV = 1;
                SurfaceTexture.texture.uAng = 0;
                SurfaceTexture.texture.vAng = 0;
                SurfaceTexture.texture.wAng = 0;
                SurfaceTexture.texture.uOffset = 0;
                SurfaceTexture.texture.vOffset = 0;
                SurfaceTexture.texture.uScale = 1;
                SurfaceTexture.texture.vScale = 1;
                SurfaceTexture.texture.coordinatesMode = 7;
            }
            else {
                // InputBlock (COLOR)
                SurfaceColor.visibleInInspector = false;
                SurfaceColor.visibleOnFrame = false;
                SurfaceColor.target = 1;
                SurfaceColor.value = new BABYLON.Color3(color.r, color.g, color.b);
                SurfaceColor.isConstant = false;
            }
            // FragmentOutputBlock
            var fragmentOutput = new BABYLON.FragmentOutputBlock("fragmentOutput");
            fragmentOutput.visibleInInspector = false;
            fragmentOutput.visibleOnFrame = false;
            fragmentOutput.target = 2;
            fragmentOutput.convertToGammaSpace = undefined;
            fragmentOutput.convertToLinearSpace = undefined;
            fragmentOutput.useLogarithmicDepth = false;
            // TransformBlock
            var worldPosviewProjectionTransform = new BABYLON.TransformBlock("worldPos * viewProjectionTransform");
            worldPosviewProjectionTransform.visibleInInspector = false;
            worldPosviewProjectionTransform.visibleOnFrame = false;
            worldPosviewProjectionTransform.target = 1;
            worldPosviewProjectionTransform.complementZ = 0;
            worldPosviewProjectionTransform.complementW = 1;
            // InputBlock
            var viewProjection = new BABYLON.InputBlock("viewProjection");
            viewProjection.visibleInInspector = false;
            viewProjection.visibleOnFrame = false;
            viewProjection.target = 1;
            viewProjection.setAsSystemValue(BABYLON.NodeMaterialSystemValues.ViewProjection);
            // VertexOutputBlock
            var vertexOutput = new BABYLON.VertexOutputBlock("vertexOutput");
            vertexOutput.visibleInInspector = false;
            vertexOutput.visibleOnFrame = false;
            vertexOutput.target = 1;
            // Connections
            position.output.connectTo(worldPos.vector);
            world.output.connectTo(worldPos.transform);
            worldPos.output.connectTo(worldPosviewProjectionTransform.vector);
            viewProjection.output.connectTo(worldPosviewProjectionTransform.transform);
            worldPosviewProjectionTransform.output.connectTo(vertexOutput.vector);
            AmbientLightColor.output.connectTo(AddAmbienttoDiffuseLight.left);
            DiffuseLightColor.output.connectTo(DiffuseLightCalculation.input);
            normal.output.connectTo(Worldnormal.vector);
            world.output.connectTo(Worldnormal.transform);
            Worldnormal.output.connectTo(N.xyzw);
            N.xyzOut.connectTo(NNormalized.input);
            NNormalized.output.connectTo(NDotLDiffuseLightIntensity.left);
            worldPos.output.connectTo(Lightinformation.worldPosition);
            Lightinformation.direction.connectTo(LNormalized.input);
            LNormalized.output.connectTo(NDotLDiffuseLightIntensity.right);
            NDotLDiffuseLightIntensity.output.connectTo(QuantizedDiffuseLightIntensity.value);
            DiffuseCutoff.output.connectTo(QuantizedDiffuseLightIntensity.edge);
            QuantizedDiffuseLightIntensity.output.connectTo(DiffuseLightCalculation.factor);
            DiffuseLightCalculation.output.connectTo(AddAmbienttoDiffuseLight.right);
            AddAmbienttoDiffuseLight.output.connectTo(AddSpecularDiffuseAmbient.left);
            Color.output.connectTo(CalculateSpecularLight.input);
            NNormalized.output.connectTo(NDotH.left);
            worldPos.output.connectTo(Viewdirection.worldPosition);
            cameraPosition.output.connectTo(Viewdirection.cameraPosition);
            Viewdirection.output.connectTo(VNormalized.input);
            VNormalized.output.connectTo(H.left);
            LNormalized.output.connectTo(H.right);
            H.output.connectTo(HNormalized.input);
            HNormalized.output.connectTo(NDotH.right);
            NDotH.output.connectTo(SpecularFactor.left);
            QuantizedDiffuseLightIntensity.output.connectTo(SpecularFactor.right);
            SpecularFactor.output.connectTo(SpecularIntensity.value);
            Glossiness1.output.connectTo(Glossiness.left);
            Glossiness1.output.connectTo(Glossiness.right);
            Glossiness.output.connectTo(SpecularIntensity.power);
            SpecularIntensity.output.connectTo(QuantizedSpecularIntensity.value);
            SpecularCutoff.output.connectTo(QuantizedSpecularIntensity.edge);
            QuantizedSpecularIntensity.output.connectTo(CalculateSpecularLight.factor);
            CalculateSpecularLight.output.connectTo(AddSpecularDiffuseAmbient.right);
            AddSpecularDiffuseAmbient.output.connectTo(AddRimSpecDiffuseAmbient.left);
            RimLightColor.output.connectTo(Scale.input);
            NNormalized.output.connectTo(NDotV.left);
            VNormalized.output.connectTo(NDotV.right);
            NDotV.output.connectTo(NDotV1.input);
            NDotV1.output.connectTo(RimINtensity.left);
            NDotLDiffuseLightIntensity.output.connectTo(RimFactor.value);
            RimIntensity.output.connectTo(RimFactor.power);
            RimFactor.output.connectTo(RimINtensity.right);
            RimINtensity.output.connectTo(QuantizedRimLightIntensity.value);
            RimCutoff.output.connectTo(QuantizedRimLightIntensity.edge);
            QuantizedRimLightIntensity.output.connectTo(Scale.factor);
            Scale.output.connectTo(AddRimSpecDiffuseAmbient.right);
            AddRimSpecDiffuseAmbient.output.connectTo(MultiplyLightingbyColor.left);
            if (isTexture) {
                // TEXTURE
                uv.output.connectTo(Texture.uv);
                SurfaceTexture.source.connectTo(Texture.source);
                Texture.rgb.connectTo(MultiplyLightingbyColor.right);
            }
            else {
                // COLOR
                SurfaceColor.output.connectTo(MultiplyLightingbyColor.right);
            }
            MultiplyLightingbyColor.output.connectTo(fragmentOutput.rgb);
            // Output nodes
            nodeMaterial.addOutputNode(vertexOutput);
            nodeMaterial.addOutputNode(fragmentOutput);
            nodeMaterial.build();
            return nodeMaterial;
        };
        Toon.TEXTURE_LINK = "./scenes/assets/;folder;/Splatmaps.png";
        Toon.TEXTURE_REPLACE_STRING = ";folder;";
        return Toon;
    }(BABYLON.ScriptComponent));
    PROJECT.Toon = Toon;
})(PROJECT || (PROJECT = {}));
var PROJECT;
(function (PROJECT) {
    var ToonMaterial = /** @class */ (function () {
        function ToonMaterial() {
        }
        ToonMaterial.applyMaterial = function (scene, meshs) {
            var material = ToonMaterial.getNodeMaterial(true, scene, "./scenes/assets/proceduralworlds/gaia/assetsamples/syntystudios/materials/POLYGON_Texture_01.png");
            meshs.forEach(function (mesh) {
                mesh.material = material;
                mesh.material.freeze();
                mesh.markAsDirty();
            });
        };
        ToonMaterial.getNodeMaterial = function (isTexture, scene, textureLink, color) {
            if (isTexture && textureLink === undefined) {
                console.log("Material using texture has no texture link");
                return;
            }
            var nodeMaterial = new BABYLON.NodeMaterial(ToonMaterial.shaderName);
            // InputBlock
            var position = new BABYLON.InputBlock("position");
            position.visibleInInspector = false;
            position.visibleOnFrame = false;
            position.target = 1;
            position.setAsAttribute("position");
            // TransformBlock
            var worldPos = new BABYLON.TransformBlock("worldPos");
            worldPos.visibleInInspector = false;
            worldPos.visibleOnFrame = false;
            worldPos.target = 1;
            worldPos.complementZ = 0;
            worldPos.complementW = 1;
            // InputBlock
            var world = new BABYLON.InputBlock("world");
            world.visibleInInspector = false;
            world.visibleOnFrame = false;
            world.target = 1;
            world.setAsSystemValue(BABYLON.NodeMaterialSystemValues.World);
            // TransformBlock
            var Worldnormal = new BABYLON.TransformBlock("World normal");
            Worldnormal.visibleInInspector = false;
            Worldnormal.visibleOnFrame = false;
            Worldnormal.target = 1;
            Worldnormal.complementZ = 0;
            Worldnormal.complementW = 0;
            // InputBlock
            var normal = new BABYLON.InputBlock("normal");
            normal.visibleInInspector = false;
            normal.visibleOnFrame = false;
            normal.target = 1;
            normal.setAsAttribute("normal");
            // VectorSplitterBlock
            var N = new BABYLON.VectorSplitterBlock("N");
            N.visibleInInspector = false;
            N.visibleOnFrame = false;
            N.target = 4;
            // NormalizeBlock
            var NNormalized = new BABYLON.NormalizeBlock("N (Normalized)");
            NNormalized.visibleInInspector = false;
            NNormalized.visibleOnFrame = false;
            NNormalized.target = 4;
            // DotBlock
            var NDotLDiffuseLightIntensity = new BABYLON.DotBlock("N Dot L (Diffuse Light Intensity)");
            NDotLDiffuseLightIntensity.visibleInInspector = false;
            NDotLDiffuseLightIntensity.visibleOnFrame = false;
            NDotLDiffuseLightIntensity.target = 4;
            // NormalizeBlock
            var LNormalized = new BABYLON.NormalizeBlock("L (Normalized)");
            LNormalized.visibleInInspector = false;
            LNormalized.visibleOnFrame = false;
            LNormalized.target = 4;
            // LightInformationBlock
            var Lightinformation = new BABYLON.LightInformationBlock("Light information");
            Lightinformation.visibleInInspector = false;
            Lightinformation.visibleOnFrame = false;
            Lightinformation.target = 1;
            // AddBlock
            var H = new BABYLON.AddBlock("H");
            H.visibleInInspector = false;
            H.visibleOnFrame = false;
            H.target = 4;
            // NormalizeBlock
            var VNormalized = new BABYLON.NormalizeBlock("V (Normalized)");
            VNormalized.visibleInInspector = false;
            VNormalized.visibleOnFrame = false;
            VNormalized.target = 4;
            // ViewDirectionBlock
            var Viewdirection = new BABYLON.ViewDirectionBlock("View direction");
            Viewdirection.visibleInInspector = false;
            Viewdirection.visibleOnFrame = false;
            Viewdirection.target = 4;
            // InputBlock
            var cameraPosition = new BABYLON.InputBlock("cameraPosition");
            cameraPosition.visibleInInspector = false;
            cameraPosition.visibleOnFrame = false;
            cameraPosition.target = 1;
            cameraPosition.setAsSystemValue(BABYLON.NodeMaterialSystemValues.CameraPosition);
            // DotBlock
            var NDotV = new BABYLON.DotBlock("N Dot V");
            NDotV.visibleInInspector = false;
            NDotV.visibleOnFrame = false;
            NDotV.target = 4;
            // OneMinusBlock
            var NDotV1 = new BABYLON.OneMinusBlock("1 - N Dot V");
            NDotV1.visibleInInspector = false;
            NDotV1.visibleOnFrame = false;
            NDotV1.target = 4;
            // MultiplyBlock
            var RimINtensity = new BABYLON.MultiplyBlock("Rim INtensity");
            RimINtensity.visibleInInspector = false;
            RimINtensity.visibleOnFrame = false;
            RimINtensity.target = 4;
            // PowBlock
            var RimFactor = new BABYLON.PowBlock("Rim Factor");
            RimFactor.visibleInInspector = false;
            RimFactor.visibleOnFrame = false;
            RimFactor.target = 4;
            // InputBlock
            var RimIntensity = new BABYLON.InputBlock("Rim Intensity");
            RimIntensity.visibleInInspector = false;
            RimIntensity.visibleOnFrame = false;
            RimIntensity.target = 1;
            RimIntensity.value = 0.4;
            RimIntensity.min = 0;
            RimIntensity.max = 0;
            RimIntensity.isBoolean = false;
            RimIntensity.matrixMode = 0;
            RimIntensity.animationType = BABYLON.AnimatedInputBlockTypes.None;
            RimIntensity.isConstant = false;
            // StepBlock
            var QuantizedRimLightIntensity = new BABYLON.StepBlock("Quantized Rim Light Intensity");
            QuantizedRimLightIntensity.visibleInInspector = false;
            QuantizedRimLightIntensity.visibleOnFrame = false;
            QuantizedRimLightIntensity.target = 4;
            // InputBlock
            var RimCutoff = new BABYLON.InputBlock("Rim Cutoff");
            RimCutoff.visibleInInspector = false;
            RimCutoff.visibleOnFrame = false;
            RimCutoff.target = 1;
            RimCutoff.value = 0.6;
            RimCutoff.min = 0;
            RimCutoff.max = 0;
            RimCutoff.isBoolean = false;
            RimCutoff.matrixMode = 0;
            RimCutoff.animationType = BABYLON.AnimatedInputBlockTypes.None;
            RimCutoff.isConstant = false;
            // ScaleBlock
            var Scale = new BABYLON.ScaleBlock("Scale");
            Scale.visibleInInspector = false;
            Scale.visibleOnFrame = false;
            Scale.target = 4;
            // InputBlock
            var RimLightColor = new BABYLON.InputBlock("Rim Light Color");
            RimLightColor.visibleInInspector = false;
            RimLightColor.visibleOnFrame = false;
            RimLightColor.target = 1;
            RimLightColor.value = new BABYLON.Color3(1, 1, 1);
            RimLightColor.isConstant = false;
            // AddBlock
            var AddRimSpecDiffuseAmbient = new BABYLON.AddBlock("Add Rim + Spec + Diffuse + Ambient");
            AddRimSpecDiffuseAmbient.visibleInInspector = false;
            AddRimSpecDiffuseAmbient.visibleOnFrame = false;
            AddRimSpecDiffuseAmbient.target = 4;
            // AddBlock
            var AddSpecularDiffuseAmbient = new BABYLON.AddBlock("Add Specular + Diffuse + Ambient");
            AddSpecularDiffuseAmbient.visibleInInspector = false;
            AddSpecularDiffuseAmbient.visibleOnFrame = false;
            AddSpecularDiffuseAmbient.target = 4;
            // AddBlock
            var AddAmbienttoDiffuseLight = new BABYLON.AddBlock("Add Ambient to Diffuse Light");
            AddAmbienttoDiffuseLight.visibleInInspector = false;
            AddAmbienttoDiffuseLight.visibleOnFrame = false;
            AddAmbienttoDiffuseLight.target = 4;
            // InputBlock
            var AmbientLightColor = new BABYLON.InputBlock("Ambient Light Color");
            AmbientLightColor.visibleInInspector = false;
            AmbientLightColor.visibleOnFrame = false;
            AmbientLightColor.target = 1;
            AmbientLightColor.value = new BABYLON.Color3(0.1803921568627451, 0.1803921568627451, 0.1803921568627451);
            AmbientLightColor.isConstant = false;
            // ScaleBlock
            var DiffuseLightCalculation = new BABYLON.ScaleBlock("Diffuse Light Calculation");
            DiffuseLightCalculation.visibleInInspector = false;
            DiffuseLightCalculation.visibleOnFrame = false;
            DiffuseLightCalculation.target = 4;
            // InputBlock
            var DiffuseLightColor = new BABYLON.InputBlock("Diffuse Light Color");
            DiffuseLightColor.visibleInInspector = false;
            DiffuseLightColor.visibleOnFrame = false;
            DiffuseLightColor.target = 1;
            DiffuseLightColor.value = new BABYLON.Color3(0.6901960784313725, 0.6901960784313725, 0.6901960784313725);
            DiffuseLightColor.isConstant = false;
            // StepBlock
            var QuantizedDiffuseLightIntensity = new BABYLON.StepBlock("Quantized Diffuse Light Intensity");
            QuantizedDiffuseLightIntensity.visibleInInspector = false;
            QuantizedDiffuseLightIntensity.visibleOnFrame = false;
            QuantizedDiffuseLightIntensity.target = 4;
            // InputBlock
            var DiffuseCutoff = new BABYLON.InputBlock("Diffuse Cutoff");
            DiffuseCutoff.visibleInInspector = false;
            DiffuseCutoff.visibleOnFrame = false;
            DiffuseCutoff.target = 1;
            DiffuseCutoff.value = 0;
            DiffuseCutoff.min = 0;
            DiffuseCutoff.max = 0;
            DiffuseCutoff.isBoolean = false;
            DiffuseCutoff.matrixMode = 0;
            DiffuseCutoff.animationType = BABYLON.AnimatedInputBlockTypes.None;
            DiffuseCutoff.isConstant = false;
            // MultiplyBlock
            var SpecularFactor = new BABYLON.MultiplyBlock("Specular Factor");
            SpecularFactor.visibleInInspector = false;
            SpecularFactor.visibleOnFrame = false;
            SpecularFactor.target = 4;
            // DotBlock
            var NDotH = new BABYLON.DotBlock("N Dot H");
            NDotH.visibleInInspector = false;
            NDotH.visibleOnFrame = false;
            NDotH.target = 4;
            // NormalizeBlock
            var HNormalized = new BABYLON.NormalizeBlock("H (Normalized)");
            HNormalized.visibleInInspector = false;
            HNormalized.visibleOnFrame = false;
            HNormalized.target = 4;
            // PowBlock
            var SpecularIntensity = new BABYLON.PowBlock("Specular Intensity");
            SpecularIntensity.visibleInInspector = false;
            SpecularIntensity.visibleOnFrame = false;
            SpecularIntensity.target = 4;
            // MultiplyBlock
            var Glossiness = new BABYLON.MultiplyBlock("Glossiness ^2");
            Glossiness.visibleInInspector = false;
            Glossiness.visibleOnFrame = false;
            Glossiness.target = 4;
            // InputBlock
            var Glossiness1 = new BABYLON.InputBlock("Glossiness");
            Glossiness1.visibleInInspector = false;
            Glossiness1.visibleOnFrame = false;
            Glossiness1.target = 1;
            Glossiness1.value = 5;
            Glossiness1.min = 0;
            Glossiness1.max = 0;
            Glossiness1.isBoolean = false;
            Glossiness1.matrixMode = 0;
            Glossiness1.animationType = BABYLON.AnimatedInputBlockTypes.None;
            Glossiness1.isConstant = false;
            // StepBlock
            var QuantizedSpecularIntensity = new BABYLON.StepBlock("Quantized Specular Intensity");
            QuantizedSpecularIntensity.visibleInInspector = false;
            QuantizedSpecularIntensity.visibleOnFrame = false;
            QuantizedSpecularIntensity.target = 4;
            // InputBlock
            var SpecularCutoff = new BABYLON.InputBlock("Specular Cutoff");
            SpecularCutoff.visibleInInspector = false;
            SpecularCutoff.visibleOnFrame = false;
            SpecularCutoff.target = 1;
            SpecularCutoff.value = 0.5;
            SpecularCutoff.min = 0;
            SpecularCutoff.max = 0;
            SpecularCutoff.isBoolean = false;
            SpecularCutoff.matrixMode = 0;
            SpecularCutoff.animationType = BABYLON.AnimatedInputBlockTypes.None;
            SpecularCutoff.isConstant = false;
            // ScaleBlock
            var CalculateSpecularLight = new BABYLON.ScaleBlock("Calculate Specular Light");
            CalculateSpecularLight.visibleInInspector = false;
            CalculateSpecularLight.visibleOnFrame = false;
            CalculateSpecularLight.target = 4;
            // InputBlock
            var Color = new BABYLON.InputBlock("Color3");
            Color.visibleInInspector = false;
            Color.visibleOnFrame = false;
            Color.target = 1;
            Color.value = new BABYLON.Color3(1, 1, 1);
            Color.isConstant = false;
            // MultiplyBlock
            var MultiplyLightingbyColor = new BABYLON.MultiplyBlock("Multiply Lighting by Color");
            MultiplyLightingbyColor.visibleInInspector = false;
            MultiplyLightingbyColor.visibleOnFrame = false;
            MultiplyLightingbyColor.target = 4;
            // TextureBlock (TEXTURE)
            var Texture = new BABYLON.TextureBlock("Texture");
            // InputBlock (TEXTURE)
            var uv = new BABYLON.InputBlock("uv");
            // ImageSourceBlock (TEXTURE)
            var SurfaceTexture = new BABYLON.ImageSourceBlock("Surface Texture");
            // InputBlock (COLOR)
            var SurfaceColor = new BABYLON.InputBlock("Surface Color");
            if (isTexture) {
                // TextureBlock (TEXTURE)
                Texture.visibleInInspector = false;
                Texture.visibleOnFrame = false;
                Texture.target = 3;
                Texture.convertToGammaSpace = false;
                Texture.convertToLinearSpace = false;
                Texture.disableLevelMultiplication = false;
                Texture.texture = new BABYLON.Texture(textureLink, scene);
                Texture.texture.wrapU = 1;
                Texture.texture.wrapV = 1;
                Texture.texture.uAng = 0;
                Texture.texture.vAng = 0;
                Texture.texture.wAng = 0;
                Texture.texture.uOffset = 0;
                Texture.texture.vOffset = 0;
                Texture.texture.uScale = 1;
                Texture.texture.vScale = 1;
                Texture.texture.coordinatesMode = 7;
                // InputBlock (TEXTURE)
                uv.visibleInInspector = false;
                uv.visibleOnFrame = false;
                uv.target = 1;
                uv.setAsAttribute("uv");
                // ImageSourceBlock (TEXTURE)
                SurfaceTexture.visibleInInspector = false;
                SurfaceTexture.visibleOnFrame = false;
                SurfaceTexture.target = 3;
                SurfaceTexture.texture = new BABYLON.Texture(textureLink, scene);
                SurfaceTexture.texture.wrapU = 1;
                SurfaceTexture.texture.wrapV = 1;
                SurfaceTexture.texture.uAng = 0;
                SurfaceTexture.texture.vAng = 0;
                SurfaceTexture.texture.wAng = 0;
                SurfaceTexture.texture.uOffset = 0;
                SurfaceTexture.texture.vOffset = 0;
                SurfaceTexture.texture.uScale = 1;
                SurfaceTexture.texture.vScale = 1;
                SurfaceTexture.texture.coordinatesMode = 7;
            }
            else {
                // InputBlock (COLOR)
                SurfaceColor.visibleInInspector = false;
                SurfaceColor.visibleOnFrame = false;
                SurfaceColor.target = 1;
                SurfaceColor.value = new BABYLON.Color3(color.r, color.g, color.b);
                SurfaceColor.isConstant = false;
            }
            // FragmentOutputBlock
            var fragmentOutput = new BABYLON.FragmentOutputBlock("fragmentOutput");
            fragmentOutput.visibleInInspector = false;
            fragmentOutput.visibleOnFrame = false;
            fragmentOutput.target = 2;
            fragmentOutput.convertToGammaSpace = undefined;
            fragmentOutput.convertToLinearSpace = undefined;
            fragmentOutput.useLogarithmicDepth = false;
            // TransformBlock
            var worldPosviewProjectionTransform = new BABYLON.TransformBlock("worldPos * viewProjectionTransform");
            worldPosviewProjectionTransform.visibleInInspector = false;
            worldPosviewProjectionTransform.visibleOnFrame = false;
            worldPosviewProjectionTransform.target = 1;
            worldPosviewProjectionTransform.complementZ = 0;
            worldPosviewProjectionTransform.complementW = 1;
            // InputBlock
            var viewProjection = new BABYLON.InputBlock("viewProjection");
            viewProjection.visibleInInspector = false;
            viewProjection.visibleOnFrame = false;
            viewProjection.target = 1;
            viewProjection.setAsSystemValue(BABYLON.NodeMaterialSystemValues.ViewProjection);
            // VertexOutputBlock
            var vertexOutput = new BABYLON.VertexOutputBlock("vertexOutput");
            vertexOutput.visibleInInspector = false;
            vertexOutput.visibleOnFrame = false;
            vertexOutput.target = 1;
            // Connections
            position.output.connectTo(worldPos.vector);
            world.output.connectTo(worldPos.transform);
            worldPos.output.connectTo(worldPosviewProjectionTransform.vector);
            viewProjection.output.connectTo(worldPosviewProjectionTransform.transform);
            worldPosviewProjectionTransform.output.connectTo(vertexOutput.vector);
            AmbientLightColor.output.connectTo(AddAmbienttoDiffuseLight.left);
            DiffuseLightColor.output.connectTo(DiffuseLightCalculation.input);
            normal.output.connectTo(Worldnormal.vector);
            world.output.connectTo(Worldnormal.transform);
            Worldnormal.output.connectTo(N.xyzw);
            N.xyzOut.connectTo(NNormalized.input);
            NNormalized.output.connectTo(NDotLDiffuseLightIntensity.left);
            worldPos.output.connectTo(Lightinformation.worldPosition);
            Lightinformation.direction.connectTo(LNormalized.input);
            LNormalized.output.connectTo(NDotLDiffuseLightIntensity.right);
            NDotLDiffuseLightIntensity.output.connectTo(QuantizedDiffuseLightIntensity.value);
            DiffuseCutoff.output.connectTo(QuantizedDiffuseLightIntensity.edge);
            QuantizedDiffuseLightIntensity.output.connectTo(DiffuseLightCalculation.factor);
            DiffuseLightCalculation.output.connectTo(AddAmbienttoDiffuseLight.right);
            AddAmbienttoDiffuseLight.output.connectTo(AddSpecularDiffuseAmbient.left);
            Color.output.connectTo(CalculateSpecularLight.input);
            NNormalized.output.connectTo(NDotH.left);
            worldPos.output.connectTo(Viewdirection.worldPosition);
            cameraPosition.output.connectTo(Viewdirection.cameraPosition);
            Viewdirection.output.connectTo(VNormalized.input);
            VNormalized.output.connectTo(H.left);
            LNormalized.output.connectTo(H.right);
            H.output.connectTo(HNormalized.input);
            HNormalized.output.connectTo(NDotH.right);
            NDotH.output.connectTo(SpecularFactor.left);
            QuantizedDiffuseLightIntensity.output.connectTo(SpecularFactor.right);
            SpecularFactor.output.connectTo(SpecularIntensity.value);
            Glossiness1.output.connectTo(Glossiness.left);
            Glossiness1.output.connectTo(Glossiness.right);
            Glossiness.output.connectTo(SpecularIntensity.power);
            SpecularIntensity.output.connectTo(QuantizedSpecularIntensity.value);
            SpecularCutoff.output.connectTo(QuantizedSpecularIntensity.edge);
            QuantizedSpecularIntensity.output.connectTo(CalculateSpecularLight.factor);
            CalculateSpecularLight.output.connectTo(AddSpecularDiffuseAmbient.right);
            AddSpecularDiffuseAmbient.output.connectTo(AddRimSpecDiffuseAmbient.left);
            RimLightColor.output.connectTo(Scale.input);
            NNormalized.output.connectTo(NDotV.left);
            VNormalized.output.connectTo(NDotV.right);
            NDotV.output.connectTo(NDotV1.input);
            NDotV1.output.connectTo(RimINtensity.left);
            NDotLDiffuseLightIntensity.output.connectTo(RimFactor.value);
            RimIntensity.output.connectTo(RimFactor.power);
            RimFactor.output.connectTo(RimINtensity.right);
            RimINtensity.output.connectTo(QuantizedRimLightIntensity.value);
            RimCutoff.output.connectTo(QuantizedRimLightIntensity.edge);
            QuantizedRimLightIntensity.output.connectTo(Scale.factor);
            Scale.output.connectTo(AddRimSpecDiffuseAmbient.right);
            AddRimSpecDiffuseAmbient.output.connectTo(MultiplyLightingbyColor.left);
            if (isTexture) {
                // TEXTURE
                uv.output.connectTo(Texture.uv);
                SurfaceTexture.source.connectTo(Texture.source);
                Texture.rgb.connectTo(MultiplyLightingbyColor.right);
            }
            else {
                // COLOR
                SurfaceColor.output.connectTo(MultiplyLightingbyColor.right);
            }
            MultiplyLightingbyColor.output.connectTo(fragmentOutput.rgb);
            // Output nodes
            nodeMaterial.addOutputNode(vertexOutput);
            nodeMaterial.addOutputNode(fragmentOutput);
            nodeMaterial.build();
            return nodeMaterial;
        };
        ToonMaterial.shaderName = "Toon";
        return ToonMaterial;
    }());
    PROJECT.ToonMaterial = ToonMaterial;
})(PROJECT || (PROJECT = {}));
/*
    Auto-generated
*/
var PROJECT;
(function (PROJECT) {
    var AdvancedTextureUi = /** @class */ (function () {
        function AdvancedTextureUi() {
            this.advancedTexture = BABYLON.GUI.AdvancedDynamicTexture.CreateFullscreenUI("advancedTexture");
            this.GEJeEJIbGEAGEFDeaDJbbFCcHIHFHaCd = new BABYLON.GUI.Container("Button");
            this.fCHCbeacaBdDEIFfbcFIIDeAEdEEGHcf = BABYLON.GUI.Button.CreateSimpleButton("BabylonButton", "Button");
            this.FGHHaDdEIICbEcFIIeEAeaHBfDJCcFBd = BABYLON.GUI.Button.CreateSimpleButton("BabylonButton (4)", "Button");
            this.CfbefaJCABaBEFBCJAbbEAHEBCFCaBAC = BABYLON.GUI.Button.CreateSimpleButton("BabylonButton", "Button");
            this.BfcHdEFcCIDbECcbaaHAfJDBAJEeefDJ = BABYLON.GUI.Button.CreateSimpleButton("BabylonButton", "Button");
            this.aCEfFJJddGbIEEdBaAbcFDGDHCBbdbfF = BABYLON.GUI.Button.CreateSimpleButton("BabylonButton (3)", "Button");
            this.cJDJIdCbCFdbEdbfbaFbFCADbdaaabCI = BABYLON.GUI.Button.CreateSimpleButton("BabylonButton", "Button");
            this.HBAEEeIGaJeaEDIAIAJeEJcDJJFbbaCD = BABYLON.GUI.Button.CreateSimpleButton("BabylonButton", "Button");
            this.bCDAdJAFIIAdEIEGIafeHJeIfHafcDHb = BABYLON.GUI.Button.CreateSimpleButton("BabylonButton (5)", "Button");
            this.IcEGDdIcaDABEBacIAacIdBFGcBeBCcA = BABYLON.GUI.Button.CreateSimpleButton("BabylonButton (1)", "Button");
            this.IFfffGaGcJHJECGCaHBebaHJeBfBDEGB = new BABYLON.GUI.Container("BabylonContainer (3)");
            this.CAceBIDCIHdeEDFebGJeCBHabDBJJIAB = BABYLON.GUI.Button.CreateSimpleButton("BabylonButton", "Button");
            this.JGeEIECBAeEbEGHBbDCABBJcBAeBeafe = BABYLON.GUI.Button.CreateImageButton("BabylonButton (2)", "Play !", "https://i.imgur.com/PiDHcKX.jpeg");
            this.bAaFJfdBaBDaEIBCICCFdDbIBCIFeAHD = BABYLON.GUI.Button.CreateImageWithCenterTextButton("BabylonButton", "Button", "https://i.imgur.com/PiDHcKX.jpeg");
            this.HEBdabbJJeEFEEaAbHJCcJdbHDfFfcbG = BABYLON.GUI.Button.CreateSimpleButton("BabylonButton (2)", "Credit");
            this.cGDJAacBAfdJEcJbIBdHdeFDaAeadeIF = BABYLON.GUI.Button.CreateSimpleButton("BabylonButton (1)", "Manuel");
            this.aGCJbJfIGEfcEDBfbAEbAIACDJJdcBad = BABYLON.GUI.Button.CreateSimpleButton("BabylonButton", "Changelog");
            this.abIAJGHJcGCaEDFIbcdHcbHCcGJJeJaF = BABYLON.GUI.Button.CreateSimpleButton("BabylonButton (3)", "Quitter");
            this.HFCbCEdeaGBIEBJFbfedBdCDbaeecCdI = BABYLON.GUI.Button.CreateSimpleButton("BabylonButton (4)", "Jouer");
        }
        AdvancedTextureUi.prototype.create = function () {
            this.advancedTexture.idealWidth = 1920;
            this.GEJeEJIbGEAGEFDeaDJbbFCcHIHFHaCd.isVisible = true;
            this.GEJeEJIbGEAGEFDeaDJbbFCcHIHFHaCd.width = "100%";
            this.GEJeEJIbGEAGEFDeaDJbbFCcHIHFHaCd.height = "100%";
            this.GEJeEJIbGEAGEFDeaDJbbFCcHIHFHaCd.top = "0%";
            this.GEJeEJIbGEAGEFDeaDJbbFCcHIHFHaCd.verticalAlignment = BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER;
            this.GEJeEJIbGEAGEFDeaDJbbFCcHIHFHaCd.left = "0%";
            this.GEJeEJIbGEAGEFDeaDJbbFCcHIHFHaCd.horizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER;
            this.GEJeEJIbGEAGEFDeaDJbbFCcHIHFHaCd.rotation = 0;
            this.GEJeEJIbGEAGEFDeaDJbbFCcHIHFHaCd.scaleX = 1;
            this.GEJeEJIbGEAGEFDeaDJbbFCcHIHFHaCd.scaleY = 1;
            this.GEJeEJIbGEAGEFDeaDJbbFCcHIHFHaCd.isFocusInvisible = false;
            this.GEJeEJIbGEAGEFDeaDJbbFCcHIHFHaCd.alpha = 1;
            this.GEJeEJIbGEAGEFDeaDJbbFCcHIHFHaCd.color = "#FFFFFF";
            this.GEJeEJIbGEAGEFDeaDJbbFCcHIHFHaCd.disabledColor = "#FFFFFF";
            this.GEJeEJIbGEAGEFDeaDJbbFCcHIHFHaCd.disabledColorItem = "#FFFFFF";
            this.GEJeEJIbGEAGEFDeaDJbbFCcHIHFHaCd.highlightColor = "#FFFFFF";
            this.GEJeEJIbGEAGEFDeaDJbbFCcHIHFHaCd.highlightLineWidth = 0;
            this.GEJeEJIbGEAGEFDeaDJbbFCcHIHFHaCd.isHighlighted = false;
            this.GEJeEJIbGEAGEFDeaDJbbFCcHIHFHaCd.linkOffsetX = 0;
            this.GEJeEJIbGEAGEFDeaDJbbFCcHIHFHaCd.linkOffsetY = 0;
            this.GEJeEJIbGEAGEFDeaDJbbFCcHIHFHaCd.paddingBottom = 0;
            this.GEJeEJIbGEAGEFDeaDJbbFCcHIHFHaCd.paddingLeft = 0;
            this.GEJeEJIbGEAGEFDeaDJbbFCcHIHFHaCd.paddingRight = 0;
            this.GEJeEJIbGEAGEFDeaDJbbFCcHIHFHaCd.paddingTop = 0;
            this.GEJeEJIbGEAGEFDeaDJbbFCcHIHFHaCd.zIndex = 0;
            this.GEJeEJIbGEAGEFDeaDJbbFCcHIHFHaCd.shadowBlur = 0;
            this.GEJeEJIbGEAGEFDeaDJbbFCcHIHFHaCd.shadowColor = "#FFFFFF";
            this.GEJeEJIbGEAGEFDeaDJbbFCcHIHFHaCd.shadowOffsetX = 0;
            this.GEJeEJIbGEAGEFDeaDJbbFCcHIHFHaCd.shadowOffsetY = 0;
            this.GEJeEJIbGEAGEFDeaDJbbFCcHIHFHaCd.hoverCursor = "auto";
            this.GEJeEJIbGEAGEFDeaDJbbFCcHIHFHaCd.adaptWidthToChildren = false;
            this.GEJeEJIbGEAGEFDeaDJbbFCcHIHFHaCd.adaptHeightToChildren = false;
            this.GEJeEJIbGEAGEFDeaDJbbFCcHIHFHaCd.background = "#191919";
            this.GEJeEJIbGEAGEFDeaDJbbFCcHIHFHaCd.alpha = 1;
            this.advancedTexture.addControl(this.GEJeEJIbGEAGEFDeaDJbbFCcHIHFHaCd);
            this.fCHCbeacaBdDEIFfbcFIIDeAEdEEGHcf.isVisible = true;
            this.fCHCbeacaBdDEIFfbcFIIDeAEdEEGHcf.width = "8.33%";
            this.fCHCbeacaBdDEIFfbcFIIDeAEdEEGHcf.height = "2.78%";
            this.fCHCbeacaBdDEIFfbcFIIDeAEdEEGHcf.top = "37.5%";
            this.fCHCbeacaBdDEIFfbcFIIDeAEdEEGHcf.verticalAlignment = BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER;
            this.fCHCbeacaBdDEIFfbcFIIDeAEdEEGHcf.left = "-37.5%";
            this.fCHCbeacaBdDEIFfbcFIIDeAEdEEGHcf.horizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER;
            this.fCHCbeacaBdDEIFfbcFIIDeAEdEEGHcf.rotation = 0;
            this.fCHCbeacaBdDEIFfbcFIIDeAEdEEGHcf.scaleX = 1;
            this.fCHCbeacaBdDEIFfbcFIIDeAEdEEGHcf.scaleY = 1;
            this.fCHCbeacaBdDEIFfbcFIIDeAEdEEGHcf.isFocusInvisible = false;
            this.fCHCbeacaBdDEIFfbcFIIDeAEdEEGHcf.alpha = .25;
            this.fCHCbeacaBdDEIFfbcFIIDeAEdEEGHcf.color = "#323232";
            this.fCHCbeacaBdDEIFfbcFIIDeAEdEEGHcf.disabledColor = "#FFFFFF";
            this.fCHCbeacaBdDEIFfbcFIIDeAEdEEGHcf.disabledColorItem = "#FFFFFF";
            this.fCHCbeacaBdDEIFfbcFIIDeAEdEEGHcf.highlightColor = "#F5F5F5";
            this.fCHCbeacaBdDEIFfbcFIIDeAEdEEGHcf.highlightLineWidth = 0;
            this.fCHCbeacaBdDEIFfbcFIIDeAEdEEGHcf.isHighlighted = false;
            this.fCHCbeacaBdDEIFfbcFIIDeAEdEEGHcf.linkOffsetX = 0;
            this.fCHCbeacaBdDEIFfbcFIIDeAEdEEGHcf.linkOffsetY = 0;
            this.fCHCbeacaBdDEIFfbcFIIDeAEdEEGHcf.paddingBottom = 0;
            this.fCHCbeacaBdDEIFfbcFIIDeAEdEEGHcf.paddingLeft = 0;
            this.fCHCbeacaBdDEIFfbcFIIDeAEdEEGHcf.paddingRight = 0;
            this.fCHCbeacaBdDEIFfbcFIIDeAEdEEGHcf.paddingTop = 0;
            this.fCHCbeacaBdDEIFfbcFIIDeAEdEEGHcf.zIndex = 11;
            this.fCHCbeacaBdDEIFfbcFIIDeAEdEEGHcf.shadowBlur = 0;
            this.fCHCbeacaBdDEIFfbcFIIDeAEdEEGHcf.shadowColor = "#FFFFFF";
            this.fCHCbeacaBdDEIFfbcFIIDeAEdEEGHcf.shadowOffsetX = 0;
            this.fCHCbeacaBdDEIFfbcFIIDeAEdEEGHcf.shadowOffsetY = 0;
            this.fCHCbeacaBdDEIFfbcFIIDeAEdEEGHcf.hoverCursor = "auto";
            this.fCHCbeacaBdDEIFfbcFIIDeAEdEEGHcf.adaptWidthToChildren = false;
            this.fCHCbeacaBdDEIFfbcFIIDeAEdEEGHcf.adaptHeightToChildren = false;
            this.fCHCbeacaBdDEIFfbcFIIDeAEdEEGHcf.background = "#FF0000";
            this.fCHCbeacaBdDEIFfbcFIIDeAEdEEGHcf.alpha = .25;
            this.fCHCbeacaBdDEIFfbcFIIDeAEdEEGHcf.cornerRadius = 0;
            this.fCHCbeacaBdDEIFfbcFIIDeAEdEEGHcf.thickness = 0;
            this.GEJeEJIbGEAGEFDeaDJbbFCcHIHFHaCd.addControl(this.fCHCbeacaBdDEIFfbcFIIDeAEdEEGHcf);
            this.FGHHaDdEIICbEcFIIeEAeaHBfDJCcFBd.isVisible = true;
            this.FGHHaDdEIICbEcFIIeEAeaHBfDJCcFBd.width = "371.95px";
            this.FGHHaDdEIICbEcFIIeEAeaHBfDJCcFBd.height = "69.74px";
            this.FGHHaDdEIICbEcFIIeEAeaHBfDJCcFBd.top = "135px";
            this.FGHHaDdEIICbEcFIIeEAeaHBfDJCcFBd.verticalAlignment = BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER;
            this.FGHHaDdEIICbEcFIIeEAeaHBfDJCcFBd.left = "240px";
            this.FGHHaDdEIICbEcFIIeEAeaHBfDJCcFBd.horizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER;
            this.FGHHaDdEIICbEcFIIeEAeaHBfDJCcFBd.rotation = 0;
            this.FGHHaDdEIICbEcFIIeEAeaHBfDJCcFBd.scaleX = 1;
            this.FGHHaDdEIICbEcFIIeEAeaHBfDJCcFBd.scaleY = 1;
            this.FGHHaDdEIICbEcFIIeEAeaHBfDJCcFBd.isFocusInvisible = false;
            this.FGHHaDdEIICbEcFIIeEAeaHBfDJCcFBd.alpha = 1;
            this.FGHHaDdEIICbEcFIIeEAeaHBfDJCcFBd.color = "#323232";
            this.FGHHaDdEIICbEcFIIeEAeaHBfDJCcFBd.disabledColor = "#FFFFFF";
            this.FGHHaDdEIICbEcFIIeEAeaHBfDJCcFBd.disabledColorItem = "#FFFFFF";
            this.FGHHaDdEIICbEcFIIeEAeaHBfDJCcFBd.highlightColor = "#F5F5F5";
            this.FGHHaDdEIICbEcFIIeEAeaHBfDJCcFBd.highlightLineWidth = 0;
            this.FGHHaDdEIICbEcFIIeEAeaHBfDJCcFBd.isHighlighted = false;
            this.FGHHaDdEIICbEcFIIeEAeaHBfDJCcFBd.linkOffsetX = 0;
            this.FGHHaDdEIICbEcFIIeEAeaHBfDJCcFBd.linkOffsetY = 0;
            this.FGHHaDdEIICbEcFIIeEAeaHBfDJCcFBd.paddingBottom = 0;
            this.FGHHaDdEIICbEcFIIeEAeaHBfDJCcFBd.paddingLeft = 0;
            this.FGHHaDdEIICbEcFIIeEAeaHBfDJCcFBd.paddingRight = 0;
            this.FGHHaDdEIICbEcFIIeEAeaHBfDJCcFBd.paddingTop = 0;
            this.FGHHaDdEIICbEcFIIeEAeaHBfDJCcFBd.zIndex = 10;
            this.FGHHaDdEIICbEcFIIeEAeaHBfDJCcFBd.shadowBlur = 0;
            this.FGHHaDdEIICbEcFIIeEAeaHBfDJCcFBd.shadowColor = "#FFFFFF";
            this.FGHHaDdEIICbEcFIIeEAeaHBfDJCcFBd.shadowOffsetX = 0;
            this.FGHHaDdEIICbEcFIIeEAeaHBfDJCcFBd.shadowOffsetY = 0;
            this.FGHHaDdEIICbEcFIIeEAeaHBfDJCcFBd.hoverCursor = "auto";
            this.FGHHaDdEIICbEcFIIeEAeaHBfDJCcFBd.adaptWidthToChildren = false;
            this.FGHHaDdEIICbEcFIIeEAeaHBfDJCcFBd.adaptHeightToChildren = false;
            this.FGHHaDdEIICbEcFIIeEAeaHBfDJCcFBd.background = "#51C01D";
            this.FGHHaDdEIICbEcFIIeEAeaHBfDJCcFBd.alpha = 1;
            this.FGHHaDdEIICbEcFIIeEAeaHBfDJCcFBd.cornerRadius = 10;
            this.FGHHaDdEIICbEcFIIeEAeaHBfDJCcFBd.thickness = 10;
            this.GEJeEJIbGEAGEFDeaDJbbFCcHIHFHaCd.addControl(this.FGHHaDdEIICbEcFIIeEAeaHBfDJCcFBd);
            this.CfbefaJCABaBEFBCJAbbEAHEBCFCaBAC.isVisible = true;
            this.CfbefaJCABaBEFBCJAbbEAHEBCFCaBAC.width = "19.37%";
            this.CfbefaJCABaBEFBCJAbbEAHEBCFCaBAC.height = "6.46%";
            this.CfbefaJCABaBEFBCJAbbEAHEBCFCaBAC.top = "12.5%";
            this.CfbefaJCABaBEFBCJAbbEAHEBCFCaBAC.verticalAlignment = BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER;
            this.CfbefaJCABaBEFBCJAbbEAHEBCFCaBAC.left = "-12.5%";
            this.CfbefaJCABaBEFBCJAbbEAHEBCFCaBAC.horizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER;
            this.CfbefaJCABaBEFBCJAbbEAHEBCFCaBAC.rotation = 0;
            this.CfbefaJCABaBEFBCJAbbEAHEBCFCaBAC.scaleX = 1;
            this.CfbefaJCABaBEFBCJAbbEAHEBCFCaBAC.scaleY = 1;
            this.CfbefaJCABaBEFBCJAbbEAHEBCFCaBAC.isFocusInvisible = false;
            this.CfbefaJCABaBEFBCJAbbEAHEBCFCaBAC.alpha = 1;
            this.CfbefaJCABaBEFBCJAbbEAHEBCFCaBAC.color = "#2200FF";
            this.CfbefaJCABaBEFBCJAbbEAHEBCFCaBAC.disabledColor = "#FFFFFF";
            this.CfbefaJCABaBEFBCJAbbEAHEBCFCaBAC.disabledColorItem = "#FFFFFF";
            this.CfbefaJCABaBEFBCJAbbEAHEBCFCaBAC.highlightColor = "#F5F5F5";
            this.CfbefaJCABaBEFBCJAbbEAHEBCFCaBAC.highlightLineWidth = 0;
            this.CfbefaJCABaBEFBCJAbbEAHEBCFCaBAC.isHighlighted = false;
            this.CfbefaJCABaBEFBCJAbbEAHEBCFCaBAC.linkOffsetX = 0;
            this.CfbefaJCABaBEFBCJAbbEAHEBCFCaBAC.linkOffsetY = 0;
            this.CfbefaJCABaBEFBCJAbbEAHEBCFCaBAC.paddingBottom = 0;
            this.CfbefaJCABaBEFBCJAbbEAHEBCFCaBAC.paddingLeft = 0;
            this.CfbefaJCABaBEFBCJAbbEAHEBCFCaBAC.paddingRight = 0;
            this.CfbefaJCABaBEFBCJAbbEAHEBCFCaBAC.paddingTop = 0;
            this.CfbefaJCABaBEFBCJAbbEAHEBCFCaBAC.zIndex = 9;
            this.CfbefaJCABaBEFBCJAbbEAHEBCFCaBAC.shadowBlur = 0;
            this.CfbefaJCABaBEFBCJAbbEAHEBCFCaBAC.shadowColor = "#FFFFFF";
            this.CfbefaJCABaBEFBCJAbbEAHEBCFCaBAC.shadowOffsetX = 0;
            this.CfbefaJCABaBEFBCJAbbEAHEBCFCaBAC.shadowOffsetY = 0;
            this.CfbefaJCABaBEFBCJAbbEAHEBCFCaBAC.hoverCursor = "auto";
            this.CfbefaJCABaBEFBCJAbbEAHEBCFCaBAC.adaptWidthToChildren = false;
            this.CfbefaJCABaBEFBCJAbbEAHEBCFCaBAC.adaptHeightToChildren = false;
            this.CfbefaJCABaBEFBCJAbbEAHEBCFCaBAC.background = "#51BACA";
            this.CfbefaJCABaBEFBCJAbbEAHEBCFCaBAC.alpha = 1;
            this.CfbefaJCABaBEFBCJAbbEAHEBCFCaBAC.cornerRadius = 0;
            this.CfbefaJCABaBEFBCJAbbEAHEBCFCaBAC.thickness = 0;
            this.GEJeEJIbGEAGEFDeaDJbbFCcHIHFHaCd.addControl(this.CfbefaJCABaBEFBCJAbbEAHEBCFCaBAC);
            this.BfcHdEFcCIDbECcbaaHAfJDBAJEeefDJ.isVisible = true;
            this.BfcHdEFcCIDbECcbaaHAfJDBAJEeefDJ.width = "8.33%";
            this.BfcHdEFcCIDbECcbaaHAfJDBAJEeefDJ.height = "2.78%";
            this.BfcHdEFcCIDbECcbaaHAfJDBAJEeefDJ.top = "12.5%";
            this.BfcHdEFcCIDbECcbaaHAfJDBAJEeefDJ.verticalAlignment = BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER;
            this.BfcHdEFcCIDbECcbaaHAfJDBAJEeefDJ.left = "-37.5%";
            this.BfcHdEFcCIDbECcbaaHAfJDBAJEeefDJ.horizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER;
            this.BfcHdEFcCIDbECcbaaHAfJDBAJEeefDJ.rotation = 0;
            this.BfcHdEFcCIDbECcbaaHAfJDBAJEeefDJ.scaleX = 1;
            this.BfcHdEFcCIDbECcbaaHAfJDBAJEeefDJ.scaleY = 1;
            this.BfcHdEFcCIDbECcbaaHAfJDBAJEeefDJ.isFocusInvisible = false;
            this.BfcHdEFcCIDbECcbaaHAfJDBAJEeefDJ.alpha = .5;
            this.BfcHdEFcCIDbECcbaaHAfJDBAJEeefDJ.color = "#323232";
            this.BfcHdEFcCIDbECcbaaHAfJDBAJEeefDJ.disabledColor = "#FFFFFF";
            this.BfcHdEFcCIDbECcbaaHAfJDBAJEeefDJ.disabledColorItem = "#FFFFFF";
            this.BfcHdEFcCIDbECcbaaHAfJDBAJEeefDJ.highlightColor = "#F5F5F5";
            this.BfcHdEFcCIDbECcbaaHAfJDBAJEeefDJ.highlightLineWidth = 0;
            this.BfcHdEFcCIDbECcbaaHAfJDBAJEeefDJ.isHighlighted = false;
            this.BfcHdEFcCIDbECcbaaHAfJDBAJEeefDJ.linkOffsetX = 0;
            this.BfcHdEFcCIDbECcbaaHAfJDBAJEeefDJ.linkOffsetY = 0;
            this.BfcHdEFcCIDbECcbaaHAfJDBAJEeefDJ.paddingBottom = 0;
            this.BfcHdEFcCIDbECcbaaHAfJDBAJEeefDJ.paddingLeft = 0;
            this.BfcHdEFcCIDbECcbaaHAfJDBAJEeefDJ.paddingRight = 0;
            this.BfcHdEFcCIDbECcbaaHAfJDBAJEeefDJ.paddingTop = 0;
            this.BfcHdEFcCIDbECcbaaHAfJDBAJEeefDJ.zIndex = 8;
            this.BfcHdEFcCIDbECcbaaHAfJDBAJEeefDJ.shadowBlur = 0;
            this.BfcHdEFcCIDbECcbaaHAfJDBAJEeefDJ.shadowColor = "#FFFFFF";
            this.BfcHdEFcCIDbECcbaaHAfJDBAJEeefDJ.shadowOffsetX = 0;
            this.BfcHdEFcCIDbECcbaaHAfJDBAJEeefDJ.shadowOffsetY = 0;
            this.BfcHdEFcCIDbECcbaaHAfJDBAJEeefDJ.hoverCursor = "auto";
            this.BfcHdEFcCIDbECcbaaHAfJDBAJEeefDJ.adaptWidthToChildren = false;
            this.BfcHdEFcCIDbECcbaaHAfJDBAJEeefDJ.adaptHeightToChildren = false;
            this.BfcHdEFcCIDbECcbaaHAfJDBAJEeefDJ.background = "#FF0000";
            this.BfcHdEFcCIDbECcbaaHAfJDBAJEeefDJ.alpha = .5;
            this.BfcHdEFcCIDbECcbaaHAfJDBAJEeefDJ.cornerRadius = 0;
            this.BfcHdEFcCIDbECcbaaHAfJDBAJEeefDJ.thickness = 0;
            this.GEJeEJIbGEAGEFDeaDJbbFCcHIHFHaCd.addControl(this.BfcHdEFcCIDbECcbaaHAfJDBAJEeefDJ);
            this.aCEfFJJddGbIEEdBaAbcFDGDHCBbdbfF.isVisible = true;
            this.aCEfFJJddGbIEEdBaAbcFDGDHCBbdbfF.width = "371.95px";
            this.aCEfFJJddGbIEEdBaAbcFDGDHCBbdbfF.height = "69.74px";
            this.aCEfFJJddGbIEEdBaAbcFDGDHCBbdbfF.top = "-135px";
            this.aCEfFJJddGbIEEdBaAbcFDGDHCBbdbfF.verticalAlignment = BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER;
            this.aCEfFJJddGbIEEdBaAbcFDGDHCBbdbfF.left = "240px";
            this.aCEfFJJddGbIEEdBaAbcFDGDHCBbdbfF.horizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER;
            this.aCEfFJJddGbIEEdBaAbcFDGDHCBbdbfF.rotation = 0;
            this.aCEfFJJddGbIEEdBaAbcFDGDHCBbdbfF.scaleX = 1;
            this.aCEfFJJddGbIEEdBaAbcFDGDHCBbdbfF.scaleY = 1;
            this.aCEfFJJddGbIEEdBaAbcFDGDHCBbdbfF.isFocusInvisible = false;
            this.aCEfFJJddGbIEEdBaAbcFDGDHCBbdbfF.alpha = 1;
            this.aCEfFJJddGbIEEdBaAbcFDGDHCBbdbfF.color = "#323232";
            this.aCEfFJJddGbIEEdBaAbcFDGDHCBbdbfF.disabledColor = "#FFFFFF";
            this.aCEfFJJddGbIEEdBaAbcFDGDHCBbdbfF.disabledColorItem = "#FFFFFF";
            this.aCEfFJJddGbIEEdBaAbcFDGDHCBbdbfF.highlightColor = "#F5F5F5";
            this.aCEfFJJddGbIEEdBaAbcFDGDHCBbdbfF.highlightLineWidth = 0;
            this.aCEfFJJddGbIEEdBaAbcFDGDHCBbdbfF.isHighlighted = false;
            this.aCEfFJJddGbIEEdBaAbcFDGDHCBbdbfF.linkOffsetX = 0;
            this.aCEfFJJddGbIEEdBaAbcFDGDHCBbdbfF.linkOffsetY = 0;
            this.aCEfFJJddGbIEEdBaAbcFDGDHCBbdbfF.paddingBottom = 0;
            this.aCEfFJJddGbIEEdBaAbcFDGDHCBbdbfF.paddingLeft = 0;
            this.aCEfFJJddGbIEEdBaAbcFDGDHCBbdbfF.paddingRight = 0;
            this.aCEfFJJddGbIEEdBaAbcFDGDHCBbdbfF.paddingTop = 0;
            this.aCEfFJJddGbIEEdBaAbcFDGDHCBbdbfF.zIndex = 7;
            this.aCEfFJJddGbIEEdBaAbcFDGDHCBbdbfF.shadowBlur = 10;
            this.aCEfFJJddGbIEEdBaAbcFDGDHCBbdbfF.shadowColor = "#FF0000";
            this.aCEfFJJddGbIEEdBaAbcFDGDHCBbdbfF.shadowOffsetX = -10;
            this.aCEfFJJddGbIEEdBaAbcFDGDHCBbdbfF.shadowOffsetY = 10;
            this.aCEfFJJddGbIEEdBaAbcFDGDHCBbdbfF.hoverCursor = "auto";
            this.aCEfFJJddGbIEEdBaAbcFDGDHCBbdbfF.adaptWidthToChildren = false;
            this.aCEfFJJddGbIEEdBaAbcFDGDHCBbdbfF.adaptHeightToChildren = false;
            this.aCEfFJJddGbIEEdBaAbcFDGDHCBbdbfF.background = "#B95B1B";
            this.aCEfFJJddGbIEEdBaAbcFDGDHCBbdbfF.alpha = 1;
            this.aCEfFJJddGbIEEdBaAbcFDGDHCBbdbfF.cornerRadius = 0;
            this.aCEfFJJddGbIEEdBaAbcFDGDHCBbdbfF.thickness = 0;
            this.GEJeEJIbGEAGEFDeaDJbbFCcHIHFHaCd.addControl(this.aCEfFJJddGbIEEdBaAbcFDGDHCBbdbfF);
            this.cJDJIdCbCFdbEdbfbaFbFCADbdaaabCI.isVisible = true;
            this.cJDJIdCbCFdbEdbfbaFbFCADbdaaabCI.width = "19.37%";
            this.cJDJIdCbCFdbEdbfbaFbFCADbdaaabCI.height = "6.46%";
            this.cJDJIdCbCFdbEdbfbaFbFCADbdaaabCI.top = "-12.5%";
            this.cJDJIdCbCFdbEdbfbaFbFCADbdaaabCI.verticalAlignment = BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER;
            this.cJDJIdCbCFdbEdbfbaFbFCADbdaaabCI.left = "-12.5%";
            this.cJDJIdCbCFdbEdbfbaFbFCADbdaaabCI.horizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER;
            this.cJDJIdCbCFdbEdbfbaFbFCADbdaaabCI.rotation = 0;
            this.cJDJIdCbCFdbEdbfbaFbFCADbdaaabCI.scaleX = 1;
            this.cJDJIdCbCFdbEdbfbaFbFCADbdaaabCI.scaleY = 1;
            this.cJDJIdCbCFdbEdbfbaFbFCADbdaaabCI.isFocusInvisible = false;
            this.cJDJIdCbCFdbEdbfbaFbFCADbdaaabCI.alpha = 1;
            this.cJDJIdCbCFdbEdbfbaFbFCADbdaaabCI.color = "#323232";
            this.cJDJIdCbCFdbEdbfbaFbFCADbdaaabCI.disabledColor = "#FFFFFF";
            this.cJDJIdCbCFdbEdbfbaFbFCADbdaaabCI.disabledColorItem = "#FFFFFF";
            this.cJDJIdCbCFdbEdbfbaFbFCADbdaaabCI.highlightColor = "#F5F5F5";
            this.cJDJIdCbCFdbEdbfbaFbFCADbdaaabCI.highlightLineWidth = 0;
            this.cJDJIdCbCFdbEdbfbaFbFCADbdaaabCI.isHighlighted = false;
            this.cJDJIdCbCFdbEdbfbaFbFCADbdaaabCI.linkOffsetX = 0;
            this.cJDJIdCbCFdbEdbfbaFbFCADbdaaabCI.linkOffsetY = 0;
            this.cJDJIdCbCFdbEdbfbaFbFCADbdaaabCI.paddingBottom = 0;
            this.cJDJIdCbCFdbEdbfbaFbFCADbdaaabCI.paddingLeft = 0;
            this.cJDJIdCbCFdbEdbfbaFbFCADbdaaabCI.paddingRight = 0;
            this.cJDJIdCbCFdbEdbfbaFbFCADbdaaabCI.paddingTop = 0;
            this.cJDJIdCbCFdbEdbfbaFbFCADbdaaabCI.zIndex = 6;
            this.cJDJIdCbCFdbEdbfbaFbFCADbdaaabCI.shadowBlur = 0;
            this.cJDJIdCbCFdbEdbfbaFbFCADbdaaabCI.shadowColor = "#FFFFFF";
            this.cJDJIdCbCFdbEdbfbaFbFCADbdaaabCI.shadowOffsetX = 0;
            this.cJDJIdCbCFdbEdbfbaFbFCADbdaaabCI.shadowOffsetY = 0;
            this.cJDJIdCbCFdbEdbfbaFbFCADbdaaabCI.hoverCursor = "auto";
            this.cJDJIdCbCFdbEdbfbaFbFCADbdaaabCI.adaptWidthToChildren = false;
            this.cJDJIdCbCFdbEdbfbaFbFCADbdaaabCI.adaptHeightToChildren = false;
            this.cJDJIdCbCFdbEdbfbaFbFCADbdaaabCI.background = "#854EAB";
            this.cJDJIdCbCFdbEdbfbaFbFCADbdaaabCI.alpha = 1;
            this.cJDJIdCbCFdbEdbfbaFbFCADbdaaabCI.cornerRadius = 0;
            this.cJDJIdCbCFdbEdbfbaFbFCADbdaaabCI.thickness = 0;
            this.GEJeEJIbGEAGEFDeaDJbbFCcHIHFHaCd.addControl(this.cJDJIdCbCFdbEdbfbaFbFCADbdaaabCI);
            this.HBAEEeIGaJeaEDIAIAJeEJcDJJFbbaCD.isVisible = true;
            this.HBAEEeIGaJeaEDIAIAJeEJcDJJFbbaCD.width = "8.33%";
            this.HBAEEeIGaJeaEDIAIAJeEJcDJJFbbaCD.height = "2.78%";
            this.HBAEEeIGaJeaEDIAIAJeEJcDJJFbbaCD.top = "-12.5%";
            this.HBAEEeIGaJeaEDIAIAJeEJcDJJFbbaCD.verticalAlignment = BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER;
            this.HBAEEeIGaJeaEDIAIAJeEJcDJJFbbaCD.left = "-37.5%";
            this.HBAEEeIGaJeaEDIAIAJeEJcDJJFbbaCD.horizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER;
            this.HBAEEeIGaJeaEDIAIAJeEJcDJJFbbaCD.rotation = 0;
            this.HBAEEeIGaJeaEDIAIAJeEJcDJJFbbaCD.scaleX = 1;
            this.HBAEEeIGaJeaEDIAIAJeEJcDJJFbbaCD.scaleY = 1;
            this.HBAEEeIGaJeaEDIAIAJeEJcDJJFbbaCD.isFocusInvisible = false;
            this.HBAEEeIGaJeaEDIAIAJeEJcDJJFbbaCD.alpha = 1;
            this.HBAEEeIGaJeaEDIAIAJeEJcDJJFbbaCD.color = "#323232";
            this.HBAEEeIGaJeaEDIAIAJeEJcDJJFbbaCD.disabledColor = "#FFFFFF";
            this.HBAEEeIGaJeaEDIAIAJeEJcDJJFbbaCD.disabledColorItem = "#FFFFFF";
            this.HBAEEeIGaJeaEDIAIAJeEJcDJJFbbaCD.highlightColor = "#F5F5F5";
            this.HBAEEeIGaJeaEDIAIAJeEJcDJJFbbaCD.highlightLineWidth = 0;
            this.HBAEEeIGaJeaEDIAIAJeEJcDJJFbbaCD.isHighlighted = false;
            this.HBAEEeIGaJeaEDIAIAJeEJcDJJFbbaCD.linkOffsetX = 0;
            this.HBAEEeIGaJeaEDIAIAJeEJcDJJFbbaCD.linkOffsetY = 0;
            this.HBAEEeIGaJeaEDIAIAJeEJcDJJFbbaCD.paddingBottom = 0;
            this.HBAEEeIGaJeaEDIAIAJeEJcDJJFbbaCD.paddingLeft = 0;
            this.HBAEEeIGaJeaEDIAIAJeEJcDJJFbbaCD.paddingRight = 0;
            this.HBAEEeIGaJeaEDIAIAJeEJcDJJFbbaCD.paddingTop = 0;
            this.HBAEEeIGaJeaEDIAIAJeEJcDJJFbbaCD.zIndex = 5;
            this.HBAEEeIGaJeaEDIAIAJeEJcDJJFbbaCD.shadowBlur = 0;
            this.HBAEEeIGaJeaEDIAIAJeEJcDJJFbbaCD.shadowColor = "#FFFFFF";
            this.HBAEEeIGaJeaEDIAIAJeEJcDJJFbbaCD.shadowOffsetX = 0;
            this.HBAEEeIGaJeaEDIAIAJeEJcDJJFbbaCD.shadowOffsetY = 0;
            this.HBAEEeIGaJeaEDIAIAJeEJcDJJFbbaCD.hoverCursor = "auto";
            this.HBAEEeIGaJeaEDIAIAJeEJcDJJFbbaCD.adaptWidthToChildren = false;
            this.HBAEEeIGaJeaEDIAIAJeEJcDJJFbbaCD.adaptHeightToChildren = false;
            this.HBAEEeIGaJeaEDIAIAJeEJcDJJFbbaCD.background = "#FF0000";
            this.HBAEEeIGaJeaEDIAIAJeEJcDJJFbbaCD.alpha = 1;
            this.HBAEEeIGaJeaEDIAIAJeEJcDJJFbbaCD.cornerRadius = 0;
            this.HBAEEeIGaJeaEDIAIAJeEJcDJJFbbaCD.thickness = 0;
            this.GEJeEJIbGEAGEFDeaDJbbFCcHIHFHaCd.addControl(this.HBAEEeIGaJeaEDIAIAJeEJcDJJFbbaCD);
            this.bCDAdJAFIIAdEIEGIafeHJeIfHafcDHb.isVisible = true;
            this.bCDAdJAFIIAdEIEGIafeHJeIfHafcDHb.width = "371.95px";
            this.bCDAdJAFIIAdEIEGIafeHJeIfHafcDHb.height = "69.74px";
            this.bCDAdJAFIIAdEIEGIafeHJeIfHafcDHb.top = "405px";
            this.bCDAdJAFIIAdEIEGIafeHJeIfHafcDHb.verticalAlignment = BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER;
            this.bCDAdJAFIIAdEIEGIafeHJeIfHafcDHb.left = "240px";
            this.bCDAdJAFIIAdEIEGIafeHJeIfHafcDHb.horizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER;
            this.bCDAdJAFIIAdEIEGIafeHJeIfHafcDHb.rotation = 0;
            this.bCDAdJAFIIAdEIEGIafeHJeIfHafcDHb.scaleX = 1;
            this.bCDAdJAFIIAdEIEGIafeHJeIfHafcDHb.scaleY = 1;
            this.bCDAdJAFIIAdEIEGIafeHJeIfHafcDHb.isFocusInvisible = false;
            this.bCDAdJAFIIAdEIEGIafeHJeIfHafcDHb.alpha = 1;
            this.bCDAdJAFIIAdEIEGIafeHJeIfHafcDHb.color = "#323232";
            this.bCDAdJAFIIAdEIEGIafeHJeIfHafcDHb.disabledColor = "#FFFFFF";
            this.bCDAdJAFIIAdEIEGIafeHJeIfHafcDHb.disabledColorItem = "#FFFFFF";
            this.bCDAdJAFIIAdEIEGIafeHJeIfHafcDHb.highlightColor = "#F5F5F5";
            this.bCDAdJAFIIAdEIEGIafeHJeIfHafcDHb.highlightLineWidth = 10;
            this.bCDAdJAFIIAdEIEGIafeHJeIfHafcDHb.isHighlighted = true;
            this.bCDAdJAFIIAdEIEGIafeHJeIfHafcDHb.linkOffsetX = 0;
            this.bCDAdJAFIIAdEIEGIafeHJeIfHafcDHb.linkOffsetY = 0;
            this.bCDAdJAFIIAdEIEGIafeHJeIfHafcDHb.paddingBottom = 0;
            this.bCDAdJAFIIAdEIEGIafeHJeIfHafcDHb.paddingLeft = 0;
            this.bCDAdJAFIIAdEIEGIafeHJeIfHafcDHb.paddingRight = 0;
            this.bCDAdJAFIIAdEIEGIafeHJeIfHafcDHb.paddingTop = 0;
            this.bCDAdJAFIIAdEIEGIafeHJeIfHafcDHb.zIndex = 12;
            this.bCDAdJAFIIAdEIEGIafeHJeIfHafcDHb.shadowBlur = 0;
            this.bCDAdJAFIIAdEIEGIafeHJeIfHafcDHb.shadowColor = "#FFFFFF";
            this.bCDAdJAFIIAdEIEGIafeHJeIfHafcDHb.shadowOffsetX = 0;
            this.bCDAdJAFIIAdEIEGIafeHJeIfHafcDHb.shadowOffsetY = 0;
            this.bCDAdJAFIIAdEIEGIafeHJeIfHafcDHb.hoverCursor = "auto";
            this.bCDAdJAFIIAdEIEGIafeHJeIfHafcDHb.adaptWidthToChildren = false;
            this.bCDAdJAFIIAdEIEGIafeHJeIfHafcDHb.adaptHeightToChildren = false;
            this.bCDAdJAFIIAdEIEGIafeHJeIfHafcDHb.background = "#AA1FCA";
            this.bCDAdJAFIIAdEIEGIafeHJeIfHafcDHb.alpha = 1;
            this.bCDAdJAFIIAdEIEGIafeHJeIfHafcDHb.cornerRadius = 10;
            this.bCDAdJAFIIAdEIEGIafeHJeIfHafcDHb.thickness = 10;
            this.GEJeEJIbGEAGEFDeaDJbbFCcHIHFHaCd.addControl(this.bCDAdJAFIIAdEIEGIafeHJeIfHafcDHb);
            this.IcEGDdIcaDABEBacIAacIdBFGcBeBCcA.isVisible = true;
            this.IcEGDdIcaDABEBacIAacIdBFGcBeBCcA.width = "19.37%";
            this.IcEGDdIcaDABEBacIAacIdBFGcBeBCcA.height = "6.46%";
            this.IcEGDdIcaDABEBacIAacIdBFGcBeBCcA.top = "37.5%";
            this.IcEGDdIcaDABEBacIAacIdBFGcBeBCcA.verticalAlignment = BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER;
            this.IcEGDdIcaDABEBacIAacIdBFGcBeBCcA.left = "-12.5%";
            this.IcEGDdIcaDABEBacIAacIdBFGcBeBCcA.horizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER;
            this.IcEGDdIcaDABEBacIAacIdBFGcBeBCcA.rotation = 0;
            this.IcEGDdIcaDABEBacIAacIdBFGcBeBCcA.scaleX = 1;
            this.IcEGDdIcaDABEBacIAacIdBFGcBeBCcA.scaleY = 1;
            this.IcEGDdIcaDABEBacIAacIdBFGcBeBCcA.isFocusInvisible = false;
            this.IcEGDdIcaDABEBacIAacIdBFGcBeBCcA.alpha = 1;
            this.IcEGDdIcaDABEBacIAacIdBFGcBeBCcA.color = "#000000";
            this.IcEGDdIcaDABEBacIAacIdBFGcBeBCcA.disabledColor = "#FFFFFF";
            this.IcEGDdIcaDABEBacIAacIdBFGcBeBCcA.disabledColorItem = "#FFFFFF";
            this.IcEGDdIcaDABEBacIAacIdBFGcBeBCcA.highlightColor = "#F5F5F5";
            this.IcEGDdIcaDABEBacIAacIdBFGcBeBCcA.highlightLineWidth = 0;
            this.IcEGDdIcaDABEBacIAacIdBFGcBeBCcA.isHighlighted = false;
            this.IcEGDdIcaDABEBacIAacIdBFGcBeBCcA.linkOffsetX = 0;
            this.IcEGDdIcaDABEBacIAacIdBFGcBeBCcA.linkOffsetY = 0;
            this.IcEGDdIcaDABEBacIAacIdBFGcBeBCcA.paddingBottom = 0;
            this.IcEGDdIcaDABEBacIAacIdBFGcBeBCcA.paddingLeft = 0;
            this.IcEGDdIcaDABEBacIAacIdBFGcBeBCcA.paddingRight = 0;
            this.IcEGDdIcaDABEBacIAacIdBFGcBeBCcA.paddingTop = 0;
            this.IcEGDdIcaDABEBacIAacIdBFGcBeBCcA.zIndex = 13;
            this.IcEGDdIcaDABEBacIAacIdBFGcBeBCcA.shadowBlur = 0;
            this.IcEGDdIcaDABEBacIAacIdBFGcBeBCcA.shadowColor = "#FFFFFF";
            this.IcEGDdIcaDABEBacIAacIdBFGcBeBCcA.shadowOffsetX = 0;
            this.IcEGDdIcaDABEBacIAacIdBFGcBeBCcA.shadowOffsetY = 0;
            this.IcEGDdIcaDABEBacIAacIdBFGcBeBCcA.hoverCursor = "auto";
            this.IcEGDdIcaDABEBacIAacIdBFGcBeBCcA.adaptWidthToChildren = false;
            this.IcEGDdIcaDABEBacIAacIdBFGcBeBCcA.adaptHeightToChildren = false;
            this.IcEGDdIcaDABEBacIAacIdBFGcBeBCcA.background = "#FFE900";
            this.IcEGDdIcaDABEBacIAacIdBFGcBeBCcA.alpha = 1;
            this.IcEGDdIcaDABEBacIAacIdBFGcBeBCcA.cornerRadius = 0;
            this.IcEGDdIcaDABEBacIAacIdBFGcBeBCcA.thickness = 0;
            this.GEJeEJIbGEAGEFDeaDJbbFCcHIHFHaCd.addControl(this.IcEGDdIcaDABEBacIAacIdBFGcBeBCcA);
            this.IFfffGaGcJHJECGCaHBebaHJeBfBDEGB.isVisible = true;
            this.IFfffGaGcJHJECGCaHBebaHJeBfBDEGB.width = "480px";
            this.IFfffGaGcJHJECGCaHBebaHJeBfBDEGB.height = "100%";
            this.IFfffGaGcJHJECGCaHBebaHJeBfBDEGB.top = "0%";
            this.IFfffGaGcJHJECGCaHBebaHJeBfBDEGB.verticalAlignment = BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER;
            this.IFfffGaGcJHJECGCaHBebaHJeBfBDEGB.left = "0px";
            this.IFfffGaGcJHJECGCaHBebaHJeBfBDEGB.horizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_RIGHT;
            this.IFfffGaGcJHJECGCaHBebaHJeBfBDEGB.rotation = 0;
            this.IFfffGaGcJHJECGCaHBebaHJeBfBDEGB.scaleX = 1;
            this.IFfffGaGcJHJECGCaHBebaHJeBfBDEGB.scaleY = 1;
            this.IFfffGaGcJHJECGCaHBebaHJeBfBDEGB.isFocusInvisible = false;
            this.IFfffGaGcJHJECGCaHBebaHJeBfBDEGB.alpha = 0;
            this.IFfffGaGcJHJECGCaHBebaHJeBfBDEGB.color = "#FFFFFF";
            this.IFfffGaGcJHJECGCaHBebaHJeBfBDEGB.disabledColor = "#FFFFFF";
            this.IFfffGaGcJHJECGCaHBebaHJeBfBDEGB.disabledColorItem = "#FFFFFF";
            this.IFfffGaGcJHJECGCaHBebaHJeBfBDEGB.highlightColor = "#FFFFFF";
            this.IFfffGaGcJHJECGCaHBebaHJeBfBDEGB.highlightLineWidth = 0;
            this.IFfffGaGcJHJECGCaHBebaHJeBfBDEGB.isHighlighted = false;
            this.IFfffGaGcJHJECGCaHBebaHJeBfBDEGB.linkOffsetX = 0;
            this.IFfffGaGcJHJECGCaHBebaHJeBfBDEGB.linkOffsetY = 0;
            this.IFfffGaGcJHJECGCaHBebaHJeBfBDEGB.paddingBottom = 0;
            this.IFfffGaGcJHJECGCaHBebaHJeBfBDEGB.paddingLeft = 0;
            this.IFfffGaGcJHJECGCaHBebaHJeBfBDEGB.paddingRight = 0;
            this.IFfffGaGcJHJECGCaHBebaHJeBfBDEGB.paddingTop = 0;
            this.IFfffGaGcJHJECGCaHBebaHJeBfBDEGB.zIndex = 4;
            this.IFfffGaGcJHJECGCaHBebaHJeBfBDEGB.shadowBlur = 0;
            this.IFfffGaGcJHJECGCaHBebaHJeBfBDEGB.shadowColor = "#FFFFFF";
            this.IFfffGaGcJHJECGCaHBebaHJeBfBDEGB.shadowOffsetX = 0;
            this.IFfffGaGcJHJECGCaHBebaHJeBfBDEGB.shadowOffsetY = 0;
            this.IFfffGaGcJHJECGCaHBebaHJeBfBDEGB.hoverCursor = "auto";
            this.IFfffGaGcJHJECGCaHBebaHJeBfBDEGB.adaptWidthToChildren = false;
            this.IFfffGaGcJHJECGCaHBebaHJeBfBDEGB.adaptHeightToChildren = false;
            this.IFfffGaGcJHJECGCaHBebaHJeBfBDEGB.background = "#FFFFFF";
            this.IFfffGaGcJHJECGCaHBebaHJeBfBDEGB.alpha = 0;
            this.GEJeEJIbGEAGEFDeaDJbbFCcHIHFHaCd.addControl(this.IFfffGaGcJHJECGCaHBebaHJeBfBDEGB);
            this.CAceBIDCIHdeEDFebGJeCBHabDBJJIAB.isVisible = true;
            this.CAceBIDCIHdeEDFebGJeCBHabDBJJIAB.width = "8.33%";
            this.CAceBIDCIHdeEDFebGJeCBHabDBJJIAB.height = "2.78%";
            this.CAceBIDCIHdeEDFebGJeCBHabDBJJIAB.top = "-37.5%";
            this.CAceBIDCIHdeEDFebGJeCBHabDBJJIAB.verticalAlignment = BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER;
            this.CAceBIDCIHdeEDFebGJeCBHabDBJJIAB.left = "-37.5%";
            this.CAceBIDCIHdeEDFebGJeCBHabDBJJIAB.horizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER;
            this.CAceBIDCIHdeEDFebGJeCBHabDBJJIAB.rotation = 0;
            this.CAceBIDCIHdeEDFebGJeCBHabDBJJIAB.scaleX = 1;
            this.CAceBIDCIHdeEDFebGJeCBHabDBJJIAB.scaleY = 1;
            this.CAceBIDCIHdeEDFebGJeCBHabDBJJIAB.isFocusInvisible = false;
            this.CAceBIDCIHdeEDFebGJeCBHabDBJJIAB.alpha = 1;
            this.CAceBIDCIHdeEDFebGJeCBHabDBJJIAB.color = "#323232";
            this.CAceBIDCIHdeEDFebGJeCBHabDBJJIAB.disabledColor = "#FFFFFF";
            this.CAceBIDCIHdeEDFebGJeCBHabDBJJIAB.disabledColorItem = "#FFFFFF";
            this.CAceBIDCIHdeEDFebGJeCBHabDBJJIAB.highlightColor = "#F5F5F5";
            this.CAceBIDCIHdeEDFebGJeCBHabDBJJIAB.highlightLineWidth = 0;
            this.CAceBIDCIHdeEDFebGJeCBHabDBJJIAB.isHighlighted = false;
            this.CAceBIDCIHdeEDFebGJeCBHabDBJJIAB.linkOffsetX = 0;
            this.CAceBIDCIHdeEDFebGJeCBHabDBJJIAB.linkOffsetY = 0;
            this.CAceBIDCIHdeEDFebGJeCBHabDBJJIAB.paddingBottom = 0;
            this.CAceBIDCIHdeEDFebGJeCBHabDBJJIAB.paddingLeft = 0;
            this.CAceBIDCIHdeEDFebGJeCBHabDBJJIAB.paddingRight = 0;
            this.CAceBIDCIHdeEDFebGJeCBHabDBJJIAB.paddingTop = 0;
            this.CAceBIDCIHdeEDFebGJeCBHabDBJJIAB.zIndex = 3;
            this.CAceBIDCIHdeEDFebGJeCBHabDBJJIAB.shadowBlur = 0;
            this.CAceBIDCIHdeEDFebGJeCBHabDBJJIAB.shadowColor = "#FFFFFF";
            this.CAceBIDCIHdeEDFebGJeCBHabDBJJIAB.shadowOffsetX = 0;
            this.CAceBIDCIHdeEDFebGJeCBHabDBJJIAB.shadowOffsetY = 0;
            this.CAceBIDCIHdeEDFebGJeCBHabDBJJIAB.hoverCursor = "auto";
            this.CAceBIDCIHdeEDFebGJeCBHabDBJJIAB.adaptWidthToChildren = false;
            this.CAceBIDCIHdeEDFebGJeCBHabDBJJIAB.adaptHeightToChildren = false;
            this.CAceBIDCIHdeEDFebGJeCBHabDBJJIAB.background = "#FFFFFF";
            this.CAceBIDCIHdeEDFebGJeCBHabDBJJIAB.alpha = 1;
            this.CAceBIDCIHdeEDFebGJeCBHabDBJJIAB.cornerRadius = 0;
            this.CAceBIDCIHdeEDFebGJeCBHabDBJJIAB.thickness = 0;
            this.GEJeEJIbGEAGEFDeaDJbbFCcHIHFHaCd.addControl(this.CAceBIDCIHdeEDFebGJeCBHabDBJJIAB);
            this.JGeEIECBAeEbEGHBbDCABBJcBAeBeafe.isVisible = true;
            this.JGeEIECBAeEbEGHBbDCABBJcBAeBeafe.width = "19.37%";
            this.JGeEIECBAeEbEGHBbDCABBJcBAeBeafe.height = "6.46%";
            this.JGeEIECBAeEbEGHBbDCABBJcBAeBeafe.top = "-37.5%";
            this.JGeEIECBAeEbEGHBbDCABBJcBAeBeafe.verticalAlignment = BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER;
            this.JGeEIECBAeEbEGHBbDCABBJcBAeBeafe.left = "12.5%";
            this.JGeEIECBAeEbEGHBbDCABBJcBAeBeafe.horizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER;
            this.JGeEIECBAeEbEGHBbDCABBJcBAeBeafe.rotation = 0;
            this.JGeEIECBAeEbEGHBbDCABBJcBAeBeafe.scaleX = 1;
            this.JGeEIECBAeEbEGHBbDCABBJcBAeBeafe.scaleY = 1;
            this.JGeEIECBAeEbEGHBbDCABBJcBAeBeafe.isFocusInvisible = true;
            this.JGeEIECBAeEbEGHBbDCABBJcBAeBeafe.alpha = 1;
            this.JGeEIECBAeEbEGHBbDCABBJcBAeBeafe.color = "#FFFFFF";
            this.JGeEIECBAeEbEGHBbDCABBJcBAeBeafe.disabledColor = "#FFFFFF";
            this.JGeEIECBAeEbEGHBbDCABBJcBAeBeafe.disabledColorItem = "#FFFFFF";
            this.JGeEIECBAeEbEGHBbDCABBJcBAeBeafe.highlightColor = "#F5F5F5";
            this.JGeEIECBAeEbEGHBbDCABBJcBAeBeafe.highlightLineWidth = 0;
            this.JGeEIECBAeEbEGHBbDCABBJcBAeBeafe.isHighlighted = false;
            this.JGeEIECBAeEbEGHBbDCABBJcBAeBeafe.linkOffsetX = 0;
            this.JGeEIECBAeEbEGHBbDCABBJcBAeBeafe.linkOffsetY = 0;
            this.JGeEIECBAeEbEGHBbDCABBJcBAeBeafe.paddingBottom = 0;
            this.JGeEIECBAeEbEGHBbDCABBJcBAeBeafe.paddingLeft = 0;
            this.JGeEIECBAeEbEGHBbDCABBJcBAeBeafe.paddingRight = 0;
            this.JGeEIECBAeEbEGHBbDCABBJcBAeBeafe.paddingTop = 0;
            this.JGeEIECBAeEbEGHBbDCABBJcBAeBeafe.zIndex = 2;
            this.JGeEIECBAeEbEGHBbDCABBJcBAeBeafe.shadowBlur = 0;
            this.JGeEIECBAeEbEGHBbDCABBJcBAeBeafe.shadowColor = "#FFFFFF";
            this.JGeEIECBAeEbEGHBbDCABBJcBAeBeafe.shadowOffsetX = 0;
            this.JGeEIECBAeEbEGHBbDCABBJcBAeBeafe.shadowOffsetY = 0;
            this.JGeEIECBAeEbEGHBbDCABBJcBAeBeafe.hoverCursor = "auto";
            this.JGeEIECBAeEbEGHBbDCABBJcBAeBeafe.adaptWidthToChildren = false;
            this.JGeEIECBAeEbEGHBbDCABBJcBAeBeafe.adaptHeightToChildren = false;
            this.JGeEIECBAeEbEGHBbDCABBJcBAeBeafe.background = "#FF0027";
            this.JGeEIECBAeEbEGHBbDCABBJcBAeBeafe.alpha = 1;
            this.JGeEIECBAeEbEGHBbDCABBJcBAeBeafe.cornerRadius = 2;
            this.JGeEIECBAeEbEGHBbDCABBJcBAeBeafe.thickness = 2;
            this.GEJeEJIbGEAGEFDeaDJbbFCcHIHFHaCd.addControl(this.JGeEIECBAeEbEGHBbDCABBJcBAeBeafe);
            this.bAaFJfdBaBDaEIBCICCFdDbIBCIFeAHD.isVisible = true;
            this.bAaFJfdBaBDaEIBCICCFdDbIBCIFeAHD.width = "19.37%";
            this.bAaFJfdBaBDaEIBCICCFdDbIBCIFeAHD.height = "6.46%";
            this.bAaFJfdBaBDaEIBCICCFdDbIBCIFeAHD.top = "-37.5%";
            this.bAaFJfdBaBDaEIBCICCFdDbIBCIFeAHD.verticalAlignment = BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER;
            this.bAaFJfdBaBDaEIBCICCFdDbIBCIFeAHD.left = "-12.5%";
            this.bAaFJfdBaBDaEIBCICCFdDbIBCIFeAHD.horizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER;
            this.bAaFJfdBaBDaEIBCICCFdDbIBCIFeAHD.rotation = 0;
            this.bAaFJfdBaBDaEIBCICCFdDbIBCIFeAHD.scaleX = 1;
            this.bAaFJfdBaBDaEIBCICCFdDbIBCIFeAHD.scaleY = 1;
            this.bAaFJfdBaBDaEIBCICCFdDbIBCIFeAHD.isFocusInvisible = false;
            this.bAaFJfdBaBDaEIBCICCFdDbIBCIFeAHD.alpha = 1;
            this.bAaFJfdBaBDaEIBCICCFdDbIBCIFeAHD.color = "#323232";
            this.bAaFJfdBaBDaEIBCICCFdDbIBCIFeAHD.disabledColor = "#FFFFFF";
            this.bAaFJfdBaBDaEIBCICCFdDbIBCIFeAHD.disabledColorItem = "#FFFFFF";
            this.bAaFJfdBaBDaEIBCICCFdDbIBCIFeAHD.highlightColor = "#F5F5F5";
            this.bAaFJfdBaBDaEIBCICCFdDbIBCIFeAHD.highlightLineWidth = 0;
            this.bAaFJfdBaBDaEIBCICCFdDbIBCIFeAHD.isHighlighted = false;
            this.bAaFJfdBaBDaEIBCICCFdDbIBCIFeAHD.linkOffsetX = 0;
            this.bAaFJfdBaBDaEIBCICCFdDbIBCIFeAHD.linkOffsetY = 0;
            this.bAaFJfdBaBDaEIBCICCFdDbIBCIFeAHD.paddingBottom = 0;
            this.bAaFJfdBaBDaEIBCICCFdDbIBCIFeAHD.paddingLeft = 0;
            this.bAaFJfdBaBDaEIBCICCFdDbIBCIFeAHD.paddingRight = 0;
            this.bAaFJfdBaBDaEIBCICCFdDbIBCIFeAHD.paddingTop = 0;
            this.bAaFJfdBaBDaEIBCICCFdDbIBCIFeAHD.zIndex = 1;
            this.bAaFJfdBaBDaEIBCICCFdDbIBCIFeAHD.shadowBlur = 0;
            this.bAaFJfdBaBDaEIBCICCFdDbIBCIFeAHD.shadowColor = "#FFFFFF";
            this.bAaFJfdBaBDaEIBCICCFdDbIBCIFeAHD.shadowOffsetX = 0;
            this.bAaFJfdBaBDaEIBCICCFdDbIBCIFeAHD.shadowOffsetY = 0;
            this.bAaFJfdBaBDaEIBCICCFdDbIBCIFeAHD.hoverCursor = "auto";
            this.bAaFJfdBaBDaEIBCICCFdDbIBCIFeAHD.adaptWidthToChildren = false;
            this.bAaFJfdBaBDaEIBCICCFdDbIBCIFeAHD.adaptHeightToChildren = false;
            this.bAaFJfdBaBDaEIBCICCFdDbIBCIFeAHD.background = "#AA984E";
            this.bAaFJfdBaBDaEIBCICCFdDbIBCIFeAHD.alpha = 1;
            this.bAaFJfdBaBDaEIBCICCFdDbIBCIFeAHD.cornerRadius = 0;
            this.bAaFJfdBaBDaEIBCICCFdDbIBCIFeAHD.thickness = 0;
            this.GEJeEJIbGEAGEFDeaDJbbFCcHIHFHaCd.addControl(this.bAaFJfdBaBDaEIBCICCFdDbIBCIFeAHD);
            this.HEBdabbJJeEFEEaAbHJCcJdbHDfFfcbG.isVisible = true;
            this.HEBdabbJJeEFEEaAbHJCcJdbHDfFfcbG.width = "480px";
            this.HEBdabbJJeEFEEaAbHJCcJdbHDfFfcbG.height = "30px";
            this.HEBdabbJJeEFEEaAbHJCcJdbHDfFfcbG.top = "60px";
            this.HEBdabbJJeEFEEaAbHJCcJdbHDfFfcbG.verticalAlignment = BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER;
            this.HEBdabbJJeEFEEaAbHJCcJdbHDfFfcbG.left = "0px";
            this.HEBdabbJJeEFEEaAbHJCcJdbHDfFfcbG.horizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER;
            this.HEBdabbJJeEFEEaAbHJCcJdbHDfFfcbG.rotation = 0;
            this.HEBdabbJJeEFEEaAbHJCcJdbHDfFfcbG.scaleX = 1;
            this.HEBdabbJJeEFEEaAbHJCcJdbHDfFfcbG.scaleY = 1;
            this.HEBdabbJJeEFEEaAbHJCcJdbHDfFfcbG.isFocusInvisible = false;
            this.HEBdabbJJeEFEEaAbHJCcJdbHDfFfcbG.alpha = 1;
            this.HEBdabbJJeEFEEaAbHJCcJdbHDfFfcbG.color = "#FFFFFF";
            this.HEBdabbJJeEFEEaAbHJCcJdbHDfFfcbG.disabledColor = "#FFFFFF";
            this.HEBdabbJJeEFEEaAbHJCcJdbHDfFfcbG.disabledColorItem = "#FFFFFF";
            this.HEBdabbJJeEFEEaAbHJCcJdbHDfFfcbG.highlightColor = "#F5F5F5";
            this.HEBdabbJJeEFEEaAbHJCcJdbHDfFfcbG.highlightLineWidth = 0;
            this.HEBdabbJJeEFEEaAbHJCcJdbHDfFfcbG.isHighlighted = false;
            this.HEBdabbJJeEFEEaAbHJCcJdbHDfFfcbG.linkOffsetX = 0;
            this.HEBdabbJJeEFEEaAbHJCcJdbHDfFfcbG.linkOffsetY = 0;
            this.HEBdabbJJeEFEEaAbHJCcJdbHDfFfcbG.paddingBottom = 0;
            this.HEBdabbJJeEFEEaAbHJCcJdbHDfFfcbG.paddingLeft = 0;
            this.HEBdabbJJeEFEEaAbHJCcJdbHDfFfcbG.paddingRight = 0;
            this.HEBdabbJJeEFEEaAbHJCcJdbHDfFfcbG.paddingTop = 0;
            this.HEBdabbJJeEFEEaAbHJCcJdbHDfFfcbG.zIndex = 19;
            this.HEBdabbJJeEFEEaAbHJCcJdbHDfFfcbG.shadowBlur = 0;
            this.HEBdabbJJeEFEEaAbHJCcJdbHDfFfcbG.shadowColor = "#FFFFFF";
            this.HEBdabbJJeEFEEaAbHJCcJdbHDfFfcbG.shadowOffsetX = 0;
            this.HEBdabbJJeEFEEaAbHJCcJdbHDfFfcbG.shadowOffsetY = 0;
            this.HEBdabbJJeEFEEaAbHJCcJdbHDfFfcbG.hoverCursor = "auto";
            this.HEBdabbJJeEFEEaAbHJCcJdbHDfFfcbG.adaptWidthToChildren = false;
            this.HEBdabbJJeEFEEaAbHJCcJdbHDfFfcbG.adaptHeightToChildren = false;
            this.HEBdabbJJeEFEEaAbHJCcJdbHDfFfcbG.background = "#383838";
            this.HEBdabbJJeEFEEaAbHJCcJdbHDfFfcbG.alpha = 1;
            this.HEBdabbJJeEFEEaAbHJCcJdbHDfFfcbG.cornerRadius = 0;
            this.HEBdabbJJeEFEEaAbHJCcJdbHDfFfcbG.thickness = 2;
            this.IFfffGaGcJHJECGCaHBebaHJeBfBDEGB.addControl(this.HEBdabbJJeEFEEaAbHJCcJdbHDfFfcbG);
            this.cGDJAacBAfdJEcJbIBdHdeFDaAeadeIF.isVisible = true;
            this.cGDJAacBAfdJEcJbIBdHdeFDaAeadeIF.width = "480px";
            this.cGDJAacBAfdJEcJbIBdHdeFDaAeadeIF.height = "30px";
            this.cGDJAacBAfdJEcJbIBdHdeFDaAeadeIF.top = "-60px";
            this.cGDJAacBAfdJEcJbIBdHdeFDaAeadeIF.verticalAlignment = BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER;
            this.cGDJAacBAfdJEcJbIBdHdeFDaAeadeIF.left = "0px";
            this.cGDJAacBAfdJEcJbIBdHdeFDaAeadeIF.horizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER;
            this.cGDJAacBAfdJEcJbIBdHdeFDaAeadeIF.rotation = 0;
            this.cGDJAacBAfdJEcJbIBdHdeFDaAeadeIF.scaleX = 1;
            this.cGDJAacBAfdJEcJbIBdHdeFDaAeadeIF.scaleY = 1;
            this.cGDJAacBAfdJEcJbIBdHdeFDaAeadeIF.isFocusInvisible = false;
            this.cGDJAacBAfdJEcJbIBdHdeFDaAeadeIF.alpha = 1;
            this.cGDJAacBAfdJEcJbIBdHdeFDaAeadeIF.color = "#FFFFFF";
            this.cGDJAacBAfdJEcJbIBdHdeFDaAeadeIF.disabledColor = "#FFFFFF";
            this.cGDJAacBAfdJEcJbIBdHdeFDaAeadeIF.disabledColorItem = "#FFFFFF";
            this.cGDJAacBAfdJEcJbIBdHdeFDaAeadeIF.highlightColor = "#F5F5F5";
            this.cGDJAacBAfdJEcJbIBdHdeFDaAeadeIF.highlightLineWidth = 0;
            this.cGDJAacBAfdJEcJbIBdHdeFDaAeadeIF.isHighlighted = false;
            this.cGDJAacBAfdJEcJbIBdHdeFDaAeadeIF.linkOffsetX = 0;
            this.cGDJAacBAfdJEcJbIBdHdeFDaAeadeIF.linkOffsetY = 0;
            this.cGDJAacBAfdJEcJbIBdHdeFDaAeadeIF.paddingBottom = 0;
            this.cGDJAacBAfdJEcJbIBdHdeFDaAeadeIF.paddingLeft = 0;
            this.cGDJAacBAfdJEcJbIBdHdeFDaAeadeIF.paddingRight = 0;
            this.cGDJAacBAfdJEcJbIBdHdeFDaAeadeIF.paddingTop = 0;
            this.cGDJAacBAfdJEcJbIBdHdeFDaAeadeIF.zIndex = 18;
            this.cGDJAacBAfdJEcJbIBdHdeFDaAeadeIF.shadowBlur = 0;
            this.cGDJAacBAfdJEcJbIBdHdeFDaAeadeIF.shadowColor = "#FFFFFF";
            this.cGDJAacBAfdJEcJbIBdHdeFDaAeadeIF.shadowOffsetX = 0;
            this.cGDJAacBAfdJEcJbIBdHdeFDaAeadeIF.shadowOffsetY = 0;
            this.cGDJAacBAfdJEcJbIBdHdeFDaAeadeIF.hoverCursor = "auto";
            this.cGDJAacBAfdJEcJbIBdHdeFDaAeadeIF.adaptWidthToChildren = false;
            this.cGDJAacBAfdJEcJbIBdHdeFDaAeadeIF.adaptHeightToChildren = false;
            this.cGDJAacBAfdJEcJbIBdHdeFDaAeadeIF.background = "#383838";
            this.cGDJAacBAfdJEcJbIBdHdeFDaAeadeIF.alpha = 1;
            this.cGDJAacBAfdJEcJbIBdHdeFDaAeadeIF.cornerRadius = 0;
            this.cGDJAacBAfdJEcJbIBdHdeFDaAeadeIF.thickness = 2;
            this.IFfffGaGcJHJECGCaHBebaHJeBfBDEGB.addControl(this.cGDJAacBAfdJEcJbIBdHdeFDaAeadeIF);
            this.aGCJbJfIGEfcEDBfbAEbAIACDJJdcBad.isVisible = true;
            this.aGCJbJfIGEfcEDBfbAEbAIACDJJdcBad.width = "480px";
            this.aGCJbJfIGEfcEDBfbAEbAIACDJJdcBad.height = "30px";
            this.aGCJbJfIGEfcEDBfbAEbAIACDJJdcBad.top = "0px";
            this.aGCJbJfIGEfcEDBfbAEbAIACDJJdcBad.verticalAlignment = BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER;
            this.aGCJbJfIGEfcEDBfbAEbAIACDJJdcBad.left = "0px";
            this.aGCJbJfIGEfcEDBfbAEbAIACDJJdcBad.horizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER;
            this.aGCJbJfIGEfcEDBfbAEbAIACDJJdcBad.rotation = 0;
            this.aGCJbJfIGEfcEDBfbAEbAIACDJJdcBad.scaleX = 1;
            this.aGCJbJfIGEfcEDBfbAEbAIACDJJdcBad.scaleY = 1;
            this.aGCJbJfIGEfcEDBfbAEbAIACDJJdcBad.isFocusInvisible = false;
            this.aGCJbJfIGEfcEDBfbAEbAIACDJJdcBad.alpha = 1;
            this.aGCJbJfIGEfcEDBfbAEbAIACDJJdcBad.color = "#FFFFFF";
            this.aGCJbJfIGEfcEDBfbAEbAIACDJJdcBad.disabledColor = "#FFFFFF";
            this.aGCJbJfIGEfcEDBfbAEbAIACDJJdcBad.disabledColorItem = "#FFFFFF";
            this.aGCJbJfIGEfcEDBfbAEbAIACDJJdcBad.highlightColor = "#F5F5F5";
            this.aGCJbJfIGEfcEDBfbAEbAIACDJJdcBad.highlightLineWidth = 0;
            this.aGCJbJfIGEfcEDBfbAEbAIACDJJdcBad.isHighlighted = false;
            this.aGCJbJfIGEfcEDBfbAEbAIACDJJdcBad.linkOffsetX = 0;
            this.aGCJbJfIGEfcEDBfbAEbAIACDJJdcBad.linkOffsetY = 0;
            this.aGCJbJfIGEfcEDBfbAEbAIACDJJdcBad.paddingBottom = 0;
            this.aGCJbJfIGEfcEDBfbAEbAIACDJJdcBad.paddingLeft = 0;
            this.aGCJbJfIGEfcEDBfbAEbAIACDJJdcBad.paddingRight = 0;
            this.aGCJbJfIGEfcEDBfbAEbAIACDJJdcBad.paddingTop = 0;
            this.aGCJbJfIGEfcEDBfbAEbAIACDJJdcBad.zIndex = 17;
            this.aGCJbJfIGEfcEDBfbAEbAIACDJJdcBad.shadowBlur = 0;
            this.aGCJbJfIGEfcEDBfbAEbAIACDJJdcBad.shadowColor = "#FFFFFF";
            this.aGCJbJfIGEfcEDBfbAEbAIACDJJdcBad.shadowOffsetX = 0;
            this.aGCJbJfIGEfcEDBfbAEbAIACDJJdcBad.shadowOffsetY = 0;
            this.aGCJbJfIGEfcEDBfbAEbAIACDJJdcBad.hoverCursor = "auto";
            this.aGCJbJfIGEfcEDBfbAEbAIACDJJdcBad.adaptWidthToChildren = false;
            this.aGCJbJfIGEfcEDBfbAEbAIACDJJdcBad.adaptHeightToChildren = false;
            this.aGCJbJfIGEfcEDBfbAEbAIACDJJdcBad.background = "#383838";
            this.aGCJbJfIGEfcEDBfbAEbAIACDJJdcBad.alpha = 1;
            this.aGCJbJfIGEfcEDBfbAEbAIACDJJdcBad.cornerRadius = 0;
            this.aGCJbJfIGEfcEDBfbAEbAIACDJJdcBad.thickness = 2;
            this.IFfffGaGcJHJECGCaHBebaHJeBfBDEGB.addControl(this.aGCJbJfIGEfcEDBfbAEbAIACDJJdcBad);
            this.abIAJGHJcGCaEDFIbcdHcbHCcGJJeJaF.isVisible = true;
            this.abIAJGHJcGCaEDFIbcdHcbHCcGJJeJaF.width = "480px";
            this.abIAJGHJcGCaEDFIbcdHcbHCcGJJeJaF.height = "30px";
            this.abIAJGHJcGCaEDFIbcdHcbHCcGJJeJaF.top = "120px";
            this.abIAJGHJcGCaEDFIbcdHcbHCcGJJeJaF.verticalAlignment = BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER;
            this.abIAJGHJcGCaEDFIbcdHcbHCcGJJeJaF.left = "0px";
            this.abIAJGHJcGCaEDFIbcdHcbHCcGJJeJaF.horizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER;
            this.abIAJGHJcGCaEDFIbcdHcbHCcGJJeJaF.rotation = 0;
            this.abIAJGHJcGCaEDFIbcdHcbHCcGJJeJaF.scaleX = 1;
            this.abIAJGHJcGCaEDFIbcdHcbHCcGJJeJaF.scaleY = 1;
            this.abIAJGHJcGCaEDFIbcdHcbHCcGJJeJaF.isFocusInvisible = false;
            this.abIAJGHJcGCaEDFIbcdHcbHCcGJJeJaF.alpha = 1;
            this.abIAJGHJcGCaEDFIbcdHcbHCcGJJeJaF.color = "#FFFFFF";
            this.abIAJGHJcGCaEDFIbcdHcbHCcGJJeJaF.disabledColor = "#FFFFFF";
            this.abIAJGHJcGCaEDFIbcdHcbHCcGJJeJaF.disabledColorItem = "#FFFFFF";
            this.abIAJGHJcGCaEDFIbcdHcbHCcGJJeJaF.highlightColor = "#F5F5F5";
            this.abIAJGHJcGCaEDFIbcdHcbHCcGJJeJaF.highlightLineWidth = 0;
            this.abIAJGHJcGCaEDFIbcdHcbHCcGJJeJaF.isHighlighted = false;
            this.abIAJGHJcGCaEDFIbcdHcbHCcGJJeJaF.linkOffsetX = 0;
            this.abIAJGHJcGCaEDFIbcdHcbHCcGJJeJaF.linkOffsetY = 0;
            this.abIAJGHJcGCaEDFIbcdHcbHCcGJJeJaF.paddingBottom = 0;
            this.abIAJGHJcGCaEDFIbcdHcbHCcGJJeJaF.paddingLeft = 0;
            this.abIAJGHJcGCaEDFIbcdHcbHCcGJJeJaF.paddingRight = 0;
            this.abIAJGHJcGCaEDFIbcdHcbHCcGJJeJaF.paddingTop = 0;
            this.abIAJGHJcGCaEDFIbcdHcbHCcGJJeJaF.zIndex = 20;
            this.abIAJGHJcGCaEDFIbcdHcbHCcGJJeJaF.shadowBlur = 0;
            this.abIAJGHJcGCaEDFIbcdHcbHCcGJJeJaF.shadowColor = "#FFFFFF";
            this.abIAJGHJcGCaEDFIbcdHcbHCcGJJeJaF.shadowOffsetX = 0;
            this.abIAJGHJcGCaEDFIbcdHcbHCcGJJeJaF.shadowOffsetY = 0;
            this.abIAJGHJcGCaEDFIbcdHcbHCcGJJeJaF.hoverCursor = "auto";
            this.abIAJGHJcGCaEDFIbcdHcbHCcGJJeJaF.adaptWidthToChildren = false;
            this.abIAJGHJcGCaEDFIbcdHcbHCcGJJeJaF.adaptHeightToChildren = false;
            this.abIAJGHJcGCaEDFIbcdHcbHCcGJJeJaF.background = "#383838";
            this.abIAJGHJcGCaEDFIbcdHcbHCcGJJeJaF.alpha = 1;
            this.abIAJGHJcGCaEDFIbcdHcbHCcGJJeJaF.cornerRadius = 0;
            this.abIAJGHJcGCaEDFIbcdHcbHCcGJJeJaF.thickness = 2;
            this.IFfffGaGcJHJECGCaHBebaHJeBfBDEGB.addControl(this.abIAJGHJcGCaEDFIbcdHcbHCcGJJeJaF);
            this.HFCbCEdeaGBIEBJFbfedBdCDbaeecCdI.isVisible = true;
            this.HFCbCEdeaGBIEBJFbfedBdCDbaeecCdI.width = "480px";
            this.HFCbCEdeaGBIEBJFbfedBdCDbaeecCdI.height = "30px";
            this.HFCbCEdeaGBIEBJFbfedBdCDbaeecCdI.top = "-120px";
            this.HFCbCEdeaGBIEBJFbfedBdCDbaeecCdI.verticalAlignment = BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER;
            this.HFCbCEdeaGBIEBJFbfedBdCDbaeecCdI.left = "0px";
            this.HFCbCEdeaGBIEBJFbfedBdCDbaeecCdI.horizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER;
            this.HFCbCEdeaGBIEBJFbfedBdCDbaeecCdI.rotation = 0;
            this.HFCbCEdeaGBIEBJFbfedBdCDbaeecCdI.scaleX = 1;
            this.HFCbCEdeaGBIEBJFbfedBdCDbaeecCdI.scaleY = 1;
            this.HFCbCEdeaGBIEBJFbfedBdCDbaeecCdI.isFocusInvisible = false;
            this.HFCbCEdeaGBIEBJFbfedBdCDbaeecCdI.alpha = 1;
            this.HFCbCEdeaGBIEBJFbfedBdCDbaeecCdI.color = "#FFFFFF";
            this.HFCbCEdeaGBIEBJFbfedBdCDbaeecCdI.disabledColor = "#FFFFFF";
            this.HFCbCEdeaGBIEBJFbfedBdCDbaeecCdI.disabledColorItem = "#FFFFFF";
            this.HFCbCEdeaGBIEBJFbfedBdCDbaeecCdI.highlightColor = "#F5F5F5";
            this.HFCbCEdeaGBIEBJFbfedBdCDbaeecCdI.highlightLineWidth = 0;
            this.HFCbCEdeaGBIEBJFbfedBdCDbaeecCdI.isHighlighted = false;
            this.HFCbCEdeaGBIEBJFbfedBdCDbaeecCdI.linkOffsetX = 0;
            this.HFCbCEdeaGBIEBJFbfedBdCDbaeecCdI.linkOffsetY = 0;
            this.HFCbCEdeaGBIEBJFbfedBdCDbaeecCdI.paddingBottom = 0;
            this.HFCbCEdeaGBIEBJFbfedBdCDbaeecCdI.paddingLeft = 0;
            this.HFCbCEdeaGBIEBJFbfedBdCDbaeecCdI.paddingRight = 0;
            this.HFCbCEdeaGBIEBJFbfedBdCDbaeecCdI.paddingTop = 0;
            this.HFCbCEdeaGBIEBJFbfedBdCDbaeecCdI.zIndex = 21;
            this.HFCbCEdeaGBIEBJFbfedBdCDbaeecCdI.shadowBlur = 0;
            this.HFCbCEdeaGBIEBJFbfedBdCDbaeecCdI.shadowColor = "#FFFFFF";
            this.HFCbCEdeaGBIEBJFbfedBdCDbaeecCdI.shadowOffsetX = 0;
            this.HFCbCEdeaGBIEBJFbfedBdCDbaeecCdI.shadowOffsetY = 0;
            this.HFCbCEdeaGBIEBJFbfedBdCDbaeecCdI.hoverCursor = "auto";
            this.HFCbCEdeaGBIEBJFbfedBdCDbaeecCdI.adaptWidthToChildren = false;
            this.HFCbCEdeaGBIEBJFbfedBdCDbaeecCdI.adaptHeightToChildren = false;
            this.HFCbCEdeaGBIEBJFbfedBdCDbaeecCdI.background = "#383838";
            this.HFCbCEdeaGBIEBJFbfedBdCDbaeecCdI.alpha = 1;
            this.HFCbCEdeaGBIEBJFbfedBdCDbaeecCdI.cornerRadius = 0;
            this.HFCbCEdeaGBIEBJFbfedBdCDbaeecCdI.thickness = 2;
            this.IFfffGaGcJHJECGCaHBebaHJeBfBDEGB.addControl(this.HFCbCEdeaGBIEBJFbfedBdCDbaeecCdI);
            var fCHCbeacaBdDEIFfbcFIIDeAEdEEGHcf_style = this.advancedTexture.createStyle();
            fCHCbeacaBdDEIFfbcFIIDeAEdEEGHcf_style.fontSize = 24;
            fCHCbeacaBdDEIFfbcFIIDeAEdEEGHcf_style.fontStyle = "normal";
            fCHCbeacaBdDEIFfbcFIIDeAEdEEGHcf_style.fontFamily = "arial";
            fCHCbeacaBdDEIFfbcFIIDeAEdEEGHcf_style.fontWeight = "normal";
            this.fCHCbeacaBdDEIFfbcFIIDeAEdEEGHcf.style = fCHCbeacaBdDEIFfbcFIIDeAEdEEGHcf_style;
            var FGHHaDdEIICbEcFIIeEAeaHBfDJCcFBd_style = this.advancedTexture.createStyle();
            FGHHaDdEIICbEcFIIeEAeaHBfDJCcFBd_style.fontSize = 24;
            FGHHaDdEIICbEcFIIeEAeaHBfDJCcFBd_style.fontStyle = "normal";
            FGHHaDdEIICbEcFIIeEAeaHBfDJCcFBd_style.fontFamily = "arial";
            FGHHaDdEIICbEcFIIeEAeaHBfDJCcFBd_style.fontWeight = "normal";
            this.FGHHaDdEIICbEcFIIeEAeaHBfDJCcFBd.style = FGHHaDdEIICbEcFIIeEAeaHBfDJCcFBd_style;
            var CfbefaJCABaBEFBCJAbbEAHEBCFCaBAC_style = this.advancedTexture.createStyle();
            CfbefaJCABaBEFBCJAbbEAHEBCFCaBAC_style.fontSize = 62.4;
            CfbefaJCABaBEFBCJAbbEAHEBCFCaBAC_style.fontStyle = "normal";
            CfbefaJCABaBEFBCJAbbEAHEBCFCaBAC_style.fontFamily = "arial";
            CfbefaJCABaBEFBCJAbbEAHEBCFCaBAC_style.fontWeight = "normal";
            this.CfbefaJCABaBEFBCJAbbEAHEBCFCaBAC.style = CfbefaJCABaBEFBCJAbbEAHEBCFCaBAC_style;
            var BfcHdEFcCIDbECcbaaHAfJDBAJEeefDJ_style = this.advancedTexture.createStyle();
            BfcHdEFcCIDbECcbaaHAfJDBAJEeefDJ_style.fontSize = 24;
            BfcHdEFcCIDbECcbaaHAfJDBAJEeefDJ_style.fontStyle = "normal";
            BfcHdEFcCIDbECcbaaHAfJDBAJEeefDJ_style.fontFamily = "arial";
            BfcHdEFcCIDbECcbaaHAfJDBAJEeefDJ_style.fontWeight = "normal";
            this.BfcHdEFcCIDbECcbaaHAfJDBAJEeefDJ.style = BfcHdEFcCIDbECcbaaHAfJDBAJEeefDJ_style;
            var aCEfFJJddGbIEEdBaAbcFDGDHCBbdbfF_style = this.advancedTexture.createStyle();
            aCEfFJJddGbIEEdBaAbcFDGDHCBbdbfF_style.fontSize = 24;
            aCEfFJJddGbIEEdBaAbcFDGDHCBbdbfF_style.fontStyle = "normal";
            aCEfFJJddGbIEEdBaAbcFDGDHCBbdbfF_style.fontFamily = "arial";
            aCEfFJJddGbIEEdBaAbcFDGDHCBbdbfF_style.fontWeight = "normal";
            this.aCEfFJJddGbIEEdBaAbcFDGDHCBbdbfF.style = aCEfFJJddGbIEEdBaAbcFDGDHCBbdbfF_style;
            var cJDJIdCbCFdbEdbfbaFbFCADbdaaabCI_style = this.advancedTexture.createStyle();
            cJDJIdCbCFdbEdbfbaFbFCADbdaaabCI_style.fontSize = 24;
            cJDJIdCbCFdbEdbfbaFbFCADbdaaabCI_style.fontStyle = "normal";
            cJDJIdCbCFdbEdbfbaFbFCADbdaaabCI_style.fontFamily = "arial";
            cJDJIdCbCFdbEdbfbaFbFCADbdaaabCI_style.fontWeight = "normal";
            this.cJDJIdCbCFdbEdbfbaFbFCADbdaaabCI.style = cJDJIdCbCFdbEdbfbaFbFCADbdaaabCI_style;
            var HBAEEeIGaJeaEDIAIAJeEJcDJJFbbaCD_style = this.advancedTexture.createStyle();
            HBAEEeIGaJeaEDIAIAJeEJcDJJFbbaCD_style.fontSize = 24;
            HBAEEeIGaJeaEDIAIAJeEJcDJJFbbaCD_style.fontStyle = "normal";
            HBAEEeIGaJeaEDIAIAJeEJcDJJFbbaCD_style.fontFamily = "arial";
            HBAEEeIGaJeaEDIAIAJeEJcDJJFbbaCD_style.fontWeight = "normal";
            this.HBAEEeIGaJeaEDIAIAJeEJcDJJFbbaCD.style = HBAEEeIGaJeaEDIAIAJeEJcDJJFbbaCD_style;
            var bCDAdJAFIIAdEIEGIafeHJeIfHafcDHb_style = this.advancedTexture.createStyle();
            bCDAdJAFIIAdEIEGIafeHJeIfHafcDHb_style.fontSize = 24;
            bCDAdJAFIIAdEIEGIafeHJeIfHafcDHb_style.fontStyle = "normal";
            bCDAdJAFIIAdEIEGIafeHJeIfHafcDHb_style.fontFamily = "arial";
            bCDAdJAFIIAdEIEGIafeHJeIfHafcDHb_style.fontWeight = "normal";
            this.bCDAdJAFIIAdEIEGIafeHJeIfHafcDHb.style = bCDAdJAFIIAdEIEGIafeHJeIfHafcDHb_style;
            var IcEGDdIcaDABEBacIAacIdBFGcBeBCcA_style = this.advancedTexture.createStyle();
            IcEGDdIcaDABEBacIAacIdBFGcBeBCcA_style.fontSize = 62.4;
            IcEGDdIcaDABEBacIAacIdBFGcBeBCcA_style.fontStyle = "italic";
            IcEGDdIcaDABEBacIAacIdBFGcBeBCcA_style.fontFamily = "arial";
            IcEGDdIcaDABEBacIAacIdBFGcBeBCcA_style.fontWeight = "bold";
            this.IcEGDdIcaDABEBacIAacIdBFGcBeBCcA.style = IcEGDdIcaDABEBacIAacIdBFGcBeBCcA_style;
            var CAceBIDCIHdeEDFebGJeCBHabDBJJIAB_style = this.advancedTexture.createStyle();
            CAceBIDCIHdeEDFebGJeCBHabDBJJIAB_style.fontSize = 24;
            CAceBIDCIHdeEDFebGJeCBHabDBJJIAB_style.fontStyle = "normal";
            CAceBIDCIHdeEDFebGJeCBHabDBJJIAB_style.fontFamily = "arial";
            CAceBIDCIHdeEDFebGJeCBHabDBJJIAB_style.fontWeight = "normal";
            this.CAceBIDCIHdeEDFebGJeCBHabDBJJIAB.style = CAceBIDCIHdeEDFebGJeCBHabDBJJIAB_style;
            var JGeEIECBAeEbEGHBbDCABBJcBAeBeafe_style = this.advancedTexture.createStyle();
            JGeEIECBAeEbEGHBbDCABBJcBAeBeafe_style.fontSize = 62.4;
            JGeEIECBAeEbEGHBbDCABBJcBAeBeafe_style.fontStyle = "normal";
            JGeEIECBAeEbEGHBbDCABBJcBAeBeafe_style.fontFamily = "arial";
            JGeEIECBAeEbEGHBbDCABBJcBAeBeafe_style.fontWeight = "bold";
            this.JGeEIECBAeEbEGHBbDCABBJcBAeBeafe.style = JGeEIECBAeEbEGHBbDCABBJcBAeBeafe_style;
            var bAaFJfdBaBDaEIBCICCFdDbIBCIFeAHD_style = this.advancedTexture.createStyle();
            bAaFJfdBaBDaEIBCICCFdDbIBCIFeAHD_style.fontSize = 24;
            bAaFJfdBaBDaEIBCICCFdDbIBCIFeAHD_style.fontStyle = "normal";
            bAaFJfdBaBDaEIBCICCFdDbIBCIFeAHD_style.fontFamily = "arial";
            bAaFJfdBaBDaEIBCICCFdDbIBCIFeAHD_style.fontWeight = "normal";
            this.bAaFJfdBaBDaEIBCICCFdDbIBCIFeAHD.style = bAaFJfdBaBDaEIBCICCFdDbIBCIFeAHD_style;
            var HEBdabbJJeEFEEaAbHJCcJdbHDfFfcbG_style = this.advancedTexture.createStyle();
            HEBdabbJJeEFEEaAbHJCcJdbHDfFfcbG_style.fontSize = 24;
            HEBdabbJJeEFEEaAbHJCcJdbHDfFfcbG_style.fontStyle = "normal";
            HEBdabbJJeEFEEaAbHJCcJdbHDfFfcbG_style.fontFamily = "arial";
            HEBdabbJJeEFEEaAbHJCcJdbHDfFfcbG_style.fontWeight = "bold";
            this.HEBdabbJJeEFEEaAbHJCcJdbHDfFfcbG.style = HEBdabbJJeEFEEaAbHJCcJdbHDfFfcbG_style;
            var cGDJAacBAfdJEcJbIBdHdeFDaAeadeIF_style = this.advancedTexture.createStyle();
            cGDJAacBAfdJEcJbIBdHdeFDaAeadeIF_style.fontSize = 24;
            cGDJAacBAfdJEcJbIBdHdeFDaAeadeIF_style.fontStyle = "normal";
            cGDJAacBAfdJEcJbIBdHdeFDaAeadeIF_style.fontFamily = "arial";
            cGDJAacBAfdJEcJbIBdHdeFDaAeadeIF_style.fontWeight = "bold";
            this.cGDJAacBAfdJEcJbIBdHdeFDaAeadeIF.style = cGDJAacBAfdJEcJbIBdHdeFDaAeadeIF_style;
            var aGCJbJfIGEfcEDBfbAEbAIACDJJdcBad_style = this.advancedTexture.createStyle();
            aGCJbJfIGEfcEDBfbAEbAIACDJJdcBad_style.fontSize = 24;
            aGCJbJfIGEfcEDBfbAEbAIACDJJdcBad_style.fontStyle = "normal";
            aGCJbJfIGEfcEDBfbAEbAIACDJJdcBad_style.fontFamily = "arial";
            aGCJbJfIGEfcEDBfbAEbAIACDJJdcBad_style.fontWeight = "bold";
            this.aGCJbJfIGEfcEDBfbAEbAIACDJJdcBad.style = aGCJbJfIGEfcEDBfbAEbAIACDJJdcBad_style;
            var abIAJGHJcGCaEDFIbcdHcbHCcGJJeJaF_style = this.advancedTexture.createStyle();
            abIAJGHJcGCaEDFIbcdHcbHCcGJJeJaF_style.fontSize = 24;
            abIAJGHJcGCaEDFIbcdHcbHCcGJJeJaF_style.fontStyle = "normal";
            abIAJGHJcGCaEDFIbcdHcbHCcGJJeJaF_style.fontFamily = "arial";
            abIAJGHJcGCaEDFIbcdHcbHCcGJJeJaF_style.fontWeight = "bold";
            this.abIAJGHJcGCaEDFIbcdHcbHCcGJJeJaF.style = abIAJGHJcGCaEDFIbcdHcbHCcGJJeJaF_style;
            var HFCbCEdeaGBIEBJFbfedBdCDbaeecCdI_style = this.advancedTexture.createStyle();
            HFCbCEdeaGBIEBJFbfedBdCDbaeecCdI_style.fontSize = 24;
            HFCbCEdeaGBIEBJFbfedBdCDbaeecCdI_style.fontStyle = "normal";
            HFCbCEdeaGBIEBJFbfedBdCDbaeecCdI_style.fontFamily = "arial";
            HFCbCEdeaGBIEBJFbfedBdCDbaeecCdI_style.fontWeight = "bold";
            this.HFCbCEdeaGBIEBJFbfedBdCDbaeecCdI.style = HFCbCEdeaGBIEBJFbfedBdCDbaeecCdI_style;
        };
        AdvancedTextureUi.prototype.getAdvancedTexture = function () {
            return this.advancedTexture;
        };
        AdvancedTextureUi.prototype.getGEJeEJIbGEAGEFDeaDJbbFCcHIHFHaCd = function () {
            return this.GEJeEJIbGEAGEFDeaDJbbFCcHIHFHaCd;
        };
        AdvancedTextureUi.prototype.getFCHCbeacaBdDEIFfbcFIIDeAEdEEGHcf = function () {
            return this.fCHCbeacaBdDEIFfbcFIIDeAEdEEGHcf;
        };
        AdvancedTextureUi.prototype.getFGHHaDdEIICbEcFIIeEAeaHBfDJCcFBd = function () {
            return this.FGHHaDdEIICbEcFIIeEAeaHBfDJCcFBd;
        };
        AdvancedTextureUi.prototype.getCfbefaJCABaBEFBCJAbbEAHEBCFCaBAC = function () {
            return this.CfbefaJCABaBEFBCJAbbEAHEBCFCaBAC;
        };
        AdvancedTextureUi.prototype.getBfcHdEFcCIDbECcbaaHAfJDBAJEeefDJ = function () {
            return this.BfcHdEFcCIDbECcbaaHAfJDBAJEeefDJ;
        };
        AdvancedTextureUi.prototype.getACEfFJJddGbIEEdBaAbcFDGDHCBbdbfF = function () {
            return this.aCEfFJJddGbIEEdBaAbcFDGDHCBbdbfF;
        };
        AdvancedTextureUi.prototype.getCJDJIdCbCFdbEdbfbaFbFCADbdaaabCI = function () {
            return this.cJDJIdCbCFdbEdbfbaFbFCADbdaaabCI;
        };
        AdvancedTextureUi.prototype.getHBAEEeIGaJeaEDIAIAJeEJcDJJFbbaCD = function () {
            return this.HBAEEeIGaJeaEDIAIAJeEJcDJJFbbaCD;
        };
        AdvancedTextureUi.prototype.getBCDAdJAFIIAdEIEGIafeHJeIfHafcDHb = function () {
            return this.bCDAdJAFIIAdEIEGIafeHJeIfHafcDHb;
        };
        AdvancedTextureUi.prototype.getIcEGDdIcaDABEBacIAacIdBFGcBeBCcA = function () {
            return this.IcEGDdIcaDABEBacIAacIdBFGcBeBCcA;
        };
        AdvancedTextureUi.prototype.getIFfffGaGcJHJECGCaHBebaHJeBfBDEGB = function () {
            return this.IFfffGaGcJHJECGCaHBebaHJeBfBDEGB;
        };
        AdvancedTextureUi.prototype.getCAceBIDCIHdeEDFebGJeCBHabDBJJIAB = function () {
            return this.CAceBIDCIHdeEDFebGJeCBHabDBJJIAB;
        };
        AdvancedTextureUi.prototype.getJGeEIECBAeEbEGHBbDCABBJcBAeBeafe = function () {
            return this.JGeEIECBAeEbEGHBbDCABBJcBAeBeafe;
        };
        AdvancedTextureUi.prototype.getBAaFJfdBaBDaEIBCICCFdDbIBCIFeAHD = function () {
            return this.bAaFJfdBaBDaEIBCICCFdDbIBCIFeAHD;
        };
        AdvancedTextureUi.prototype.getHEBdabbJJeEFEEaAbHJCcJdbHDfFfcbG = function () {
            return this.HEBdabbJJeEFEEaAbHJCcJdbHDfFfcbG;
        };
        AdvancedTextureUi.prototype.getCGDJAacBAfdJEcJbIBdHdeFDaAeadeIF = function () {
            return this.cGDJAacBAfdJEcJbIBdHdeFDaAeadeIF;
        };
        AdvancedTextureUi.prototype.getAGCJbJfIGEfcEDBfbAEbAIACDJJdcBad = function () {
            return this.aGCJbJfIGEfcEDBfbAEbAIACDJJdcBad;
        };
        AdvancedTextureUi.prototype.getAbIAJGHJcGCaEDFIbcdHcbHCcGJJeJaF = function () {
            return this.abIAJGHJcGCaEDFIbcdHcbHCcGJJeJaF;
        };
        AdvancedTextureUi.prototype.getHFCbCEdeaGBIEBJFbfedBdCDbaeecCdI = function () {
            return this.HFCbCEdeaGBIEBJFbfedBdCDbaeecCdI;
        };
        return AdvancedTextureUi;
    }());
    PROJECT.AdvancedTextureUi = AdvancedTextureUi;
})(PROJECT || (PROJECT = {}));
var PROJECT;
(function (PROJECT) {
    /**
    * Babylon Script Component
    * @class LightProjection
    */
    var LightProjection = /** @class */ (function (_super) {
        __extends(LightProjection, _super);
        function LightProjection() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.projectionTexture = null;
            _this.spotLightExponent = 16.0;
            _this.spotLightAngle = 150;
            _this.nearClipPlane = 0.1;
            _this.farClipPlane = 2.0;
            _this.excludeChildren = true;
            _this.includeTags = null;
            _this.enableRotation = true;
            _this.projectionRotation = 0;
            _this.projectionPosition = new BABYLON.Vector3(0, 1, 0);
            _this.m_spotLight = null;
            _this.m_projectorDirty = false;
            _this.m_projectorPosition = new BABYLON.Vector3(0, 0, 0);
            _this.m_projectorRotation = new BABYLON.Vector3(0, 0, 0);
            _this.m_lastPosition = new BABYLON.Vector3(0, 0, 0);
            _this.m_lastRotation = new BABYLON.Vector3(0, 0, 0);
            return _this;
        }
        LightProjection.prototype.getLightProjector = function () { return this.m_spotLight; };
        LightProjection.prototype.awake = function () {
            var _a;
            var _this = this;
            PROJECT.LightProjection.UpdateShaderStore();
            // ..
            // Setup Projection Texture Without Mipmapping
            // ..
            var projectionTextureData = this.getProperty("projectionTexture");
            if (projectionTextureData != null)
                this.projectionTexture = UTIL.ParseTexture(projectionTextureData, this.scene, true);
            // ..
            // .. Setup Spot Light As Texture Projector
            // ..
            this.m_spotLight = new BABYLON.SpotLight((this.transform.name + ".Projector"), new BABYLON.Vector3(0, 0, 0), new BABYLON.Vector3(0, -1, 0), BABYLON.Tools.ToRadians(this.spotLightAngle), this.spotLightExponent, this.scene);
            this.m_spotLight.shadowEnabled = false;
            this.m_spotLight.intensity = 0;
            this.m_spotLight.range = 0;
            this.m_spotLight.projectionTextureLightNear = this.nearClipPlane;
            this.m_spotLight.projectionTextureLightFar = this.farClipPlane;
            if (this.projectionTexture != null) {
                this.m_spotLight.projectionTexture = this.projectionTexture;
                this.m_spotLight.projectionTexture.wrapU = BABYLON.Constants.TEXTURE_CLAMP_ADDRESSMODE;
                this.m_spotLight.projectionTexture.wrapV = BABYLON.Constants.TEXTURE_CLAMP_ADDRESSMODE;
            }
            if (this.includeTags != null && this.includeTags.length > 0) {
                var tagQuery = this.includeTags.join(" || ");
                var includeMeshes = this.scene.getMeshesByTags(tagQuery);
                var includeTransforms = this.scene.getTransformNodesByTags(tagQuery);
                if (includeMeshes != null) {
                    if (includeTransforms == null)
                        includeTransforms = [];
                    includeTransforms.push.apply(includeTransforms, includeMeshes);
                }
                if (includeTransforms != null) {
                    includeTransforms.forEach(function (element) {
                        var childDetailMesh = SM.GetTransformDetailMesh(element);
                        if (childDetailMesh != null) {
                            if (_this.m_spotLight.includedOnlyMeshes == null)
                                _this.m_spotLight.includedOnlyMeshes = [];
                            _this.m_spotLight.includedOnlyMeshes.push(childDetailMesh);
                        }
                        else {
                            if (element instanceof BABYLON.AbstractMesh) {
                                if (_this.m_spotLight.includedOnlyMeshes == null)
                                    _this.m_spotLight.includedOnlyMeshes = [];
                                _this.m_spotLight.includedOnlyMeshes.push(element);
                            }
                        }
                    });
                }
                if (this.m_spotLight.includedOnlyMeshes == null)
                    this.m_spotLight.includedOnlyMeshes = [];
                if (this.m_spotLight.includedOnlyMeshes.length <= 0)
                    this.m_spotLight.includedOnlyMeshes.push(new BABYLON.Mesh(this.transform.name + ".ProjectorMesh", this.scene));
            }
            else if (this.excludeChildren === true) {
                var abstractMesh = this.getAbstractMesh();
                if (abstractMesh != null) {
                    if (this.m_spotLight.excludedMeshes == null)
                        this.m_spotLight.excludedMeshes = [];
                    this.m_spotLight.excludedMeshes.push(abstractMesh);
                }
                var childMeshes = this.transform.getChildMeshes(false);
                if (childMeshes != null && childMeshes.length > 0) {
                    if (this.m_spotLight.excludedMeshes == null)
                        this.m_spotLight.excludedMeshes = [];
                    (_a = this.m_spotLight.excludedMeshes).push.apply(_a, childMeshes);
                }
            }
            this.updateProjectorPosition();
        };
        LightProjection.prototype.start = function () {
            this.updateProjectorPosition();
        };
        LightProjection.prototype.update = function () {
            this.updateProjectorPosition();
        };
        LightProjection.prototype.destroy = function () {
            this.projectionPosition = null;
            if (this.projectionTexture != null) {
                this.projectionTexture.dispose();
                this.projectionTexture = null;
            }
            this.m_projectorPosition = null;
            this.m_projectorRotation = null;
            this.m_lastPosition = null;
            this.m_lastRotation = null;
            if (this.m_spotLight != null) {
                this.m_spotLight.dispose();
                this.m_spotLight = null;
            }
        };
        LightProjection.prototype.updateProjectorPosition = function () {
            if (this.m_spotLight != null) {
                this.m_projectorDirty = false;
                UTIL.GetAbsolutePositionToRef(this.transform, this.m_projectorPosition, this.projectionPosition);
                if (this.transform.rotationQuaternion != null) {
                    this.transform.rotationQuaternion.toEulerAnglesToRef(this.m_projectorRotation);
                }
                else if (this.transform.rotation != null) {
                    this.m_projectorRotation.copyFrom(this.transform.rotation);
                }
                if (this.m_lastPosition.x !== this.m_projectorPosition.x || this.m_lastPosition.y !== this.m_projectorPosition.y || this.m_lastPosition.z !== this.m_projectorPosition.z) {
                    this.m_spotLight.position.copyFrom(this.m_projectorPosition);
                    this.m_projectorDirty = true;
                }
                if (this.enableRotation === true) {
                    if (this.m_lastRotation.x !== this.m_projectorRotation.x || this.m_lastRotation.y !== this.m_projectorRotation.y || this.m_lastRotation.z !== this.m_projectorRotation.z) {
                        var rotationAngle = -this.m_projectorRotation.y;
                        if (this.projectionRotation !== 0)
                            rotationAngle += BABYLON.Tools.ToRadians(this.projectionRotation);
                        this.m_spotLight.projectionTextureUpDirection.set(Math.cos(rotationAngle), 0, Math.sin(rotationAngle));
                        this.m_projectorDirty = true;
                    }
                }
                if (this.m_projectorDirty === true) {
                    this.m_spotLight.position = this.m_spotLight.position; // Note: Force Projection Texture Is Dirty
                }
                this.m_lastPosition.copyFrom(this.m_projectorPosition);
                this.m_lastRotation.copyFrom(this.m_projectorRotation);
            }
        };
        ////////////////////////////////////////////////
        // Static Helper Functions
        ////////////////////////////////////////////////
        LightProjection.UpdateShaderStore = function () {
            if (PROJECT.LightProjection.ShaderFragmentUpdated === false) {
                BABYLON.Effect.IncludesShadersStore["lightFragment"] = BABYLON.Effect.IncludesShadersStore["lightFragment"].replace("info.diffuse*=computeProjectionTextureDiffuseLighting(projectionLightSampler{X},textureProjectionMatrix{X});", "surfaceAlbedo.rgb*=computeProjectionTextureDiffuseLighting(projectionLightSampler{X},textureProjectionMatrix{X});\n                    info.diffuse=vec3(0.);\n                    info.specular=vec3(0.);\n                    ");
                PROJECT.LightProjection.ShaderFragmentUpdated = true;
            }
        };
        LightProjection.ShaderFragmentUpdated = false;
        return LightProjection;
    }(BABYLON.ScriptComponent));
    PROJECT.LightProjection = LightProjection;
})(PROJECT || (PROJECT = {}));
var PROJECT;
(function (PROJECT) {
    /**
    * Babylon Script Component
    * @class NodeMaterialInstance
    */
    var NodeMaterialInstance = /** @class */ (function (_super) {
        __extends(NodeMaterialInstance, _super);
        function NodeMaterialInstance() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.nodeMaterialData = null;
            _this.setCustomRootUrl = null;
            _this.m_nodeMaterial = null;
            return _this;
        }
        NodeMaterialInstance.prototype.getMaterialInstance = function () { return this.m_nodeMaterial; };
        NodeMaterialInstance.prototype.awake = function () {
            if (this.nodeMaterialData != null) {
                var rootUrl = (this.setCustomRootUrl != null && this.setCustomRootUrl !== "") ? this.setCustomRootUrl.trim() : "";
                this.m_nodeMaterial = BABYLON.NodeMaterial.Parse(this.nodeMaterialData, this.scene, rootUrl);
                this.m_nodeMaterial.name = this.transform.name + ".NodeMaterial";
            }
        };
        NodeMaterialInstance.prototype.destroy = function () {
            if (this.m_nodeMaterial != null) {
                this.m_nodeMaterial.dispose();
                this.m_nodeMaterial = null;
            }
        };
        return NodeMaterialInstance;
    }(BABYLON.ScriptComponent));
    PROJECT.NodeMaterialInstance = NodeMaterialInstance;
})(PROJECT || (PROJECT = {}));
var PROJECT;
(function (PROJECT) {
    /**
    * Babylon Script Component
    * @class NodeMaterialParticle
    */
    var NodeMaterialParticle = /** @class */ (function (_super) {
        __extends(NodeMaterialParticle, _super);
        function NodeMaterialParticle() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.nodeMaterialEditor = null;
            return _this;
        }
        NodeMaterialParticle.prototype.awake = function () {
            /* Init component function */
        };
        NodeMaterialParticle.prototype.start = function () {
            if (this.nodeMaterialEditor != null) {
                var nme = SM.FindScriptComponent(this.nodeMaterialEditor, "PROJECT.NodeMaterialInstance");
                if (nme != null) {
                    var materialInstance = nme.getMaterialInstance();
                    if (materialInstance != null) {
                        this.setupNodeMaterial(materialInstance);
                    }
                    else {
                        console.warn("Null node material instance on: " + this.nodeMaterialEditor.name);
                    }
                }
                else {
                    console.warn("Failed to locate node material editor on: " + this.nodeMaterialEditor.name);
                }
            }
        };
        NodeMaterialParticle.prototype.setupNodeMaterial = function (materialInstance) {
        };
        NodeMaterialParticle.prototype.update = function () {
            /* Update render loop function */
        };
        NodeMaterialParticle.prototype.late = function () {
            /* Late update render loop function */
        };
        NodeMaterialParticle.prototype.after = function () {
            /* After update render loop function */
        };
        NodeMaterialParticle.prototype.fixed = function () {
            /* Fixed update physics step function */
        };
        NodeMaterialParticle.prototype.ready = function () {
            /* Execute when scene is ready function */
        };
        NodeMaterialParticle.prototype.destroy = function () {
            this.nodeMaterialEditor = null;
        };
        return NodeMaterialParticle;
    }(BABYLON.ScriptComponent));
    PROJECT.NodeMaterialParticle = NodeMaterialParticle;
})(PROJECT || (PROJECT = {}));
var PROJECT;
(function (PROJECT) {
    /**
    * Babylon Script Component
    * @class NodeMaterialProcess
    */
    var NodeMaterialProcess = /** @class */ (function (_super) {
        __extends(NodeMaterialProcess, _super);
        function NodeMaterialProcess() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.nodeMaterialEditor = null;
            _this.numberOfSamples = 1;
            _this.samplingMode = 0;
            _this.textureType = 0;
            _this.textureFormat = BABYLON.Constants.TEXTUREFORMAT_RGBA;
            _this.sizeRatio = 1.0;
            _this.resuable = false;
            _this.m_postProcess = null;
            return _this;
        }
        NodeMaterialProcess.prototype.getPostProcess = function () { return this.m_postProcess; };
        NodeMaterialProcess.prototype.start = function () {
            if (this.nodeMaterialEditor != null) {
                var nme = SM.FindScriptComponent(this.nodeMaterialEditor, "PROJECT.NodeMaterialInstance");
                if (nme != null) {
                    var materialInstance = nme.getMaterialInstance();
                    if (materialInstance != null) {
                        this.setupNodeMaterial(materialInstance);
                    }
                    else {
                        console.warn("Null node material instance on: " + this.nodeMaterialEditor.name);
                    }
                }
                else {
                    console.warn("Failed to locate node material editor on: " + this.nodeMaterialEditor.name);
                }
            }
        };
        NodeMaterialProcess.prototype.setupNodeMaterial = function (materialInstance) {
            var camera = this.getCameraRig();
            if (camera != null) {
                this.m_postProcess = materialInstance.createPostProcess(camera, this.sizeRatio, this.samplingMode, this.scene.getEngine(), this.resuable, this.textureType, this.textureFormat);
                if (this.m_postProcess != null) {
                    this.m_postProcess.name = (this.transform.name + ".Process");
                    this.m_postProcess.samples = this.numberOfSamples;
                }
                else {
                    console.warn("Failed to create post process for: " + this.transform.name);
                }
            }
            else {
                console.warn("Null camera rig for: " + this.transform.name);
            }
        };
        NodeMaterialProcess.prototype.destroy = function () {
            this.nodeMaterialEditor = null;
            if (this.m_postProcess != null) {
                this.m_postProcess.dispose();
                this.m_postProcess = null;
            }
        };
        return NodeMaterialProcess;
    }(BABYLON.ScriptComponent));
    PROJECT.NodeMaterialProcess = NodeMaterialProcess;
})(PROJECT || (PROJECT = {}));
var PROJECT;
(function (PROJECT) {
    /**
    * Babylon Script Component
    * @class NodeMaterialTexture
    */
    var NodeMaterialTexture = /** @class */ (function (_super) {
        __extends(NodeMaterialTexture, _super);
        function NodeMaterialTexture() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.nodeMaterialEditor = null;
            _this.textureSize = 256;
            _this.m_proceduralTexture = null;
            return _this;
        }
        NodeMaterialTexture.prototype.getProceduralTexture = function () { return this.m_proceduralTexture; };
        NodeMaterialTexture.prototype.start = function () {
            if (this.nodeMaterialEditor != null) {
                var nme = SM.FindScriptComponent(this.nodeMaterialEditor, "PROJECT.NodeMaterialInstance");
                if (nme != null) {
                    var materialInstance = nme.getMaterialInstance();
                    if (materialInstance != null) {
                        this.setupNodeMaterial(materialInstance);
                    }
                    else {
                        console.warn("Null node material instance on: " + this.nodeMaterialEditor.name);
                    }
                }
                else {
                    console.warn("Failed to locate node material editor on: " + this.nodeMaterialEditor.name);
                }
            }
        };
        NodeMaterialTexture.prototype.setupNodeMaterial = function (materialInstance) {
            this.m_proceduralTexture = materialInstance.createProceduralTexture(this.textureSize, this.scene);
            if (this.m_proceduralTexture != null) {
                this.m_proceduralTexture.name = (this.transform.name + ".Texture");
            }
        };
        NodeMaterialTexture.prototype.destroy = function () {
            this.nodeMaterialEditor = null;
            if (this.m_proceduralTexture != null) {
                this.m_proceduralTexture.dispose();
                this.m_proceduralTexture = null;
            }
        };
        return NodeMaterialTexture;
    }(BABYLON.ScriptComponent));
    PROJECT.NodeMaterialTexture = NodeMaterialTexture;
})(PROJECT || (PROJECT = {}));
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var PROJECT;
(function (PROJECT) {
    /**
    * Babylon Script Component
    * @class MobileInputController
    */
    var MobileInputController = /** @class */ (function (_super) {
        __extends(MobileInputController, _super);
        function MobileInputController() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.controlType = 0;
            _this.sideMargins = 16;
            _this.bottomMargins = 16;
            _this.readyTimeout = 200;
            _this.invertLeftStickY = true;
            _this.invertRightStickY = true;
            _this.enableLeftJoystick = true;
            _this.enableRightJoystick = true;
            _this.disableMouseRotation = true;
            _this.updateCameraInput = false;
            _this.m_leftStick = null;
            _this.m_rightStick = null;
            return _this;
        }
        MobileInputController.prototype.getLeftStick = function () { return this.m_leftStick; };
        MobileInputController.prototype.getRightStick = function () { return this.m_rightStick; };
        MobileInputController.prototype.getLeftStickEnabled = function () { return this.enableLeftJoystick; };
        MobileInputController.prototype.getRightStickEnabled = function () { return this.enableRightJoystick; };
        MobileInputController.prototype.start = function () {
            if (this.updateCameraInput === true) {
                var camera = PROJECT.UniversalCameraSystem.GetMainCamera(this.scene);
                if (camera != null) {
                    var input = new PROJECT.FreeCameraTouchJoystickInput();
                    input.controller = this;
                    input.invertYAxis = !this.invertRightStickY;
                    camera.inputs.add(input);
                }
            }
        };
        MobileInputController.prototype.ready = function () {
            var _this = this;
            if (this.controlType === 1 || BABYLON.SceneManager.IsMobile()) {
                if (this.disableMouseRotation === true)
                    BABYLON.SceneManager.VirtualJoystickEnabled = true; // Note: If Using Joystick Rotation Then Disable Mouse Input
                var displayTimeout = (this.readyTimeout >= 10) ? this.readyTimeout : 10;
                BABYLON.SceneManager.SetTimeout(displayTimeout, function () {
                    _this.createHtmlElements();
                    if (_this.enableLeftJoystick === true)
                        _this.m_leftStick = new BABYLON.TouchJoystickHandler("stick1", 64, 8);
                    if (_this.enableRightJoystick === true)
                        _this.m_rightStick = new BABYLON.TouchJoystickHandler("stick2", 64, 8);
                });
            }
        };
        MobileInputController.prototype.update = function () {
            if (this.enableLeftJoystick === true && this.m_leftStick != null) {
                var leftStickValueX = this.m_leftStick.getValueX();
                var leftStickValueY = this.m_leftStick.getValueY();
                BABYLON.SceneManager.SetLeftJoystickBuffer(leftStickValueX, leftStickValueY, this.invertLeftStickY);
            }
            if (this.enableRightJoystick === true && this.m_rightStick != null) {
                var rightStickValueX = this.m_rightStick.getValueX();
                var rightStickValueY = this.m_rightStick.getValueY();
                BABYLON.SceneManager.SetRightJoystickBuffer(rightStickValueX, rightStickValueY, this.invertRightStickY);
            }
        };
        MobileInputController.prototype.destroy = function () {
            if (this.m_leftStick != null) {
                this.m_leftStick.dispose();
                this.m_leftStick = null;
            }
            if (this.m_rightStick != null) {
                this.m_rightStick.dispose();
                this.m_rightStick = null;
            }
        };
        MobileInputController.prototype.createHtmlElements = function () {
            var rootUrl = BABYLON.SceneManager.GetRootUrl(this.scene);
            var baseImageData = this.getProperty("joystickBaseImage");
            var leftStickImageData = this.getProperty("leftStickImage");
            var rightStickImageData = this.getProperty("rightStickImage");
            var baseImageFilename = (baseImageData != null) ? baseImageData.filename : "baseImage.png";
            var leftStickImageFilename = (leftStickImageData != null) ? leftStickImageData.filename : "leftStick.png";
            var rightStickImageFilename = (rightStickImageData != null) ? rightStickImageData.filename : "rightStick.png";
            // ..
            // style="border: 1px solid red; width: 128px; position: absolute; left:20px; bottom:20px;"
            // ..
            if (this.enableLeftJoystick === true) {
                var baseDiv1 = document.createElement("div");
                baseDiv1.id = "base1";
                baseDiv1.style.width = "128px";
                baseDiv1.style.position = "absolute";
                baseDiv1.style.left = (this.sideMargins.toFixed(0) + "px");
                baseDiv1.style.bottom = (this.bottomMargins.toFixed(0) + "px");
                var baseImg1 = document.createElement("img");
                baseImg1.id = "image1";
                baseImg1.src = (rootUrl + baseImageFilename);
                var ballDiv1 = document.createElement("div");
                ballDiv1.id = "stick1";
                ballDiv1.style.position = "absolute";
                ballDiv1.style.top = "32px";
                ballDiv1.style.left = "32px";
                var ballImg1 = document.createElement("img");
                ballImg1.id = "ball1";
                ballImg1.src = (rootUrl + leftStickImageFilename);
                baseDiv1.appendChild(baseImg1);
                ballDiv1.appendChild(ballImg1);
                baseDiv1.appendChild(ballDiv1);
                document.body.appendChild(baseDiv1);
            }
            // ..
            // style="border: 1px solid blue; width: 128px; position: absolute; right:20px; bottom:20px;"
            // ..
            if (this.enableRightJoystick === true) {
                var baseDiv2 = document.createElement("div");
                baseDiv2.id = "base2";
                baseDiv2.style.width = "128px";
                baseDiv2.style.position = "absolute";
                baseDiv2.style.right = (this.sideMargins.toFixed(0) + "px");
                baseDiv2.style.bottom = (this.bottomMargins.toFixed(0) + "px");
                var baseImg2 = document.createElement("img");
                baseImg2.id = "image2";
                baseImg2.src = (rootUrl + baseImageFilename);
                var ballDiv2 = document.createElement("div");
                ballDiv2.id = "stick2";
                ballDiv2.style.position = "absolute";
                ballDiv2.style.top = "32px";
                ballDiv2.style.left = "32px";
                var ballImg2 = document.createElement("img");
                ballImg2.id = "ball2";
                ballImg2.src = (rootUrl + rightStickImageFilename);
                baseDiv2.appendChild(baseImg2);
                ballDiv2.appendChild(ballImg2);
                baseDiv2.appendChild(ballDiv2);
                document.body.appendChild(baseDiv2);
            }
        };
        return MobileInputController;
    }(BABYLON.ScriptComponent));
    PROJECT.MobileInputController = MobileInputController;
    /**
     * Manage the joystick inputs to control a free camera.
     * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs
     */
    var FreeCameraTouchJoystickInput = /** @class */ (function () {
        function FreeCameraTouchJoystickInput() {
            /**
             * Defines the joystick rotation sensiblity.
             * This is the threshold from when rotation starts to be accounted for to prevent jittering.
             */
            this.joystickAngularSensibility = 200;
            /**
             * Defines the joystick move sensiblity.
             * This is the threshold from when moving starts to be accounted for for to prevent jittering.
             */
            this.joystickMoveSensibility = 40.0;
            /**
             * Defines the minimum value at which any analog stick input is ignored.
             * Note: This value should only be a value between 0 and 1.
             */
            this.deadzoneDelta = 0.1;
            this._yAxisScale = 1.0;
            // private members
            this.LSValues = new BABYLON.Vector2(0, 0);
            this.RSValues = new BABYLON.Vector2(0, 0);
            this._cameraTransform = BABYLON.Matrix.Identity();
            this._deltaTransform = BABYLON.Vector3.Zero();
            this._vector3 = BABYLON.Vector3.Zero();
            this._vector2 = BABYLON.Vector2.Zero();
            this._attached = false;
        }
        Object.defineProperty(FreeCameraTouchJoystickInput.prototype, "invertYAxis", {
            /**
             * Gets or sets a boolean indicating that Yaxis (for right stick) should be inverted
             */
            get: function () { return this._yAxisScale !== 1.0; },
            set: function (value) { this._yAxisScale = value ? -1.0 : 1.0; },
            enumerable: false,
            configurable: true
        });
        /**
         * Attach the input controls to a specific dom element to get the input from.
         */
        FreeCameraTouchJoystickInput.prototype.attachControl = function () {
            this._attached = true;
        };
        /**
         * Detach the current controls from the specified dom element.
         * @param ignored defines an ignored parameter kept for backward compatibility. If you want to define the source input element, you can set engine.inputElement before calling camera.attachControl
         */
        FreeCameraTouchJoystickInput.prototype.detachControl = function (ignored) {
            this._attached = false;
        };
        /**
         * Update the current camera state depending on the inputs that have been used this frame.
         * This is a dynamically created lambda to avoid the performance penalty of looping for inputs in the render loop.
         */
        FreeCameraTouchJoystickInput.prototype.checkInputs = function () {
            if (this.camera != null && this.controller != null && this._attached === true) {
                var LStick = this.controller.getLeftStick();
                if (LStick != null) {
                    this.LSValues.set(LStick.getValueX(), LStick.getValueY());
                    if (this.joystickMoveSensibility !== 0) {
                        this.LSValues.x = (Math.abs(this.LSValues.x) > this.deadzoneDelta) ? this.LSValues.x / this.joystickMoveSensibility : 0;
                        this.LSValues.y = (Math.abs(this.LSValues.y) > this.deadzoneDelta) ? this.LSValues.y / this.joystickMoveSensibility : 0;
                    }
                }
                else {
                    this.LSValues.set(0, 0);
                }
                // ..
                var RStick = this.controller.getRightStick();
                if (RStick != null) {
                    this.RSValues.set(RStick.getValueX(), RStick.getValueY());
                    if (this.joystickAngularSensibility !== 0) {
                        this.RSValues.x = (Math.abs(this.RSValues.x) > this.deadzoneDelta) ? this.RSValues.x / this.joystickAngularSensibility : 0;
                        this.RSValues.y = ((Math.abs(this.RSValues.y) > this.deadzoneDelta) ? this.RSValues.y / this.joystickAngularSensibility : 0) * this._yAxisScale;
                    }
                }
                else {
                    this.RSValues.set(0, 0);
                }
                // ..
                if (!this.camera.rotationQuaternion) {
                    BABYLON.Matrix.RotationYawPitchRollToRef(this.camera.rotation.y, this.camera.rotation.x, 0, this._cameraTransform);
                }
                else {
                    this.camera.rotationQuaternion.toRotationMatrix(this._cameraTransform);
                }
                // ..
                var speed = this.camera._computeLocalCameraSpeed() * 50.0;
                this._vector3.copyFromFloats(this.LSValues.x * speed, 0, -this.LSValues.y * speed);
                // ..
                BABYLON.Vector3.TransformCoordinatesToRef(this._vector3, this._cameraTransform, this._deltaTransform);
                this.camera.cameraDirection.addInPlace(this._deltaTransform);
                this._vector2.copyFromFloats(this.RSValues.y, this.RSValues.x);
                this.camera.cameraRotation.addInPlace(this._vector2);
            }
        };
        /**
         * Gets the class name of the current input.
         * @returns the class name
         */
        FreeCameraTouchJoystickInput.prototype.getClassName = function () {
            return "FreeCameraTouchJoystickInput";
        };
        /**
         * Get the friendly name associated with the input class.
         * @returns the input friendly name
         */
        FreeCameraTouchJoystickInput.prototype.getSimpleName = function () {
            return "joystick";
        };
        __decorate([
            BABYLON.serialize()
        ], FreeCameraTouchJoystickInput.prototype, "joystickAngularSensibility", void 0);
        __decorate([
            BABYLON.serialize()
        ], FreeCameraTouchJoystickInput.prototype, "joystickMoveSensibility", void 0);
        return FreeCameraTouchJoystickInput;
    }());
    PROJECT.FreeCameraTouchJoystickInput = FreeCameraTouchJoystickInput;
    BABYLON.CameraInputTypes["FreeCameraTouchJoystickInput"] = PROJECT.FreeCameraTouchJoystickInput;
})(PROJECT || (PROJECT = {}));
var PROJECT;
(function (PROJECT) {
    var UniversalPlayerController = /** @class */ (function (_super) {
        __extends(UniversalPlayerController, _super);
        function UniversalPlayerController(transform, scene, properties) {
            var _this = _super.call(this, transform, scene, properties) || this;
            _this.enableInput = false;
            _this.attachCamera = false;
            _this.rotateCamera = true;
            _this.toggleView = true;
            _this.freeLooking = false;
            _this.requireSprintButton = false;
            _this.gravitationalForce = 29.4;
            _this.terminalVelocity = 55.0;
            _this.minFallVelocity = 1.0;
            _this.airbornTimeout = 0.1;
            _this.normalAngle = 0.6;
            _this.radiusScale = 0.5;
            _this.rayLength = 10;
            _this.rayOrigin = 1;
            _this.maxAngle = 45;
            _this.speedFactor = 1.0;
            _this.moveSpeed = 6.0;
            _this.lookSpeed = 2.0;
            _this.jumpSpeed = 10.0;
            _this.jumpDelay = 0.75;
            _this.jumpAllowed = true;
            _this.eyesHeight = 1.0;
            _this.pivotHeight = 1.0;
            _this.topLookLimit = 60.0;
            _this.downLookLimit = 30.0;
            _this.lowTurnSpeed = 15.0;
            _this.highTurnSpeed = 25.0;
            _this.smoothAcceleration = false;
            _this.accelerationSpeed = 0.1;
            _this.decelerationSpeed = 0.1;
            _this.avatarSkinTag = "Skin";
            _this.distanceFactor = 0.85;
            _this.cameraSmoothing = 5;
            _this.cameraCollisions = true;
            _this.inputMagnitude = 0;
            _this.landingEpsilon = 0.1;
            _this.minimumDistance = 0.85;
            _this.playerInputX = 0;
            _this.playerInputZ = 0;
            _this.playerMouseX = 0;
            _this.playerMouseY = 0;
            _this.canSpecialJump = null;
            _this.ignoreTriggerTags = null;
            _this.buttonJump = BABYLON.Xbox360Button.A;
            _this.keyboardJump = BABYLON.UserInputKey.SpaceBar;
            _this.buttonSprint = BABYLON.Xbox360Button.LeftStick;
            _this.keyboardSprint = BABYLON.UserInputKey.Shift;
            _this.keyboardSpellOne = BABYLON.UserInputKey.Num0;
            _this.keyboardSpellTwo = BABYLON.UserInputKey.Num1;
            _this.keyboardSpellThree = BABYLON.UserInputKey.Num2;
            _this.keyboardSpellFour = BABYLON.UserInputKey.Num3;
            _this.keyboardSpellFive = BABYLON.UserInputKey.Num4;
            _this.buttonCamera = BABYLON.Xbox360Button.Y;
            _this.keyboardCamera = BABYLON.UserInputKey.P;
            _this.sprintThresholdSpeed = 1.0;
            _this.playerNumber = BABYLON.PlayerNumber.One;
            _this.boomPosition = new BABYLON.Vector3(0, 0, 0);
            _this.airbornVelocity = new BABYLON.Vector3(0, 0, 0);
            _this.movementVelocity = new BABYLON.Vector3(0, 0, 0);
            _this.targetCameraOffset = new BABYLON.Vector3(0, 0, 0);
            _this.onPreUpdateObservable = new BABYLON.Observable();
            _this.onBeforeMoveObservable = new BABYLON.Observable();
            _this.onPostUpdateObservable = new BABYLON.Observable();
            _this.onPlayerInputObservable = new BABYLON.Observable();
            _this.m_velocityOffset = new BABYLON.Vector3(0, 0, 0);
            _this.m_actualVelocity = new BABYLON.Vector3(0, 0, 0);
            _this.m_linearVelocity = new BABYLON.Vector3(0, 0, 0);
            _this.m_lastPosition = new BABYLON.Vector3(0, 0, 0);
            _this.m_positionCenter = new BABYLON.Vector3(0, 0, 0);
            _this.m_scaledVelocity = 0;
            _this.playerDrawVelocity = 0;
            _this.abstractMesh = null;
            _this.cameraDistance = 0;
            _this.forwardCamera = false;
            _this.avatarRadius = 0.5;
            _this.dollyDirection = new BABYLON.Vector3(0, 0, 0);
            _this.rotationEulers = new BABYLON.Vector3(0, 0, 0);
            _this.cameraPivotOffset = new BABYLON.Vector3(0, 0, 0);
            _this.cameraForwardVector = new BABYLON.Vector3(0, 0, 0);
            _this.cameraRightVector = new BABYLON.Vector3(0, 0, 0);
            _this.desiredForwardVector = new BABYLON.Vector3(0, 0, 0);
            _this.desiredRightVector = new BABYLON.Vector3(0, 0, 0);
            _this.scaledCamDirection = new BABYLON.Vector3(0, 0, 0);
            _this.scaledMaxDirection = new BABYLON.Vector3(0, 0, 0);
            _this.parentNodePosition = new BABYLON.Vector3(0, 0, 0);
            _this.maximumCameraPos = new BABYLON.Vector3(0, 0, 0);
            _this.tempWorldPosition = new BABYLON.Vector3(0, 0, 0);
            _this.cameraRaycastShape = null;
            _this.defaultRaycastGroup = BABYLON.CollisionFilters.DefaultFilter;
            _this.defaultRaycastMask = BABYLON.CollisionFilters.StaticFilter;
            _this.cameraRaycastMask = BABYLON.CollisionFilters.AllFilter ^
                BABYLON.CollisionFilters.CharacterFilter;
            _this.avatarSkins = null;
            _this.cameraNode = null;
            _this.cameraPivot = null;
            _this.navigationAgent = null;
            _this.characterController = null;
            _this.verticalVelocity = 0;
            _this.movementSpeed = 0;
            _this.isJumpPressed = false;
            _this.isSprintPressed = false;
            _this.isCharacterSliding = false;
            _this.isCharacterFalling = false;
            _this.isCharacterGrounded = false;
            _this.isCharacterFallTriggered = false;
            _this.isCharacterJumpFrame = false;
            _this.isCharacterJumping = false;
            _this.isCharacterJumpSpecial = false;
            _this.isCharacterNavigating = false;
            _this.updateStateParams = true;
            _this.animationStateParams = null;
            _this.sphereCollisionShape = null;
            _this.showDebugColliders = false;
            _this.colliderVisibility = 0;
            _this.colliderRenderGroup = 0;
            _this.deltaTime = 0;
            _this.minJumpTimer = 0;
            _this.delayJumpTimer = 0;
            _this.playerControl = 0;
            _this.moveWithCollision = true;
            _this.animationState = null;
            _this.lastJumpVelocity = new BABYLON.Vector3(0, 0, 0);
            _this.inputMovementVector = new BABYLON.Vector3(0, 0, 0);
            _this.playerLookRotation = new BABYLON.Vector3(0, 0, 0);
            _this.playerRotationVector = BABYLON.Vector2.Zero();
            _this.playerMovementVelocity = new BABYLON.Vector3(0, 0, 0);
            _this.playerRotationQuaternion = BABYLON.Quaternion.Zero();
            _this.playerMoveDirection = PROJECT.PlayerMoveDirection.Stationary;
            _this.groundHit = false;
            _this.groundNode = null;
            _this.groundAngle = 0;
            _this.groundPoint = new BABYLON.Vector3(0, 0, 0);
            _this.groundNormal = new BABYLON.Vector3(0, 0, 0);
            _this.groundDistance = 0;
            _this.groundCollision = false;
            _this.groundVelocity = 0;
            _this.groundSensorLine = null;
            _this.offsetGroundRaycastPosition = new BABYLON.Vector3(0, 0, 0);
            _this.startGroundRaycastPosition = new BABYLON.Vector3(0, 0, 0);
            _this.endGroundRaycastPosition = new BABYLON.Vector3(0, 0, 0);
            _this.downDirection = new BABYLON.Vector3(0, -1, 0);
            _this.forwardDirection = new BABYLON.Vector3(0, 0, 1);
            _this._ikLeftController = null;
            _this._ikLeftFootTarget = null;
            _this._ikLeftPoleTarget = null;
            _this._ikRightController = null;
            _this._ikRightFootTarget = null;
            _this._ikRightPoleTarget = null;
            _this.abstractSkinMesh = null;
            _this.rootBoneTransform = null;
            _this.leftFootTransform = null;
            _this.leftFootPolePos = new BABYLON.Vector3(0, 0, 0);
            _this.leftFootBendAxis = new BABYLON.Vector3(1, 0, 0);
            _this.leftFootPoleAngle = 0;
            _this.leftFootMaxAngle = 180;
            _this.rightFootTransform = null;
            _this.rightFootPolePos = new BABYLON.Vector3(0, 0, 0);
            _this.rightFootBendAxis = new BABYLON.Vector3(1, 0, 0);
            _this.rightFootPoleAngle = 0;
            _this.rightFootMaxAngle = 180;
            _this.pickingRay = null;
            _this.pickingHelper = null;
            _this.pickingOrigin = null;
            _this.pickingDirection = new BABYLON.Vector3(0, -1, 0);
            _this.cameraRay = null;
            _this.cameraHelper = null;
            _this.cameraForward = new BABYLON.Vector3(0, 0, 0);
            _this.cameraDirection = new BABYLON.Vector3(0, 0, 0);
            _this.spellOneState = false;
            return _this;
        }
        UniversalPlayerController.prototype.isAnimationEnabled = function () {
            return this.updateStateParams;
        };
        UniversalPlayerController.prototype.isSprintButtonPressed = function () {
            return this.isSprintPressed;
        };
        UniversalPlayerController.prototype.getSpecialJumped = function () {
            return this.isCharacterJumpSpecial;
        };
        UniversalPlayerController.prototype.getPlayerJumped = function () {
            return this.isCharacterJumpFrame;
        };
        UniversalPlayerController.prototype.getPlayerJumping = function () {
            return this.isCharacterJumping;
        };
        UniversalPlayerController.prototype.getPlayerFalling = function () {
            return this.isCharacterFalling;
        };
        UniversalPlayerController.prototype.getPlayerSliding = function () {
            return this.isCharacterSliding;
        };
        UniversalPlayerController.prototype.getPlayerGrounded = function () {
            return this.isCharacterGrounded;
        };
        UniversalPlayerController.prototype.getFallTriggered = function () {
            return this.isCharacterFallTriggered;
        };
        UniversalPlayerController.prototype.getMovementSpeed = function () {
            return this.movementSpeed;
        };
        UniversalPlayerController.prototype.getCameraBoomNode = function () {
            return this.cameraNode;
        };
        UniversalPlayerController.prototype.getCameraTransform = function () {
            return this.cameraPivot;
        };
        UniversalPlayerController.prototype.getAnimationState = function () {
            return this.animationState;
        };
        UniversalPlayerController.prototype.getVerticalVelocity = function () {
            return this.getCheckedVerticalVelocity();
        };
        UniversalPlayerController.prototype.getCharacterController = function () {
            return this.characterController;
        };
        UniversalPlayerController.prototype.getPlayerMoveDirection = function () {
            return this.playerMoveDirection;
        };
        UniversalPlayerController.prototype.getInputMovementVector = function () {
            return this.inputMovementVector;
        };
        UniversalPlayerController.prototype.getInputMagnitudeValue = function () {
            return this.inputMagnitude;
        };
        UniversalPlayerController.prototype.getCameraPivotPosition = function () {
            return this.cameraPivot != null ? this.cameraPivot.position : null;
        };
        UniversalPlayerController.prototype.getCameraPivotRotation = function () {
            return this.cameraPivot != null
                ? this.cameraPivot.rotationQuaternion
                : null;
        };
        UniversalPlayerController.prototype.getGroundHit = function () {
            return this.groundHit;
        };
        UniversalPlayerController.prototype.getGroundNode = function () {
            return this.groundNode;
        };
        UniversalPlayerController.prototype.getGroundPoint = function () {
            return this.groundPoint;
        };
        UniversalPlayerController.prototype.getGroundAngle = function () {
            return this.groundAngle;
        };
        UniversalPlayerController.prototype.getGroundNormal = function () {
            return this.groundNormal;
        };
        UniversalPlayerController.prototype.getGroundDistance = function () {
            return this.groundDistance;
        };
        UniversalPlayerController.prototype.getGroundCollision = function () {
            return this.groundCollision;
        };
        UniversalPlayerController.prototype.getSpellOneState = function () {
            return this.spellOneState;
        };
        UniversalPlayerController.prototype.setGavityForce = function (gravity) {
            this.gravitationalForce = gravity;
            if (this.characterController != null) {
                this.characterController.setGravity(this.gravitationalForce);
            }
        };
        UniversalPlayerController.prototype.setTerminalVelocity = function (velocity) {
            this.terminalVelocity = velocity;
            if (this.characterController != null) {
                this.characterController.setFallingSpeed(this.terminalVelocity);
            }
        };
        UniversalPlayerController.prototype.setWorldPosition = function (x, y, z) {
            if (this.characterController != null) {
                this.characterController.set(x, y, z);
            }
            else {
                this.tempWorldPosition.set(x, y, z);
                this.transform.setAbsolutePosition(this.tempWorldPosition);
            }
        };
        UniversalPlayerController.prototype.setPlayerControl = function (mode) {
            this.playerControl = mode;
            if (this.playerControl === PROJECT.PlayerInputControl.ThirdPersonStrafing ||
                this.playerControl === PROJECT.PlayerInputControl.ThirdPersonTurning ||
                this.playerControl === PROJECT.PlayerInputControl.ThirdPersonForward) {
                this.showAvatarSkins(true);
            }
            else {
                this.showAvatarSkins(false);
            }
            if (this.playerControl === PROJECT.PlayerInputControl.ThirdPersonForward) {
                this.forwardCamera = true;
            }
            else if (this.playerControl === PROJECT.PlayerInputControl.ThirdPersonStrafing ||
                this.playerControl === PROJECT.PlayerInputControl.ThirdPersonTurning) {
                this.forwardCamera = false;
            }
        };
        UniversalPlayerController.prototype.togglePlayerControl = function () {
            if (this.toggleView === true) {
                if (this.playerControl === PROJECT.PlayerInputControl.FirstPersonStrafing) {
                    if (this.forwardCamera === true) {
                        this.setPlayerControl(PROJECT.PlayerInputControl.ThirdPersonForward);
                    }
                    else {
                        this.setPlayerControl(PROJECT.PlayerInputControl.ThirdPersonStrafing);
                    }
                }
                else {
                    this.setPlayerControl(PROJECT.PlayerInputControl.FirstPersonStrafing);
                }
            }
        };
        UniversalPlayerController.prototype.attachPlayerCamera = function (player) {
            if (this.cameraNode == null) {
                var playerCamera = player <= 0 || player > 4 ? 1 : player;
                this.cameraNode = PROJECT.UniversalCameraSystem.GetCameraTransform(this.scene, playerCamera);
                if (this.cameraNode != null) {
                    this.cameraNode.parent = this.cameraPivot;
                    this.cameraNode.position.copyFrom(this.boomPosition);
                    this.cameraNode.rotationQuaternion = new BABYLON.Quaternion(0, 0, 0, 1);
                    this.cameraDistance = this.cameraNode.position.length();
                    this.dollyDirection.copyFrom(this.cameraNode.position);
                    this.dollyDirection.normalize();
                }
                else {
                }
            }
        };
        UniversalPlayerController.prototype.getLeftFootTarget = function () {
            return this._ikLeftFootTarget;
        };
        UniversalPlayerController.prototype.getRightFootTarget = function () {
            return this._ikRightFootTarget;
        };
        UniversalPlayerController.prototype.getLeftFootController = function () {
            return this._ikLeftController;
        };
        UniversalPlayerController.prototype.getRightFootController = function () {
            return this._ikRightController;
        };
        UniversalPlayerController.prototype.attachBoneControllers = function () {
            var displayHandles = this.getProperty("displayHandles");
            var abstractSkinMeshData = this.getProperty("abstractSkinMesh");
            if (abstractSkinMeshData != null)
                this.abstractSkinMesh = this.getChildNode(abstractSkinMeshData.name, BABYLON.SearchType.ExactMatch, false);
            var rootBoneTransformData = this.getProperty("rootBoneTransform");
            if (rootBoneTransformData != null)
                this.rootBoneTransform = this.getChildNode(rootBoneTransformData.name, BABYLON.SearchType.ExactMatch, false);
            var leftFootTransformData = this.getProperty("leftFootTransform");
            if (leftFootTransformData != null)
                this.leftFootTransform = this.getChildNode(leftFootTransformData.name, BABYLON.SearchType.ExactMatch, false);
            var leftPoleHandleData = this.getProperty("leftFootPolePos");
            if (leftPoleHandleData != null)
                this.leftFootPolePos.copyFrom(BABYLON.Utilities.ParseVector3(leftPoleHandleData));
            var leftBendAxisData = this.getProperty("leftFootBendAxis");
            if (leftBendAxisData != null)
                this.leftFootBendAxis.copyFrom(BABYLON.Utilities.ParseVector3(leftBendAxisData));
            this.leftFootPoleAngle = this.getProperty("leftFootPoleAngle", this.leftFootPoleAngle);
            this.leftFootMaxAngle = this.getProperty("leftFootMaxAngle", this.leftFootMaxAngle);
            var rightFootTransformData = this.getProperty("rightFootTransform");
            if (rightFootTransformData != null)
                this.rightFootTransform = this.getChildNode(rightFootTransformData.name, BABYLON.SearchType.ExactMatch, false);
            var rightPoleHandleData = this.getProperty("rightFootPolePos");
            if (rightPoleHandleData != null)
                this.rightFootPolePos.copyFrom(BABYLON.Utilities.ParseVector3(rightPoleHandleData));
            var rightBendAxisData = this.getProperty("rightFootBendAxis");
            if (rightBendAxisData != null)
                this.rightFootBendAxis.copyFrom(BABYLON.Utilities.ParseVector3(rightBendAxisData));
            this.rightFootPoleAngle = this.getProperty("rightFootPoleAngle", this.rightFootPoleAngle);
            this.rightFootMaxAngle = this.getProperty("rightFootMaxAngle", this.rightFootMaxAngle);
            if (this.abstractSkinMesh != null) {
                var materialName = "M_TARGET_MESH";
                var targetMaterial = this.scene.getMaterialByName(materialName);
                if (targetMaterial == null) {
                    targetMaterial = new BABYLON.StandardMaterial("M_TARGET_MESH", this.scene);
                    targetMaterial.diffuseColor =
                        new BABYLON.Color3(1.0, 0.5, 0.25);
                }
                if (this.leftFootTransform != null &&
                    this.leftFootTransform._linkedBone != null) {
                    this._ikLeftFootTarget = BABYLON.MeshBuilder.CreateBox(this.transform.name + ".LeftFootTarget", {
                        width: 0.1,
                        height: 0.1,
                        depth: 0.1,
                    }, this.scene);
                    this._ikLeftFootTarget.parent = this.abstractSkinMesh;
                    if (this._ikLeftFootTarget instanceof BABYLON.AbstractMesh) {
                        this._ikLeftFootTarget.material = targetMaterial;
                        this._ikLeftFootTarget.isVisible = displayHandles;
                    }
                    this._ikLeftPoleTarget = BABYLON.MeshBuilder.CreateSphere(this.transform.name + ".LeftFootPole", { diameter: 0.15 }, this.scene);
                    this._ikLeftPoleTarget.parent = this.abstractSkinMesh;
                    this._ikLeftPoleTarget.position.copyFrom(this.leftFootPolePos);
                    if (this._ikLeftPoleTarget instanceof BABYLON.AbstractMesh) {
                        this._ikLeftPoleTarget.isVisible = displayHandles;
                    }
                }
                if (this.rightFootTransform != null &&
                    this.rightFootTransform._linkedBone != null) {
                    this._ikRightFootTarget = BABYLON.MeshBuilder.CreateBox(this.transform.name + ".RightFootTarget", {
                        width: 0.1,
                        height: 0.1,
                        depth: 0.1,
                    }, this.scene);
                    this._ikRightFootTarget.parent = this.abstractSkinMesh;
                    if (this._ikRightFootTarget instanceof BABYLON.AbstractMesh) {
                        this._ikRightFootTarget.material = targetMaterial;
                        this._ikRightFootTarget.isVisible = displayHandles;
                    }
                    this._ikRightPoleTarget = BABYLON.MeshBuilder.CreateSphere(this.transform.name + ".RightFootPole", { diameter: 0.15 }, this.scene);
                    this._ikRightPoleTarget.parent = this.abstractSkinMesh;
                    this._ikRightPoleTarget.position.copyFrom(this.rightFootPolePos);
                    if (this._ikRightPoleTarget instanceof BABYLON.AbstractMesh) {
                        this._ikRightPoleTarget.isVisible = displayHandles;
                    }
                }
            }
        };
        UniversalPlayerController.prototype.enableCharacterController = function (state) {
            if (state === true) {
                this.moveWithCollision = true;
                if (this.characterController != null) {
                    this.characterController.setGhostWorldPosition(this.transform.position);
                    this.characterController.updatePosition = true;
                }
            }
            else {
                this.moveWithCollision = false;
                if (this.characterController != null) {
                    this.characterController.updatePosition = false;
                }
            }
        };
        UniversalPlayerController.prototype.resetPlayerRotation = function () {
            this.transform.rotationQuaternion.toEulerAnglesToRef(this.rotationEulers);
            this.playerRotationVector.x = this.rotationEulers.x;
            this.playerRotationVector.y = this.rotationEulers.y;
        };
        UniversalPlayerController.prototype.awake = function () {
            this.awakePlayerController();
            // Animation Magic Player
            this.animationManager = new PROJECT.AnimationManager(this.getProperty("spellAnimationSetName"), // More set ....
            this.rootBoneTransform, this.scene);
        };
        UniversalPlayerController.prototype.start = function () {
            this.startPlayerController();
        };
        UniversalPlayerController.prototype.update = function () {
            // Animation Magic Player
            this.animationManager.updateAnimationState(this.animationState, this);
            this.updatePlayerController();
        };
        UniversalPlayerController.prototype.destroy = function () {
            this.destroyPlayerController();
        };
        UniversalPlayerController.prototype.showAvatarSkins = function (show) {
            if (this.avatarSkins != null) {
                this.avatarSkins.forEach(function (skin) {
                    skin.isVisible = show;
                });
            }
        };
        UniversalPlayerController.prototype.attachAnimationController = function () {
            var _this = this;
            if (this.animationState == null) {
                this.animationState = this.getComponent("BABYLON.AnimationState");
                if (this.animationState == null) {
                    var animationNode = this.getChildWithScript("BABYLON.AnimationState");
                    if (animationNode != null) {
                        this.animationState = BABYLON.SceneManager.FindScriptComponent(animationNode, "BABYLON.AnimationState");
                    }
                    else {
                    }
                }
            }
            if (this.animationState != null) {
                this.animationState.onAnimationUpdateObservable.add(function () {
                    if (_this.animationState.ikFrameEnabled() === true) {
                        if (_this._ikLeftController != null) {
                            _this._ikLeftController.update();
                        }
                        if (_this._ikRightController != null) {
                            _this._ikRightController.update();
                        }
                    }
                });
            }
        };
        UniversalPlayerController.prototype.awakePlayerController = function () {
            var _this = this;
            this.gravitationalForce = this.getProperty("gravitationalForce", this.gravitationalForce);
            this.terminalVelocity = this.getProperty("terminalVelocity", this.terminalVelocity);
            this.rotateCamera = this.getProperty("rotateCamera", this.rotateCamera);
            this.normalAngle = this.getProperty("normalAngle", this.normalAngle);
            this.radiusScale = this.getProperty("radiusScale", this.radiusScale);
            this.rayLength = this.getProperty("rayLength", this.rayLength);
            this.rayOrigin = this.getProperty("rayOrigin", this.rayOrigin);
            this.maxAngle = this.getProperty("maxAngle", this.maxAngle);
            this.landingEpsilon = this.getProperty("landingEpsilon", this.landingEpsilon);
            this.minFallVelocity = this.getProperty("minFallVelocity", this.minFallVelocity);
            this.airbornTimeout = this.getProperty("airbornTimeout", this.airbornTimeout);
            this.moveSpeed = this.getProperty("moveSpeed", this.moveSpeed);
            this.lookSpeed = this.getProperty("lookSpeed", this.lookSpeed);
            this.jumpSpeed = this.getProperty("jumpSpeed", this.jumpSpeed);
            this.jumpDelay = this.getProperty("jumpDelay", this.jumpDelay);
            this.eyesHeight = this.getProperty("eyesHeight", this.eyesHeight);
            this.pivotHeight = this.getProperty("pivotHeight", this.pivotHeight);
            this.topLookLimit = this.getProperty("topLookLimit", this.topLookLimit);
            this.downLookLimit = this.getProperty("downLookLimit", this.downLookLimit);
            this.lowTurnSpeed = this.getProperty("lowTurnSpeed", this.lowTurnSpeed);
            this.highTurnSpeed = this.getProperty("highTurnSpeed", this.highTurnSpeed);
            this.enableInput = this.getProperty("enableInput", this.enableInput);
            this.playerNumber = this.getProperty("playerNumber", this.playerNumber);
            this.attachCamera = this.getProperty("attachCamera", this.attachCamera);
            this.freeLooking = this.getProperty("freeLooking", this.freeLooking);
            this.toggleView = this.getProperty("toggleView", this.toggleView);
            this.avatarSkinTag = this.getProperty("avatarSkinTag", this.avatarSkinTag);
            this.cameraCollisions = this.getProperty("cameraCollisions", this.cameraCollisions);
            this.cameraSmoothing = this.getProperty("cameraSmoothing", this.cameraSmoothing);
            this.distanceFactor = this.getProperty("distanceFactor", this.distanceFactor);
            this.minimumDistance = this.getProperty("minimumDistance", this.minimumDistance);
            this.smoothAcceleration = this.getProperty("smoothAcceleration", this.smoothAcceleration);
            this.accelerationSpeed = this.getProperty("accelerationSpeed", this.accelerationSpeed);
            this.decelerationSpeed = this.getProperty("decelerationSpeed", this.decelerationSpeed);
            this.ignoreTriggerTags = this.getProperty("ignoreTriggerTags", this.ignoreTriggerTags);
            this.requireSprintButton = this.getProperty("requireSprintButton", this.requireSprintButton);
            this.sprintThresholdSpeed = this.getProperty("sprintThresholdSpeed", this.sprintThresholdSpeed);
            this.updateStateParams = this.getProperty("updateStateParams", this.updateStateParams);
            this.animationStateParams = this.getProperty("animationStateParams", this.animationStateParams);
            var arrowKeyRotation = this.getProperty("arrowKeyRotation");
            if (arrowKeyRotation === true)
                BABYLON.UserInputOptions.UseArrowKeyRotation = true;
            var boomPositionData = this.getProperty("boomPosition");
            if (boomPositionData != null)
                this.boomPosition = BABYLON.Utilities.ParseVector3(boomPositionData);
            var sphereRadius = this.getProperty("sphereRadius", 0.5);
            this.cameraRaycastShape =
                BABYLON.SceneManager.CreatePhysicsSphereShape(sphereRadius);
            this.abstractMesh = this.getAbstractMesh();
            this.showDebugColliders = BABYLON.Utilities.ShowDebugColliders();
            this.colliderVisibility = BABYLON.Utilities.ColliderVisibility();
            this.colliderRenderGroup = BABYLON.Utilities.ColliderRenderGroup();
            if (this.avatarSkinTag != null && this.avatarSkinTag !== "") {
                this.avatarSkins = this.getChildrenWithTags(this.avatarSkinTag, false);
            }
            var pcontrol = this.getProperty("playerControl", this.playerControl);
            this.setPlayerControl(pcontrol);
            this.resetPlayerRotation();
            this.cameraPivot = new BABYLON.Mesh(this.transform.name + ".CameraPivot", this.scene);
            this.cameraPivot.parent = null;
            this.cameraPivot.position = this.transform.position.clone();
            this.cameraPivot.rotationQuaternion =
                this.transform.rotationQuaternion.clone();
            this.cameraPivot.checkCollisions = false;
            this.cameraPivot.isPickable = false;
            if (this.showDebugColliders === true) {
                var testPivot = BABYLON.MeshBuilder.CreateBox("TestPivot", {
                    width: 0.25,
                    height: 0.25,
                    depth: 0.5,
                }, this.scene);
                testPivot.parent = this.cameraPivot;
                testPivot.position.set(0, 0, 0);
                testPivot.rotationQuaternion = new BABYLON.Quaternion(0, 0, 0, 1);
                testPivot.visibility = 0.5;
                testPivot.renderingGroupId = this.colliderRenderGroup;
                testPivot.checkCollisions = false;
                testPivot.isPickable = false;
            }
            var cylinderShape = this.getProperty("cylinderShape");
            var configController = this.getComponent("BABYLON.CharacterController");
            if (configController != null && cylinderShape === true)
                configController.preCreateCylinderShape();
            this.attachBoneControllers();
            BABYLON.SceneManager.OnKeyboardPress(this.keyboardCamera, function () {
                _this.togglePlayerControl();
            });
            BABYLON.SceneManager.OnGamepadButtonPress(this.buttonCamera, function () {
                _this.togglePlayerControl();
            });
        };
        UniversalPlayerController.prototype.startPlayerController = function () {
            var _this = this;
            if (this.attachCamera === true) {
                this.attachPlayerCamera(this.playerNumber);
            }
            this.navigationAgent = this.getComponent("BABYLON.NavigationAgent");
            this.characterController = this.getComponent("BABYLON.CharacterController");
            if (this.characterController != null) {
                this.avatarRadius = this.characterController.getAvatarRadius();
                this.characterController.setGravity(this.gravitationalForce);
                this.characterController.setFallingSpeed(this.terminalVelocity);
                this.characterController.onUpdatePositionObservable.add(function () {
                    _this.updateCameraController();
                });
                BABYLON.SceneManager.LogWarning("Starting player controller in physic engine mode for: " +
                    this.transform.name);
            }
            else {
                BABYLON.SceneManager.LogWarning("Starting player controller in check collisions mode for: " +
                    this.transform.name);
            }
            var ellipsoidSegs = 16;
            if (this.characterController == null) {
                if (this.abstractMesh != null) {
                    this.abstractMesh.checkCollisions = true;
                    this.abstractMesh.isPickable = true;
                    var capsuleSize = this.abstractMesh.ellipsoid.clone();
                    if (this.showDebugColliders === true &&
                        this.transform._debugCollider == null) {
                        var debugName = this.transform.name + ".Debug";
                        var debugCapsule = BABYLON.MeshBuilder.CreateSphere(debugName, {
                            segments: ellipsoidSegs,
                            diameterX: capsuleSize.x * 2,
                            diameterY: capsuleSize.y * 2,
                            diameterZ: capsuleSize.z * 2,
                        }, this.scene);
                        debugCapsule.position.set(0, 0, 0);
                        debugCapsule.rotationQuaternion =
                            this.transform.rotationQuaternion.clone();
                        debugCapsule.setParent(this.transform);
                        debugCapsule.position.set(0, 0, 0);
                        debugCapsule.visibility = this.colliderVisibility;
                        debugCapsule.renderingGroupId = this.colliderRenderGroup;
                        debugCapsule.material = BABYLON.Utilities.GetColliderMaterial(this.scene);
                        debugCapsule.checkCollisions = false;
                        debugCapsule.isPickable = false;
                        this.transform._debugCollider = debugCapsule;
                    }
                }
            }
        };
        UniversalPlayerController.prototype.updatePlayerController = function () {
            /*
                My stuff
            */
            this.spellOneState = BABYLON.SceneManager.GetKeyboardInput(this.keyboardSpellOne);
            /*
                My stuff
            */
            this.deltaTime = this.getDeltaSeconds();
            this.m_actualVelocity = this.transform.absolutePosition.subtract(this.m_lastPosition);
            this.m_linearVelocity.copyFrom(this.m_actualVelocity);
            this.m_scaledVelocity = this.m_linearVelocity.length() / this.deltaTime;
            this.m_linearVelocity.normalize();
            this.m_linearVelocity.scaleInPlace(this.m_scaledVelocity);
            if (this.playerDrawVelocity > 0) {
                this.m_velocityOffset.copyFrom(this.m_linearVelocity);
                this.m_velocityOffset.scaleInPlace(this.playerDrawVelocity);
            }
            else {
                this.m_velocityOffset.set(0, 0, 0);
            }
            this.m_lastPosition.copyFrom(this.transform.absolutePosition);
            if (this.updateStateParams === true && this.animationState == null) {
                this.attachAnimationController();
            }
            if (this.minJumpTimer > 0) {
                this.minJumpTimer -= this.deltaTime;
                if (this.minJumpTimer < 0)
                    this.minJumpTimer = 0;
            }
            if (this.isCharacterGrounded === true && this.delayJumpTimer > 0) {
                this.delayJumpTimer -= this.deltaTime;
                if (this.delayJumpTimer < 0)
                    this.delayJumpTimer = 0;
            }
            this.jumpAllowed = true;
            if (this.enableInput === false)
                return;
            var userInputX = BABYLON.SceneManager.GetUserInput(BABYLON.UserInputAxis.Horizontal, this.playerNumber);
            var userInputZ = BABYLON.SceneManager.GetUserInput(BABYLON.UserInputAxis.Vertical, this.playerNumber);
            var userMouseX = BABYLON.SceneManager.GetUserInput(BABYLON.UserInputAxis.MouseX, this.playerNumber);
            var userMouseY = BABYLON.SceneManager.GetUserInput(BABYLON.UserInputAxis.MouseY, this.playerNumber);
            if (this.smoothAcceleration === true) {
                if (this.playerControl === PROJECT.PlayerInputControl.ThirdPersonTurning) {
                    this.playerInputX = userInputX;
                }
                else {
                    if (userInputX > 0) {
                        this.playerInputX += this.accelerationSpeed * this.deltaTime;
                        if (this.playerInputX > 1)
                            this.playerInputX = 1;
                    }
                    else if (userInputX < 0) {
                        this.playerInputX -= this.accelerationSpeed * this.deltaTime;
                        if (this.playerInputX < -1)
                            this.playerInputX = -1;
                    }
                    else {
                        if (this.playerInputX < 0) {
                            this.playerInputX += this.decelerationSpeed * this.deltaTime;
                            if (this.playerInputX > 0)
                                this.playerInputX = 0;
                        }
                        else if (this.playerInputX > 0) {
                            this.playerInputX -= this.decelerationSpeed * this.deltaTime;
                            if (this.playerInputX < 0)
                                this.playerInputX = 0;
                        }
                    }
                }
                if (userInputZ > 0) {
                    this.playerInputZ += this.accelerationSpeed * this.deltaTime;
                    if (this.playerInputZ > 1)
                        this.playerInputZ = 1;
                }
                else if (userInputZ < 0) {
                    this.playerInputZ -= this.accelerationSpeed * this.deltaTime;
                    if (this.playerInputZ < -1)
                        this.playerInputZ = -1;
                }
                else {
                    if (this.playerInputZ < 0) {
                        this.playerInputZ += this.decelerationSpeed * this.deltaTime;
                        if (this.playerInputZ > 0)
                            this.playerInputZ = 0;
                    }
                    else if (this.playerInputZ > 0) {
                        this.playerInputZ -= this.decelerationSpeed * this.deltaTime;
                        if (this.playerInputZ < 0)
                            this.playerInputZ = 0;
                    }
                }
            }
            else {
                this.playerInputX = userInputX;
                this.playerInputZ = userInputZ;
            }
            this.playerMouseX = userMouseX;
            this.playerMouseY = userMouseY;
            if (this.playerControl === PROJECT.PlayerInputControl.ThirdPersonTurning) {
                if (this.playerInputX !== 0) {
                    this.playerMouseX = this.playerInputX;
                    this.playerInputX = 0;
                }
            }
            if (this.onPlayerInputObservable.hasObservers() === true) {
                this.onPlayerInputObservable.notifyObservers(this.transform);
            }
            this.inputMovementVector.set(this.playerInputX, 0, this.playerInputZ);
            if (this.inputMovementVector.length() > 1.0)
                this.inputMovementVector.normalize();
            this.inputMagnitude = this.inputMovementVector.length();
            var moveForward = this.playerInputZ > 0;
            var moveBackward = this.playerInputZ < 0;
            var moveRight = this.playerInputX > 0;
            var moveLeft = this.playerInputX < 0;
            if (moveForward === true) {
                if (moveLeft === true) {
                    this.playerMoveDirection = PROJECT.PlayerMoveDirection.ForwardLeft;
                }
                else if (moveRight === true) {
                    this.playerMoveDirection = PROJECT.PlayerMoveDirection.ForwardRight;
                }
                else {
                    this.playerMoveDirection = PROJECT.PlayerMoveDirection.Forward;
                }
            }
            else if (moveBackward === true) {
                if (moveLeft === true) {
                    this.playerMoveDirection = PROJECT.PlayerMoveDirection.BackwardLeft;
                }
                else if (moveRight === true) {
                    this.playerMoveDirection = PROJECT.PlayerMoveDirection.BackwardRight;
                }
                else {
                    this.playerMoveDirection = PROJECT.PlayerMoveDirection.Backward;
                }
            }
            else if (moveLeft === true) {
                this.playerMoveDirection = PROJECT.PlayerMoveDirection.StrafingLeft;
            }
            else if (moveRight === true) {
                this.playerMoveDirection = PROJECT.PlayerMoveDirection.StrafingRight;
            }
            else {
                this.playerMoveDirection = PROJECT.PlayerMoveDirection.Stationary;
            }
            if (this.onPreUpdateObservable.hasObservers() === true) {
                this.onPreUpdateObservable.notifyObservers(this.transform);
            }
            this.cameraForwardVector.copyFrom(this.cameraPivot.forward);
            this.cameraForwardVector.y = 0;
            this.cameraForwardVector.normalize();
            this.cameraForwardVector.scaleToRef(this.playerInputZ, this.desiredForwardVector);
            this.cameraRightVector.copyFrom(this.cameraPivot.right);
            this.cameraRightVector.y = 0;
            this.cameraRightVector.normalize();
            this.cameraRightVector.scaleToRef(this.playerInputX, this.desiredRightVector);
            this.playerRotationVector.y +=
                this.playerMouseX * this.lookSpeed * this.deltaTime;
            this.playerRotationVector.x +=
                -this.playerMouseY * this.lookSpeed * this.deltaTime;
            this.playerRotationVector.x = BABYLON.Scalar.Clamp(this.playerRotationVector.x, -BABYLON.Tools.ToRadians(this.downLookLimit), BABYLON.Tools.ToRadians(this.topLookLimit));
            this.isJumpPressed =
                BABYLON.SceneManager.GetKeyboardInput(this.keyboardJump) ||
                    BABYLON.SceneManager.GetGamepadButtonInput(this.buttonJump);
            this.isSprintPressed =
                BABYLON.SceneManager.GetKeyboardInput(this.keyboardSprint) ||
                    BABYLON.SceneManager.GetGamepadButtonInput(this.buttonSprint);
            this.movementSpeed =
                this.inputMagnitude * this.moveSpeed * this.speedFactor;
            if (this.requireSprintButton === true) {
                if (this.isSprintPressed === false &&
                    this.movementSpeed > this.sprintThresholdSpeed) {
                    this.movementSpeed = this.sprintThresholdSpeed;
                }
            }
            if (this.playerControl === PROJECT.PlayerInputControl.FirstPersonStrafing) {
                this.desiredForwardVector.addToRef(this.desiredRightVector, this.playerMovementVelocity);
                this.playerMovementVelocity.scaleInPlace(this.movementSpeed);
                BABYLON.Quaternion.FromEulerAnglesToRef(0, this.playerRotationVector.y, 0, this.transform.rotationQuaternion);
            }
            else if (this.playerControl === PROJECT.PlayerInputControl.ThirdPersonStrafing ||
                this.playerControl === PROJECT.PlayerInputControl.ThirdPersonTurning) {
                this.desiredForwardVector.addToRef(this.desiredRightVector, this.playerMovementVelocity);
                this.playerMovementVelocity.scaleInPlace(this.movementSpeed);
                if (this.freeLooking === true) {
                    if (this.inputMagnitude > 0) {
                        var strafingTurnRatio = this.playerMovementVelocity.length() / this.moveSpeed;
                        var strafingTurnSpeed = BABYLON.Scalar.Lerp(this.highTurnSpeed, this.lowTurnSpeed, strafingTurnRatio);
                        BABYLON.Quaternion.FromEulerAnglesToRef(0, this.playerRotationVector.y, 0, this.playerRotationQuaternion);
                        BABYLON.Quaternion.SlerpToRef(this.transform.rotationQuaternion, this.playerRotationQuaternion, strafingTurnSpeed * this.deltaTime, this.transform.rotationQuaternion);
                    }
                }
                else {
                    BABYLON.Quaternion.FromEulerAnglesToRef(0, this.playerRotationVector.y, 0, this.transform.rotationQuaternion);
                }
            }
            else if (this.playerControl === PROJECT.PlayerInputControl.ThirdPersonForward) {
                this.desiredForwardVector.addToRef(this.desiredRightVector, this.playerLookRotation);
                this.transform.forward.scaleToRef(this.movementSpeed, this.playerMovementVelocity);
                if (this.inputMagnitude > 0) {
                    var forwardTurnRatio = this.playerMovementVelocity.length() / this.moveSpeed;
                    var forwardTurnSpeed = BABYLON.Scalar.Lerp(this.highTurnSpeed, this.lowTurnSpeed, forwardTurnRatio);
                    BABYLON.Utilities.LookRotationToRef(this.playerLookRotation, this.playerRotationQuaternion);
                    BABYLON.Quaternion.SlerpToRef(this.transform.rotationQuaternion, this.playerRotationQuaternion, forwardTurnSpeed * this.deltaTime, this.transform.rotationQuaternion);
                }
            }
            this.verticalVelocity = this.getVerticalVelocity();
            this.movementVelocity.copyFrom(this.playerMovementVelocity);
            this.isCharacterGrounded = false;
            this.isCharacterSliding = false;
            this.isCharacterFalling = false;
            this.isCharacterJumpFrame = false;
            this.isCharacterJumpSpecial = false;
            this.isCharacterNavigating =
                this.navigationAgent != null && this.navigationAgent.isNavigating();
            if (this.characterController != null) {
                this.updateCharacterController();
            }
            else {
                this.updateCheckCollisions();
                this.updateCameraController();
            }
            if (this.animationState != null && this.updateStateParams === true) {
                this.validateAnimationStateParams();
                this.animationState.setInteger(this.animationStateParams.moveDirection, this.playerMoveDirection);
                this.animationState.setFloat(this.animationStateParams.inputMagnitude, this.inputMagnitude);
                this.animationState.setFloat(this.animationStateParams.horizontalInput, this.playerInputX);
                this.animationState.setFloat(this.animationStateParams.verticalInput, this.playerInputZ);
                this.animationState.setFloat(this.animationStateParams.mouseXInput, this.playerMouseX);
                this.animationState.setFloat(this.animationStateParams.mouseYInput, this.playerMouseY);
                this.animationState.setFloat(this.animationStateParams.heightInput, this.verticalVelocity);
                this.animationState.setFloat(this.animationStateParams.speedInput, this.movementSpeed);
                this.animationState.setBool(this.animationStateParams.jumpInput, this.isCharacterJumpFrame);
                this.animationState.setBool(this.animationStateParams.jumpState, this.isCharacterJumping);
                this.animationState.setBool(this.animationStateParams.fallingState, this.isCharacterFalling);
                this.animationState.setBool(this.animationStateParams.slidingState, this.isCharacterSliding);
                this.animationState.setBool(this.animationStateParams.specialState, this.isCharacterJumpSpecial);
                this.animationState.setBool(this.animationStateParams.groundedState, this.isCharacterGrounded);
                this.animationState.setBool(this.animationStateParams.spellOneState, this.spellOneState);
                if (this.isCharacterNavigating === true) {
                }
            }
            if (this.onPostUpdateObservable.hasObservers() === true) {
                this.onPostUpdateObservable.notifyObservers(this.transform);
            }
        };
        UniversalPlayerController.prototype.updateCharacterController = function () {
            if (this.characterController != null) {
                this.castPhysicsGroundCheckRay();
                var slopeAngleLength = 0;
                var minGroundDistanceLength = PROJECT.UniversalPlayerController.MIN_GROUND_DISTANCE +
                    slopeAngleLength;
                this.groundCollision =
                    this.groundHit === true &&
                        this.groundDistance <= minGroundDistanceLength &&
                        (this.normalAngle <= 0 || this.groundNormal.y >= this.normalAngle);
                if (this.groundCollision === true && this.minJumpTimer <= 0) {
                    if (this.verticalVelocity === 0 ||
                        (this.groundAngle > 0 && this.verticalVelocity > 0)) {
                        this.isCharacterSliding = false;
                        this.isCharacterGrounded = true;
                    }
                    else if (this.groundAngle > 0 && this.verticalVelocity < 0) {
                        this.isCharacterSliding = true;
                        this.isCharacterGrounded = false;
                    }
                }
                if (this.isCharacterGrounded === true)
                    this.isCharacterJumping = false;
                this.isCharacterFalling =
                    this.isCharacterGrounded === false &&
                        this.isCharacterSliding == false &&
                        this.isCharacterJumping == false &&
                        this.verticalVelocity < 0 &&
                        Math.abs(this.verticalVelocity) >= this.minFallVelocity;
                if (this.isCharacterFalling === true &&
                    this.isCharacterFallTriggered === false) {
                    this.isCharacterFallTriggered = true;
                    if (this.jumpDelay > 0)
                        this.delayJumpTimer = this.jumpDelay;
                }
                if (this.isCharacterGrounded === true)
                    this.isCharacterFallTriggered = false;
                if (this.moveWithCollision === false)
                    return;
                if (this.isCharacterNavigating === false) {
                    if (this.isCharacterGrounded === true) {
                        if (this.delayJumpTimer <= 0)
                            this.isCharacterJumpFrame =
                                this.jumpAllowed === true && this.isJumpPressed === true;
                        if (this.isCharacterJumpFrame === true &&
                            this.canSpecialJump != null &&
                            this.canSpecialJump() === true) {
                            this.isCharacterJumpFrame = false;
                            this.isCharacterJumpSpecial = true;
                            this.isCharacterJumping = false;
                        }
                        if (this.isCharacterJumpFrame === true && this.jumpSpeed > 0) {
                            this.isCharacterJumping = true;
                            this.characterController.jump(this.jumpSpeed);
                            if (this.jumpDelay > 0)
                                this.delayJumpTimer = this.jumpDelay;
                            if (this.airbornTimeout > 0)
                                this.minJumpTimer = this.airbornTimeout + this.deltaTime;
                            this.lastJumpVelocity.set(this.movementVelocity.x, 0, this.movementVelocity.z);
                        }
                        if (this.onBeforeMoveObservable.hasObservers() === true) {
                            this.onBeforeMoveObservable.notifyObservers(this.transform);
                        }
                        this.movementVelocity.scaleInPlace(this.deltaTime);
                        this.characterController.move(this.movementVelocity);
                    }
                }
                else {
                    this.characterController.setGhostWorldPosition(this.transform.position);
                }
            }
        };
        UniversalPlayerController.prototype.updateCheckCollisions = function () {
            if (this.abstractMesh != null) {
                var pick = this.pickCheckCollisionsRaycast();
                this.groundHit = pick != null && pick.hit;
                this.groundNode = pick != null && pick.hit ? pick.pickedMesh : null;
                if (pick != null && pick.hit && pick.pickedPoint != null) {
                    this.groundPoint.copyFrom(pick.pickedPoint);
                }
                else {
                    this.groundPoint.set(0, 0, 0);
                }
                if (pick != null) {
                    var pickNormal = pick.getNormal(true);
                    if (pickNormal != null) {
                        this.groundNormal.copyFrom(pickNormal);
                    }
                    else {
                        this.groundNormal.set(0, 0, 0);
                    }
                }
                else {
                    this.groundNormal.set(0, 0, 0);
                }
                this.groundAngle =
                    this.groundHit === true
                        ? Math.abs(BABYLON.Utilities.GetAngle(this.groundNormal, BABYLON.Vector3.UpReadOnly))
                        : 0;
                if (this.groundAngle >= 88)
                    this.groundAngle = 0;
                this.groundDistance =
                    pick != null && pick.hit ? pick.distance - this.rayOrigin : -1;
                var minGroundDistanceLength = 0.1;
                this.groundCollision =
                    this.groundHit === true &&
                        this.groundDistance <= minGroundDistanceLength;
                if (this.groundCollision === true && this.minJumpTimer <= 0) {
                    if (this.verticalVelocity === 0 ||
                        (this.groundAngle > 0 && this.verticalVelocity > 0)) {
                        this.isCharacterSliding = false;
                        this.isCharacterGrounded = true;
                    }
                    else if (this.groundAngle > 0 && this.verticalVelocity < 0) {
                        this.isCharacterSliding = true;
                        this.isCharacterGrounded = false;
                    }
                }
                var maxSlopeLimit = this.maxAngle;
                if (this.isCharacterGrounded === true)
                    this.isCharacterJumping = false;
                this.isCharacterFalling =
                    this.isCharacterGrounded === false &&
                        this.isCharacterSliding == false &&
                        this.isCharacterJumping == false &&
                        this.verticalVelocity < 0 &&
                        Math.abs(this.verticalVelocity) >= this.minFallVelocity;
                if (this.isCharacterFalling === true &&
                    this.isCharacterFallTriggered === false) {
                    this.isCharacterFallTriggered = true;
                    if (this.jumpDelay > 0)
                        this.delayJumpTimer = this.jumpDelay;
                }
                if (this.isCharacterGrounded === true)
                    this.isCharacterFallTriggered = false;
                if (this.gravitationalForce > 0) {
                    this.groundVelocity -= this.gravitationalForce * this.deltaTime;
                    if (this.groundVelocity > 0 &&
                        this.jumpSpeed > 0 &&
                        this.groundVelocity > this.jumpSpeed) {
                        this.groundVelocity = this.jumpSpeed;
                    }
                    else if (this.groundVelocity < 0 &&
                        Math.abs(this.groundVelocity) > Math.abs(this.terminalVelocity)) {
                        this.groundVelocity = -Math.abs(this.terminalVelocity);
                    }
                    if (this.isCharacterGrounded === true && this.groundVelocity < -1) {
                        this.groundVelocity = -1;
                    }
                }
                if (this.moveWithCollision === false)
                    return;
                if (this.isCharacterNavigating === false) {
                    if (this.isCharacterGrounded === true) {
                        if (this.delayJumpTimer <= 0)
                            this.isCharacterJumpFrame =
                                this.jumpAllowed === true && this.isJumpPressed === true;
                        if (this.isCharacterJumpFrame === true &&
                            this.canSpecialJump != null &&
                            this.canSpecialJump() === true) {
                            this.isCharacterJumpFrame = false;
                            this.isCharacterJumpSpecial = true;
                            this.isCharacterJumping = false;
                        }
                        if (this.isCharacterJumpFrame === true && this.jumpSpeed > 0) {
                            this.isCharacterJumping = true;
                            this.groundVelocity = this.jumpSpeed;
                            if (this.jumpDelay > 0)
                                this.delayJumpTimer = this.jumpDelay;
                            if (this.airbornTimeout > 0)
                                this.minJumpTimer = this.airbornTimeout + this.deltaTime;
                            this.lastJumpVelocity.set(this.movementVelocity.x, 0, this.movementVelocity.z);
                        }
                    }
                    else {
                        if (this.isCharacterJumping === true) {
                            this.movementVelocity.copyFrom(this.lastJumpVelocity);
                        }
                        this.movementVelocity.addInPlace(this.airbornVelocity);
                    }
                    this.movementVelocity.y = this.groundVelocity;
                    if (this.onBeforeMoveObservable.hasObservers() === true) {
                        this.onBeforeMoveObservable.notifyObservers(this.transform);
                    }
                    this.movementVelocity.scaleInPlace(this.deltaTime);
                    this.abstractMesh.moveWithCollisions(this.movementVelocity);
                }
            }
        };
        UniversalPlayerController.prototype.updateCameraController = function () {
            if (this.enableInput === false)
                return;
            var allowRotation = this.rotateCamera;
            if (this.cameraPivot != null) {
                if (this.targetCameraOffset.x !== 0 ||
                    this.targetCameraOffset.y !== 0 ||
                    this.targetCameraOffset.z !== 0) {
                    this.cameraPivotOffset.copyFrom(this.targetCameraOffset);
                }
                else {
                    if (this.playerControl ===
                        PROJECT.PlayerInputControl.ThirdPersonStrafing ||
                        this.playerControl ===
                            PROJECT.PlayerInputControl.ThirdPersonTurning ||
                        this.playerControl === PROJECT.PlayerInputControl.ThirdPersonForward) {
                        this.cameraPivotOffset.set(0, this.pivotHeight, 0);
                    }
                    else {
                        this.cameraPivotOffset.set(0, this.eyesHeight, 0);
                    }
                }
                BABYLON.Utilities.GetAbsolutePositionToRef(this.transform, this.cameraPivot.position, this.cameraPivotOffset);
                if (allowRotation === true) {
                    BABYLON.Quaternion.FromEulerAnglesToRef(this.playerRotationVector.x, this.playerRotationVector.y, 0, this.cameraPivot.rotationQuaternion);
                }
            }
            if (allowRotation === true && this.cameraNode != null) {
                if (this.cameraSmoothing <= 0)
                    this.cameraSmoothing = 5.0;
                if (this.playerControl ===
                    PROJECT.PlayerInputControl.ThirdPersonStrafing ||
                    this.playerControl ===
                        PROJECT.PlayerInputControl.ThirdPersonTurning ||
                    this.playerControl === PROJECT.PlayerInputControl.ThirdPersonForward) {
                    if (this.cameraCollisions === true) {
                        var maxDistance = Math.abs(this.boomPosition.z);
                        var parentNode = this.cameraNode
                            .parent;
                        this.dollyDirection.scaleToRef(maxDistance, this.scaledMaxDirection);
                        this.dollyDirection.scaleToRef(this.cameraDistance, this.scaledCamDirection);
                        BABYLON.Utilities.GetAbsolutePositionToRef(parentNode, this.parentNodePosition);
                        BABYLON.Utilities.TransformPointToRef(parentNode, this.scaledMaxDirection, this.maximumCameraPos);
                        var contact = false;
                        var distance = 0;
                        if (this.characterController != null) {
                            var raycast = BABYLON.SceneManager.PhysicsShapecastToPoint(this.scene, this.cameraRaycastShape, this.parentNodePosition, this.maximumCameraPos, this.defaultRaycastGroup, this.cameraRaycastMask);
                            contact =
                                raycast != null &&
                                    raycast.hasHit === true &&
                                    raycast.collisionObject != null &&
                                    raycast.collisionObject.entity != null;
                            distance =
                                raycast != null && raycast.hasHit === true
                                    ? raycast.hitDistance
                                    : 0;
                            if (contact === true) {
                                var contactTag = SM.GetTransformTag(raycast.collisionObject.entity);
                                if (this.ignoreTriggerTags != null &&
                                    this.ignoreTriggerTags !== "" &&
                                    this.ignoreTriggerTags.indexOf(contactTag) >= 0) {
                                    contact = false;
                                    distance = 0;
                                }
                            }
                        }
                        else {
                            this.cameraForward.set(0, 0, -1);
                            BABYLON.Utilities.TransformPointToRef(parentNode, this.cameraForward, this.cameraForward);
                            this.cameraForward.subtractToRef(this.parentNodePosition, this.cameraDirection);
                            this.cameraDirection.normalize();
                            var pick = this.pickCameraCollisionsRaycast(this.parentNodePosition, this.cameraDirection, this.maximumCameraPos.length());
                            contact = pick != null && pick.hit && pick.pickedMesh != null;
                            distance = pick != null && pick.distance;
                            if (contact === true) {
                                var contactTag = SM.GetTransformTag(pick.pickedMesh);
                                if (this.ignoreTriggerTags != null &&
                                    this.ignoreTriggerTags !== "" &&
                                    this.ignoreTriggerTags.indexOf(contactTag) >= 0) {
                                    contact = false;
                                    distance = 0;
                                }
                            }
                        }
                        if (contact === true) {
                            this.cameraDistance = BABYLON.Scalar.Clamp(distance * this.distanceFactor, this.minimumDistance, maxDistance);
                            if (this.cameraNode.position.x !== this.scaledCamDirection.x ||
                                this.cameraNode.position.y !== this.scaledCamDirection.y ||
                                this.cameraNode.position.z !== this.scaledCamDirection.z) {
                                BABYLON.Vector3.LerpToRef(this.cameraNode.position, this.scaledCamDirection, this.deltaTime * this.cameraSmoothing, this.cameraNode.position);
                            }
                        }
                        else {
                            if (this.cameraNode.position.x !== this.boomPosition.x ||
                                this.cameraNode.position.y !== this.boomPosition.y ||
                                this.cameraNode.position.z !== this.boomPosition.z) {
                                BABYLON.Vector3.LerpToRef(this.cameraNode.position, this.boomPosition, this.deltaTime * this.cameraSmoothing, this.cameraNode.position);
                            }
                        }
                    }
                    else {
                        if (this.cameraNode.position.x !== this.boomPosition.x ||
                            this.cameraNode.position.y !== this.boomPosition.y ||
                            this.cameraNode.position.z !== this.boomPosition.z) {
                            BABYLON.Vector3.LerpToRef(this.cameraNode.position, this.boomPosition, this.deltaTime * this.cameraSmoothing, this.cameraNode.position);
                        }
                    }
                }
                else {
                    if (this.cameraNode.position.x !== 0 ||
                        this.cameraNode.position.y !== 0 ||
                        this.cameraNode.position.z !== 0) {
                        this.cameraNode.position.set(0, 0, 0);
                    }
                }
            }
        };
        UniversalPlayerController.prototype.castPhysicsGroundCheckRay = function () {
            this.groundHit = false;
            this.groundNode = null;
            this.groundPoint.set(0, 0, 0);
            this.groundNormal.set(0, 0, 0);
            this.groundAngle = 0;
            this.groundDistance = 0;
            if (this.rayLength <= 0)
                this.rayLength = 0.1;
            var raycastLength = this.rayLength / this.transform.scaling.y + 0.1;
            var playerTransformDownDirection = UTIL.TransformDirection(this.transform, this.downDirection);
            this.offsetGroundRaycastPosition.set(0, this.rayOrigin, 0);
            BABYLON.Utilities.GetAbsolutePositionToRef(this.transform, this.startGroundRaycastPosition, this.offsetGroundRaycastPosition);
            BABYLON.Utilities.GetAbsolutePositionToRef(this.transform, this.endGroundRaycastPosition, this.downDirection.scale(raycastLength));
            this.endGroundRaycastPosition.y += this.rayOrigin;
            if (this.radiusScale <= 0)
                this.radiusScale = 1.0;
            if (this.sphereCollisionShape == null)
                this.sphereCollisionShape =
                    BABYLON.SceneManager.CreatePhysicsSphereShape(this.avatarRadius * this.radiusScale);
            var raycast = BABYLON.SceneManager.PhysicsShapecast(this.scene, this.sphereCollisionShape, this.startGroundRaycastPosition, playerTransformDownDirection, raycastLength, this.defaultRaycastGroup, this.defaultRaycastMask);
            if (raycast.hasHit === true &&
                raycast.collisionObject != null &&
                raycast.collisionObject.entity != null) {
                this.groundHit = true;
                this.groundNode = raycast.collisionObject.entity;
                if (raycast.hitPoint != null)
                    this.groundPoint.copyFrom(raycast.hitPoint);
                if (raycast.hitNormal != null)
                    this.groundNormal.copyFrom(raycast.hitNormal);
                this.groundAngle =
                    this.groundHit === true
                        ? Math.abs(BABYLON.Utilities.GetAngle(this.groundNormal, BABYLON.Vector3.UpReadOnly))
                        : 0;
                if (this.groundAngle >= 88)
                    this.groundAngle = 0;
                this.groundDistance = raycast.hitDistance - this.rayOrigin;
            }
            if (this.showDebugColliders === true) {
                if (this.groundSensorLine == null)
                    this.groundSensorLine = new BABYLON.LinesMeshRenderer(this.transform.name + ".GroundSensorLine", this.scene);
                if (this.groundHit === true) {
                    this.groundSensorLine.drawLine([this.startGroundRaycastPosition, raycast.hitPoint], BABYLON.Color3.Red());
                }
                else {
                    this.groundSensorLine.drawLine([this.startGroundRaycastPosition, this.endGroundRaycastPosition], BABYLON.Color3.Green());
                }
            }
        };
        UniversalPlayerController.prototype.pickCheckCollisionsRaycast = function (closetCheck) {
            var _this = this;
            if (closetCheck === void 0) { closetCheck = true; }
            if (this.abstractMesh == null)
                return null;
            if (this.rayLength <= 0)
                this.rayLength = 0.1;
            var raycastLength = this.rayLength / this.transform.scaling.y + 0.1;
            if (this.pickingOrigin == null)
                this.pickingOrigin = new BABYLON.Vector3(0, this.rayOrigin, 0);
            if (this.pickingRay == null) {
                this.pickingRay = new BABYLON.Ray(this.pickingOrigin, this.pickingDirection, raycastLength);
            }
            if (this.pickingHelper == null) {
                this.pickingHelper = new BABYLON.RayHelper(this.pickingRay);
                this.pickingHelper.attachToMesh(this.abstractMesh, this.pickingDirection, this.pickingOrigin, raycastLength);
                if (this.showDebugColliders === true)
                    this.pickingHelper.show(this.scene, new BABYLON.Color3(1, 0, 0));
            }
            return this.pickingRay != null
                ? this.scene.pickWithRay(this.pickingRay, function (mesh) {
                    return mesh != _this.abstractMesh && mesh.checkCollisions === true;
                }, !closetCheck)
                : null;
        };
        UniversalPlayerController.prototype.pickCameraCollisionsRaycast = function (origin, direction, rayLength, closetCheck) {
            var _this = this;
            if (closetCheck === void 0) { closetCheck = true; }
            if (this.abstractMesh == null)
                return null;
            if (this.cameraRay == null)
                this.cameraRay = new BABYLON.Ray(origin, direction, rayLength);
            if (this.cameraRay != null) {
                this.cameraRay.origin.copyFrom(origin);
                this.cameraRay.direction.copyFrom(direction);
                this.cameraRay.length = rayLength;
            }
            if (this.cameraHelper == null) {
                this.cameraHelper = new BABYLON.RayHelper(this.cameraRay);
                this.cameraHelper.attachToMesh(this.abstractMesh, this.cameraDirection, origin, rayLength);
            }
            return this.cameraRay != null
                ? this.scene.pickWithRay(this.cameraRay, function (mesh) {
                    return mesh != _this.abstractMesh && mesh.checkCollisions === true;
                }, !closetCheck)
                : null;
        };
        UniversalPlayerController.prototype.getActualVerticalVelocity = function () {
            return this.m_actualVelocity.y / this.deltaTime;
        };
        UniversalPlayerController.prototype.getCheckedVerticalVelocity = function () {
            var currentVelocity = this.characterController != null
                ? this.characterController.getVerticalVelocity()
                : this.getActualVerticalVelocity();
            return Math.abs(currentVelocity) >=
                PROJECT.UniversalPlayerController.MIN_VERTICAL_VELOCITY
                ? currentVelocity
                : 0;
        };
        UniversalPlayerController.prototype.destroyPlayerController = function () {
            this.cameraPivot = null;
            this.cameraNode = null;
            this.animationState = null;
            this.characterController = null;
            this.onPreUpdateObservable.clear();
            this.onPreUpdateObservable = null;
            this.onBeforeMoveObservable.clear();
            this.onBeforeMoveObservable = null;
            this.onPostUpdateObservable.clear();
            this.onPostUpdateObservable = null;
        };
        UniversalPlayerController.prototype.validateAnimationStateParams = function () {
            if (this.animationStateParams == null) {
                this.animationStateParams = {
                    moveDirection: "Direction",
                    inputMagnitude: "Magnitude",
                    horizontalInput: "Horizontal",
                    verticalInput: "Vertical",
                    mouseXInput: "MouseX",
                    mouseYInput: "MouseY",
                    heightInput: "Height",
                    speedInput: "Speed",
                    jumpInput: "Jump",
                    jumpState: "Jumping",
                    fallingState: "Falling",
                    slidingState: "Sliding",
                    specialState: "Special",
                    groundedState: "Grounded",
                    spellOneState: "MagicOne",
                    spellTwoState: "Spell_2",
                    spellThreeState: "Spell_3",
                    spellFourState: "Spell_4",
                    spellFiveState: "Spell_5",
                };
            }
        };
        UniversalPlayerController.MIN_VERTICAL_VELOCITY = 0.01;
        UniversalPlayerController.MIN_GROUND_DISTANCE = 0.15;
        UniversalPlayerController.MIN_SLOPE_LIMIT = 0;
        return UniversalPlayerController;
    }(BABYLON.ScriptComponent));
    PROJECT.UniversalPlayerController = UniversalPlayerController;
    var PlayerInputControl;
    (function (PlayerInputControl) {
        PlayerInputControl[PlayerInputControl["FirstPersonStrafing"] = 0] = "FirstPersonStrafing";
        PlayerInputControl[PlayerInputControl["ThirdPersonStrafing"] = 1] = "ThirdPersonStrafing";
        PlayerInputControl[PlayerInputControl["ThirdPersonTurning"] = 2] = "ThirdPersonTurning";
        PlayerInputControl[PlayerInputControl["ThirdPersonForward"] = 3] = "ThirdPersonForward";
    })(PlayerInputControl = PROJECT.PlayerInputControl || (PROJECT.PlayerInputControl = {}));
    var SpellAnimationState;
    (function (SpellAnimationState) {
        SpellAnimationState[SpellAnimationState["NoSpellStarted"] = 0] = "NoSpellStarted";
        SpellAnimationState[SpellAnimationState["SpellStarted"] = 1] = "SpellStarted";
    })(SpellAnimationState = PROJECT.SpellAnimationState || (PROJECT.SpellAnimationState = {}));
    var PlayerMoveDirection;
    (function (PlayerMoveDirection) {
        PlayerMoveDirection[PlayerMoveDirection["Stationary"] = 0] = "Stationary";
        PlayerMoveDirection[PlayerMoveDirection["Forward"] = 1] = "Forward";
        PlayerMoveDirection[PlayerMoveDirection["ForwardLeft"] = 2] = "ForwardLeft";
        PlayerMoveDirection[PlayerMoveDirection["ForwardRight"] = 3] = "ForwardRight";
        PlayerMoveDirection[PlayerMoveDirection["Backward"] = 4] = "Backward";
        PlayerMoveDirection[PlayerMoveDirection["BackwardLeft"] = 5] = "BackwardLeft";
        PlayerMoveDirection[PlayerMoveDirection["BackwardRight"] = 6] = "BackwardRight";
        PlayerMoveDirection[PlayerMoveDirection["StrafingLeft"] = 7] = "StrafingLeft";
        PlayerMoveDirection[PlayerMoveDirection["StrafingRight"] = 8] = "StrafingRight";
    })(PlayerMoveDirection = PROJECT.PlayerMoveDirection || (PROJECT.PlayerMoveDirection = {}));
})(PROJECT || (PROJECT = {}));
var PROJECT;
(function (PROJECT) {
    /**
    * Babylon Script Component
    * @class FxParticleSystem
    */
    var FxParticleSystem = /** @class */ (function (_super) {
        __extends(FxParticleSystem, _super);
        function FxParticleSystem() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.m_particleEmitter = null;
            _this.m_particleSystem = null;
            return _this;
        }
        FxParticleSystem.prototype.getParticleEmitter = function () { return this.m_particleEmitter; };
        FxParticleSystem.prototype.getParticleSystem = function () { return this.m_particleSystem; };
        FxParticleSystem.prototype.awake = function () {
            var rootUrl = BABYLON.SceneManager.GetRootUrl(this.scene);
            var classType = this.getProperty("classType", 0);
            var particleText = this.getProperty("base64ParticleSystem");
            var playOnAwake = this.getProperty("playOnAwake", false);
            var particleTexture = this.getProperty("particleTexture");
            this.m_particleEmitter = this.getAbstractMesh();
            if (this.m_particleEmitter == null) {
                this.m_particleEmitter = BABYLON.Mesh.CreateBox(this.transform.name + ".Emitter", 0.25, this.scene);
                this.m_particleEmitter.parent = this.transform;
                this.m_particleEmitter.position.set(0, 0, 0);
                this.m_particleEmitter.isVisible = false;
                this.m_particleEmitter.isPickable = false;
                this.m_particleEmitter.material = BABYLON.Utilities.GetColliderMaterial(this.scene);
            }
            if (particleText != null && particleText !== "") {
                var particleJson = window.atob(particleText);
                if (particleJson != null && particleJson !== "") {
                    var particleParsed = JSON.parse(particleJson);
                    if (particleParsed != null) {
                        if (particleParsed.texture != null && particleTexture != null) {
                            particleParsed.texture.name = particleTexture.filename; // Note: Particle System Parser Use Name Not Url
                            particleParsed.texture.url = particleTexture.filename; // Note: Particle System Parser Use Name Not Url
                        }
                        if (classType === 1) { // GPU Particle System
                            this.m_particleSystem = BABYLON.GPUParticleSystem.Parse(particleParsed, this.scene, rootUrl);
                        }
                        else { // CPU Particle System
                            this.m_particleSystem = BABYLON.ParticleSystem.Parse(particleParsed, this.scene, rootUrl);
                        }
                        if (this.m_particleSystem != null) {
                            if (this.m_particleEmitter != null)
                                this.m_particleSystem.emitter = this.m_particleEmitter;
                            if (playOnAwake === false)
                                this.m_particleSystem.stop();
                        }
                    }
                }
            }
        };
        FxParticleSystem.prototype.destroy = function () {
            this.m_particleEmitter = null;
            if (this.m_particleSystem != null) {
                this.m_particleSystem.dispose();
                this.m_particleSystem = null;
            }
        };
        return FxParticleSystem;
    }(BABYLON.ScriptComponent));
    PROJECT.FxParticleSystem = FxParticleSystem;
})(PROJECT || (PROJECT = {}));
var PROJECT;
(function (PROJECT) {
    /**
     * Babylon water material system pro class (Babylon Water Material)
     * @class SkyMaterialSystem - All rights reserved (c) 2020 Mackey Kinard
     */
    var SkyMaterialSystem = /** @class */ (function (_super) {
        __extends(SkyMaterialSystem, _super);
        function SkyMaterialSystem() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.skyfog = false;
            _this.skysize = 1000;
            _this.probesize = 128;
            _this.reflections = false;
            _this.reflectlevel = 1;
            _this.skytintcolor = new BABYLON.Color3(1, 1, 1);
            _this.m_skyboxMesh = null;
            _this.m_skyMaterial = null;
            _this.m_reflectProbe = null;
            return _this;
        }
        SkyMaterialSystem.prototype.getSkyboxMesh = function () { return this.m_skyboxMesh; };
        SkyMaterialSystem.prototype.getSkyMaterial = function () { return this.m_skyMaterial; };
        SkyMaterialSystem.prototype.getReflectionProbe = function () { return this.m_reflectProbe; };
        SkyMaterialSystem.prototype.awake = function () { this.awakeSkyboxMaterial(); };
        SkyMaterialSystem.prototype.start = function () { };
        SkyMaterialSystem.prototype.update = function () { };
        SkyMaterialSystem.prototype.late = function () { };
        SkyMaterialSystem.prototype.after = function () { };
        SkyMaterialSystem.prototype.destroy = function () { this.destroySkyboxMaterial(); };
        SkyMaterialSystem.prototype.awakeSkyboxMaterial = function () {
            this.skyfog = this.getProperty("applyMeshFog", this.skyfog);
            this.skysize = this.getProperty("boxSize", this.skysize);
            this.probesize = this.getProperty("probeSize", this.probesize);
            this.reflections = this.getProperty("reflections", this.reflections);
            this.reflectlevel = this.getProperty("reflectLevel", this.reflectlevel);
            // ..
            var tintColor = this.getProperty("tintColor");
            if (tintColor != null)
                this.skytintcolor = BABYLON.Utilities.ParseColor3(tintColor);
            // ..
            this.m_skyboxMesh = BABYLON.Mesh.CreateBox("Ambient Skybox", this.skysize, this.scene);
            this.m_skyboxMesh.position.set(0, 0, 0);
            this.m_skyboxMesh.infiniteDistance = true;
            this.m_skyboxMesh.applyFog = this.skyfog;
            if (this.scene.useRightHandedSystem === true)
                this.m_skyboxMesh.scaling.x *= -1;
            // Setup Sky Material Properties
            this.m_skyMaterial = new BABYLON.SkyMaterial(this.transform.name + ".SkyMaterial", this.scene);
            this.m_skyMaterial.backFaceCulling = false;
            this.setSkyboxTintColor(this.skytintcolor);
            /**
             * Defines the overall luminance of sky in interval [0, 1].
             */
            this.m_skyMaterial.luminance = this.getProperty("luminance", this.m_skyMaterial.luminance);
            /**
            * Defines the amount (scattering) of haze as opposed to molecules in atmosphere.
            */
            this.m_skyMaterial.turbidity = this.getProperty("turbidity", this.m_skyMaterial.turbidity);
            /**
             * Defines the sky appearance (light intensity).
             */
            this.m_skyMaterial.rayleigh = this.getProperty("rayleigh", this.m_skyMaterial.rayleigh);
            /**
             * Defines the mieCoefficient in interval [0, 0.1] which affects the property .mieDirectionalG.
             */
            this.m_skyMaterial.mieCoefficient = this.getProperty("mieCoefficient", this.m_skyMaterial.mieCoefficient);
            /**
             * Defines the amount of haze particles following the Mie scattering theory.
             */
            this.m_skyMaterial.mieDirectionalG = this.getProperty("mieDirectionalG", this.m_skyMaterial.mieDirectionalG);
            /**
             * Defines the distance of the sun according to the active scene camera.
             */
            this.m_skyMaterial.distance = this.getProperty("distance", this.m_skyMaterial.distance);
            /**
             * Defines the sun inclination, in interval [-0.5, 0.5]. When the inclination is not 0, the sun is said
             * "inclined".
             */
            this.m_skyMaterial.inclination = this.getProperty("inclination", this.m_skyMaterial.inclination);
            /**
             * Defines the solar azimuth in interval [0, 1]. The azimuth is the angle in the horizontal plan between
             * an object direction and a reference direction.
             */
            this.m_skyMaterial.azimuth = this.getProperty("azimuth", this.m_skyMaterial.azimuth);
            /**
             * Defines an offset vector used to get a horizon offset.
             * @example skyMaterial.cameraOffset.y = camera.globalPosition.y // Set horizon relative to 0 on the Y axis
             */
            var camOffsetData = this.getProperty("cameraOffset");
            if (camOffsetData != null)
                this.m_skyMaterial.cameraOffset = BABYLON.Utilities.ParseVector3(camOffsetData);
            /**
             * Defines if the sun position should be computed (inclination and azimuth) according to the scene
             * sun position.
             */
            this.m_skyMaterial.useSunPosition = this.getProperty("useSunPosition", this.m_skyMaterial.useSunPosition);
            this.m_skyMaterial.sunPosition = new BABYLON.Vector3(0, 50, 0);
            if (this.scene.metadata != null && this.scene.metadata.unity != null && this.scene.metadata.unity) {
                if (this.scene.metadata.unity.sunposition != null) {
                    this.m_skyMaterial.sunPosition = BABYLON.Utilities.ParseVector3(this.scene.metadata.unity.sunposition);
                }
            }
            // Assign Sky Material To Skybox Mesh
            this.m_skyboxMesh.material = this.m_skyMaterial;
            // Setup Environment Reflection Probe Texture
            if (this.reflections === true) {
                this.m_reflectProbe = new BABYLON.ReflectionProbe("Skybox-ReflectionProbe", this.probesize, this.scene);
                this.m_reflectProbe.renderList.push(this.m_skyboxMesh);
                this.scene.customRenderTargets.push(this.m_reflectProbe.cubeTexture);
                this.scene.environmentTexture = this.m_reflectProbe.cubeTexture;
                this.scene.environmentIntensity = this.reflectlevel;
            }
        };
        SkyMaterialSystem.prototype.destroySkyboxMaterial = function () {
            if (this.m_skyboxMesh != null) {
                this.m_skyboxMesh.dispose();
                this.m_skyboxMesh = null;
            }
            if (this.m_reflectProbe != null) {
                this.m_reflectProbe.dispose();
                this.m_reflectProbe = null;
            }
            if (this.m_skyMaterial != null) {
                this.m_skyMaterial.dispose();
                this.m_skyMaterial = null;
            }
        };
        /** Set Skybox Mesh tint color. (Box Mesh Vertex Colors) */
        SkyMaterialSystem.prototype.setSkyboxTintColor = function (color) {
            var colors = [];
            var numVertices = this.m_skyboxMesh.getTotalVertices();
            for (var i = 0; i < numVertices; ++i) {
                colors.push(color.r, color.g, color.b, 1.0);
            }
            this.m_skyboxMesh.setVerticesData("color", colors);
            this.m_skyboxMesh.useVertexColors = true;
        };
        return SkyMaterialSystem;
    }(BABYLON.ScriptComponent));
    PROJECT.SkyMaterialSystem = SkyMaterialSystem;
})(PROJECT || (PROJECT = {}));
var PROJECT;
(function (PROJECT) {
    /**
          * Babylon water material system pro class (Babylon Water Material)
          * @class WaterMaterialSystem - All rights reserved (c) 2020 Mackey Kinard
          */
    var WaterMaterialSystem = /** @class */ (function (_super) {
        __extends(WaterMaterialSystem, _super);
        function WaterMaterialSystem() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.waterTag = "Water";
            _this.targetSize = new BABYLON.Vector2(128, 128);
            _this.renderSize = new BABYLON.Vector2(512, 512);
            _this.depthFactor = 1.0;
            _this.reflectSkybox = true;
            _this.subDivisions = 32;
            _this.heightOffset = 1.0;
            _this.windDirection = new BABYLON.Vector2(0, 1);
            _this.windForce = 6;
            _this.waveSpeed = 1.0;
            _this.waveLength = 0.4;
            _this.waveHeight = 0.4;
            _this.bumpHeight = 0.4;
            _this.waterColor = new BABYLON.Color3(0.1, 0.1, 0.6);
            _this.colorBlendFactor = 0.2;
            _this.waterColor2 = new BABYLON.Color3(0.1, 0.1, 0.6);
            _this.colorBlendFactor2 = 0.2;
            _this.disableClipPlane = false;
            _this.m_waterGeometry = null;
            _this.m_waterMaterial = null;
            return _this;
        }
        WaterMaterialSystem.prototype.getWaterGeometry = function () {
            return this.m_waterGeometry;
        };
        WaterMaterialSystem.prototype.getWaterMaterial = function () {
            return this.m_waterMaterial;
        };
        WaterMaterialSystem.prototype.awake = function () {
            var _this = this;
            this.waterTag = this.getProperty("waterTag", this.waterTag);
            this.depthFactor = this.getProperty("depthFactor", this.depthFactor);
            this.subDivisions = this.getProperty("subDivisions", this.subDivisions);
            this.heightOffset = this.getProperty("heightOffset", this.heightOffset);
            this.reflectSkybox = this.getProperty("reflectSkybox", this.reflectSkybox);
            this.windForce = this.getProperty("windForce", this.windForce);
            this.waveSpeed = this.getProperty("waveSpeed", this.waveSpeed);
            this.waveLength = this.getProperty("waveLength", this.waveLength);
            this.waveHeight = this.getProperty("waveHeight", this.waveHeight);
            this.bumpHeight = this.getProperty("bumpHeight", this.bumpHeight);
            this.bumpSuperimpose = this.getProperty("bumpSuperimpose", this.bumpSuperimpose);
            this.bumpAffectsReflection = this.getProperty("bumpAffectsReflection", this.bumpAffectsReflection);
            this.colorBlendFactor = this.getProperty("colorBlendFactor", this.colorBlendFactor);
            this.colorBlendFactor2 = this.getProperty("colorBlendFactor2", this.colorBlendFactor2);
            this.disableClipPlane = this.getProperty("disableClipPlane", this.disableClipPlane);
            this.fresnelSeparate = this.getProperty("fresnelSeparate", this.fresnelSeparate);
            // ..
            var wcolor1 = this.getProperty("waterColor");
            this.waterColor = BABYLON.Utilities.ParseColor3(wcolor1);
            // ..
            var wcolor2 = this.getProperty("waterColor2");
            this.waterColor2 = BABYLON.Utilities.ParseColor3(wcolor2);
            // ..
            var wdirection = this.getProperty("windDirection");
            this.windDirection = BABYLON.Utilities.ParseVector2(wdirection);
            // ..
            var itargetsize = this.getProperty("targetSize");
            if (itargetsize != null)
                this.targetSize = BABYLON.Utilities.ParseVector2(itargetsize);
            // ..        
            var irendersize = this.getProperty("renderSize");
            if (irendersize != null)
                this.renderSize = BABYLON.Utilities.ParseVector2(irendersize);
            /* Awake component function */
            var bumpTexture = null;
            var bumpTextureData = this.getProperty("bumpTexture");
            if (bumpTextureData != null)
                bumpTexture = BABYLON.Utilities.ParseTexture(bumpTextureData, this.scene);
            if (bumpTexture != null) {
                this.m_waterMaterial = new BABYLON.WaterMaterial(this.transform.name + ".Water", this.scene, this.renderSize);
                this.m_waterMaterial.bumpTexture = bumpTexture;
                this.m_waterMaterial.windDirection = this.windDirection;
                this.m_waterMaterial.windForce = this.windForce;
                this.m_waterMaterial.waveSpeed = this.waveSpeed;
                this.m_waterMaterial.waveLength = this.waveLength;
                this.m_waterMaterial.waveHeight = this.waveHeight;
                this.m_waterMaterial.bumpHeight = this.bumpHeight;
                this.m_waterMaterial.bumpSuperimpose = this.bumpSuperimpose;
                this.m_waterMaterial.bumpAffectsReflection = this.bumpAffectsReflection;
                this.m_waterMaterial.waterColor = this.waterColor;
                this.m_waterMaterial.colorBlendFactor = this.colorBlendFactor;
                this.m_waterMaterial.waterColor2 = this.waterColor2;
                this.m_waterMaterial.colorBlendFactor2 = this.colorBlendFactor2;
                this.m_waterMaterial.disableClipPlane = this.disableClipPlane;
                this.m_waterMaterial.fresnelSeparate = this.fresnelSeparate;
                // ..
                // Water Material Tags
                // ..
                if (this.reflectSkybox === true) {
                    var skyboxMesh = BABYLON.SceneManager.GetAmbientSkybox(this.scene);
                    if (skyboxMesh != null)
                        this.m_waterMaterial.addToRenderList(skyboxMesh);
                }
                if (this.waterTag != null && this.waterTag !== "") {
                    var waterMeshes = this.scene.getMeshesByTags(this.waterTag);
                    if (waterMeshes != null && waterMeshes.length > 0) {
                        waterMeshes.forEach(function (mesh) {
                            _this.m_waterMaterial.addToRenderList(mesh);
                        });
                    }
                }
                // ..
                // Water Material Mesh
                // ..
                this.m_waterGeometry = BABYLON.Mesh.CreateGround(this.transform.name + ".WaterMesh", this.targetSize.x, this.targetSize.y, this.subDivisions, this.scene, false);
                this.m_waterGeometry.parent = this.transform;
                this.m_waterGeometry.position.set(0, this.heightOffset, 0);
                if (this.depthFactor > 0)
                    this.m_waterGeometry.scaling.y *= this.depthFactor;
                this.m_waterGeometry.material = this.m_waterMaterial;
            }
            else {
                BABYLON.SceneManager.LogWarning("No supported water bump texture for: " + this.transform.name);
            }
        };
        WaterMaterialSystem.prototype.start = function () {
        };
        WaterMaterialSystem.prototype.update = function () {
        };
        WaterMaterialSystem.prototype.late = function () {
        };
        WaterMaterialSystem.prototype.after = function () {
        };
        WaterMaterialSystem.prototype.destroy = function () {
        };
        return WaterMaterialSystem;
    }(BABYLON.ScriptComponent));
    PROJECT.WaterMaterialSystem = WaterMaterialSystem;
})(PROJECT || (PROJECT = {}));
var PROJECT;
(function (PROJECT) {
    /**
    * Babylon Script Component
    * @class SimpleFollowCamera
    */
    var SimpleFollowCamera = /** @class */ (function (_super) {
        __extends(SimpleFollowCamera, _super);
        function SimpleFollowCamera() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.smoothFollow = 0;
            _this.smoothRotate = 0;
            _this.matchRotation = false;
            _this.followTarget = null;
            _this.targetPosition = BABYLON.Vector3.Zero();
            _this.targetRotation = BABYLON.Quaternion.Zero();
            return _this;
        }
        SimpleFollowCamera.prototype.awake = function () {
            this.smoothFollow = this.getProperty("smoothFollow", this.smoothFollow);
            this.smoothRotate = this.getProperty("smoothRotate", this.smoothRotate);
            this.matchRotation = this.getProperty("matchRotation", this.matchRotation);
            var ftarget = this.getProperty("followTarget");
            if (ftarget != null) {
                this.followTarget = BABYLON.Utilities.ParseTransformByID(ftarget, this.scene);
                if (this.followTarget != null) {
                    BABYLON.Utilities.ValidateTransformQuaternion(this.followTarget);
                }
            }
            BABYLON.Utilities.ValidateTransformQuaternion(this.transform);
        };
        SimpleFollowCamera.prototype.start = function () {
            BABYLON.SceneManager.ConsoleLog("Starting simple follow target for: " + this.transform.name);
        };
        SimpleFollowCamera.prototype.late = function () {
            if (this.followTarget != null) {
                var deltaTime = this.getDeltaSeconds();
                BABYLON.Utilities.GetAbsolutePositionToRef(this.followTarget, this.targetPosition);
                this.targetRotation.copyFrom(this.followTarget.absoluteRotationQuaternion);
                // ..
                if (this.smoothFollow > 0) {
                    BABYLON.Vector3.LerpToRef(this.transform.position, this.targetPosition, (deltaTime * this.smoothFollow), this.transform.position);
                }
                else {
                    this.transform.position.copyFrom(this.targetPosition);
                }
                // ..
                if (this.matchRotation === true) {
                    if (this.smoothRotate > 0) {
                        BABYLON.Quaternion.SlerpToRef(this.transform.rotationQuaternion, this.targetRotation, (deltaTime * this.smoothRotate), this.transform.rotationQuaternion);
                    }
                    else {
                        this.transform.rotationQuaternion.copyFrom(this.targetRotation);
                    }
                }
            }
        };
        return SimpleFollowCamera;
    }(BABYLON.ScriptComponent));
    PROJECT.SimpleFollowCamera = SimpleFollowCamera;
})(PROJECT || (PROJECT = {}));
var PROJECT;
(function (PROJECT) {
    /**
    * Babylon Script Component
    * @class SmoothFollowTarget
    */
    var SmoothFollowTarget = /** @class */ (function (_super) {
        __extends(SmoothFollowTarget, _super);
        function SmoothFollowTarget() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.target = null;
            _this.targetHeight = 1.75;
            _this.followHeight = 1.75;
            _this.heightDamping = 12.0;
            _this.rotationDamping = 3.0;
            _this.minimumDistance = 6.0;
            _this.maximumDistance = 8.0;
            _this.startBehindTarget = true;
            _this.followBehindTarget = true;
            _this.targetPosition = BABYLON.Vector3.Zero();
            _this.targetAngles = new BABYLON.Vector3(0, 0, 0);
            _this.transformAngles = new BABYLON.Vector3(0, 0, 0);
            _this.positionBuffer = new BABYLON.Vector3(0, 0, 0);
            _this.rotationBuffer = new BABYLON.Quaternion(0, 0, 0, 1);
            _this.tempRotationBuffer = new BABYLON.Vector3(0, 0, 0);
            return _this;
        }
        SmoothFollowTarget.prototype.awake = function () {
            this.targetHeight = this.getProperty("targetHeight", this.targetHeight);
            this.followHeight = this.getProperty("followHeight", this.followHeight);
            this.heightDamping = this.getProperty("heightDamping", this.heightDamping);
            this.rotationDamping = this.getProperty("rotationDamping", this.rotationDamping);
            this.minimumDistance = this.getProperty("minimumDistance", this.minimumDistance);
            this.maximumDistance = this.getProperty("maximumDistance", this.maximumDistance);
            this.startBehindTarget = this.getProperty("startBehindTarget", this.startBehindTarget);
            this.followBehindTarget = this.getProperty("followBehindTarget", this.followBehindTarget);
            if (this.rotationDamping <= 0)
                this.rotationDamping = 3;
            if (this.heightDamping <= 0)
                this.heightDamping = 12;
            var followTarget = this.getProperty("target");
            if (followTarget != null) {
                this.target = BABYLON.Utilities.ParseTransformByID(followTarget, this.scene);
            }
        };
        SmoothFollowTarget.prototype.start = function () {
            if (this.target != null) {
                if (this.startBehindTarget === true) {
                    // TODO - this.transform.position = this.target.position.clone(); - ???
                }
            }
        };
        SmoothFollowTarget.prototype.late = function () {
            if (this.target != null) {
                this.targetPosition.copyFrom(this.target.position);
                if (this.followBehindTarget === true) {
                    var deltaTime = this.getDeltaSeconds();
                    BABYLON.Utilities.ToEulerToRef(this.target.rotationQuaternion, this.targetAngles);
                    BABYLON.Utilities.ToEulerToRef(this.transform.rotationQuaternion, this.transformAngles);
                    var normalizedSpeed = 1.0; // TODO - Get Target Normalized Speed
                    var wantedHeight = (this.targetPosition.y + this.followHeight);
                    var currentHeight = BABYLON.Scalar.Lerp(this.transform.position.y, wantedHeight, (this.heightDamping * deltaTime));
                    var wantedRotationAngle = this.targetAngles.y;
                    var currentRotationAngle = BABYLON.Scalar.LerpAngle(this.transformAngles.y, wantedRotationAngle, (this.rotationDamping * deltaTime));
                    var wantedTargetDistance = BABYLON.Scalar.Lerp(this.minimumDistance, this.maximumDistance, normalizedSpeed);
                    BABYLON.Utilities.FromEulerToRef(0, currentRotationAngle, 0, this.rotationBuffer);
                    BABYLON.Utilities.MultiplyQuaternionByVectorToRef(this.rotationBuffer, BABYLON.Vector3.Forward(), this.tempRotationBuffer);
                    this.tempRotationBuffer.scaleInPlace(wantedTargetDistance);
                    //let wantedRotationAngle = this.targetAngles.y;
                    //let wantedHeight = this.targetPosition.y + this.height;
                    //let currentRotationAngle = this.transformAngles.y;
                    //let currentHeight = this.transform.position.y;
                    //currentRotationAngle = BABYLON.Scalar.LerpAngle(currentRotationAngle, wantedRotationAngle, this.rotationDamping * deltaTime);
                    //currentHeight = BABYLON.Scalar.Lerp(currentHeight, wantedHeight, this.heightDamping * deltaTime);
                    //BABYLON.Utilities.FromEulerToRef(0, currentRotationAngle, 0, this.rotationBuffer);
                    //BABYLON.Utilities.MultiplyQuaternionByVectorToRef(this.rotationBuffer, BABYLON.Vector3.Forward(), this.tempRotationBuffer);
                    //this.tempRotationBuffer.scaleInPlace(this.distance);
                    this.positionBuffer.copyFrom(this.targetPosition);
                    this.positionBuffer.subtractInPlace(this.tempRotationBuffer);
                    this.transform.position.set(this.positionBuffer.x, currentHeight, this.positionBuffer.z);
                }
                this.targetPosition.y += this.targetHeight;
                this.transform.lookAt(this.targetPosition);
            }
        };
        SmoothFollowTarget.prototype.destroy = function () {
            this.target = null;
            this.targetAngles = null;
            this.transformAngles = null;
            this.positionBuffer = null;
            this.rotationBuffer = null;
            this.tempRotationBuffer = null;
        };
        return SmoothFollowTarget;
    }(BABYLON.ScriptComponent));
    PROJECT.SmoothFollowTarget = SmoothFollowTarget;
})(PROJECT || (PROJECT = {}));
var PROJECT;
(function (PROJECT) {
    /**
    * Babylon Script Component
    * @class WaypointTargetManager
    */
    var WaypointTargetManager = /** @class */ (function (_super) {
        __extends(WaypointTargetManager, _super);
        function WaypointTargetManager() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this._waypointMeshLines = null;
            _this._waypointSplineCurve = null;
            _this._waypointTransformNodes = null;
            _this._waypointSplinePositions = null;
            _this._waypointSphereMaterial = null;
            _this.resolution = 1;
            _this.closedLoop = true;
            _this.drawLines = false;
            _this.drawPoints = false;
            _this.drawTraces = false;
            _this.pointSize = 0.5;
            _this.lineHeight = 0.25;
            _this.lineColor = new BABYLON.Color3(1, 1, 1);
            _this.pointColor = new BABYLON.Color3(1, 1, 1);
            _this.traceColor = new BABYLON.Color3(1, 1, 1);
            return _this;
        }
        WaypointTargetManager.prototype.getSplineCurve = function () { return this._waypointSplineCurve; };
        WaypointTargetManager.prototype.getSplineCurveLength = function () { return (this._waypointSplineCurve != null) ? this._waypointSplineCurve.length() : 0; };
        WaypointTargetManager.prototype.getSplineCurvePositions = function () { return this._waypointSplinePositions; };
        WaypointTargetManager.prototype.getControlPointTransforms = function () { return this._waypointTransformNodes; };
        WaypointTargetManager.prototype.awake = function () {
            var _this = this;
            this.resolution = this.getProperty("resolution", this.resolution);
            this.closedLoop = this.getProperty("closedLoop", this.closedLoop);
            this.drawLines = this.getProperty("drawLines", this.drawLines);
            this.drawPoints = this.getProperty("drawPoints", this.drawPoints);
            this.drawTraces = this.getProperty("drawTraces", this.drawTraces);
            this.pointSize = this.getProperty("pointSize", this.pointSize);
            this.lineHeight = this.getProperty("lineHeight", this.lineHeight);
            // ..
            var lcolor = this.getProperty("lineColor");
            var pcolor = this.getProperty("pointColor");
            var tcolor = this.getProperty("traceColor");
            // ..
            this.lineColor = BABYLON.Utilities.ParseColor3(lcolor, this.lineColor);
            this.pointColor = BABYLON.Utilities.ParseColor3(pcolor, this.pointColor);
            this.traceColor = BABYLON.Utilities.ParseColor3(tcolor, this.traceColor);
            // ..
            this._waypointSphereMaterial = new BABYLON.StandardMaterial(this.transform.name + ".SplineMaterial", this.scene);
            this._waypointSphereMaterial.diffuseColor = this.pointColor;
            //this._waypointSphereMaterial.wireframe = true;
            // ..
            this._waypointTransformNodes = this.transform.getChildren(null, true);
            if (this._waypointTransformNodes != null && this._waypointTransformNodes.length > 0) {
                var controlPoints_1 = [];
                this._waypointTransformNodes.forEach(function (transform) {
                    BABYLON.Utilities.ValidateTransformQuaternion(transform);
                    // TODO - FIXME - Use Transform Point To Get World Position
                    // controlPoints.push(transform.getAbsolutePosition().clone());
                    controlPoints_1.push(BABYLON.Utilities.GetAbsolutePosition(transform));
                    if (_this.drawPoints === true) {
                        var controlPoint = BABYLON.MeshBuilder.CreateSphere(transform.name + ".WireSphere", { segments: 24, diameter: (_this.pointSize * 2) }, _this.scene);
                        controlPoint.parent = transform;
                        controlPoint.position.set(0, 0, 0);
                        controlPoint.visibility = 0.25;
                        controlPoint.isVisible = true;
                        controlPoint.material = _this._waypointSphereMaterial;
                    }
                });
                this._waypointSplineCurve = BABYLON.Curve3.CreateCatmullRomSpline(controlPoints_1, this.resolution, this.closedLoop);
                if (this._waypointSplineCurve != null)
                    this._waypointSplinePositions = this._waypointSplineCurve.getPoints();
                if (this._waypointSplinePositions != null)
                    BABYLON.SceneManager.ConsoleWarn("DEBUG: Waypoint Manager - " + this.transform.name + ": (" + this._waypointTransformNodes.length + " - " + this._waypointSplinePositions.length + " - " + this._waypointSplineCurve.length().toFixed(2) + ")");
            }
        };
        WaypointTargetManager.prototype.start = function () {
            if (this._waypointSplinePositions != null && this.drawLines === true) {
                this._waypointMeshLines = BABYLON.MeshBuilder.CreateLines((this.transform.name + ".SplineMesh"), { points: this._waypointSplinePositions }, this.scene);
                this._waypointMeshLines.parent = this.transform;
                this._waypointMeshLines.color = this.lineColor;
                this._waypointMeshLines.position.y += this.lineHeight;
            }
        };
        WaypointTargetManager.prototype.destroy = function () {
            this.lineColor = null;
            this._waypointSplineCurve = null;
            this._waypointTransformNodes = null;
            this._waypointSplinePositions = null;
            if (this._waypointMeshLines != null) {
                this._waypointMeshLines.dispose();
                this._waypointMeshLines = null;
            }
        };
        return WaypointTargetManager;
    }(BABYLON.ScriptComponent));
    PROJECT.WaypointTargetManager = WaypointTargetManager;
})(PROJECT || (PROJECT = {}));
var PROJECT;
(function (PROJECT) {
    /**
     * Babylon Script Component
     * @class DebugInformation
     */
    var DebugInformation = /** @class */ (function (_super) {
        __extends(DebugInformation, _super);
        function DebugInformation() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.keys = true;
            _this.show = true;
            _this.popup = false;
            _this.views = false;
            _this.xbox = false;
            _this.color = BABYLON.Color3.Green();
            return _this;
        }
        DebugInformation.prototype.awake = function () {
            this.keys = this.getProperty("enableDebugKeys", this.keys);
            this.show = this.getProperty("showDebugLabels", this.show);
            this.popup = this.getProperty("popupDebugPanel", this.popup);
            this.views = this.getProperty("togglePlayerViews", this.views);
            this.xbox = this.getProperty("allowXboxLiveSignIn", this.xbox);
            // ..
            var debugLabelColor = this.getProperty("debugOutputTextColor");
            if (debugLabelColor != null)
                this.color = BABYLON.Utilities.ParseColor3(debugLabelColor);
            // ..
            if (BABYLON.SceneManager.IsWindows())
                this.popup = false;
            BABYLON.SceneManager.LogMessage("Debug information overlay loaded");
        };
        DebugInformation.prototype.start = function () {
            var _this = this;
            //this.screen = document.getElementById("screen");
            //this.toggle = document.getElementById("toggle");
            //this.signin = document.getElementById("signin");
            //this.reload = document.getElementById("reload");
            //this.mouse = document.getElementById("mouse");
            //this.debug = document.getElementById("debug");
            if (this.show === true) {
                /*
                if (this.keys === true) {
                    if (!BABYLON.SceneManager.IsXboxOne()) {
                        if (this.screen) this.screen.innerHTML = "F - Show Full Screen";
                    }
                    if (BABYLON.CameraSystem.IsMultiPlayerView() && this.views === true) {
                        if (this.toggle) {
                            if (BABYLON.SceneManager.IsXboxOne()) {
                                this.toggle.style.top = "29px";
                            }
                            this.toggle.innerHTML = "1 - 4 Toggle Player View";
                        }
                    }
                    if (BABYLON.SceneManager.IsXboxLivePluginEnabled() && this.xbox === true) {
                        if (this.signin) {
                            if (BABYLON.SceneManager.IsXboxOne()) {
                                this.signin.style.top = "49px";
                            }
                            this.signin.innerHTML = "X - Xbox Live Sign In";
                        }
                    }
                    if (this.mouse) this.mouse.innerHTML = (BABYLON.SceneManager.IsXboxOne()) ? "M - Mouse" : "";
                    if (this.reload) this.reload.innerHTML = "R - Reload";
                    if (this.debug) this.debug.innerHTML = "P - Debug";
                }
                */
            }
            if (this.keys === true) {
                if (this.views === true) {
                    BABYLON.SceneManager.LogMessage("Enable Multiplayer Keys");
                    BABYLON.SceneManager.OnKeyboardPress(BABYLON.UserInputKey.Num1, function () {
                        PROJECT.UniversalCameraSystem.SetMultiPlayerViewLayout(_this.scene, 1);
                        BABYLON.SceneManager.LogMessage("1 player pressed");
                    });
                    BABYLON.SceneManager.OnKeyboardPress(BABYLON.UserInputKey.Num2, function () {
                        PROJECT.UniversalCameraSystem.SetMultiPlayerViewLayout(_this.scene, 2);
                        BABYLON.SceneManager.LogMessage("2 players pressed");
                    });
                    BABYLON.SceneManager.OnKeyboardPress(BABYLON.UserInputKey.Num3, function () {
                        PROJECT.UniversalCameraSystem.SetMultiPlayerViewLayout(_this.scene, 3);
                        BABYLON.SceneManager.LogMessage("3 players pressed");
                    });
                    BABYLON.SceneManager.OnKeyboardPress(BABYLON.UserInputKey.Num4, function () {
                        PROJECT.UniversalCameraSystem.SetMultiPlayerViewLayout(_this.scene, 4);
                        BABYLON.SceneManager.LogMessage("4 players pressed");
                    });
                }
                BABYLON.SceneManager.OnKeyboardPress(BABYLON.UserInputKey.R, function () {
                    window.location.reload();
                });
                BABYLON.SceneManager.OnKeyboardPress(BABYLON.UserInputKey.I, function () {
                    if (_this.popup === true) {
                        BABYLON.SceneManager.PopupDebug(_this.scene);
                    }
                    else {
                        BABYLON.SceneManager.ToggleDebug(_this.scene, true, null);
                    }
                });
                BABYLON.SceneManager.OnKeyboardPress(BABYLON.UserInputKey.F, function () {
                    //BABYLON.SceneManager.ToggleFullScreenMode(this.scene);
                });
                /*
                if (BABYLON.SceneManager.IsXboxOne()) {
                    if (navigator.gamepadInputEmulation) {
                        BABYLON.SceneManager.OnKeyboardPress(BABYLON.UserInputKey.M, ()=>{
                            if (navigator.gamepadInputEmulation !== "mouse") {
                                navigator.gamepadInputEmulation = "mouse";
                            } else {
                                navigator.gamepadInputEmulation = "gamepad";
                            }
                        });
                    }
                } else {
                    BABYLON.SceneManager.OnKeyboardPress(BABYLON.UserInputKey.F, ()=>{
                        //BABYLON.Tools.RequestFullscreen(document.documentElement);
                        this.scene.getEngine().enterFullscreen(true);
                    });
                }
                if (BABYLON.WindowsPlatform.IsXboxLivePluginEnabled() && this.xbox === true) {
                    BABYLON.SceneManager.OnKeyboardPress(BABYLON.UserInputKey.X, ()=>{
                        var player:BABYLON.PlayerNumber.One = BABYLON.PlayerNumber.One;
                        if (!BABYLON.WindowsPlatform.IsXboxLiveUserSignedIn(null, player)) {
                            BABYLON.SceneManager.LogMessage("===> Trying Xbox Live Sign In For Player: " + player.toString());
                            BABYLON.WindowsPlatform.XboxLiveUserSignIn(player, (result: Microsoft.Xbox.Services.System.SignInResult) => {
                                var user = BABYLON.WindowsPlatform.GetXboxLiveUser(player);
                                var msg = "(" + user.xboxUserId + ") - " + user.gamertag;
                                BABYLON.SceneManager.AlertMessage(msg, "Xbox Live User Signed In");
                            }, (err)=>{
                                BABYLON.SceneManager.LogMessage(err);
                                var msg:string = "Encountered Sign Error";
                                BABYLON.SceneManager.LogWarning(msg);
                                BABYLON.SceneManager.AlertMessage(msg, "Xbox Live Warning");
                            });
                        } else {
                            BABYLON.SceneManager.LogWarning("Xbox Live User Already Signed In");
                            BABYLON.SceneManager.AlertMessage("User Already Signed In", "Xbox Live Warning");
                        }
                    });
                }
                */
            }
            // Default Print To Screen Text
            var printColor = (this.scene.getEngine().webGLVersion < 2) ? "red" : this.color.toHexString();
            var graphicsVersion = BABYLON.SceneManager.GetWebGLVersionString(this.scene);
            BABYLON.Utilities.PrintToScreen(graphicsVersion, printColor);
        };
        DebugInformation.prototype.destroy = function () {
            //this.screen = null;
            //this.toggle = null;
            //this.signin = null;
            //this.reload = null;
            //this.mouse = null;
            //this.debug = null;
        };
        return DebugInformation;
    }(BABYLON.ScriptComponent));
    PROJECT.DebugInformation = DebugInformation;
})(PROJECT || (PROJECT = {}));
var PROJECT;
(function (PROJECT) {
    /**
    * Babylon Script Component
    * @class TestNavigationAgent
    */
    var TestNavigationAgent = /** @class */ (function (_super) {
        __extends(TestNavigationAgent, _super);
        function TestNavigationAgent() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.m_playerAgent = null;
            _this.m_charController = null;
            // Note: Animation Jump Curve Support
            _this.time = -1;
            _this.duration = -1;
            _this.jumpCurve = null;
            _this.traversalTime = 0.5;
            return _this;
        }
        TestNavigationAgent.prototype.awake = function () {
            var _this = this;
            this.doPointerCancel(); // Note: Disable Right Click So Can Be Used For Teleport
            this.scene.onPointerObservable.add(function (pointerInfo) {
                switch (pointerInfo.type) {
                    case BABYLON.PointerEventTypes.POINTERDOWN:
                        if (pointerInfo.pickInfo.hit) {
                            _this.doPointerDown(pointerInfo);
                        }
                        break;
                }
            });
            // ..
            // Note: Get Navigation Agent Attached To Transform Node
            // ..
            this.m_charController = this.getComponent("BABYLON.CharacterController");
            this.m_playerAgent = this.getComponent("BABYLON.NavigationAgent");
            if (this.m_playerAgent != null) {
                this.m_playerAgent.onPreUpdateObservable.add(function () { _this.updateNavAgent(); });
                BABYLON.SceneManager.LogMessage("Test navigation mesh agent for: " + this.transform.name);
            }
            else
                BABYLON.SceneManager.LogMessage("Failed to locate test nav mesh agent for: " + this.transform.name);
        };
        TestNavigationAgent.prototype.doPointerCancel = function () {
            var canvas = this.scene.getEngine().getRenderingCanvas();
            canvas.oncontextmenu = function (e) { e.preventDefault(); };
        };
        TestNavigationAgent.prototype.doPointerDown = function (pointerInfo) {
            var pickinfo = this.scene.pick(this.scene.pointerX, this.scene.pointerY);
            if (pickinfo.hit) {
                if (this.m_playerAgent != null) {
                    if (pointerInfo.event.button === 0) {
                        // Note: Use Navigation Agent - SetDestination
                        this.m_playerAgent.setDestination(pickinfo.pickedPoint);
                    }
                    else {
                        // Note: Use Navigation Agent - Teleport
                        this.m_playerAgent.teleport(pickinfo.pickedPoint);
                    }
                }
            }
        };
        TestNavigationAgent.prototype.update = function () {
            if (this.m_playerAgent != null) {
                // DEBUG: const agentState:number = this.m_playerAgent.getAgentState();
                // DEBUG: UTIL.PrintToScreen("Navigation State: " + agentState.toFixed() , "green");
                // DEBUG: if (agentState === 0) console.warn(">>> INVALID NAV STATE: " + this.transform.name);
            }
        };
        TestNavigationAgent.prototype.updateNavAgent = function () {
            var deltaTime = this.getDeltaSeconds();
            var normalizedTime = 0;
            if (this.duration >= 0 && this.time >= 0) {
                normalizedTime = (this.time / this.duration);
                this.time += deltaTime;
            }
            if (this.m_playerAgent != null) {
                this.m_playerAgent.heightOffset = 0; // Note: Always Reset Height Offset Here
                var teleporting = this.m_playerAgent.isTeleporting();
                var offmeshlink = this.m_playerAgent.isOnOffMeshLink();
                if (teleporting === true || offmeshlink === true) {
                    if (this.m_charController != null) {
                        this.m_playerAgent.updatePosition = true; // Enable Navigation Agent Movement
                        this.m_charController.updatePosition = false; // Disable Character Controller Movement
                    }
                    else {
                        this.m_playerAgent.updatePosition = true; // Enable Navigation Agent Movement
                    }
                    if (offmeshlink === true) {
                        if (this.time === -1)
                            this.time = 0;
                        if (this.duration === -1)
                            this.duration = this.traversalTime;
                        if (this.jumpCurve != null) {
                            var animationCurveValue = UTIL.SampleAnimationFloat(this.jumpCurve, normalizedTime);
                            this.m_playerAgent.heightOffset = animationCurveValue;
                        }
                    }
                }
                else {
                    if (this.m_charController != null) {
                        this.m_playerAgent.updatePosition = false; // Disable Navigation Agent Movement
                        this.m_charController.updatePosition = true; // Enable Character Controller Movement
                        // Override Character Controller Movement
                        var pos = this.m_playerAgent.getCurrentPosition().clone();
                        pos.y = this.m_charController.getGhostWorldPosition().y;
                        this.m_charController.set(pos.x, pos.y, pos.z);
                    }
                    else {
                        this.m_playerAgent.updatePosition = true; // Enable Navigation Agent Movement 
                    }
                    this.time = -1;
                    this.duration = -1;
                }
            }
        };
        return TestNavigationAgent;
    }(BABYLON.ScriptComponent));
    PROJECT.TestNavigationAgent = TestNavigationAgent;
})(PROJECT || (PROJECT = {}));
var PROJECT;
(function (PROJECT) {
    /**
    * Babylon Script Component
    * @class TestRootMotion
    */
    var TestRootMotion = /** @class */ (function (_super) {
        __extends(TestRootMotion, _super);
        function TestRootMotion() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.motionType = 0;
            _this.updatePosition = true;
            _this.updateRotation = true;
            _this.moveWithCollisions = false;
            _this.m_animator = null;
            _this.m_character = null;
            _this.m_rigidbody = null;
            return _this;
        }
        TestRootMotion.prototype.awake = function () {
            this.motionType = this.getProperty("motionType", this.motionType);
            this.updatePosition = this.getProperty("updatePosition", this.updatePosition);
            this.updateRotation = this.getProperty("updateRotation", this.updateRotation);
            this.moveWithCollisions = this.getProperty("moveWithCollisions", this.moveWithCollisions);
        };
        TestRootMotion.prototype.start = function () {
            // Attach Animation State
            this.m_animator = this.getComponent("BABYLON.AnimationState");
            if (this.m_animator == null)
                BABYLON.SceneManager.LogWarning("Test Root Motion: Failed to locate animation state for: " + this.transform.name);
            // Setup Root Transform
            if (this.motionType === 1) { // Rigidbody Physics
                this.m_rigidbody = BABYLON.SceneManager.FindScriptComponent(this.transform, "BABYLON.RigidbodyPhysics");
                if (this.m_rigidbody == null)
                    BABYLON.SceneManager.LogWarning("Test Root Motion: Failed to locate rigidbody physics for: " + this.transform.name);
            }
            else if (this.motionType === 2) { // Character Controller
                this.m_character = BABYLON.SceneManager.FindScriptComponent(this.transform, "BABYLON.CharacterController");
                if (this.m_character == null)
                    BABYLON.SceneManager.LogWarning("Test Root Motion: Failed to locate character controller for: " + this.transform.name);
            }
        };
        TestRootMotion.prototype.update = function () {
            this.turn();
            this.move();
        };
        TestRootMotion.prototype.turn = function () {
            if (this.m_animator != null) {
                if (this.updateRotation === true) { // Rotation
                    this.transform.addRotation(0, this.m_animator.getRootMotionAngle(), 0);
                }
            }
        };
        TestRootMotion.prototype.move = function () {
            if (this.m_animator != null) {
                if (this.updatePosition == true) {
                    if (this.motionType === 0) { // Translation
                        if (this.moveWithCollisions === true && this.transform instanceof BABYLON.AbstractMesh) {
                            this.transform.moveWithCollisions(this.m_animator.getRootMotionPosition());
                        }
                        else {
                            this.transform.position.addInPlace(this.m_animator.getRootMotionPosition());
                        }
                    }
                    else if (this.motionType === 1 && this.m_rigidbody != null) { // Rigidbody Physics
                        this.m_rigidbody.setLinearVelocity(this.m_animator.getRootMotionPosition());
                    }
                    else if (this.motionType === 2 && this.m_character != null) { // Character Controller
                        this.m_character.move(this.m_animator.getRootMotionPosition());
                    }
                }
            }
        };
        return TestRootMotion;
    }(BABYLON.ScriptComponent));
    PROJECT.TestRootMotion = TestRootMotion;
})(PROJECT || (PROJECT = {}));
var BABYLON;
(function (BABYLON) {
    /**
     * Babylon windows platform pro class
     * @class WindowsPlatform - All rights reserved (c) 2020 Mackey Kinard
     */
    var WindowsPlatform = /** @class */ (function () {
        function WindowsPlatform() {
        }
        /** Is xbox live user signed in if platform services enabled. (WinRT) */
        WindowsPlatform.IsXboxLiveUserSignedIn = function (systemUser, player) {
            if (systemUser === void 0) { systemUser = null; }
            if (player === void 0) { player = BABYLON.PlayerNumber.One; }
            if (BABYLON.SceneManager.IsWindows()) {
                var user = (systemUser != null) ? BABYLON.WindowsPlatform.GetXboxLiveSystemUser(systemUser, player) : BABYLON.WindowsPlatform.GetXboxLiveUser(player);
                return (user != null && user.isSignedIn == true);
            }
            else {
                return false;
            }
        };
        /** Validated sign in xbox live user if platform services available. (WinRT) */
        WindowsPlatform.XboxLiveUserSignIn = function (player, oncomplete, onerror, onprogress) {
            if (player === void 0) { player = BABYLON.PlayerNumber.One; }
            if (BABYLON.SceneManager.IsWindows()) {
                BABYLON.WindowsPlatform.XboxLiveUserSilentSignIn(player, function (first) {
                    if (first.status === Microsoft.Xbox.Services.System.SignInStatus.userInteractionRequired) {
                        BABYLON.WindowsPlatform.XboxLiveUserDialogSignIn(player, function (second) {
                            if (oncomplete)
                                oncomplete(second);
                        }, onerror, onprogress);
                    }
                    else {
                        if (oncomplete)
                            oncomplete(first);
                    }
                }, onerror, onprogress);
            }
        };
        /** Silent sign in xbox live user if platform services available. (WinRT) */
        WindowsPlatform.XboxLiveUserSilentSignIn = function (player, oncomplete, onerror, onprogress) {
            if (player === void 0) { player = BABYLON.PlayerNumber.One; }
            return (BABYLON.SceneManager.IsWindows()) ? BABYLON.WindowsPlatform.GetXboxLiveUser(player).signInSilentlyAsync(null).then(oncomplete, onerror, onprogress) : null;
        };
        /** Dialog sign in xbox live user if platform services available. (WinRT) */
        WindowsPlatform.XboxLiveUserDialogSignIn = function (player, oncomplete, onerror, onprogress) {
            if (player === void 0) { player = BABYLON.PlayerNumber.One; }
            return (BABYLON.SceneManager.IsWindows()) ? BABYLON.WindowsPlatform.GetXboxLiveUser(player).signInAsync(null).then(oncomplete, onerror, onprogress) : null;
        };
        /** Loads a xbox live user profile if platform services available. (WinRT) */
        WindowsPlatform.LoadXboxLiveUserProfile = function (player, oncomplete, onerror, onprogress) {
            if (player === void 0) { player = BABYLON.PlayerNumber.One; }
            return (BABYLON.SceneManager.IsWindows()) ? BABYLON.WindowsPlatform.GetXboxLiveUserContext(player).profileService.getUserProfileAsync(BABYLON.WindowsPlatform.GetXboxLiveUser(player).xboxUserId).then(oncomplete, onerror, onprogress) : null;
        };
        // ************************************** //
        // * Babylon Xbox Live Player Functions * //
        // ************************************** //
        /** Get xbox live user if platform services available. (WinRT) */
        WindowsPlatform.GetXboxLiveUser = function (player) {
            if (player === void 0) { player = BABYLON.PlayerNumber.One; }
            var user = null;
            if (BABYLON.SceneManager.IsWindows()) {
                switch (player) {
                    case BABYLON.PlayerNumber.One:
                        user = window.BabylonToolkit.XboxLive.Plugin.getXboxLiveUserOne();
                        break;
                    case BABYLON.PlayerNumber.Two:
                        user = window.BabylonToolkit.XboxLive.Plugin.getXboxLiveUserTwo();
                        break;
                    case BABYLON.PlayerNumber.Three:
                        user = window.BabylonToolkit.XboxLive.Plugin.getXboxLiveUserThree();
                        break;
                    case BABYLON.PlayerNumber.Four:
                        user = window.BabylonToolkit.XboxLive.Plugin.getXboxLiveUserFour();
                        break;
                }
            }
            return user;
        };
        /** Get xbox live user if platform services available. (WinRT) */
        WindowsPlatform.GetXboxLiveSystemUser = function (systemUser, player) {
            if (player === void 0) { player = BABYLON.PlayerNumber.One; }
            var user = null;
            if (BABYLON.SceneManager.IsWindows()) {
                switch (player) {
                    case BABYLON.PlayerNumber.One:
                        user = window.BabylonToolkit.XboxLive.Plugin.getXboxLiveSystemUserOne(systemUser);
                        break;
                    case BABYLON.PlayerNumber.Two:
                        user = window.BabylonToolkit.XboxLive.Plugin.getXboxLiveSystemUserTwo(systemUser);
                        break;
                    case BABYLON.PlayerNumber.Three:
                        user = window.BabylonToolkit.XboxLive.Plugin.getXboxLiveSystemUserThree(systemUser);
                        break;
                    case BABYLON.PlayerNumber.Four:
                        user = window.BabylonToolkit.XboxLive.Plugin.getXboxLiveSystemUserFour(systemUser);
                        break;
                }
            }
            return user;
        };
        /** Get xbox live user context if platform services available. (WinRT) */
        WindowsPlatform.GetXboxLiveUserContext = function (player) {
            if (player === void 0) { player = BABYLON.PlayerNumber.One; }
            var context = null;
            if (BABYLON.SceneManager.IsWindows()) {
                switch (player) {
                    case BABYLON.PlayerNumber.One:
                        context = window.BabylonToolkit.XboxLive.Plugin.getXboxLiveContextOne();
                        break;
                    case BABYLON.PlayerNumber.Two:
                        context = window.BabylonToolkit.XboxLive.Plugin.getXboxLiveContextTwo();
                        break;
                    case BABYLON.PlayerNumber.Three:
                        context = window.BabylonToolkit.XboxLive.Plugin.getXboxLiveContextThree();
                        break;
                    case BABYLON.PlayerNumber.Four:
                        context = window.BabylonToolkit.XboxLive.Plugin.getXboxLiveContextFour();
                        break;
                }
            }
            return context;
        };
        /** Resets xbox live user context if platform services available. (WinRT) */
        WindowsPlatform.ResetXboxLiveUserContext = function (player) {
            if (player === void 0) { player = BABYLON.PlayerNumber.One; }
            if (BABYLON.SceneManager.IsWindows()) {
                switch (player) {
                    case BABYLON.PlayerNumber.One:
                        window.BabylonToolkit.XboxLive.Plugin.resetXboxLiveUserContextOne();
                        break;
                    case BABYLON.PlayerNumber.Two:
                        window.BabylonToolkit.XboxLive.Plugin.resetXboxLiveUserContextTwo();
                        break;
                    case BABYLON.PlayerNumber.Three:
                        window.BabylonToolkit.XboxLive.Plugin.resetXboxLiveUserContextThree();
                        break;
                    case BABYLON.PlayerNumber.Four:
                        window.BabylonToolkit.XboxLive.Plugin.resetXboxLiveUserContextFour();
                        break;
                }
            }
        };
        // *************************************** //
        // * Babylon Xbox Live Context Functions * //
        // *************************************** //
        /** Get xbox live context property if platform services available. (WinRT) */
        WindowsPlatform.GetXboxLiveContextProperty = function (name) {
            return (BABYLON.SceneManager.IsWindows()) ? window.BabylonToolkit.XboxLive.Plugin.getXboxLiveContextProperty(name) : null;
        };
        /** Get xbox live context property if platform services available. (WinRT) */
        WindowsPlatform.SetXboxLiveContextProperty = function (name, property) {
            if (BABYLON.SceneManager.IsWindows()) {
                window.BabylonToolkit.XboxLive.Plugin.setXboxLiveContextProperty(name, property);
            }
        };
        /** Resets xbox live property context bag if platform services available. (WinRT) */
        WindowsPlatform.ResetXboxLivePropertyContexts = function () {
            if (BABYLON.SceneManager.IsWindows()) {
                window.BabylonToolkit.XboxLive.Plugin.resetXboxLivePropertyContexts();
            }
        };
        // **************************************** //
        // * Babylon Xbox Live Sign Out Functions * //
        // **************************************** //
        /** Sets the Xbox User Sign Out Complete Handler (WinRT) */
        WindowsPlatform.SetXboxLiveSignOutHandler = function (handler) {
            if (handler === void 0) { handler = null; }
            if (BABYLON.SceneManager.IsWindows()) {
                window.BabylonToolkit.XboxLive.Plugin.onusersignout = handler;
            }
        };
        return WindowsPlatform;
    }());
    BABYLON.WindowsPlatform = WindowsPlatform;
})(BABYLON || (BABYLON = {}));
var PROJECT;
(function (PROJECT) {
    /**
    * Babylon Script Component
    * @class Debugger
    */
    var Debugger = /** @class */ (function (_super) {
        __extends(Debugger, _super);
        function Debugger() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        // Example: private helloWorld:string = "Hello World";
        Debugger.prototype.awake = function () {
            /* Init component function */
        };
        Debugger.prototype.start = function () {
            /* Start render loop function */
        };
        Debugger.prototype.ready = function () {
            /* Execute when ready function */
        };
        Debugger.prototype.update = function () {
            /* Update render loop function */
        };
        Debugger.prototype.late = function () {
            /* Late update render loop function */
        };
        Debugger.prototype.after = function () {
            /* After update render loop function */
        };
        Debugger.prototype.fixed = function () {
            /* Fixed update physics step function */
        };
        Debugger.prototype.destroy = function () {
            /* Destroy component function */
        };
        return Debugger;
    }(BABYLON.ScriptComponent));
    PROJECT.Debugger = Debugger;
})(PROJECT || (PROJECT = {}));
var PROJECT;
(function (PROJECT) {
    /**
     * Babylon Script Component
     * @class FixTerrain
     */
    var FixTerrain = /** @class */ (function (_super) {
        __extends(FixTerrain, _super);
        function FixTerrain() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        // Example: private helloWorld:string = "Hello World";
        FixTerrain.prototype.awake = function () {
            /* Init component function */
        };
        FixTerrain.prototype.start = function () {
            this.scene.debugLayer.show();
            /* Start render loop function */
            console.log(this);
            var terrains = this.scene.getMeshByName("Terrain_colliders");
            var terrain4 = this.scene.getMeshByName("Terrain_mesh_4");
            terrain4.physicsImpostor = new BABYLON.PhysicsImpostor(terrain4, BABYLON.PhysicsImpostor.HeightmapImpostor, { mass: 0, restitution: 0, friction: 0 }, this.scene);
            console.log(terrain4);
            this.scene.meshes.forEach(function (mesh) {
                mesh.checkCollisions = true;
            });
            var ground = BABYLON.Mesh.CreateGroundFromHeightMap("ground", "https://playground.babylonjs.com/textures/worldHeightMap.jpg", 200, 200, 250, 0, 40, this.scene, false, function () {
                ground.physicsImpostor = new BABYLON.PhysicsImpostor(ground, BABYLON.PhysicsImpostor.HeightmapImpostor, { mass: 0 });
                var createBall = function () {
                    var b = BABYLON.Mesh.CreateSphere("s", 8, 8, this.scene);
                    b.position.y = 30;
                    b.position.x = Math.random() * 100 * (Math.random() < 0.5 ? -1 : 1);
                    b.position.z = Math.random() * 100 * (Math.random() < 0.5 ? -1 : 1);
                    b.physicsImpostor = new BABYLON.PhysicsImpostor(b, BABYLON.PhysicsImpostor.SphereImpostor, { mass: 1, friction: 0, restitution: 0 });
                };
                for (var ii = 0; ii < 10; ii++) {
                    createBall();
                }
            });
        };
        FixTerrain.prototype.ready = function () {
            /* Execute when ready function */
        };
        FixTerrain.prototype.update = function () {
            var _this = this;
            this.scene.meshes.forEach(function (mesh) {
                // if (mesh.intersectsPoint(new BABYLON.Vector3(512, 25, 512))) {
                //   mesh.position.y += 25;
                //   }
                _this.scene.meshes.forEach(function (mesh1) {
                    if (mesh1.name.includes("Sphere") && !mesh.name.includes("Sphere"))
                        if (mesh.intersectsMesh(mesh1)) {
                            console.log(mesh1.name + " intersect with " + mesh.name + " with ");
                        }
                });
            });
        };
        FixTerrain.prototype.late = function () {
            /* Late update render loop function */
        };
        FixTerrain.prototype.after = function () {
            /* After update render loop function */
        };
        FixTerrain.prototype.fixed = function () {
            /* Fixed update physics step function */
        };
        FixTerrain.prototype.destroy = function () {
            /* Destroy component function */
        };
        return FixTerrain;
    }(BABYLON.ScriptComponent));
    PROJECT.FixTerrain = FixTerrain;
})(PROJECT || (PROJECT = {}));
var BABYLON;
(function (BABYLON) {
    /**
     * Babylon animation state pro class (Unity Style Mechanim Animation System)
     * @class AnimationState - All rights reserved (c) 2020 Mackey Kinard
     */
    var AnimationState = /** @class */ (function (_super) {
        __extends(AnimationState, _super);
        function AnimationState() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this._frametime = 0;
            _this._layercount = 0;
            _this._updatemode = 0; // Note: 0 - Transform Node | 1 - Chacracter Controller | 2 - Unscaled Time ???
            _this._hasrootmotion = false;
            _this._animationplaying = false;
            _this._initialtargetblending = false;
            _this._hastransformhierarchy = false;
            _this._leftfeetbottomheight = 0;
            _this._rightfeetbottomheight = 0;
            _this._initialRootBonePosition = null;
            _this._initialRootBoneRotation = null;
            _this._runtimecontroller = null;
            _this._executed = false;
            _this._checkers = new BABYLON.TransitionCheck();
            _this._source = "";
            _this._machine = null;
            _this._deltaPosition = new BABYLON.Vector3(0, 0, 0);
            _this._deltaRotation = new BABYLON.Quaternion(0, 0, 0, 1);
            _this._positionWeight = false;
            _this._rootBoneWeight = false;
            _this._rotationWeight = false;
            _this._rootQuatWeight = false;
            _this._angularVelocity = new BABYLON.Vector3(0, 0, 0);
            _this._positionHolder = new BABYLON.Vector3(0, 0, 0);
            _this._rootBoneHolder = new BABYLON.Vector3(0, 0, 0);
            _this._rotationHolder = new BABYLON.Quaternion(0, 0, 0, 1);
            _this._rootQuatHolder = new BABYLON.Quaternion(0, 0, 0, 1);
            _this._rootMotionMatrix = BABYLON.Matrix.Zero();
            _this._rootMotionScaling = new BABYLON.Vector3(0, 0, 0);
            _this._rootMotionRotation = new BABYLON.Quaternion(0, 0, 0, 1);
            _this._rootMotionPosition = new BABYLON.Vector3(0, 0, 0);
            _this._lastMotionRotation = new BABYLON.Quaternion(0, 0, 0, 1);
            _this._lastMotionPosition = new BABYLON.Vector3(0, 0, 0);
            _this._deltaPositionFixed = new BABYLON.Vector3(0, 0, 0);
            _this._deltaPositionMatrix = new BABYLON.Matrix();
            _this._saveDeltaPosition = new BABYLON.Vector3(0, 0, 0);
            _this._saveDeltaRotation = new BABYLON.Quaternion(0, 0, 0, 1);
            _this._dirtyMotionMatrix = null;
            _this._dirtyBlenderMatrix = null;
            //private _bodyOrientationAngleY:number = 0;
            //private transformForwardVector:BABYLON.Vector3 = new BABYLON.Vector3(0,0,0);
            //private transformRightVector:BABYLON.Vector3 = new BABYLON.Vector3(0,0,0);
            //private desiredForwardVector:BABYLON.Vector3 = new BABYLON.Vector3(0,0,0);
            //private desiredRightVector:BABYLON.Vector3 = new BABYLON.Vector3(0,0,0);
            _this._targetPosition = new BABYLON.Vector3(0, 0, 0);
            _this._targetRotation = new BABYLON.Quaternion(0, 0, 0, 1);
            _this._targetScaling = new BABYLON.Vector3(1, 1, 1);
            _this._updateMatrix = BABYLON.Matrix.Zero();
            _this._blenderMatrix = BABYLON.Matrix.Zero();
            _this._blendWeights = new BABYLON.BlendingWeights();
            _this._emptyScaling = new BABYLON.Vector3(1, 1, 1);
            _this._emptyPosition = new BABYLON.Vector3(0, 0, 0);
            _this._emptyRotation = new BABYLON.Quaternion(0, 0, 0, 1);
            _this._ikFrameEanbled = false;
            _this._data = new Map();
            _this._anims = new Map();
            _this._numbers = new Map();
            _this._booleans = new Map();
            _this._triggers = new Map();
            _this._parameters = new Map();
            _this.speedRatio = 1.0;
            _this.applyRootMotion = false;
            _this.delayUpdateUntilReady = true;
            _this.enableAnimation = true;
            _this.updateRootMotionPosition = false;
            _this.updateRootMotionRotation = false;
            /** Register handler that is triggered when the animation ik setup has been triggered */
            _this.onAnimationIKObservable = new BABYLON.Observable();
            /** Register handler that is triggered when the animation end has been triggered */
            _this.onAnimationEndObservable = new BABYLON.Observable();
            /** Register handler that is triggered when the animation loop has been triggered */
            _this.onAnimationLoopObservable = new BABYLON.Observable();
            /** Register handler that is triggered when the animation event has been triggered */
            _this.onAnimationEventObservable = new BABYLON.Observable();
            /** Register handler that is triggered when the animation frame has been updated */
            _this.onAnimationUpdateObservable = new BABYLON.Observable();
            _this.m_defaultGroup = null;
            _this.m_animationTargets = null;
            _this.m_characterController = null;
            return _this;
        }
        AnimationState.prototype.hasRootMotion = function () { return this._hasrootmotion; };
        AnimationState.prototype.ikFrameEnabled = function () { return this._ikFrameEanbled; };
        AnimationState.prototype.getAnimationTime = function () { return this._frametime; };
        AnimationState.prototype.getAnimationPlaying = function () { return this._animationplaying; };
        AnimationState.prototype.getRootMotionAngle = function () { return this._angularVelocity.y; };
        AnimationState.prototype.getRootMotionSpeed = function () { return this._deltaPosition.length(); };
        AnimationState.prototype.getRootMotionPosition = function () { return this._deltaPositionFixed; };
        AnimationState.prototype.getRootMotionRotation = function () { return this._deltaRotation; };
        AnimationState.prototype.getCharacterController = function () { return this.m_characterController; };
        AnimationState.prototype.getRuntimeController = function () { return this._runtimecontroller; };
        AnimationState.prototype.awake = function () { this.awakeStateMachine(); };
        AnimationState.prototype.update = function () { this.updateStateMachine(); };
        AnimationState.prototype.destroy = function () { this.destroyStateMachine(); };
        /////////////////////////////////////////////////////////////////////////////////////
        // State Machine Functions
        /////////////////////////////////////////////////////////////////////////////////////
        AnimationState.prototype.playAnimation = function (state, transitionDuration, animationLayer, frameRate) {
            if (transitionDuration === void 0) { transitionDuration = 0; }
            if (animationLayer === void 0) { animationLayer = 0; }
            if (frameRate === void 0) { frameRate = null; }
            var result = false;
            if (this._machine.layers != null && this._machine.layers.length > animationLayer) {
                var layer = this._machine.layers[animationLayer];
                var blendFrameRate = (layer.animationStateMachine != null) ? (layer.animationStateMachine.rate || BABYLON.AnimationState.FPS) : BABYLON.AnimationState.FPS;
                var blendingSpeed = (transitionDuration > 0) ? BABYLON.Utilities.ComputeBlendingSpeed(frameRate || blendFrameRate, transitionDuration) : 0;
                this.playCurrentAnimationState(layer, state, blendingSpeed);
                result = true;
            }
            else {
                BABYLON.Tools.Warn("No animation state layers on " + this.transform.name);
            }
            return result;
        };
        AnimationState.prototype.stopAnimation = function (animationLayer) {
            if (animationLayer === void 0) { animationLayer = 0; }
            var result = false;
            if (this._machine.layers != null && this._machine.layers.length > animationLayer) {
                var layer = this._machine.layers[animationLayer];
                this.stopCurrentAnimationState(layer);
                result = true;
            }
            else {
                BABYLON.Tools.Warn("No animation state layers on " + this.transform.name);
            }
            return result;
        };
        /////////////////////////////////////////////////////////////////////////////////////
        // State Machine Functions
        /////////////////////////////////////////////////////////////////////////////////////
        AnimationState.prototype.getBool = function (name) {
            return this._booleans.get(name) || false;
        };
        AnimationState.prototype.setBool = function (name, value) {
            this._booleans.set(name, value);
        };
        AnimationState.prototype.getFloat = function (name) {
            return this._numbers.get(name) || 0;
        };
        AnimationState.prototype.setFloat = function (name, value) {
            this._numbers.set(name, value);
        };
        AnimationState.prototype.getInteger = function (name) {
            return this._numbers.get(name) || 0;
        };
        AnimationState.prototype.setInteger = function (name, value) {
            this._numbers.set(name, value);
        };
        AnimationState.prototype.getTrigger = function (name) {
            return this._triggers.get(name) || false;
        };
        AnimationState.prototype.setTrigger = function (name) {
            this._triggers.set(name, true);
        };
        AnimationState.prototype.resetTrigger = function (name) {
            this._triggers.set(name, false);
        };
        AnimationState.prototype.setSmoothFloat = function (name, targetValue, dampTime, deltaTime) {
            var currentValue = this.getFloat(name);
            var gradientValue = BABYLON.Scalar.Lerp(currentValue, targetValue, (dampTime * deltaTime));
            this._numbers.set(name, gradientValue);
        };
        AnimationState.prototype.setSmoothInteger = function (name, targetValue, dampTime, deltaTime) {
            var currentValue = this.getInteger(name);
            var gradientValue = BABYLON.Scalar.Lerp(currentValue, targetValue, (dampTime * deltaTime));
            this._numbers.set(name, gradientValue);
        };
        AnimationState.prototype.getMachineState = function (name) {
            return this._data.get(name);
        };
        AnimationState.prototype.setMachineState = function (name, value) {
            this._data.set(name, value);
        };
        AnimationState.prototype.getCurrentState = function (layer) {
            return (this._machine.layers != null && this._machine.layers.length > layer) ? this._machine.layers[layer].animationStateMachine : null;
        };
        AnimationState.prototype.getAnimationGroup = function (name) {
            return this._anims.get(name);
        };
        AnimationState.prototype.getAnimationGroups = function () {
            return this._anims;
        };
        AnimationState.prototype.setAnimationGroups = function (groups, remapTargets) {
            var _this = this;
            if (remapTargets === void 0) { remapTargets = false; }
            // ..
            // TODO - Handle Remap Animation Targets
            // ..
            if (groups != null && groups.length > 0) {
                this._anims = new Map();
                this.m_animationTargets = [];
                this.m_defaultGroup = groups[0];
                groups.forEach(function (group) {
                    var agroup = group;
                    try {
                        group.stop();
                    }
                    catch (_a) { }
                    if (group.targetedAnimations != null && group.targetedAnimations.length > 0) {
                        group.targetedAnimations.forEach(function (targetedAnimation) {
                            // Note: For Loop Faster Than IndexOf
                            var indexOfTarget = -1;
                            for (var i = 0; i < _this.m_animationTargets.length; i++) {
                                if (_this.m_animationTargets[i].target === targetedAnimation.target) {
                                    indexOfTarget = i;
                                    break;
                                }
                            }
                            if (indexOfTarget < 0) {
                                _this.m_animationTargets.push(targetedAnimation);
                                if (targetedAnimation.target.metadata == null)
                                    targetedAnimation.target.metadata = {};
                                if (targetedAnimation.target instanceof BABYLON.TransformNode) {
                                    BABYLON.Utilities.ValidateTransformQuaternion(targetedAnimation.target);
                                    var layerMixers = [];
                                    for (var index = 0; index < _this._layercount; index++) {
                                        var layerMixer = new BABYLON.AnimationMixer();
                                        layerMixer.positionBuffer = null;
                                        layerMixer.rotationBuffer = null;
                                        layerMixer.scalingBuffer = null;
                                        layerMixer.originalMatrix = null;
                                        layerMixer.blendingFactor = 0;
                                        layerMixer.blendingSpeed = 0;
                                        layerMixer.rootPosition = null;
                                        layerMixer.rootRotation = null;
                                        layerMixers.push(layerMixer);
                                    }
                                    targetedAnimation.target.metadata.mixer = layerMixers;
                                }
                                else if (targetedAnimation.target instanceof BABYLON.MorphTarget) {
                                    var morphLayerMixers = [];
                                    for (var index = 0; index < _this._layercount; index++) {
                                        var morphLayerMixer = new BABYLON.AnimationMixer();
                                        morphLayerMixer.influenceBuffer = null;
                                        morphLayerMixers.push(morphLayerMixer);
                                    }
                                    targetedAnimation.target.metadata.mixer = morphLayerMixers;
                                }
                            }
                        });
                    }
                    if (agroup != null && agroup.metadata != null && agroup.metadata.unity != null && agroup.metadata.unity.clip != null && agroup.metadata.unity.clip !== "") {
                        _this._anims.set(agroup.metadata.unity.clip, group);
                    }
                });
            }
        };
        /* Animation Controller State Machine Functions */
        AnimationState.prototype.awakeStateMachine = function () {
            var _this = this;
            BABYLON.Utilities.ValidateTransformQuaternion(this.transform);
            this.m_animationTargets = [];
            this.m_defaultGroup = null;
            this.m_characterController = this.getComponent("BABYLON.CharacterController");
            // ..
            this._source = (this.transform.metadata != null && this.transform.metadata.unity != null && this.transform.metadata.unity.animator != null && this.transform.metadata.unity.animator !== "") ? this.transform.metadata.unity.animator : null;
            this._machine = this.getProperty("machine", this._machine);
            this._updatemode = this.getProperty("updatemode", this._updatemode);
            this._hasrootmotion = this.getProperty("hasrootmotion", this._hasrootmotion);
            this._runtimecontroller = this.getProperty("runtimecontroller", this._runtimecontroller);
            this._hastransformhierarchy = this.getProperty("hastransformhierarchy", this._hastransformhierarchy);
            this._leftfeetbottomheight = this.getProperty("leftfeetbottomheight", this._leftfeetbottomheight);
            this._rightfeetbottomheight = this.getProperty("rightfeetbottomheight", this._rightfeetbottomheight);
            this.applyRootMotion = this.getProperty("applyrootmotion", this.applyRootMotion);
            // ..
            if (this._machine != null) {
                if (this._machine.speed != null) {
                    this.speedRatio = this._machine.speed;
                }
                if (this._machine.parameters != null && this._machine.parameters.length > 0) {
                    var plist = this._machine.parameters;
                    plist.forEach(function (parameter) {
                        var name = parameter.name;
                        var type = parameter.type;
                        var curve = parameter.curve;
                        var defaultFloat = parameter.defaultFloat;
                        var defaultBool = parameter.defaultBool;
                        var defaultInt = parameter.defaultInt;
                        _this._parameters.set(name, type);
                        if (type === BABYLON.AnimatorParameterType.Bool) {
                            _this.setBool(name, defaultBool);
                        }
                        else if (type === BABYLON.AnimatorParameterType.Float) {
                            _this.setFloat(name, defaultFloat);
                        }
                        else if (type === BABYLON.AnimatorParameterType.Int) {
                            _this.setInteger(name, defaultInt);
                        }
                        else if (type === BABYLON.AnimatorParameterType.Trigger) {
                            _this.resetTrigger(name);
                        }
                    });
                }
                // ..
                // Process Machine State Layers
                // ..
                if (this._machine.layers != null && this._machine.layers.length > 0) {
                    this._layercount = this._machine.layers.length;
                    // Sort In Ascending Order
                    this._machine.layers.sort(function (left, right) {
                        if (left.index < right.index)
                            return -1;
                        if (left.index > right.index)
                            return 1;
                        return 0;
                    });
                    // Parse State Machine Layers
                    this._machine.layers.forEach(function (layer) {
                        // Set Layer Avatar Mask Transform Path
                        layer.animationMaskMap = new Map();
                        if (layer.avatarMask != null && layer.avatarMask.transformPaths != null && layer.avatarMask.transformPaths.length > 0) {
                            for (var i = 0; i < layer.avatarMask.transformPaths.length; i++) {
                                layer.animationMaskMap.set(layer.avatarMask.transformPaths[i], i);
                            }
                        }
                    });
                }
            }
            if (this._source != null && this._source !== "" && this.scene.animationGroups != null) {
                var sourceanims_1 = null;
                // ..
                // TODO - Optimize Searching Global Animation Groups - ???
                // ..
                this.scene.animationGroups.forEach(function (group) {
                    var agroup = group;
                    if (agroup != null && agroup.metadata != null && agroup.metadata.unity != null && agroup.metadata.unity.source != null && agroup.metadata.unity.source !== "") {
                        if (agroup.metadata.unity.source === _this._source) {
                            if (sourceanims_1 == null)
                                sourceanims_1 = [];
                            sourceanims_1.push(group);
                        }
                    }
                });
                if (sourceanims_1 != null && sourceanims_1.length > 0) {
                    this.setAnimationGroups(sourceanims_1);
                }
            }
            // ..
            // Map State Machine Tracks (Animation Groups)
            // ..
            if (this._machine != null && this._machine.states != null && this._machine.states.length > 0) {
                this._machine.states.forEach(function (state) {
                    if (state != null && state.name != null) {
                        // Set Custom Animation Curves
                        if (state.ccurves != null && state.ccurves.length > 0) {
                            state.ccurves.forEach(function (curve) {
                                if (curve.animation != null) {
                                    var anim = BABYLON.Animation.Parse(curve.animation);
                                    if (anim != null) {
                                        if (state.tcurves == null)
                                            state.tcurves = [];
                                        state.tcurves.push(anim);
                                    }
                                }
                            });
                        }
                        // Setup Animation State Machines
                        _this.setupTreeBranches(state.blendtree);
                        _this.setMachineState(state.name, state);
                    }
                });
            }
            // .. 
            // console.warn("Animation State Mahine: " + this.transform.name);
            // console.log(this);
            // SM.SetWindowState(this.transform.name, this);
        };
        AnimationState.prototype.updateStateMachine = function (deltaTime) {
            var _this = this;
            if (deltaTime === void 0) { deltaTime = null; }
            if (this.delayUpdateUntilReady === false || (this.delayUpdateUntilReady === true && this.getReadyState() === true)) {
                if (this._executed === false) {
                    this._executed = true;
                    if (this._machine.layers != null && this._machine.layers.length > 0) {
                        this._machine.layers.forEach(function (layer) {
                            _this.playCurrentAnimationState(layer, layer.entry, 0);
                        });
                    }
                }
                if (this.enableAnimation === true) {
                    var frameDeltaTime = deltaTime || this.getDeltaSeconds();
                    this.updateAnimationState(frameDeltaTime);
                    this.updateAnimationTargets(frameDeltaTime);
                    if (this.onAnimationUpdateObservable.hasObservers() === true) {
                        this.onAnimationUpdateObservable.notifyObservers(this.transform);
                    }
                }
            }
        };
        AnimationState.prototype.destroyStateMachine = function () {
            this._data = null;
            this._anims = null;
            this._numbers = null;
            this._booleans = null;
            this._triggers = null;
            this._parameters = null;
            this._checkers = null;
            this._machine = null;
            this.onAnimationIKObservable.clear();
            this.onAnimationIKObservable = null;
            this.onAnimationEndObservable.clear();
            this.onAnimationEndObservable = null;
            this.onAnimationLoopObservable.clear();
            this.onAnimationLoopObservable = null;
            this.onAnimationEventObservable.clear();
            this.onAnimationEventObservable = null;
            this.onAnimationUpdateObservable.clear();
            this.onAnimationUpdateObservable = null;
        };
        /* Animation Controller Private Update Functions */
        AnimationState.prototype.updateAnimationState = function (deltaTime) {
            var _this = this;
            if (this._machine.layers != null && this._machine.layers.length > 0) {
                this._machine.layers.forEach(function (layer) {
                    _this.checkStateMachine(layer, deltaTime);
                });
            }
        };
        AnimationState.prototype.updateAnimationTargets = function (deltaTime) {
            var _this = this;
            this._ikFrameEanbled = false; // Reset Current Inverse Kinematics
            this._animationplaying = false; // Reset Current Animation Is Playing
            //this._bodyOrientationAngleY = 0;
            if (this.transform.rotationQuaternion != null) {
                //this._bodyOrientationAngleY = this.transform.rotationQuaternion.toEulerAngles().y; // TODO - OPTIMIZE THIS
            }
            else if (this.transform.rotation != null) {
                //this._bodyOrientationAngleY = this.transform.rotation.y;
            }
            if (this._machine.layers != null && this._machine.layers.length > 0) {
                this._machine.layers.forEach(function (layer) {
                    //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    if (layer.index === 0)
                        _this._frametime = layer.animationTime; // Note: Update Master Animation Frame Time
                    //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    if (layer.animationStateMachine != null && layer.animationStateMachine.blendtree != null) {
                        if (layer.iKPass === true) {
                            if (layer.animationStateMachine.iKOnFeet === true) {
                                _this._ikFrameEanbled = true;
                            }
                            if (_this.onAnimationIKObservable.hasObservers() === true) {
                                _this.onAnimationIKObservable.notifyObservers(layer.index);
                            }
                        }
                        var layerState = layer.animationStateMachine;
                        if (layerState.type === BABYLON.MotionType.Clip && layerState.played !== -1)
                            layerState.played += deltaTime;
                        if (layerState.blendtree.children != null && layerState.blendtree.children.length > 0) {
                            var primaryBlendTree = layerState.blendtree.children[0];
                            if (primaryBlendTree != null) {
                                if (layerState.blendtree.blendType == BABYLON.BlendTreeType.Clip) {
                                    var animationTrack = primaryBlendTree.track;
                                    if (animationTrack != null) {
                                        var frameRatio = (BABYLON.AnimationState.TIME / animationTrack.to);
                                        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                        // Motion Clip Animation Delta Time
                                        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                        layer.animationTime += (deltaTime * frameRatio * Math.abs(layerState.speed) * Math.abs(_this.speedRatio) * BABYLON.AnimationState.SPEED);
                                        if (layer.animationTime > BABYLON.AnimationState.TIME)
                                            layer.animationTime = BABYLON.AnimationState.TIME;
                                        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                        // Motion Clip Animation Normalized Time
                                        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                        layer.animationNormal = (layer.animationTime / BABYLON.AnimationState.TIME); // Note: Normalize Layer Frame Time
                                        var validateTime = (layer.animationNormal > 0.99) ? 1 : layer.animationNormal;
                                        var formattedTime_1 = Math.round(validateTime * 100) / 100;
                                        if (layerState.speed < 0)
                                            layer.animationNormal = (1 - layer.animationNormal); // Note: Reverse Normalized Frame Time
                                        var animationFrameTime_1 = (animationTrack.to * layer.animationNormal); // Note: Denormalize Animation Frame Time
                                        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                        // let additivereferenceposeclip:number = 0;
                                        // let additivereferenceposetime:number = 0.0;
                                        // let hasadditivereferencepose:boolean = false;
                                        // let starttime:number = 0.0;
                                        // let stoptime:number = 0.0;
                                        // let mirror:boolean = false;
                                        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                        var level_1 = 0.0;
                                        var xspeed = 0.0;
                                        var zspeed = 0.0;
                                        var looptime = false;
                                        //let loopblend:boolean = false;
                                        //let cycleoffset:number = 0.0;
                                        //let heightfromfeet:boolean = false;
                                        var orientationoffsety_1 = 0.0;
                                        //let keeporiginalorientation:boolean = true;
                                        //let keeporiginalpositiony:boolean = true;
                                        //let keeporiginalpositionxz:boolean = true;
                                        var loopblendorientation_1 = true;
                                        var loopblendpositiony_1 = true;
                                        var loopblendpositionxz_1 = true;
                                        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                        var agroup = animationTrack;
                                        if (agroup.metadata != null && agroup.metadata.unity != null) {
                                            if (agroup.metadata.unity.averagespeed != null) {
                                                xspeed = (agroup.metadata.unity.averagespeed.x != null) ? agroup.metadata.unity.averagespeed.x : 0;
                                                zspeed = (agroup.metadata.unity.averagespeed.z != null) ? agroup.metadata.unity.averagespeed.z : 0;
                                            }
                                            if (agroup.metadata.unity.settings != null) {
                                                level_1 = (agroup.metadata.unity.settings.level != null) ? agroup.metadata.unity.settings.level : 0;
                                                looptime = (agroup.metadata.unity.settings.looptime != null) ? agroup.metadata.unity.settings.looptime : false;
                                                // DEPRECIATED: loopblend = (agroup.metadata.unity.settings.loopblend != null) ? agroup.metadata.unity.settings.loopblend : false;
                                                // DEPRECIATED: cycleoffset = (agroup.metadata.unity.settings.cycleoffset != null) ? agroup.metadata.unity.settings.cycleoffset : 0;
                                                // DEPRECIATED: heightfromfeet = (agroup.metadata.unity.settings.heightfromfeet != null) ? agroup.metadata.unity.settings.heightfromfeet : false;
                                                orientationoffsety_1 = (agroup.metadata.unity.settings.orientationoffsety != null) ? agroup.metadata.unity.settings.orientationoffsety : 0;
                                                // DEPRECIATED: keeporiginalorientation = (agroup.metadata.unity.settings.keeporiginalorientation != null) ? agroup.metadata.unity.settings.keeporiginalorientation : true;
                                                // DEPRECIATED: keeporiginalpositiony = (agroup.metadata.unity.settings.keeporiginalpositiony != null) ? agroup.metadata.unity.settings.keeporiginalpositiony : true;
                                                // DEPRECIATED: keeporiginalpositionxz = (agroup.metadata.unity.settings.keeporiginalpositionxz != null) ? agroup.metadata.unity.settings.keeporiginalpositionxz : true;
                                                loopblendorientation_1 = (agroup.metadata.unity.settings.loopblendorientation != null) ? agroup.metadata.unity.settings.loopblendorientation : true;
                                                loopblendpositiony_1 = (agroup.metadata.unity.settings.loopblendpositiony != null) ? agroup.metadata.unity.settings.loopblendpositiony : true;
                                                loopblendpositionxz_1 = (agroup.metadata.unity.settings.loopblendpositionxz != null) ? agroup.metadata.unity.settings.loopblendpositionxz : true;
                                            }
                                        }
                                        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                        // Unity Inverts Root Motion Animation Offsets
                                        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                        orientationoffsety_1 = BABYLON.Tools.ToRadians(orientationoffsety_1);
                                        // DEPRECIATED: orientationoffsety *= -1;
                                        xspeed = Math.abs(xspeed);
                                        zspeed = Math.abs(zspeed);
                                        level_1 *= -1;
                                        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                        if (layer.animationTime >= BABYLON.AnimationState.TIME) {
                                            layer.animationFirstRun = false;
                                            layer.animationLoopFrame = true;
                                            if (looptime === true) {
                                                layer.animationLoopCount++;
                                                if (_this.onAnimationLoopObservable.hasObservers() === true) {
                                                    _this.onAnimationLoopObservable.notifyObservers(layer.index);
                                                }
                                            }
                                            else {
                                                if (layer.animationEndFrame === false) {
                                                    layer.animationEndFrame = true;
                                                    if (_this.onAnimationEndObservable.hasObservers() === true) {
                                                        _this.onAnimationEndObservable.notifyObservers(layer.index);
                                                    }
                                                }
                                            }
                                        }
                                        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                        if (layer.animationFirstRun === true || looptime === true) {
                                            _this._animationplaying = true;
                                            animationTrack.targetedAnimations.forEach(function (targetedAnim) {
                                                if (targetedAnim.target instanceof BABYLON.TransformNode) {
                                                    var clipTarget = targetedAnim.target;
                                                    if (layer.index === 0 || layer.avatarMask == null || _this.filterTargetAvatarMask(layer, clipTarget)) {
                                                        var targetRootBone = (clipTarget.metadata != null && clipTarget.metadata.unity != null && clipTarget.metadata.unity.rootbone != null) ? clipTarget.metadata.unity.rootbone : false;
                                                        if (targetRootBone === true) {
                                                            if (_this._initialRootBonePosition == null) {
                                                                var targetRootPos = (clipTarget.metadata != null && clipTarget.metadata.unity != null && clipTarget.metadata.unity.rootpos != null) ? clipTarget.metadata.unity.rootpos : null;
                                                                if (targetRootPos != null)
                                                                    _this._initialRootBonePosition = BABYLON.Vector3.FromArray(targetRootPos);
                                                                if (_this._initialRootBonePosition == null)
                                                                    _this._initialRootBonePosition = new BABYLON.Vector3(0, 0, 0);
                                                                // console.warn("A - Init Root Bone Position: " + clipTarget.name);
                                                                // console.log(this._initialRootBonePosition);
                                                            }
                                                            if (_this._initialRootBoneRotation == null) {
                                                                var targetRootRot = (clipTarget.metadata != null && clipTarget.metadata.unity != null && clipTarget.metadata.unity.rootrot != null) ? clipTarget.metadata.unity.rootrot : null;
                                                                if (targetRootRot != null) {
                                                                    var quat = BABYLON.Quaternion.FromArray(targetRootRot);
                                                                    _this._initialRootBoneRotation = quat.toEulerAngles();
                                                                }
                                                                if (_this._initialRootBoneRotation == null)
                                                                    _this._initialRootBoneRotation = new BABYLON.Vector3(0, 0, 0);
                                                                // console.warn("A - Init Root Bone Rotation: " + clipTarget.name);
                                                                // console.log(this._initialRootBoneRotation);
                                                            }
                                                        }
                                                        if (clipTarget.metadata != null && clipTarget.metadata.mixer != null) {
                                                            var clipTargetMixer = clipTarget.metadata.mixer[layer.index];
                                                            if (clipTargetMixer != null) {
                                                                if (targetedAnim.animation.targetProperty === "position") {
                                                                    _this._targetPosition = BABYLON.Utilities.SampleAnimationVector3(targetedAnim.animation, animationFrameTime_1);
                                                                    // ..
                                                                    // Handle Root Motion (Position)
                                                                    // ..
                                                                    if (targetRootBone === true && _this._initialRootBonePosition != null) {
                                                                        _this._positionWeight = true;
                                                                        _this._positionHolder.copyFrom(_this._initialRootBonePosition);
                                                                        _this._rootBoneWeight = false;
                                                                        _this._rootBoneHolder.set(0, 0, 0);
                                                                        // ..
                                                                        // Apply Root Motion
                                                                        // ..
                                                                        if (_this.applyRootMotion === true) {
                                                                            if (loopblendpositiony_1 === true && loopblendpositionxz_1 === true) {
                                                                                _this._positionWeight = true; // Bake XYZ Into Pose
                                                                                _this._positionHolder.set(_this._targetPosition.x, (_this._targetPosition.y + level_1), _this._targetPosition.z);
                                                                            }
                                                                            else if (loopblendpositiony_1 === false && loopblendpositionxz_1 === false) {
                                                                                _this._rootBoneWeight = true; // Use XYZ As Root Motion
                                                                                _this._rootBoneHolder.set(_this._targetPosition.x, (_this._targetPosition.y + level_1), _this._targetPosition.z);
                                                                            }
                                                                            else if (loopblendpositiony_1 === true && loopblendpositionxz_1 === false) {
                                                                                _this._positionWeight = true; // Bake Y Into Pose 
                                                                                _this._positionHolder.set(_this._initialRootBonePosition.x, (_this._targetPosition.y + level_1), _this._initialRootBonePosition.z);
                                                                                _this._rootBoneWeight = true; // Use XZ As Root Motion
                                                                                _this._rootBoneHolder.set(_this._targetPosition.x, 0, _this._targetPosition.z); // MAYBE: Use this.transform.position.y - ???
                                                                            }
                                                                            else if (loopblendpositionxz_1 === true && loopblendpositiony_1 === false) {
                                                                                _this._positionWeight = true; // Bake XZ Into Pose
                                                                                _this._positionHolder.set(_this._targetPosition.x, _this._initialRootBonePosition.y, _this._targetPosition.z);
                                                                                _this._rootBoneWeight = true; // Use Y As Root Motion
                                                                                _this._rootBoneHolder.set(0, (_this._targetPosition.y + level_1), 0); // MAYBE: Use this.transform.position.xz - ???
                                                                            }
                                                                        }
                                                                        else {
                                                                            _this._positionWeight = true; // Bake XYZ Original Motion
                                                                            _this._positionHolder.set(_this._targetPosition.x, (_this._targetPosition.y + level_1), _this._targetPosition.z);
                                                                        }
                                                                        // Bake Position Holder
                                                                        if (_this._positionWeight === true) {
                                                                            if (clipTargetMixer.positionBuffer == null)
                                                                                clipTargetMixer.positionBuffer = new BABYLON.Vector3(0, 0, 0);
                                                                            BABYLON.Utilities.BlendVector3Value(clipTargetMixer.positionBuffer, _this._positionHolder, 1.0);
                                                                        }
                                                                        // Bake Root Bone Holder
                                                                        if (_this._rootBoneWeight === true) {
                                                                            if (clipTargetMixer.rootPosition == null)
                                                                                clipTargetMixer.rootPosition = new BABYLON.Vector3(0, 0, 0);
                                                                            BABYLON.Utilities.BlendVector3Value(clipTargetMixer.rootPosition, _this._rootBoneHolder, 1.0);
                                                                        }
                                                                    }
                                                                    else {
                                                                        // Bake Normal Pose Position
                                                                        if (clipTargetMixer.positionBuffer == null)
                                                                            clipTargetMixer.positionBuffer = new BABYLON.Vector3(0, 0, 0);
                                                                        BABYLON.Utilities.BlendVector3Value(clipTargetMixer.positionBuffer, _this._targetPosition, 1.0);
                                                                    }
                                                                }
                                                                else if (targetedAnim.animation.targetProperty === "rotationQuaternion") {
                                                                    _this._targetRotation = BABYLON.Utilities.SampleAnimationQuaternion(targetedAnim.animation, animationFrameTime_1);
                                                                    // ..
                                                                    // Handle Root Motion (Rotation)
                                                                    // ..
                                                                    if (targetRootBone === true) {
                                                                        _this._rotationWeight = false;
                                                                        _this._rotationHolder.set(0, 0, 0, 0);
                                                                        _this._rootQuatWeight = false;
                                                                        _this._rootQuatHolder.set(0, 0, 0, 0);
                                                                        // TODO - OPTIMIZE TO EULER ANGLES
                                                                        var eulerAngle = _this._targetRotation.toEulerAngles();
                                                                        var orientationAngleY = eulerAngle.y; //(keeporiginalorientation === true) ? eulerAngle.y : this._bodyOrientationAngleY;
                                                                        // ..
                                                                        // Apply Root Motion
                                                                        // ..
                                                                        if (_this.applyRootMotion === true) {
                                                                            if (loopblendorientation_1 === true) {
                                                                                _this._rotationWeight = true; // Bake XYZ Into Pose
                                                                                BABYLON.Quaternion.FromEulerAnglesToRef(eulerAngle.x, (orientationAngleY + orientationoffsety_1), eulerAngle.z, _this._rotationHolder);
                                                                            }
                                                                            else {
                                                                                _this._rotationWeight = true; // Bake XZ Into Pose
                                                                                BABYLON.Quaternion.FromEulerAnglesToRef(eulerAngle.x, _this._initialRootBoneRotation.y, eulerAngle.z, _this._rotationHolder);
                                                                                _this._rootQuatWeight = true; // Use Y As Root Motion
                                                                                BABYLON.Quaternion.FromEulerAnglesToRef(0, (orientationAngleY + orientationoffsety_1), 0, _this._rootQuatHolder); // MAYBE: Use this.transform.rotation.xz - ???
                                                                            }
                                                                        }
                                                                        else {
                                                                            _this._rotationWeight = true; // Bake XYZ Into Pose
                                                                            BABYLON.Quaternion.FromEulerAnglesToRef(eulerAngle.x, (orientationAngleY + orientationoffsety_1), eulerAngle.z, _this._rotationHolder);
                                                                        }
                                                                        // Bake Rotation Holder
                                                                        if (_this._rotationWeight === true) {
                                                                            if (clipTargetMixer.rotationBuffer == null)
                                                                                clipTargetMixer.rotationBuffer = new BABYLON.Quaternion(0, 0, 0, 1);
                                                                            BABYLON.Utilities.BlendQuaternionValue(clipTargetMixer.rotationBuffer, _this._rotationHolder, 1.0);
                                                                        }
                                                                        // Bake Root Bone Rotation
                                                                        if (_this._rootQuatWeight === true) {
                                                                            if (clipTargetMixer.rootRotation == null)
                                                                                clipTargetMixer.rootRotation = new BABYLON.Quaternion(0, 0, 0, 1);
                                                                            BABYLON.Utilities.BlendQuaternionValue(clipTargetMixer.rootRotation, _this._rootQuatHolder, 1.0);
                                                                        }
                                                                    }
                                                                    else {
                                                                        // Bake Normal Pose Rotation
                                                                        if (clipTargetMixer.rotationBuffer == null)
                                                                            clipTargetMixer.rotationBuffer = new BABYLON.Quaternion(0, 0, 0, 1);
                                                                        BABYLON.Utilities.BlendQuaternionValue(clipTargetMixer.rotationBuffer, _this._targetRotation, 1.0);
                                                                    }
                                                                }
                                                                else if (targetedAnim.animation.targetProperty === "scaling") {
                                                                    _this._targetScaling = BABYLON.Utilities.SampleAnimationVector3(targetedAnim.animation, animationFrameTime_1);
                                                                    if (clipTargetMixer.scalingBuffer == null)
                                                                        clipTargetMixer.scalingBuffer = new BABYLON.Vector3(1, 1, 1);
                                                                    BABYLON.Utilities.BlendVector3Value(clipTargetMixer.scalingBuffer, _this._targetScaling, 1.0);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                else if (targetedAnim.target instanceof BABYLON.MorphTarget) {
                                                    var morphTarget = targetedAnim.target;
                                                    if (morphTarget.metadata != null && morphTarget.metadata.mixer != null) {
                                                        var morphTargetMixer = morphTarget.metadata.mixer[layer.index];
                                                        if (targetedAnim.animation.targetProperty === "influence") {
                                                            var floatValue = BABYLON.Utilities.SampleAnimationFloat(targetedAnim.animation, animationFrameTime_1);
                                                            if (morphTargetMixer.influenceBuffer == null)
                                                                morphTargetMixer.influenceBuffer = 0;
                                                            morphTargetMixer.influenceBuffer = BABYLON.Utilities.BlendFloatValue(morphTargetMixer.influenceBuffer, floatValue, 1.0);
                                                        }
                                                    }
                                                }
                                            });
                                        }
                                        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                        // Parse Layer Animation Curves
                                        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                        if (layer.animationStateMachine.tcurves != null && layer.animationStateMachine.tcurves.length > 0) {
                                            layer.animationStateMachine.tcurves.forEach(function (animation) {
                                                if (animation.targetProperty != null && animation.targetProperty !== "") {
                                                    var sample = BABYLON.Utilities.SampleAnimationFloat(animation, layer.animationNormal);
                                                    _this.setFloat(animation.targetProperty, sample);
                                                }
                                            });
                                        }
                                        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                        // Validate Layer Animation Events (TODO - Pass Layer Index Properties To Observers)
                                        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                        if (layer.animationStateMachine.events != null && layer.animationStateMachine.events.length > 0) {
                                            layer.animationStateMachine.events.forEach(function (animatorEvent) {
                                                if (animatorEvent.time === formattedTime_1) {
                                                    var animEventKey = animatorEvent.function + "_" + animatorEvent.time;
                                                    if (layer.animationLoopEvents == null)
                                                        layer.animationLoopEvents = {};
                                                    if (!layer.animationLoopEvents[animEventKey]) {
                                                        layer.animationLoopEvents[animEventKey] = true;
                                                        // console.log("Blend Tree Animation Event: " + animatorEvent.time + " >> " + animatorEvent.clip + " >> " + animatorEvent.function);
                                                        if (_this.onAnimationEventObservable.hasObservers() === true) {
                                                            _this.onAnimationEventObservable.notifyObservers(animatorEvent);
                                                        }
                                                    }
                                                }
                                            });
                                        }
                                        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                        // Step Motion Clip Animation Time
                                        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                        if (layer.animationLoopFrame === true) {
                                            layer.animationTime = 0;
                                            layer.animationNormal = 0;
                                            layer.animationLoopFrame = false;
                                            layer.animationLoopEvents = null;
                                        }
                                    }
                                    else {
                                        // console.warn(">>> No Motion Clip Animation Track Found For: " + this.transform.name);
                                    }
                                }
                                else {
                                    _this._animationplaying = true; // Note: Blend Tree Are Always Playing
                                    // this._blendMessage = "";
                                    _this._blendWeights.primary = null;
                                    _this._blendWeights.secondary = null;
                                    var scaledWeightList = [];
                                    var primaryBlendTree_1 = layerState.blendtree;
                                    _this.parseTreeBranches(layer, primaryBlendTree_1, 1.0, scaledWeightList);
                                    var frameRatio = _this.computeWeightedFrameRatio(scaledWeightList);
                                    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                    // Blend Tree Animation Delta Time
                                    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                    layer.animationTime += (deltaTime * frameRatio * Math.abs(layerState.speed) * Math.abs(_this.speedRatio) * BABYLON.AnimationState.SPEED);
                                    if (layer.animationTime > BABYLON.AnimationState.TIME)
                                        layer.animationTime = BABYLON.AnimationState.TIME;
                                    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                    // Blend Tree Animation Normalized Time
                                    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                    layer.animationNormal = (layer.animationTime / BABYLON.AnimationState.TIME); // Note: Normalize Layer Frame Time
                                    var validateTime = (layer.animationNormal > 0.99) ? 1 : layer.animationNormal;
                                    var formattedTime_2 = Math.round(validateTime * 100) / 100;
                                    if (layerState.speed < 0)
                                        layer.animationNormal = (1 - layer.animationNormal); // Note: Reverse Normalized Frame Time
                                    var blendingNormalTime = layer.animationNormal; // Note: Denormalize Animation Frame Time
                                    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                    if (layer.animationTime >= BABYLON.AnimationState.TIME) {
                                        layer.animationFirstRun = false;
                                        layer.animationLoopFrame = true; // Note: No Loop Or End Events For Blend Trees - ???
                                        layer.animationLoopCount++;
                                    }
                                    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                    var masterAnimationTrack = (scaledWeightList != null && scaledWeightList.length > 0 && scaledWeightList[0].track != null) ? scaledWeightList[0].track : null;
                                    if (masterAnimationTrack != null) {
                                        var targetCount = masterAnimationTrack.targetedAnimations.length;
                                        for (var targetIndex = 0; targetIndex < targetCount; targetIndex++) {
                                            var masterAnimimation = masterAnimationTrack.targetedAnimations[targetIndex];
                                            if (masterAnimimation.target instanceof BABYLON.TransformNode) {
                                                var blendTarget = masterAnimimation.target;
                                                if (layer.index === 0 || layer.avatarMask == null || _this.filterTargetAvatarMask(layer, blendTarget)) {
                                                    var targetRootBone = (blendTarget.metadata != null && blendTarget.metadata.unity != null && blendTarget.metadata.unity.rootbone != null) ? blendTarget.metadata.unity.rootbone : false;
                                                    if (targetRootBone === true) {
                                                        if (_this._initialRootBonePosition == null) {
                                                            var targetRootPos = (blendTarget.metadata != null && blendTarget.metadata.unity != null && blendTarget.metadata.unity.rootpos != null) ? blendTarget.metadata.unity.rootpos : null;
                                                            if (targetRootPos != null)
                                                                _this._initialRootBonePosition = BABYLON.Vector3.FromArray(targetRootPos);
                                                            if (_this._initialRootBonePosition == null)
                                                                _this._initialRootBonePosition = new BABYLON.Vector3(0, 0, 0);
                                                            // console.warn("B - Init Root Bone Position: " + blendTarget.name);
                                                            // console.log(this._initialRootBonePosition);
                                                        }
                                                        if (_this._initialRootBoneRotation == null) {
                                                            var targetRootRot = (blendTarget.metadata != null && blendTarget.metadata.unity != null && blendTarget.metadata.unity.rootrot != null) ? blendTarget.metadata.unity.rootrot : null;
                                                            if (targetRootRot != null) {
                                                                var quat = BABYLON.Quaternion.FromArray(targetRootRot);
                                                                _this._initialRootBoneRotation = quat.toEulerAngles();
                                                            }
                                                            if (_this._initialRootBoneRotation == null)
                                                                _this._initialRootBoneRotation = new BABYLON.Vector3(0, 0, 0);
                                                            // console.warn("B - Init Root Bone Rotation: " + blendTarget.name);
                                                            // console.log(this._initialRootBoneRotation);
                                                        }
                                                    }
                                                    if (blendTarget.metadata != null && blendTarget.metadata.mixer != null) {
                                                        _this._initialtargetblending = true; // Note: Reset First Target Blending Buffer
                                                        var blendTargetMixer = blendTarget.metadata.mixer[layer.index];
                                                        _this.updateBlendableTargets(deltaTime, layer, primaryBlendTree_1, masterAnimimation, targetIndex, blendTargetMixer, blendingNormalTime, targetRootBone, blendTarget);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    else {
                                        // console.warn(">>> No Blend Tree Master Animation Track Found For: " + this.transform.name);
                                    }
                                    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                    // Parse Layer Animation Curves
                                    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                    if (layer.animationStateMachine.tcurves != null && layer.animationStateMachine.tcurves.length > 0) {
                                        layer.animationStateMachine.tcurves.forEach(function (animation) {
                                            if (animation.targetProperty != null && animation.targetProperty !== "") {
                                                var sample = BABYLON.Utilities.SampleAnimationFloat(animation, layer.animationNormal);
                                                _this.setFloat(animation.targetProperty, sample);
                                            }
                                        });
                                    }
                                    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                    // Validate Layer Animation Events (TODO - Pass Layer Index And Clip Blended Weight Properties To Observers)
                                    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                    if (layer.animationStateMachine.events != null && layer.animationStateMachine.events.length > 0) {
                                        layer.animationStateMachine.events.forEach(function (animatorEvent) {
                                            if (animatorEvent.time === formattedTime_2) {
                                                var animEventKey = animatorEvent.function + "_" + animatorEvent.time;
                                                if (layer.animationLoopEvents == null)
                                                    layer.animationLoopEvents = {};
                                                if (!layer.animationLoopEvents[animEventKey]) {
                                                    layer.animationLoopEvents[animEventKey] = true;
                                                    // console.log("Blend Tree Animation Event: " + animatorEvent.time + " >> " + animatorEvent.clip + " >> " + animatorEvent.function);
                                                    if (_this.onAnimationEventObservable.hasObservers() === true) {
                                                        _this.onAnimationEventObservable.notifyObservers(animatorEvent);
                                                    }
                                                }
                                            }
                                        });
                                    }
                                    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                    // Step Blend Tree Animation Time
                                    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                    if (layer.animationLoopFrame === true) {
                                        layer.animationTime = 0;
                                        layer.animationNormal = 0;
                                        layer.animationLoopFrame = false;
                                        layer.animationLoopEvents = null;
                                    }
                                }
                            }
                        }
                    }
                });
            }
            this.finalizeAnimationTargets();
        };
        // private _blendMessage:string = "";
        AnimationState.prototype.updateBlendableTargets = function (deltaTime, layer, tree, masterAnimation, targetIndex, targetMixer, normalizedFrameTime, targetRootBone, blendTarget) {
            if (targetMixer != null && tree.children != null && tree.children.length > 0) {
                for (var index = 0; index < tree.children.length; index++) {
                    var child = tree.children[index];
                    if (child.weight > 0) {
                        if (child.type === BABYLON.MotionType.Clip) {
                            if (child.track != null) {
                                //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                // let additivereferenceposeclip:number = 0;
                                // let additivereferenceposetime:number = 0.0;
                                // let hasadditivereferencepose:boolean = false;
                                // let starttime:number = 0.0;
                                // let stoptime:number = 0.0;
                                // let mirror:boolean = false;
                                //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                // let looptime:boolean = true;
                                //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                var level = 0.0;
                                var xspeed = 0.0;
                                var zspeed = 0.0;
                                //let loopblend:boolean = false;
                                //let cycleoffset:number = 0.0;
                                //let heightfromfeet:boolean = false;
                                var orientationoffsety = 0.0;
                                //let keeporiginalorientation:boolean = true;
                                //let keeporiginalpositiony:boolean = true;
                                //let keeporiginalpositionxz:boolean = true;
                                var loopblendorientation = true;
                                var loopblendpositiony = true;
                                var loopblendpositionxz = true;
                                //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                var agroup = child.track;
                                if (agroup.metadata != null && agroup.metadata.unity != null) {
                                    if (agroup.metadata.unity.averagespeed != null) {
                                        xspeed = (agroup.metadata.unity.averagespeed.x != null) ? agroup.metadata.unity.averagespeed.x : 0;
                                        zspeed = (agroup.metadata.unity.averagespeed.z != null) ? agroup.metadata.unity.averagespeed.z : 0;
                                    }
                                    if (agroup.metadata.unity.settings != null) {
                                        level = (agroup.metadata.unity.settings.level != null) ? agroup.metadata.unity.settings.level : 0;
                                        // DEPRECIATED: loopblend = (agroup.metadata.unity.settings.loopblend != null) ? agroup.metadata.unity.settings.loopblend : false;
                                        // DEPRECIATED: cycleoffset = (agroup.metadata.unity.settings.cycleoffset != null) ? agroup.metadata.unity.settings.cycleoffset : 0;
                                        // DEPRECIATED: heightfromfeet = (agroup.metadata.unity.settings.heightfromfeet != null) ? agroup.metadata.unity.settings.heightfromfeet : false;
                                        orientationoffsety = (agroup.metadata.unity.settings.orientationoffsety != null) ? agroup.metadata.unity.settings.orientationoffsety : 0;
                                        // DEPRECIATED: keeporiginalorientation = (agroup.metadata.unity.settings.keeporiginalorientation != null) ? agroup.metadata.unity.settings.keeporiginalorientation : true;
                                        // DEPRECIATED: keeporiginalpositiony = (agroup.metadata.unity.settings.keeporiginalpositiony != null) ? agroup.metadata.unity.settings.keeporiginalpositiony : true;
                                        // DEPRECIATED: keeporiginalpositionxz = (agroup.metadata.unity.settings.keeporiginalpositionxz != null) ? agroup.metadata.unity.settings.keeporiginalpositionxz : true;
                                        loopblendorientation = (agroup.metadata.unity.settings.loopblendorientation != null) ? agroup.metadata.unity.settings.loopblendorientation : true;
                                        loopblendpositiony = (agroup.metadata.unity.settings.loopblendpositiony != null) ? agroup.metadata.unity.settings.loopblendpositiony : true;
                                        loopblendpositionxz = (agroup.metadata.unity.settings.loopblendpositionxz != null) ? agroup.metadata.unity.settings.loopblendpositionxz : true;
                                    }
                                }
                                //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                // Unity Inverts Root Motion Animation Offsets
                                //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                orientationoffsety = BABYLON.Tools.ToRadians(orientationoffsety);
                                // DEPRECIATED: orientationoffsety *= -1;
                                xspeed = Math.abs(xspeed);
                                zspeed = Math.abs(zspeed);
                                level *= -1;
                                //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                // this._blendMessage += (" >>> " + child.motion + ": " + child.weight.toFixed(2));
                                //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                // TODO - Get blendable animation from target map - ???
                                var blendableAnim = child.track.targetedAnimations[targetIndex];
                                var blendableWeight = (this._initialtargetblending === true) ? 1.0 : parseFloat(child.weight.toFixed(2));
                                this._initialtargetblending = false; // Note: Clear First Target Blending Buffer
                                if (blendableAnim.target === masterAnimation.target && blendableAnim.animation.targetProperty === masterAnimation.animation.targetProperty) {
                                    var adjustedFrameTime = normalizedFrameTime; // Note: Adjust Normalized Frame Time
                                    if (child.timescale < 0)
                                        adjustedFrameTime = (1 - adjustedFrameTime); // Note: Reverse Normalized Frame Time
                                    var animationFrameTime = (child.track.to * adjustedFrameTime); // Note: Denormalize Animation Frame Time
                                    //const animationFrameTime:number = (Math.round((child.track.to * adjustedFrameTime) * 100) / 100);  // Note: Denormalize Animation Frame Time
                                    if (masterAnimation.animation.targetProperty === "position") {
                                        this._targetPosition = BABYLON.Utilities.SampleAnimationVector3(blendableAnim.animation, animationFrameTime);
                                        // ..
                                        // Root Transform Position
                                        // ..
                                        if (targetRootBone === true && this._initialRootBonePosition != null) {
                                            this._positionWeight = true;
                                            this._positionHolder.copyFrom(this._initialRootBonePosition);
                                            this._rootBoneWeight = false;
                                            this._rootBoneHolder.set(0, 0, 0);
                                            // ..
                                            // Apply Root Motion
                                            // ..
                                            if (this.applyRootMotion === true) {
                                                if (loopblendpositiony === true && loopblendpositionxz === true) {
                                                    this._positionWeight = true; // Bake XYZ Into Pose
                                                    this._positionHolder.set(this._targetPosition.x, (this._targetPosition.y + level), this._targetPosition.z);
                                                }
                                                else if (loopblendpositiony === false && loopblendpositionxz === false) {
                                                    this._rootBoneWeight = true; // Use XYZ As Root Motion
                                                    this._rootBoneHolder.set(this._targetPosition.x, (this._targetPosition.y + level), this._targetPosition.z);
                                                }
                                                else if (loopblendpositiony === true && loopblendpositionxz === false) {
                                                    this._positionWeight = true; // Bake Y Into Pose 
                                                    this._positionHolder.set(this._initialRootBonePosition.x, (this._targetPosition.y + level), this._initialRootBonePosition.z);
                                                    this._rootBoneWeight = true; // Use XZ As Root Motion
                                                    this._rootBoneHolder.set(this._targetPosition.x, 0, this._targetPosition.z); // MAYBE: Use this.transform.position.y - ???
                                                }
                                                else if (loopblendpositionxz === true && loopblendpositiony === false) {
                                                    this._positionWeight = true; // Bake XZ Into Pose
                                                    this._positionHolder.set(this._targetPosition.x, this._initialRootBonePosition.y, this._targetPosition.z);
                                                    this._rootBoneWeight = true; // Use Y As Root Motion
                                                    this._rootBoneHolder.set(0, (this._targetPosition.y + level), 0); // MAYBE: Use this.transform.position.xz - ???
                                                }
                                            }
                                            else {
                                                this._positionWeight = true; // Bake XYZ Original Motion
                                                this._positionHolder.set(this._targetPosition.x, (this._targetPosition.y + level), this._targetPosition.z);
                                            }
                                            // Bake Position Holder
                                            if (this._positionWeight === true) {
                                                if (targetMixer.positionBuffer == null)
                                                    targetMixer.positionBuffer = new BABYLON.Vector3(0, 0, 0);
                                                BABYLON.Utilities.BlendVector3Value(targetMixer.positionBuffer, this._positionHolder, blendableWeight);
                                            }
                                            // Bake Root Bone Holder
                                            if (this._rootBoneWeight === true) {
                                                if (targetMixer.rootPosition == null)
                                                    targetMixer.rootPosition = new BABYLON.Vector3(0, 0, 0);
                                                BABYLON.Utilities.BlendVector3Value(targetMixer.rootPosition, this._rootBoneHolder, blendableWeight);
                                            }
                                        }
                                        else {
                                            // Bake Normal Pose Position
                                            if (targetMixer.positionBuffer == null)
                                                targetMixer.positionBuffer = new BABYLON.Vector3(0, 0, 0);
                                            BABYLON.Utilities.BlendVector3Value(targetMixer.positionBuffer, this._targetPosition, blendableWeight);
                                        }
                                    }
                                    else if (masterAnimation.animation.targetProperty === "rotationQuaternion") {
                                        this._targetRotation = BABYLON.Utilities.SampleAnimationQuaternion(blendableAnim.animation, animationFrameTime);
                                        // ..
                                        // Root Transform Rotation
                                        // ..
                                        if (targetRootBone === true) {
                                            this._rotationWeight = false;
                                            this._rotationHolder.set(0, 0, 0, 0);
                                            this._rootQuatWeight = false;
                                            this._rootQuatHolder.set(0, 0, 0, 0);
                                            var eulerAngle = this._targetRotation.toEulerAngles();
                                            var orientationAngleY = eulerAngle.y; //(keeporiginalorientation === true) ? eulerAngle.y : this._bodyOrientationAngleY;
                                            // ..
                                            // Apply Root Motion
                                            // ..
                                            if (this.applyRootMotion === true) {
                                                if (loopblendorientation === true) {
                                                    this._rotationWeight = true; // Bake XYZ Into Pose
                                                    BABYLON.Quaternion.FromEulerAnglesToRef(eulerAngle.x, (orientationAngleY + orientationoffsety), eulerAngle.z, this._rotationHolder);
                                                }
                                                else {
                                                    this._rotationWeight = true; // Bake XZ Into Pose
                                                    BABYLON.Quaternion.FromEulerAnglesToRef(eulerAngle.x, this._initialRootBoneRotation.y, eulerAngle.z, this._rotationHolder);
                                                    this._rootQuatWeight = true; // Use Y As Root Motion
                                                    BABYLON.Quaternion.FromEulerAnglesToRef(0, (orientationAngleY + orientationoffsety), 0, this._rootQuatHolder); // MAYBE: Use this.transform.rotation.xz - ???
                                                }
                                            }
                                            else {
                                                this._rotationWeight = true; // Bake XYZ Into Pose
                                                BABYLON.Quaternion.FromEulerAnglesToRef(eulerAngle.x, (orientationAngleY + orientationoffsety), eulerAngle.z, this._rotationHolder);
                                            }
                                            // Bake Rotation Holder
                                            if (this._rotationWeight === true) {
                                                if (targetMixer.rotationBuffer == null)
                                                    targetMixer.rotationBuffer = new BABYLON.Quaternion(0, 0, 0, 1);
                                                BABYLON.Utilities.BlendQuaternionValue(targetMixer.rotationBuffer, this._rotationHolder, blendableWeight);
                                            }
                                            // Bake Root Bone Rotation
                                            if (this._rootQuatWeight === true) {
                                                if (targetMixer.rootRotation == null)
                                                    targetMixer.rootRotation = new BABYLON.Quaternion(0, 0, 0, 1);
                                                BABYLON.Utilities.BlendQuaternionValue(targetMixer.rootRotation, this._rootQuatHolder, blendableWeight);
                                            }
                                        }
                                        else {
                                            // Bake Normal Pose Rotation
                                            if (targetMixer.rotationBuffer == null)
                                                targetMixer.rotationBuffer = new BABYLON.Quaternion(0, 0, 0, 1);
                                            BABYLON.Utilities.BlendQuaternionValue(targetMixer.rotationBuffer, this._targetRotation, blendableWeight);
                                        }
                                    }
                                    else if (masterAnimation.animation.targetProperty === "scaling") {
                                        this._targetScaling = BABYLON.Utilities.SampleAnimationVector3(blendableAnim.animation, animationFrameTime);
                                        if (targetMixer.scalingBuffer == null)
                                            targetMixer.scalingBuffer = new BABYLON.Vector3(1, 1, 1);
                                        BABYLON.Utilities.BlendVector3Value(targetMixer.scalingBuffer, this._targetScaling, blendableWeight);
                                    }
                                }
                                else {
                                    BABYLON.Tools.Warn(tree.name + " - " + child.track.name + " blend tree mismatch (" + targetIndex + "): " + masterAnimation.target.name + " >>> " + blendableAnim.target.name);
                                }
                            }
                        }
                        else if (child.type === BABYLON.MotionType.Tree) {
                            this.updateBlendableTargets(deltaTime, layer, child.subtree, masterAnimation, targetIndex, targetMixer, normalizedFrameTime, targetRootBone, blendTarget);
                        }
                    }
                }
            }
            //if (targetIndex === 0) BABYLON.Utilities.PrintToScreen(this._blendMessage, "red");
        };
        AnimationState.prototype.finalizeAnimationTargets = function () {
            var _this = this;
            this._deltaPosition.set(0, 0, 0);
            this._deltaRotation.set(0, 0, 0, 1);
            this._deltaPositionFixed.set(0, 0, 0);
            this._dirtyMotionMatrix = null;
            if (this.m_animationTargets != null && this.m_animationTargets.length > 0) {
                this.m_animationTargets.forEach(function (targetedAnim) {
                    var animationTarget = targetedAnim.target;
                    // ..
                    // Update Direct Transform Targets For Each Layer
                    // ..
                    if (animationTarget.metadata != null && animationTarget.metadata.mixer != null) {
                        if (_this._machine.layers != null && _this._machine.layers.length > 0) {
                            _this._blenderMatrix.reset();
                            _this._dirtyBlenderMatrix = null;
                            _this._machine.layers.forEach(function (layer) {
                                var animationTargetMixer = animationTarget.metadata.mixer[layer.index];
                                if (animationTargetMixer != null) {
                                    if (animationTarget instanceof BABYLON.TransformNode) {
                                        // ..
                                        // Update Dirty Transform Matrix
                                        // ..
                                        if (animationTargetMixer.positionBuffer != null || animationTargetMixer.rotationBuffer != null || animationTargetMixer.scalingBuffer != null) {
                                            BABYLON.Matrix.ComposeToRef((animationTargetMixer.scalingBuffer || animationTarget.scaling), (animationTargetMixer.rotationBuffer || animationTarget.rotationQuaternion), (animationTargetMixer.positionBuffer || animationTarget.position), _this._updateMatrix);
                                            if (animationTargetMixer.blendingSpeed > 0.0) {
                                                if (animationTargetMixer.blendingFactor <= 1.0 && animationTargetMixer.originalMatrix == null) {
                                                    animationTargetMixer.originalMatrix = BABYLON.Matrix.Compose((animationTarget.scaling), (animationTarget.rotationQuaternion), (animationTarget.position));
                                                }
                                                if (animationTargetMixer.blendingFactor <= 1.0 && animationTargetMixer.originalMatrix != null) {
                                                    BABYLON.Utilities.FastMatrixSlerp(animationTargetMixer.originalMatrix, _this._updateMatrix, animationTargetMixer.blendingFactor, _this._updateMatrix);
                                                    animationTargetMixer.blendingFactor += animationTargetMixer.blendingSpeed;
                                                }
                                            }
                                            BABYLON.Utilities.FastMatrixSlerp(_this._blenderMatrix, _this._updateMatrix, layer.defaultWeight, _this._blenderMatrix);
                                            _this._dirtyBlenderMatrix = true;
                                            animationTargetMixer.positionBuffer = null;
                                            animationTargetMixer.rotationBuffer = null;
                                            animationTargetMixer.scalingBuffer = null;
                                        }
                                        // ..
                                        // Update Dirty Root Motion Matrix
                                        // ..
                                        if (animationTargetMixer.rootPosition != null || animationTargetMixer.rootRotation != null) {
                                            BABYLON.Matrix.ComposeToRef((_this._emptyScaling), (animationTargetMixer.rootRotation || _this._emptyRotation), (animationTargetMixer.rootPosition || _this._emptyPosition), _this._updateMatrix);
                                            // ..
                                            // TODO - May Need Seperate Blending Speed Properties
                                            // Note: Might Fix Large Root Motion Delta Issue - ???
                                            // ..
                                            /*
                                            if (animationTargetMixer.blendingSpeed > 0.0) {
                                                if (animationTargetMixer.blendingFactor <= 1.0 && animationTargetMixer.originalMatrix == null) {
                                                    animationTargetMixer.originalMatrix = BABYLON.Matrix.Compose(
                                                        (this.transform.scaling),
                                                        (this.transform.rotationQuaternion),
                                                        (this.transform.position)
                                                    );
                                                }
                                                if (animationTargetMixer.blendingFactor <= 1.0 && animationTargetMixer.originalMatrix != null) {
                                                    BABYLON.Utilities.FastMatrixSlerp(animationTargetMixer.originalMatrix, this._updateMatrix, animationTargetMixer.blendingFactor, this._updateMatrix);
                                                    animationTargetMixer.blendingFactor += animationTargetMixer.blendingSpeed;
                                                }
                                            }
                                            */
                                            BABYLON.Utilities.FastMatrixSlerp(_this._rootMotionMatrix, _this._updateMatrix, layer.defaultWeight, _this._rootMotionMatrix);
                                            _this._dirtyMotionMatrix = true;
                                            animationTargetMixer.rootPosition = null;
                                            animationTargetMixer.rootRotation = null;
                                        }
                                    }
                                    else if (animationTarget instanceof BABYLON.MorphTarget) {
                                        if (animationTargetMixer.influenceBuffer != null) {
                                            animationTarget.influence = BABYLON.Scalar.Lerp(animationTarget.influence, animationTargetMixer.influenceBuffer, layer.defaultWeight);
                                            animationTargetMixer.influenceBuffer = null;
                                        }
                                    }
                                }
                            });
                            if (_this._dirtyBlenderMatrix != null) {
                                _this._blenderMatrix.decompose(animationTarget.scaling, animationTarget.rotationQuaternion, animationTarget.position);
                            }
                        }
                    }
                });
            }
            // ..
            if (this.applyRootMotion === true) {
                if (this._dirtyMotionMatrix != null) {
                    this._rootMotionMatrix.decompose(this._rootMotionScaling, this._rootMotionRotation, this._rootMotionPosition);
                    if (this._frametime === 0) {
                        this._lastMotionPosition.copyFrom(this._rootMotionPosition);
                        this._lastMotionRotation.copyFrom(this._rootMotionRotation);
                    }
                    // ..
                    // Update Current Delta Position
                    // ..
                    this._rootMotionPosition.subtractToRef(this._lastMotionPosition, this._deltaPosition);
                    // ..
                    // Update Current Delta Rotation
                    // ..
                    BABYLON.Utilities.QuaternionDiffToRef(this._rootMotionRotation, this._lastMotionRotation, this._deltaRotation);
                    this._deltaRotation.toEulerAnglesToRef(this._angularVelocity);
                    // ..
                    // Update Last Root Motion Deltas
                    // ..
                    this._saveDeltaPosition.copyFrom(this._deltaPosition);
                    this._saveDeltaRotation.copyFrom(this._deltaRotation);
                    this._lastMotionPosition.addInPlace(this._deltaPosition);
                    this._lastMotionRotation.multiplyInPlace(this._deltaRotation);
                    // ..
                    // Update Root Motion Transformation
                    // ..
                    this.transform.rotationQuaternion.toRotationMatrix(this._deltaPositionMatrix); // TODO: Optimize Rotation Matrix Is Dirty - ???
                    BABYLON.Vector3.TransformCoordinatesToRef(this._deltaPosition, this._deltaPositionMatrix, this._deltaPositionFixed);
                }
                // ..
                // Update Transform Delta Rotation
                // ..
                if (this.updateRootMotionRotation === true) {
                    this.transform.addRotation(0, this._angularVelocity.y, 0); // Note: Always Rotate The Transform Node
                }
                // ..
                // Update Transform Delta Position
                // ..
                if (this.updateRootMotionPosition === true) {
                    if (this._updatemode === 1 && this.m_characterController != null) {
                        // TODO: Use Character Controller To Move Entity - ???
                    }
                    else {
                        if (this.m_characterController != null) {
                            // TODO: Set Character Controller Update Position And Sync With Transform (If Exists)
                        }
                        this.transform.position.addInPlace(this._deltaPositionFixed);
                    }
                }
            }
        };
        AnimationState.prototype.checkStateMachine = function (layer, deltaTime) {
            var _this = this;
            this._checkers.result = null;
            this._checkers.offest = 0;
            this._checkers.blending = 0;
            this._checkers.triggered = [];
            // ..
            // Check Animation State Transitions
            // ..
            if (layer.animationStateMachine != null) {
                layer.animationStateMachine.time += deltaTime; // Update State Timer
                // Check Local Transition Conditions
                this.checkStateTransitions(layer, layer.animationStateMachine.transitions);
                // Check Any State Transition Conditions
                if (this._checkers.result == null && this._machine.transitions != null) {
                    this.checkStateTransitions(layer, this._machine.transitions);
                }
            }
            // ..
            // Reset Transition Condition Triggers
            // ..
            if (this._checkers.triggered != null && this._checkers.triggered.length > 0) {
                this._checkers.triggered.forEach(function (trigger) { _this.resetTrigger(trigger); });
                this._checkers.triggered = null;
            }
            // ..
            // Set Current Machine State Result
            // ..
            if (this._checkers.result != null) {
                this.playCurrentAnimationState(layer, this._checkers.result, this._checkers.blending, this._checkers.offest);
            }
        };
        AnimationState.prototype.checkStateTransitions = function (layer, transitions) {
            var _this = this;
            var currentAnimationRate = layer.animationStateMachine.rate;
            var currentAnimationLength = layer.animationStateMachine.length;
            if (transitions != null && transitions.length > 0) {
                var i = 0;
                var ii = 0;
                var solo = -1;
                // ..
                // Check Has Solo Transitions
                // ..
                for (i = 0; i < transitions.length; i++) {
                    if (transitions[i].solo === true && transitions[i].mute === false) {
                        solo = i;
                        break;
                    }
                }
                var _loop_1 = function () {
                    var transition = transitions[i];
                    if (transition.layerIndex !== layer.index)
                        return "continue";
                    if (transition.mute === true)
                        return "continue";
                    if (solo >= 0 && solo !== i)
                        return "continue";
                    var transitionOk = false;
                    // ..
                    // Check Has Transition Exit Time
                    // ..
                    var exitTimeSecs = 0;
                    var exitTimeExpired = true;
                    if (transition.exitTime > 0) {
                        exitTimeSecs = (currentAnimationLength * transition.exitTime); // Note: Is Normalized Transition Exit Time
                        exitTimeExpired = (transition.hasExitTime === true) ? (layer.animationStateMachine.time >= exitTimeSecs) : true;
                    }
                    if (transition.hasExitTime === true && transition.intSource == BABYLON.InterruptionSource.None && exitTimeExpired === false)
                        return "continue";
                    // ..
                    // Check All Transition Conditions
                    // ..
                    if (transition.conditions != null && transition.conditions.length > 0) {
                        var passed_1 = 0;
                        var checks = transition.conditions.length;
                        transition.conditions.forEach(function (condition) {
                            var ptype = _this._parameters.get(condition.parameter);
                            if (ptype != null) {
                                if (ptype == BABYLON.AnimatorParameterType.Float || ptype == BABYLON.AnimatorParameterType.Int) {
                                    var numValue = parseFloat(_this.getFloat(condition.parameter).toFixed(2));
                                    if (condition.mode === BABYLON.ConditionMode.Greater && numValue > condition.threshold) {
                                        passed_1++;
                                    }
                                    else if (condition.mode === BABYLON.ConditionMode.Less && numValue < condition.threshold) {
                                        passed_1++;
                                    }
                                    else if (condition.mode === BABYLON.ConditionMode.Equals && numValue === condition.threshold) {
                                        passed_1++;
                                    }
                                    else if (condition.mode === BABYLON.ConditionMode.NotEqual && numValue !== condition.threshold) {
                                        passed_1++;
                                    }
                                }
                                else if (ptype == BABYLON.AnimatorParameterType.Bool) {
                                    var boolValue = _this.getBool(condition.parameter);
                                    if (condition.mode === BABYLON.ConditionMode.If && boolValue === true) {
                                        passed_1++;
                                    }
                                    else if (condition.mode === BABYLON.ConditionMode.IfNot && boolValue === false) {
                                        passed_1++;
                                    }
                                }
                                else if (ptype == BABYLON.AnimatorParameterType.Trigger) {
                                    var triggerValue = _this.getTrigger(condition.parameter);
                                    if (triggerValue === true) {
                                        passed_1++;
                                        // Note: For Loop Faster Than IndexOf
                                        var indexOfTrigger = -1;
                                        for (var i_1 = 0; i_1 < _this._checkers.triggered.length; i_1++) {
                                            if (_this._checkers.triggered[i_1] === condition.parameter) {
                                                indexOfTrigger = i_1;
                                                break;
                                            }
                                        }
                                        if (indexOfTrigger < 0) {
                                            _this._checkers.triggered.push(condition.parameter);
                                        }
                                    }
                                }
                            }
                        });
                        if (transition.hasExitTime === true) {
                            // ..
                            // TODO - CHECK TRANSITION INTERUPTION SOURCE STATUS
                            // ..
                            // Validate Transition Has Exit Time And All Conditions Passed
                            transitionOk = (exitTimeExpired === true && passed_1 === checks);
                        }
                        else {
                            // Validate All Transition Conditions Passed
                            transitionOk = (passed_1 === checks);
                        }
                    }
                    else {
                        // Validate Transition Has Expired Exit Time Only
                        transitionOk = (transition.hasExitTime === true && exitTimeExpired === true);
                    }
                    // Validate Current Transition Destination Change
                    if (transitionOk === true) {
                        var blendRate = (currentAnimationRate > 0) ? currentAnimationRate : BABYLON.AnimationState.FPS;
                        var destState = (transition.isExit === false) ? transition.destination : BABYLON.AnimationState.EXIT;
                        var durationSecs = (transition.fixedDuration === true) ? transition.duration : BABYLON.Scalar.Denormalize(transition.duration, 0, currentAnimationLength);
                        var blendingSpeed = BABYLON.Utilities.ComputeBlendingSpeed(blendRate, durationSecs);
                        var normalizedOffset = transition.offset; // Note: Is Normalized Transition Offset Time
                        this_1._checkers.result = destState;
                        this_1._checkers.offest = normalizedOffset;
                        this_1._checkers.blending = blendingSpeed;
                        return "break";
                    }
                };
                var this_1 = this;
                // ..
                // Check State Machine Transitions
                // ..
                for (i = 0; i < transitions.length; i++) {
                    var state_1 = _loop_1();
                    if (state_1 === "break")
                        break;
                }
            }
        };
        AnimationState.prototype.playCurrentAnimationState = function (layer, name, blending, normalizedOffset) {
            if (normalizedOffset === void 0) { normalizedOffset = 0; }
            if (layer == null)
                return;
            if (name == null || name === "" || name === BABYLON.AnimationState.EXIT)
                return;
            if (layer.animationStateMachine != null && layer.animationStateMachine.name === name)
                return;
            var state = this.getMachineState(name);
            // ..
            // Reset Animation Target Mixers
            // ..
            if (this.m_animationTargets != null && this.m_animationTargets.length > 0) {
                this.m_animationTargets.forEach(function (targetedAnim) {
                    var animationTarget = targetedAnim.target;
                    if (animationTarget.metadata != null && animationTarget.metadata.mixer != null) {
                        var animationTargetMixer = animationTarget.metadata.mixer[layer.index];
                        if (animationTargetMixer != null) {
                            animationTargetMixer.originalMatrix = null;
                            animationTargetMixer.blendingFactor = 0;
                            animationTargetMixer.blendingSpeed = blending;
                        }
                    }
                });
            }
            // ..
            // Play Current Layer Animation State
            // ..
            if (state != null && state.layerIndex === layer.index) {
                state.time = 0;
                state.played = 0;
                state.interrupted = false;
                layer.animationTime = BABYLON.Scalar.Clamp(normalizedOffset);
                layer.animationNormal = 0;
                layer.animationFirstRun = true;
                layer.animationEndFrame = false;
                layer.animationLoopFrame = false;
                layer.animationLoopCount = 0;
                layer.animationLoopEvents = null;
                layer.animationStateMachine = state;
                // console.warn(">>> Play Animation State: " + this.transform.name + " --> " + name + " --> Foot IK: " + layer.animationStateMachine.iKOnFeet);
            }
        };
        AnimationState.prototype.stopCurrentAnimationState = function (layer) {
            if (layer == null)
                return;
            // ..
            // Reset Animation Target Mixers
            // ..
            if (this.m_animationTargets != null && this.m_animationTargets.length > 0) {
                this.m_animationTargets.forEach(function (targetedAnim) {
                    var animationTarget = targetedAnim.target;
                    if (animationTarget.metadata != null && animationTarget.metadata.mixer != null) {
                        var animationTargetMixer = animationTarget.metadata.mixer[layer.index];
                        if (animationTargetMixer != null) {
                            animationTargetMixer.originalMatrix = null;
                            animationTargetMixer.blendingFactor = 0;
                            animationTargetMixer.blendingSpeed = 0;
                        }
                    }
                });
            }
            // ..
            // Stop Current Layer Animation State
            // ..
            layer.animationTime = 0;
            layer.animationNormal = 0;
            layer.animationFirstRun = true;
            layer.animationEndFrame = false;
            layer.animationLoopFrame = false;
            layer.animationLoopCount = 0;
            layer.animationLoopEvents = null;
            layer.animationStateMachine = null;
        };
        AnimationState.prototype.checkAvatarTransformPath = function (layer, transformPath) {
            var result = false;
            if (layer.animationMaskMap != null) {
                var transformIndex = layer.animationMaskMap.get(transformPath);
                if (transformIndex != null && transformIndex >= 0) {
                    result = true;
                }
            }
            return result;
        };
        AnimationState.prototype.filterTargetAvatarMask = function (layer, target) {
            var result = false;
            if (target.metadata != null && target.metadata.unity != null && target.metadata.unity.bone != null && target.metadata.unity.bone !== "") {
                var transformPath = target.metadata.unity.bone;
                result = this.checkAvatarTransformPath(layer, transformPath);
            }
            return result;
        };
        AnimationState.prototype.sortWeightedBlendingList = function (weightList) {
            if (weightList != null && weightList.length > 0) {
                // Sort In Descending Order
                weightList.sort(function (left, right) {
                    if (left.weight < right.weight)
                        return 1;
                    if (left.weight > right.weight)
                        return -1;
                    return 0;
                });
            }
        };
        AnimationState.prototype.computeWeightedFrameRatio = function (weightList) {
            var result = 1.0;
            if (weightList != null && weightList.length > 0) {
                this.sortWeightedBlendingList(weightList);
                this._blendWeights.primary = weightList[0];
                var primaryWeight = this._blendWeights.primary.weight;
                if (primaryWeight < 1.0 && weightList.length > 1) {
                    this._blendWeights.secondary = weightList[1];
                }
                // ..
                if (this._blendWeights.primary != null && this._blendWeights.secondary != null) {
                    var frameWeightDelta = BABYLON.Scalar.Clamp(this._blendWeights.primary.weight);
                    result = BABYLON.Scalar.Lerp(this._blendWeights.secondary.ratio, this._blendWeights.primary.ratio, frameWeightDelta);
                }
                else if (this._blendWeights.primary != null && this._blendWeights.secondary == null) {
                    result = this._blendWeights.primary.ratio;
                }
            }
            return result;
        };
        ///////////////////////////////////////////////////////////////////////////////////////////////
        // Blend Tree Branches -  Helper Functions
        ///////////////////////////////////////////////////////////////////////////////////////////////
        AnimationState.prototype.setupTreeBranches = function (tree) {
            var _this = this;
            if (tree != null && tree.children != null && tree.children.length > 0) {
                tree.children.forEach(function (child) {
                    if (child.type === BABYLON.MotionType.Tree) {
                        _this.setupTreeBranches(child.subtree);
                    }
                    else if (child.type === BABYLON.MotionType.Clip) {
                        if (child.motion != null && child.motion !== "") {
                            child.weight = 0;
                            child.ratio = 0;
                            child.track = _this.getAnimationGroup(child.motion);
                            if (child.track != null)
                                child.ratio = (BABYLON.AnimationState.TIME / child.track.to);
                        }
                    }
                });
            }
        };
        AnimationState.prototype.parseTreeBranches = function (layer, tree, parentWeight, weightList) {
            if (tree != null) {
                tree.valueParameterX = (tree.blendParameterX != null) ? parseFloat(this.getFloat(tree.blendParameterX).toFixed(2)) : 0;
                tree.valueParameterY = (tree.blendParameterY != null) ? parseFloat(this.getFloat(tree.blendParameterY).toFixed(2)) : 0;
                switch (tree.blendType) {
                    case BABYLON.BlendTreeType.Simple1D:
                        this.parse1DSimpleTreeBranches(layer, tree, parentWeight, weightList);
                        break;
                    case BABYLON.BlendTreeType.SimpleDirectional2D:
                        this.parse2DSimpleDirectionalTreeBranches(layer, tree, parentWeight, weightList);
                        break;
                    case BABYLON.BlendTreeType.FreeformDirectional2D:
                        this.parse2DFreeformDirectionalTreeBranches(layer, tree, parentWeight, weightList);
                        break;
                    case BABYLON.BlendTreeType.FreeformCartesian2D:
                        this.parse2DFreeformCartesianTreeBranches(layer, tree, parentWeight, weightList);
                        break;
                }
            }
        };
        AnimationState.prototype.parse1DSimpleTreeBranches = function (layer, tree, parentWeight, weightList) {
            var _this = this;
            if (tree != null && tree.children != null && tree.children.length > 0) {
                var blendTreeArray_1 = [];
                tree.children.forEach(function (child) {
                    child.weight = 0; // Note: Reset Weight Value
                    var item = {
                        source: child,
                        motion: child.motion,
                        posX: child.threshold,
                        posY: child.threshold,
                        weight: child.weight
                    };
                    blendTreeArray_1.push(item);
                });
                BABYLON.BlendTreeSystem.Calculate1DSimpleBlendTree(tree.valueParameterX, blendTreeArray_1);
                blendTreeArray_1.forEach(function (element) {
                    if (element.source != null) {
                        element.source.weight = element.weight;
                    }
                });
                tree.children.forEach(function (child) {
                    child.weight *= parentWeight; // Note: Scale Weight Value
                    if (child.type === BABYLON.MotionType.Clip) {
                        if (child.weight > 0) {
                            weightList.push(child);
                        }
                    }
                    if (child.type === BABYLON.MotionType.Tree) {
                        _this.parseTreeBranches(layer, child.subtree, child.weight, weightList);
                    }
                });
            }
        };
        AnimationState.prototype.parse2DSimpleDirectionalTreeBranches = function (layer, tree, parentWeight, weightList) {
            var _this = this;
            if (tree != null && tree.children != null && tree.children.length > 0) {
                var blendTreeArray_2 = [];
                tree.children.forEach(function (child) {
                    child.weight = 0; // Note: Reset Weight Value
                    var item = {
                        source: child,
                        motion: child.motion,
                        posX: child.positionX,
                        posY: child.positionY,
                        weight: child.weight
                    };
                    blendTreeArray_2.push(item);
                });
                BABYLON.BlendTreeSystem.Calculate2DFreeformDirectional(tree.valueParameterX, tree.valueParameterY, blendTreeArray_2);
                blendTreeArray_2.forEach(function (element) {
                    if (element.source != null) {
                        element.source.weight = element.weight;
                    }
                });
                tree.children.forEach(function (child) {
                    child.weight *= parentWeight; // Note: Scale Weight Value
                    if (child.type === BABYLON.MotionType.Clip) {
                        if (child.weight > 0) {
                            weightList.push(child);
                        }
                    }
                    if (child.type === BABYLON.MotionType.Tree) {
                        _this.parseTreeBranches(layer, child.subtree, child.weight, weightList);
                    }
                });
            }
        };
        AnimationState.prototype.parse2DFreeformDirectionalTreeBranches = function (layer, tree, parentWeight, weightList) {
            var _this = this;
            if (tree != null && tree.children != null && tree.children.length > 0) {
                var blendTreeArray_3 = [];
                tree.children.forEach(function (child) {
                    child.weight = 0; // Note: Reset Weight Value
                    var item = {
                        source: child,
                        motion: child.motion,
                        posX: child.positionX,
                        posY: child.positionY,
                        weight: child.weight
                    };
                    blendTreeArray_3.push(item);
                });
                BABYLON.BlendTreeSystem.Calculate2DFreeformDirectional(tree.valueParameterX, tree.valueParameterY, blendTreeArray_3);
                blendTreeArray_3.forEach(function (element) {
                    if (element.source != null) {
                        element.source.weight = element.weight;
                    }
                });
                tree.children.forEach(function (child) {
                    child.weight *= parentWeight; // Note: Scale Weight Value
                    if (child.type === BABYLON.MotionType.Clip) {
                        if (child.weight > 0) {
                            weightList.push(child);
                        }
                    }
                    if (child.type === BABYLON.MotionType.Tree) {
                        _this.parseTreeBranches(layer, child.subtree, child.weight, weightList);
                    }
                });
            }
        };
        AnimationState.prototype.parse2DFreeformCartesianTreeBranches = function (layer, tree, parentWeight, weightList) {
            var _this = this;
            if (tree != null && tree.children != null && tree.children.length > 0) {
                var blendTreeArray_4 = [];
                tree.children.forEach(function (child) {
                    child.weight = 0; // Note: Reset Weight Value
                    var item = {
                        source: child,
                        motion: child.motion,
                        posX: child.positionX,
                        posY: child.positionY,
                        weight: child.weight
                    };
                    blendTreeArray_4.push(item);
                });
                BABYLON.BlendTreeSystem.Calculate2DFreeformCartesian(tree.valueParameterX, tree.valueParameterY, blendTreeArray_4);
                blendTreeArray_4.forEach(function (element) {
                    if (element.source != null) {
                        element.source.weight = element.weight;
                    }
                });
                tree.children.forEach(function (child) {
                    child.weight *= parentWeight; // Note: Scale Weight Value
                    if (child.type === BABYLON.MotionType.Clip) {
                        if (child.weight > 0) {
                            weightList.push(child);
                        }
                    }
                    if (child.type === BABYLON.MotionType.Tree) {
                        _this.parseTreeBranches(layer, child.subtree, child.weight, weightList);
                    }
                });
            }
        };
        AnimationState.FPS = 30;
        AnimationState.EXIT = "[EXIT]";
        AnimationState.TIME = 1; // Note: Must Be One Second Normalized Time
        AnimationState.SPEED = 1.025; // Note: Animation State Blend Speed Factor
        return AnimationState;
    }(BABYLON.ScriptComponent));
    BABYLON.AnimationState = AnimationState;
    ///////////////////////////////////////////
    // Support Classes, Blend Tree Utilities
    ///////////////////////////////////////////
    var BlendTreeValue = /** @class */ (function () {
        function BlendTreeValue(config) {
            this.source = config.source;
            this.motion = config.motion;
            this.posX = config.posX || 0;
            this.posY = config.posY || 0;
            this.weight = config.weight || 0;
        }
        return BlendTreeValue;
    }());
    BABYLON.BlendTreeValue = BlendTreeValue;
    var BlendTreeUtils = /** @class */ (function () {
        function BlendTreeUtils() {
        }
        BlendTreeUtils.ClampValue = function (num, min, max) {
            return num <= min ? min : num >= max ? max : num;
        };
        BlendTreeUtils.GetSignedAngle = function (a, b) {
            return Math.atan2(a.x * b.y - a.y * b.x, a.x * b.x + a.y * b.y);
        };
        BlendTreeUtils.GetLinearInterpolation = function (x0, y0, x1, y1, x) {
            return y0 + (x - x0) * ((y1 - y0) / (x1 - x0));
        };
        BlendTreeUtils.GetRightNeighbourIndex = function (inputX, blendTreeArray) {
            blendTreeArray.sort(function (a, b) { return (a.posX - b.posX); });
            for (var i = 0; i < blendTreeArray.length; ++i) {
                if (blendTreeArray[i].posX > inputX) {
                    return i;
                }
            }
            return -1;
        };
        return BlendTreeUtils;
    }());
    BABYLON.BlendTreeUtils = BlendTreeUtils;
    var BlendTreeSystem = /** @class */ (function () {
        function BlendTreeSystem() {
        }
        BlendTreeSystem.Calculate1DSimpleBlendTree = function (inputX, blendTreeArray) {
            var firstBlendTree = blendTreeArray[0];
            var lastBlendTree = blendTreeArray[blendTreeArray.length - 1];
            if (inputX <= firstBlendTree.posX) {
                firstBlendTree.weight = 1;
            }
            else if (inputX >= lastBlendTree.posX) {
                lastBlendTree.weight = 1;
            }
            else {
                var rightNeighbourBlendTreeIndex = BABYLON.BlendTreeUtils.GetRightNeighbourIndex(inputX, blendTreeArray);
                var leftNeighbour = blendTreeArray[rightNeighbourBlendTreeIndex - 1];
                var rightNeighbour = blendTreeArray[rightNeighbourBlendTreeIndex];
                var interpolatedValue = BABYLON.BlendTreeUtils.GetLinearInterpolation(leftNeighbour.posX, 1, rightNeighbour.posX, 0, inputX);
                leftNeighbour.weight = interpolatedValue;
                rightNeighbour.weight = 1 - leftNeighbour.weight;
            }
        };
        BlendTreeSystem.Calculate2DFreeformDirectional = function (inputX, inputY, blendTreeArray) {
            BABYLON.BlendTreeSystem.TempVector2_IP.set(inputX, inputY);
            BABYLON.BlendTreeSystem.TempVector2_POSI.set(0, 0);
            BABYLON.BlendTreeSystem.TempVector2_POSJ.set(0, 0);
            BABYLON.BlendTreeSystem.TempVector2_POSIP.set(0, 0);
            BABYLON.BlendTreeSystem.TempVector2_POSIJ.set(0, 0);
            var kDirScale = 2;
            var totalWeight = 0;
            var inputLength = BABYLON.BlendTreeSystem.TempVector2_IP.length();
            for (var i = 0; i < blendTreeArray.length; ++i) {
                var blendTree = blendTreeArray[i];
                BABYLON.BlendTreeSystem.TempVector2_POSI.set(blendTree.posX, blendTree.posY);
                var posILength = BABYLON.BlendTreeSystem.TempVector2_POSI.length();
                var inputToPosILength = (inputLength - posILength);
                var posIToInputAngle = BABYLON.BlendTreeUtils.GetSignedAngle(BABYLON.BlendTreeSystem.TempVector2_POSI, BABYLON.BlendTreeSystem.TempVector2_IP);
                var weight = 1;
                for (var j = 0; j < blendTreeArray.length; ++j) {
                    if (j === i) {
                        continue;
                    }
                    else {
                        BABYLON.BlendTreeSystem.TempVector2_POSJ.set(blendTreeArray[j].posX, blendTreeArray[j].posY);
                        var posJLength = BABYLON.BlendTreeSystem.TempVector2_POSJ.length();
                        var averageLengthOfIJ = (posILength + posJLength) / 2;
                        var magOfPosIToInputPos = (inputToPosILength / averageLengthOfIJ);
                        var magOfIJ = (posJLength - posILength) / averageLengthOfIJ;
                        var angleIJ = BABYLON.BlendTreeUtils.GetSignedAngle(BABYLON.BlendTreeSystem.TempVector2_POSI, BABYLON.BlendTreeSystem.TempVector2_POSJ);
                        BABYLON.BlendTreeSystem.TempVector2_POSIP.set(magOfPosIToInputPos, posIToInputAngle * kDirScale);
                        BABYLON.BlendTreeSystem.TempVector2_POSIJ.set(magOfIJ, angleIJ * kDirScale);
                        var lenSqIJ = BABYLON.BlendTreeSystem.TempVector2_POSIJ.lengthSquared();
                        var newWeight = BABYLON.Vector2.Dot(BABYLON.BlendTreeSystem.TempVector2_POSIP, BABYLON.BlendTreeSystem.TempVector2_POSIJ) / lenSqIJ;
                        newWeight = 1 - newWeight;
                        newWeight = BABYLON.BlendTreeUtils.ClampValue(newWeight, 0, 1);
                        weight = Math.min(newWeight, weight);
                    }
                }
                blendTree.weight = weight;
                totalWeight += weight;
            }
            for (var _i = 0, blendTreeArray_5 = blendTreeArray; _i < blendTreeArray_5.length; _i++) {
                var blendTree = blendTreeArray_5[_i];
                blendTree.weight /= totalWeight;
            }
        };
        BlendTreeSystem.Calculate2DFreeformCartesian = function (inputX, inputY, blendTreeArray) {
            BABYLON.BlendTreeSystem.TempVector2_IP.set(inputX, inputY);
            BABYLON.BlendTreeSystem.TempVector2_POSI.set(0, 0);
            BABYLON.BlendTreeSystem.TempVector2_POSJ.set(0, 0);
            BABYLON.BlendTreeSystem.TempVector2_POSIP.set(0, 0);
            BABYLON.BlendTreeSystem.TempVector2_POSIJ.set(0, 0);
            var totalWeight = 0;
            for (var i = 0; i < blendTreeArray.length; ++i) {
                var blendTree = blendTreeArray[i];
                BABYLON.BlendTreeSystem.TempVector2_POSI.set(blendTree.posX, blendTree.posY);
                BABYLON.BlendTreeSystem.TempVector2_IP.subtractToRef(BABYLON.BlendTreeSystem.TempVector2_POSI, BABYLON.BlendTreeSystem.TempVector2_POSIP);
                var weight = 1;
                for (var j = 0; j < blendTreeArray.length; ++j) {
                    if (j === i) {
                        continue;
                    }
                    else {
                        BABYLON.BlendTreeSystem.TempVector2_POSJ.set(blendTreeArray[j].posX, blendTreeArray[j].posY);
                        BABYLON.BlendTreeSystem.TempVector2_POSJ.subtractToRef(BABYLON.BlendTreeSystem.TempVector2_POSI, BABYLON.BlendTreeSystem.TempVector2_POSIJ);
                        var lenSqIJ = BABYLON.BlendTreeSystem.TempVector2_POSIJ.lengthSquared();
                        var newWeight = BABYLON.Vector2.Dot(BABYLON.BlendTreeSystem.TempVector2_POSIP, BABYLON.BlendTreeSystem.TempVector2_POSIJ) / lenSqIJ;
                        newWeight = 1 - newWeight;
                        newWeight = BABYLON.BlendTreeUtils.ClampValue(newWeight, 0, 1);
                        weight = Math.min(weight, newWeight);
                    }
                }
                blendTree.weight = weight;
                totalWeight += weight;
            }
            for (var _i = 0, blendTreeArray_6 = blendTreeArray; _i < blendTreeArray_6.length; _i++) {
                var blendTree = blendTreeArray_6[_i];
                blendTree.weight /= totalWeight;
            }
        };
        BlendTreeSystem.TempVector2_IP = new BABYLON.Vector2(0, 0);
        BlendTreeSystem.TempVector2_POSI = new BABYLON.Vector2(0, 0);
        BlendTreeSystem.TempVector2_POSJ = new BABYLON.Vector2(0, 0);
        BlendTreeSystem.TempVector2_POSIP = new BABYLON.Vector2(0, 0);
        BlendTreeSystem.TempVector2_POSIJ = new BABYLON.Vector2(0, 0);
        return BlendTreeSystem;
    }());
    BABYLON.BlendTreeSystem = BlendTreeSystem;
    ///////////////////////////////////////////
    // Support Classes, Enums And Interfaces
    ///////////////////////////////////////////
    var MachineState = /** @class */ (function () {
        function MachineState() {
        }
        return MachineState;
    }());
    BABYLON.MachineState = MachineState;
    var TransitionCheck = /** @class */ (function () {
        function TransitionCheck() {
        }
        return TransitionCheck;
    }());
    BABYLON.TransitionCheck = TransitionCheck;
    var AnimationMixer = /** @class */ (function () {
        function AnimationMixer() {
        }
        return AnimationMixer;
    }());
    BABYLON.AnimationMixer = AnimationMixer;
    var BlendingWeights = /** @class */ (function () {
        function BlendingWeights() {
        }
        return BlendingWeights;
    }());
    BABYLON.BlendingWeights = BlendingWeights;
    var MotionType;
    (function (MotionType) {
        MotionType[MotionType["Clip"] = 0] = "Clip";
        MotionType[MotionType["Tree"] = 1] = "Tree";
    })(MotionType = BABYLON.MotionType || (BABYLON.MotionType = {}));
    var ConditionMode;
    (function (ConditionMode) {
        ConditionMode[ConditionMode["If"] = 1] = "If";
        ConditionMode[ConditionMode["IfNot"] = 2] = "IfNot";
        ConditionMode[ConditionMode["Greater"] = 3] = "Greater";
        ConditionMode[ConditionMode["Less"] = 4] = "Less";
        ConditionMode[ConditionMode["Equals"] = 6] = "Equals";
        ConditionMode[ConditionMode["NotEqual"] = 7] = "NotEqual";
    })(ConditionMode = BABYLON.ConditionMode || (BABYLON.ConditionMode = {}));
    var InterruptionSource;
    (function (InterruptionSource) {
        InterruptionSource[InterruptionSource["None"] = 0] = "None";
        InterruptionSource[InterruptionSource["Source"] = 1] = "Source";
        InterruptionSource[InterruptionSource["Destination"] = 2] = "Destination";
        InterruptionSource[InterruptionSource["SourceThenDestination"] = 3] = "SourceThenDestination";
        InterruptionSource[InterruptionSource["DestinationThenSource"] = 4] = "DestinationThenSource";
    })(InterruptionSource = BABYLON.InterruptionSource || (BABYLON.InterruptionSource = {}));
    var BlendTreeType;
    (function (BlendTreeType) {
        BlendTreeType[BlendTreeType["Simple1D"] = 0] = "Simple1D";
        BlendTreeType[BlendTreeType["SimpleDirectional2D"] = 1] = "SimpleDirectional2D";
        BlendTreeType[BlendTreeType["FreeformDirectional2D"] = 2] = "FreeformDirectional2D";
        BlendTreeType[BlendTreeType["FreeformCartesian2D"] = 3] = "FreeformCartesian2D";
        BlendTreeType[BlendTreeType["Direct"] = 4] = "Direct";
        BlendTreeType[BlendTreeType["Clip"] = 5] = "Clip";
    })(BlendTreeType = BABYLON.BlendTreeType || (BABYLON.BlendTreeType = {}));
    var BlendTreePosition;
    (function (BlendTreePosition) {
        BlendTreePosition[BlendTreePosition["Lower"] = 0] = "Lower";
        BlendTreePosition[BlendTreePosition["Upper"] = 1] = "Upper";
    })(BlendTreePosition = BABYLON.BlendTreePosition || (BABYLON.BlendTreePosition = {}));
    var AnimatorParameterType;
    (function (AnimatorParameterType) {
        AnimatorParameterType[AnimatorParameterType["Float"] = 1] = "Float";
        AnimatorParameterType[AnimatorParameterType["Int"] = 3] = "Int";
        AnimatorParameterType[AnimatorParameterType["Bool"] = 4] = "Bool";
        AnimatorParameterType[AnimatorParameterType["Trigger"] = 9] = "Trigger";
    })(AnimatorParameterType = BABYLON.AnimatorParameterType || (BABYLON.AnimatorParameterType = {}));
})(BABYLON || (BABYLON = {}));
var BABYLON;
(function (BABYLON) {
    /**
     * Babylon audio source manager pro class
     * @class AudioSource - All rights reserved (c) 2020 Mackey Kinard
     */
    var AudioSource = /** @class */ (function (_super) {
        __extends(AudioSource, _super);
        function AudioSource() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this._audio = null;
            _this._name = null;
            _this._loop = false;
            _this._mute = false;
            _this._pitch = 1;
            _this._volume = 1;
            _this._preload = false;
            _this._priority = 128;
            _this._panstereo = 0;
            _this._mindistance = 1;
            _this._maxdistance = 50;
            _this._rolloffmode = "linear";
            _this._rollofffactor = 1;
            _this._playonawake = true;
            _this._spatialblend = 0;
            _this._preloaderUrl = null;
            _this._reverbzonemix = 1;
            _this._lastmutedvolume = null;
            _this._bypasseffects = false;
            _this._bypassreverbzones = false;
            _this._bypasslistenereffects = false;
            _this._initializedReadyInstance = false;
            /** Register handler that is triggered when the audio clip is ready */
            _this.onReadyObservable = new BABYLON.Observable();
            return _this;
        }
        AudioSource.prototype.getSoundClip = function () { return this._audio; };
        AudioSource.prototype.getAudioElement = function () { return (this._audio != null) ? this._audio._htmlAudioElement : null; };
        AudioSource.prototype.awake = function () { this.awakeAudioSource(); };
        AudioSource.prototype.destroy = function () { this.destroyAudioSource(); };
        AudioSource.prototype.awakeAudioSource = function () {
            this._name = this.getProperty("name", this._name);
            this._loop = this.getProperty("loop", this._loop);
            this._mute = this.getProperty("mute", this._mute);
            this._pitch = this.getProperty("pitch", this._pitch);
            this._volume = this.getProperty("volume", this._volume);
            this._preload = this.getProperty("preload", this._preload);
            this._priority = this.getProperty("priority", this._priority);
            this._panstereo = this.getProperty("panstereo", this._panstereo);
            this._playonawake = this.getProperty("playonawake", this._playonawake);
            this._mindistance = this.getProperty("mindistance", this._mindistance);
            this._maxdistance = this.getProperty("maxdistance", this._maxdistance);
            this._rolloffmode = this.getProperty("rolloffmode", this._rolloffmode);
            this._rollofffactor = this.getProperty("rollofffactor", this._rollofffactor);
            this._spatialblend = this.getProperty("spatialblend", this._spatialblend);
            this._reverbzonemix = this.getProperty("reverbzonemix", this._reverbzonemix);
            this._bypasseffects = this.getProperty("bypasseffects", this._bypasseffects);
            this._bypassreverbzones = this.getProperty("bypassreverbzones", this._bypassreverbzones);
            this._bypasslistenereffects = this.getProperty("bypasslistenereffects", this._bypasslistenereffects);
            if (this._name == null || this._name === "")
                this._name = "Unknown";
            // ..
            var filename = this.getProperty("file");
            if (filename != null && filename !== "") {
                var rootUrl = BABYLON.SceneManager.GetRootUrl(this.scene);
                var playUrl = (rootUrl + filename);
                if (playUrl != null && playUrl !== "") {
                    if (this._preload === true) {
                        this._preloaderUrl = playUrl;
                    }
                    else {
                        this.setDataSource(playUrl);
                    }
                }
            }
        };
        AudioSource.prototype.destroyAudioSource = function () {
            this.onReadyObservable.clear();
            this.onReadyObservable = null;
            if (this._audio != null) {
                this._audio.dispose();
                this._audio = null;
            }
        };
        /**
         * Gets the ready status for track
         */
        AudioSource.prototype.isReady = function () {
            var result = false;
            if (this._audio != null) {
                result = this._audio.isReady();
            }
            return result;
        };
        /**
         * Gets the playing status for track
         */
        AudioSource.prototype.isPlaying = function () {
            var result = false;
            if (this._audio != null) {
                result = this._audio.isPlaying;
            }
            return result;
        };
        /**
         * Gets the paused status for track
         */
        AudioSource.prototype.isPaused = function () {
            var result = false;
            if (this._audio != null) {
                result = this._audio.isPaused;
            }
            return result;
        };
        /**
         * Play the sound track
         * @param time (optional) Start the sound after X seconds. Start immediately (0) by default.
         * @param offset (optional) Start the sound at a specific time in seconds
         * @param length (optional) Sound duration (in seconds)
         */
        AudioSource.prototype.play = function (time, offset, length) {
            var _this = this;
            if (BABYLON.SceneManager.HasAudioContext()) {
                this.internalPlay(time, offset, length);
            }
            else {
                BABYLON.Engine.audioEngine.onAudioUnlockedObservable.addOnce(function () { _this.internalPlay(time, offset, length); });
            }
            return true;
        };
        AudioSource.prototype.internalPlay = function (time, offset, length) {
            var _this = this;
            if (this._audio != null) {
                if (this._initializedReadyInstance === true) {
                    this._audio.play(time, offset, length);
                }
                else {
                    this.onReadyObservable.addOnce(function () { _this._audio.play(time, offset, length); });
                }
            }
        };
        /**
         * Pause the sound track
         */
        AudioSource.prototype.pause = function () {
            var result = false;
            if (this._audio != null) {
                this._audio.pause();
                result = true;
            }
            return result;
        };
        /**
         * Stop the sound track
         * @param time (optional) Start the sound after X seconds. Start immediately (0) by default.
         */
        AudioSource.prototype.stop = function (time) {
            var result = false;
            if (this._audio != null) {
                this._audio.stop(time);
                result = true;
            }
            return result;
        };
        /**
         * Mute the sound track
         * @param time (optional) Mute the sound after X seconds. Start immediately (0) by default.
         */
        AudioSource.prototype.mute = function (time) {
            var result = false;
            if (this._audio != null) {
                this._lastmutedvolume = this._audio.getVolume();
                this._audio.setVolume(0, time);
            }
            return result;
        };
        /**
         * Unmute the sound track
         * @param time (optional) Unmute the sound after X seconds. Start immediately (0) by default.
         */
        AudioSource.prototype.unmute = function (time) {
            var result = false;
            if (this._audio != null) {
                if (this._lastmutedvolume != null) {
                    this._audio.setVolume(this._lastmutedvolume, time);
                    this._lastmutedvolume = null;
                }
            }
            return result;
        };
        /**
         * Gets the volume of the track
         */
        AudioSource.prototype.getVolume = function () {
            var result = 0;
            if (this._audio != null) {
                result = this._audio.getVolume();
            }
            else {
                result = this._volume;
            }
            return result;
        };
        /**
         * Sets the volume of the track
         * @param volume Define the new volume of the sound
         * @param time Define time for gradual change to new volume
         */
        AudioSource.prototype.setVolume = function (volume, time) {
            var result = false;
            this._volume = volume;
            if (this._audio != null) {
                this._audio.setVolume(this._volume, time);
            }
            result = true;
            return result;
        };
        /**
         * Gets the spatial sound option of the track
         */
        AudioSource.prototype.getSpatialSound = function () {
            var result = false;
            if (this._audio != null) {
                result = this._audio.spatialSound;
            }
            return result;
        };
        /**
         * Gets the spatial sound option of the track
         * @param value Define the value of the spatial sound
         */
        AudioSource.prototype.setSpatialSound = function (value) {
            if (this._audio != null) {
                this._audio.spatialSound = value;
            }
        };
        /**
         * Sets the sound track playback speed
         * @param rate the audio playback rate
         */
        AudioSource.prototype.setPlaybackSpeed = function (rate) {
            if (this._audio != null) {
                this._audio.setPlaybackRate(rate);
            }
        };
        /**
         * Gets the current time of the track
         */
        AudioSource.prototype.getCurrentTrackTime = function () {
            var result = 0;
            if (this._audio != null) {
                result = this._audio.currentTime;
            }
            return result;
        };
        /** Set audio data source */
        AudioSource.prototype.setDataSource = function (source) {
            var _this = this;
            if (this._audio != null) {
                this._audio.dispose();
                this._audio = null;
            }
            var spatialBlend = (this._spatialblend >= 0.1);
            var distanceModel = (this._rolloffmode === "logarithmic") ? "exponential" : "linear";
            var htmlAudioElementRequired = (this.transform.metadata != null && this.transform.metadata.vtt != null && this.transform.metadata.vtt === true);
            this._initializedReadyInstance = false;
            this._audio = new BABYLON.Sound(this._name, source, this.scene, function () {
                _this._lastmutedvolume = _this._volume;
                _this._audio.setVolume((_this._mute === true) ? 0 : _this._volume);
                _this._audio.setPlaybackRate(_this._pitch);
                _this._initializedReadyInstance = true;
                if (_this.onReadyObservable.hasObservers() === true) {
                    _this.onReadyObservable.notifyObservers(_this._audio);
                }
                // ..
                // Support Auto Play On Awake
                // ..
                if (_this._playonawake === true)
                    _this.play();
            }, {
                loop: this._loop,
                autoplay: false,
                refDistance: this._mindistance,
                maxDistance: this._maxdistance,
                rolloffFactor: this._rollofffactor,
                spatialSound: spatialBlend,
                distanceModel: distanceModel,
                streaming: htmlAudioElementRequired
            });
            this._audio.setPosition(this.transform.position.clone());
            if (spatialBlend === true)
                this._audio.attachToMesh(this.transform);
        };
        /** Add audio preloader asset tasks (https://doc.babylonjs.com/divingDeeper/importers/assetManager) */
        AudioSource.prototype.addPreloaderTasks = function (assetsManager) {
            var _this = this;
            if (this._preload === true) {
                var assetTask = assetsManager.addBinaryFileTask((this.transform.name + ".AudioTask"), this._preloaderUrl);
                assetTask.onSuccess = function (task) { _this.setDataSource(task.data); };
                assetTask.onError = function (task, message, exception) { console.error(message, exception); };
            }
        };
        return AudioSource;
    }(BABYLON.ScriptComponent));
    BABYLON.AudioSource = AudioSource;
})(BABYLON || (BABYLON = {}));
var BABYLON;
(function (BABYLON) {
    /**
     * Babylon kinematic character controller pro class (Native Bullet Physics 2.82)
     * @class CharacterController - All rights reserved (c) 2020 Mackey Kinard
     */
    var CharacterController = /** @class */ (function (_super) {
        __extends(CharacterController, _super);
        function CharacterController() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this._abstractMesh = null;
            _this._avatarRadius = 0.5;
            _this._avatarHeight = 2;
            _this._centerOffset = new BABYLON.Vector3(0, 0, 0);
            _this._slopeLimit = 45;
            _this._skinWidth = 0.08;
            _this._stepOffset = 0.3; // See https://discourse.threejs.org/t/ammo-js-with-three-js/12530/47 (Works Best With 0.535 and Box Or Cylinder Shape - ???)
            _this._capsuleSegments = 16;
            _this._minMoveDistance = 0.001;
            _this._isPhysicsReady = false;
            _this._maxCollisions = 4;
            _this._createCylinderShape = false;
            _this._movementVelocity = new BABYLON.Vector3(0, 0, 0);
            _this._tmpPositionBuffer = new BABYLON.Vector3(0, 0, 0);
            _this._tmpCollisionContacts = null;
            _this.updatePosition = true;
            _this.syncGhostToTransform = true;
            /** Register handler that is triggered when the transform position has been updated */
            _this.onUpdatePositionObservable = new BABYLON.Observable();
            /** Register handler that is triggered when the a collision contact has entered */
            _this.onCollisionEnterObservable = new BABYLON.Observable();
            /** Register handler that is triggered when the a collision contact is active */
            _this.onCollisionStayObservable = new BABYLON.Observable();
            /** Register handler that is triggered when the a collision contact has exited */
            _this.onCollisionExitObservable = new BABYLON.Observable();
            _this.m_character = null;
            _this.m_ghostShape = null;
            _this.m_ghostObject = null;
            _this.m_ghostCollision = null;
            _this.m_ghostTransform = null;
            _this.m_ghostPosition = null;
            _this.m_startPosition = null;
            _this.m_startTransform = null;
            _this.m_walkDirection = null;
            _this.m_warpPosition = null;
            _this.m_turningRate = 0;
            _this.m_moveDeltaX = 0;
            _this.m_moveDeltaZ = 0;
            _this.m_capsuleSize = BABYLON.Vector3.Zero();
            _this.m_physicsEngine = null;
            _this.m_characterPosition = BABYLON.Vector3.Zero();
            return _this;
        }
        CharacterController.prototype.preCreateCylinderShape = function () { this._createCylinderShape = true; };
        CharacterController.prototype.getInternalCharacter = function () { return this.m_character; };
        CharacterController.prototype.getCollisionShape = function () { return this.m_ghostShape; };
        CharacterController.prototype.getAvatarRadius = function () { return this._avatarRadius; };
        CharacterController.prototype.getAvatarHeight = function () { return this._avatarHeight; };
        CharacterController.prototype.getSkinWidth = function () { return this._skinWidth; };
        CharacterController.prototype.getStepOffset = function () { return this._stepOffset; };
        CharacterController.prototype.getCenterOffset = function () { return this._centerOffset; };
        CharacterController.prototype.getCapsuleSize = function () { return this.m_capsuleSize; };
        CharacterController.prototype.getMinMoveDistance = function () { return this._minMoveDistance; };
        CharacterController.prototype.setMinMoveDistance = function (distance) { this._minMoveDistance = distance; };
        CharacterController.prototype.getVerticalVelocity = function () { return (this.m_character != null && this.m_character.getVerticalVelocity) ? this.m_character.getVerticalVelocity() : 0; }; // Note: Toolkit Addon Function
        CharacterController.prototype.getAddedMargin = function () { return (this.m_character != null && this.m_character.getAddedMargin) ? this.m_character.getAddedMargin() : 0; }; // Note: Toolkit Addon Function
        CharacterController.prototype.setAddedMargin = function (margin) { if (this.m_character != null && this.m_character.getAddedMargin)
            this.m_character.setAddedMargin(margin); }; // Note: Toolkit Addon Function
        CharacterController.prototype.setMaxJumpHeight = function (maxJumpHeight) { if (this.m_character != null)
            this.m_character.setMaxJumpHeight(maxJumpHeight); };
        CharacterController.prototype.setFallingSpeed = function (fallSpeed) { if (this.m_character != null)
            this.m_character.setFallSpeed(fallSpeed); };
        CharacterController.prototype.getSlopeLimit = function () { return (this.m_character != null) ? this.m_character.getMaxSlope() : 0; };
        CharacterController.prototype.setSlopeLimit = function (slopeRadians) { if (this.m_character != null)
            this.m_character.setMaxSlope(slopeRadians); };
        CharacterController.prototype.setUpAxis = function (axis) { if (this.m_character != null)
            this.m_character.setUpAxis(axis); };
        CharacterController.prototype.getGravity = function () { return (this.m_character != null) ? this.m_character.getGravity() : 0; };
        CharacterController.prototype.setGravity = function (gravity) { if (this.m_character != null)
            this.m_character.setGravity(gravity); };
        CharacterController.prototype.isGrounded = function () { return (this.m_character != null) ? this.m_character.onGround() : false; };
        CharacterController.prototype.isReady = function () { return (this.m_character != null); };
        CharacterController.prototype.canJump = function () { return (this.m_character != null) ? this.m_character.canJump() : false; };
        CharacterController.prototype.internalWarp = function (position) { if (this.m_character != null)
            this.m_character.warp(position); }; // Position: Ammo.btVector3
        CharacterController.prototype.internalJump = function () { if (this.m_character != null)
            this.m_character.jump(); };
        CharacterController.prototype.internalSetJumpSpeed = function (speed) { if (this.m_character != null)
            this.m_character.setJumpSpeed(speed); };
        CharacterController.prototype.internalSetWalkDirection = function (direction) { if (this.m_character != null)
            this.m_character.setWalkDirection(direction); }; // Direction: Ammo.btVector3
        CharacterController.prototype.internalSetVelocityForTimeInterval = function (velocity, interval) { if (this.m_character != null)
            this.m_character.setVelocityForTimeInterval(velocity, interval); }; // Velocity: Ammo.btVector3
        CharacterController.prototype.awake = function () { this.awakeMovementState(); };
        CharacterController.prototype.start = function () { this.startMovementState(); };
        CharacterController.prototype.update = function () { this.updateMovementState(); };
        CharacterController.prototype.destroy = function () { this.destroyMovementState(); };
        //////////////////////////////////////////////////
        // Protected Character Movement State Functions //
        //////////////////////////////////////////////////
        CharacterController.prototype.awakeMovementState = function () {
            this._abstractMesh = this.getAbstractMesh();
            this._avatarRadius = this.getProperty("avatarRadius", this._avatarRadius);
            this._avatarHeight = this.getProperty("avatarHeight", this._avatarHeight);
            this._slopeLimit = this.getProperty("slopeLimit", this._slopeLimit);
            this._skinWidth = this.getProperty("skinWidth", this._skinWidth);
            this._stepOffset = this.getProperty("stepOffset", this._stepOffset);
            this._minMoveDistance = this.getProperty("minMoveDistance", this._minMoveDistance);
            this._capsuleSegments = this.getProperty("capsuleSegments", this._capsuleSegments);
            this.m_warpPosition = new Ammo.btVector3(0, 0, 0);
            this.m_walkDirection = new Ammo.btVector3(0, 0, 0);
            this.m_physicsEngine = BABYLON.SceneManager.GetPhysicsEngine(this.scene);
            var centerOffsetData = this.getProperty("centerOffset");
            if (centerOffsetData != null)
                this._centerOffset = BABYLON.Utilities.ParseVector3(centerOffsetData);
        };
        CharacterController.prototype.startMovementState = function () {
            this.setupMovementState();
            this.updateMovementState();
        };
        CharacterController.prototype.setupMovementState = function () {
            this.setMaxNotifications(this._maxCollisions);
            var world = BABYLON.SceneManager.GetPhysicsWorld(this.scene);
            if (world != null) {
                var startingPos = BABYLON.Utilities.GetAbsolutePosition(this.transform, this._centerOffset);
                this.m_startPosition = new Ammo.btVector3(startingPos.x, startingPos.y, startingPos.z);
                this.m_startTransform = new Ammo.btTransform();
                this.m_startTransform.setIdentity();
                this.m_startTransform.setOrigin(this.m_startPosition);
                // ..
                var capsuleSize = new BABYLON.Vector3(this._avatarRadius, this._avatarHeight, 1);
                capsuleSize.x *= Math.max(Math.abs(this.transform.scaling.x), Math.abs(this.transform.scaling.z));
                capsuleSize.y *= this.transform.scaling.y;
                this.m_capsuleSize.copyFrom(capsuleSize);
                // ..
                // Create a debug collision shape
                // ..
                var showDebugColliders = BABYLON.Utilities.ShowDebugColliders();
                var colliderVisibility = BABYLON.Utilities.ColliderVisibility();
                var colliderRenderGroup = BABYLON.Utilities.ColliderRenderGroup();
                if (showDebugColliders === true && this.transform._debugCollider == null) {
                    var debugName = this.transform.name + ".Debug";
                    // ELLIPSE: const debugCapsule:BABYLON.Mesh = BABYLON.MeshBuilder.CreateSphere(debugName, { segments: 16, diameterX: (capsuleSize.x * 2), diameterY: (capsuleSize.y * 1), diameterZ: (capsuleSize.x * 2) }, this.scene);
                    var debugCapsule = null;
                    if (this._createCylinderShape === true) {
                        debugCapsule = BABYLON.MeshBuilder.CreateCylinder(debugName, { tessellation: this._capsuleSegments, subdivisions: 8, height: capsuleSize.y, diameter: (capsuleSize.x * 2) }, this.scene);
                    }
                    else {
                        debugCapsule = BABYLON.MeshBuilder.CreateCapsule(debugName, { tessellation: this._capsuleSegments, subdivisions: 8, capSubdivisions: 8, height: capsuleSize.y, radius: capsuleSize.x }, this.scene);
                    }
                    debugCapsule.position.set(0, 0, 0);
                    debugCapsule.rotationQuaternion = this.transform.rotationQuaternion.clone();
                    debugCapsule.setParent(this.transform);
                    debugCapsule.position.copyFrom(this._centerOffset);
                    debugCapsule.visibility = colliderVisibility;
                    debugCapsule.renderingGroupId = colliderRenderGroup;
                    debugCapsule.material = BABYLON.Utilities.GetColliderMaterial(this.scene);
                    debugCapsule.checkCollisions = false;
                    debugCapsule.isPickable = false;
                    this.transform._debugCollider = debugCapsule;
                }
                // ELLIPSE: this.m_ghostShape = BABYLON.SceneManager.CreatePhysicsEllipsoidShape(new Ammo.btVector3(this._avatarRadius, (this._avatarHeight * 0.5), this._avatarRadius));
                if (this._createCylinderShape === true) {
                    this.m_ghostShape = new Ammo.btCylinderShape(new Ammo.btVector3(this._avatarRadius, (this._avatarHeight * 0.5), this._avatarRadius));
                }
                else {
                    this.m_ghostShape = new Ammo.btCapsuleShape(this._avatarRadius, (this._avatarHeight * 0.5));
                }
                // Set ghost shape margin size
                this.m_ghostShape.setMargin(this._skinWidth);
                // Create a ghost collision object
                this.m_ghostObject = new Ammo.btPairCachingGhostObject();
                this.m_ghostObject.setWorldTransform(this.m_startTransform);
                this.m_ghostObject.setCollisionShape(this.m_ghostShape);
                this.m_ghostObject.setCollisionFlags(BABYLON.CollisionFlags.CF_CHARACTER_OBJECT);
                this.m_ghostObject.setActivationState(4);
                this.m_ghostObject.activate(true);
                // Create a ghost collision casting
                this.m_ghostCollision = Ammo.castObject(this.m_ghostObject, Ammo.btCollisionObject);
                this.m_ghostCollision.entity = this._abstractMesh;
                // Create kinematic character controller
                this.m_character = new Ammo.btKinematicCharacterController(this.m_ghostObject, this.m_ghostShape, this._stepOffset);
                this.m_character.setUseGhostSweepTest(true);
                this.m_character.setUpInterpolate(true);
                this.m_character.setGravity(BABYLON.System.Gravity3G);
                this.m_character.setMaxSlope(BABYLON.Tools.ToRadians(this._slopeLimit + 1));
                // Add ghost object and character to world
                world.addCollisionObject(this.m_ghostObject, BABYLON.CollisionFilters.CharacterFilter, BABYLON.CollisionFilters.StaticFilter | BABYLON.CollisionFilters.DefaultFilter | BABYLON.CollisionFilters.CharacterFilter);
                world.addAction(this.m_character);
            }
            else {
                BABYLON.Tools.Warn("Null physics world detected. Failed to create character controller: " + this.transform.name);
            }
            this._isPhysicsReady = (this.m_physicsEngine != null && this._tmpCollisionContacts != null && this.m_ghostObject != null && this._abstractMesh != null);
        };
        CharacterController.prototype.syncMovementState = function () {
            if (this._isPhysicsReady === true) {
                this.m_ghostTransform = this.m_ghostObject.getWorldTransform();
                if (this.m_ghostTransform != null) {
                    this.m_ghostPosition = this.m_ghostTransform.getOrigin();
                }
                else {
                    this.m_ghostPosition = null;
                }
            }
        };
        CharacterController.prototype.updateMovementState = function () {
            this.syncMovementState();
            if (this._isPhysicsReady === true) {
                if (this.m_ghostPosition != null) {
                    if (this.updatePosition === true) {
                        // DEPRECIATED: this.transform.position.set(this.m_ghostPosition.x(), this.m_ghostPosition.y(), this.m_ghostPosition.z());
                        this.m_characterPosition.set(this.m_ghostPosition.x(), this.m_ghostPosition.y(), this.m_ghostPosition.z());
                        if (this._centerOffset != null) {
                            // Note: Subtract Character Controller Center Offset
                            this.m_characterPosition.subtractInPlace(this._centerOffset);
                        }
                        this.transform.position.copyFrom(this.m_characterPosition);
                    }
                    else {
                        if (this.syncGhostToTransform === true) {
                            this.setGhostWorldPosition(this.transform.position);
                        }
                    }
                    if (this.onUpdatePositionObservable.hasObservers() === true) {
                        this.onUpdatePositionObservable.notifyObservers(this.transform);
                    }
                }
            }
            this.parseGhostCollisionContacts();
        };
        CharacterController.prototype.parseGhostCollisionContacts = function () {
            if (this._isPhysicsReady === true) {
                var hasEnterObservers = this.onCollisionEnterObservable.hasObservers();
                var hasStayObservers = this.onCollisionStayObservable.hasObservers();
                var hasExitObservers = this.onCollisionExitObservable.hasObservers();
                if (hasEnterObservers || hasStayObservers || hasExitObservers) {
                    var index = 0; // Note: Flag All Collision List Items For End Contact State
                    for (index = 0; index < this._tmpCollisionContacts.length; index++) {
                        this._tmpCollisionContacts[index].reset = true;
                    }
                    // ..
                    // Parse Overlapping Ghost Contact Objects
                    // ..
                    var contacts = this.m_ghostObject.getNumOverlappingObjects();
                    if (contacts > this._maxCollisions)
                        contacts = this._maxCollisions;
                    if (contacts > 0) {
                        for (index = 0; index < contacts; index++) {
                            var contactObject = this.m_ghostObject.getOverlappingObject(index);
                            if (contactObject != null) {
                                var contactBody = Ammo.castObject(contactObject, Ammo.btCollisionObject);
                                if (contactBody != null && contactBody.entity != null && contactBody.isActive()) {
                                    var foundindex = -1;
                                    var contactMesh = contactBody.entity;
                                    for (index = 0; index < this._tmpCollisionContacts.length; index++) {
                                        var check = this._tmpCollisionContacts[index];
                                        if (check.mesh != null && check.mesh === contactMesh) {
                                            check.state = 1;
                                            check.reset = false;
                                            foundindex = index;
                                            break;
                                        }
                                    }
                                    if (foundindex === -1) {
                                        for (index = 0; index < this._tmpCollisionContacts.length; index++) {
                                            var insert = this._tmpCollisionContacts[index];
                                            if (insert.mesh == null) {
                                                insert.mesh = contactMesh;
                                                insert.state = 0;
                                                insert.reset = false;
                                                break;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    // ..
                    // Dispatch Ghost Collision Contact State
                    // ..
                    for (index = 0; index < this._tmpCollisionContacts.length; index++) {
                        var info = this._tmpCollisionContacts[index];
                        if (info.reset === true) {
                            // Dispatch On Collision Exit Event
                            if (hasExitObservers && info.mesh != null) {
                                this.onCollisionExitObservable.notifyObservers(info.mesh);
                            }
                            // Reset Collision Contact Info Item
                            info.mesh = null;
                            info.state = 0;
                            info.reset = false;
                        }
                        else {
                            if (info.state === 0) {
                                // Dispatch On Collision Enter Event
                                if (hasEnterObservers && info.mesh != null) {
                                    this.onCollisionEnterObservable.notifyObservers(info.mesh);
                                }
                            }
                            else {
                                // Dispatch On Collision Stay Event
                                if (hasStayObservers && info.mesh != null) {
                                    this.onCollisionStayObservable.notifyObservers(info.mesh);
                                }
                            }
                        }
                    }
                }
            }
        };
        CharacterController.prototype.destroyMovementState = function () {
            this.m_physicsEngine = null;
            if (this.m_character != null) {
                Ammo.destroy(this.m_character);
                this.m_character = null;
            }
            if (this.m_ghostObject != null) {
                Ammo.destroy(this.m_ghostObject);
                this.m_ghostObject = null;
            }
            if (this.m_ghostShape != null) {
                Ammo.destroy(this.m_ghostShape);
                this.m_ghostShape = null;
            }
            if (this.m_ghostCollision != null) {
                Ammo.destroy(this.m_ghostCollision); // ???
                this.m_ghostCollision = null;
            }
            if (this.m_ghostPosition != null) {
                Ammo.destroy(this.m_ghostPosition); // ???
                this.m_ghostPosition = null;
            }
            if (this.m_ghostTransform != null) {
                Ammo.destroy(this.m_ghostTransform); // ???
                this.m_ghostTransform = null;
            }
            if (this.m_startPosition != null) {
                Ammo.destroy(this.m_startPosition);
                this.m_startPosition = null;
            }
            if (this.m_startTransform != null) {
                Ammo.destroy(this.m_startTransform);
                this.m_startTransform = null;
            }
            if (this.m_warpPosition != null) {
                Ammo.destroy(this.m_warpPosition);
                this.m_warpPosition = null;
            }
            if (this.m_walkDirection != null) {
                Ammo.destroy(this.m_walkDirection);
                this.m_walkDirection = null;
            }
            this.onUpdatePositionObservable.clear();
            this.onUpdatePositionObservable = null;
            this.onCollisionEnterObservable.clear();
            this.onCollisionEnterObservable = null;
            this.onCollisionStayObservable.clear();
            this.onCollisionStayObservable = null;
            this.onCollisionExitObservable.clear();
            this.onCollisionExitObservable = null;
            this._tmpCollisionContacts = null;
            this._tmpPositionBuffer = null;
            this._abstractMesh = null;
        };
        ////////////////////////////////////////////////////
        // Character Controller Advanced Helper Functions //
        ////////////////////////////////////////////////////
        /** Gets the ghost collision shape margin value. (Advanved Use Only) */
        CharacterController.prototype.getGhostMargin = function () {
            var result = 0;
            if (this.m_ghostShape != null && this.m_ghostShape.getMargin) {
                result = this.m_ghostShape.getMargin();
            }
            return result;
        };
        /** Sets ghost collision shape margin value. (Advanved Use Only) */
        CharacterController.prototype.setGhostMargin = function (margin) {
            if (this.m_ghostShape != null && this.m_ghostShape.setMargin) {
                this.m_ghostShape.setMargin(margin);
            }
        };
        /** Gets character slope slide patch state using physics ghost object. (Advanved Use Only) */
        CharacterController.prototype.getUseSlopeSlidePatch = function () {
            var result = false;
            if (this.m_character != null && this.m_character.get_m_useSlopeSlidePatch) {
                result = this.m_character.get_m_useSlopeSlidePatch();
            }
            return result;
        };
        /** Sets character slope slide patch state using physics ghost object. (Advanved Use Only) */
        CharacterController.prototype.setUseSlopeSlidePatch = function (use) {
            if (this.m_character != null && this.m_character.set_m_useSlopeSlidePatch) {
                this.m_character.set_m_useSlopeSlidePatch(use);
            }
        };
        /** Sets the maximum number of simultaneous contact notfications to dispatch per frame. Defaults value is 4. (Advanved Use Only) */
        CharacterController.prototype.setMaxNotifications = function (max) {
            this._maxCollisions = max;
            this._tmpCollisionContacts = [];
            for (var index = 0; index < this._maxCollisions; index++) {
                this._tmpCollisionContacts.push(new BABYLON.CollisionContactInfo());
            }
        };
        /** Sets character collision activation state using physics ghost object. (Advanved Use Only) */
        CharacterController.prototype.setActivationState = function (state) {
            if (this.m_ghostCollision != null && this.m_ghostCollision.setActivationState) {
                this.m_ghostCollision.setActivationState(state);
            }
        };
        /** Gets character collision group filter using physics ghost object. (Advanved Use Only) */
        CharacterController.prototype.getCollisionFilterGroup = function () {
            var result = -1;
            if (this.m_ghostCollision != null && this.m_ghostCollision.getBroadphaseHandle) {
                result = this.m_ghostCollision.getBroadphaseHandle().get_m_collisionFilterGroup();
            }
            return result;
        };
        /** Sets character collision group filter using physics ghost object. (Advanved Use Only) */
        CharacterController.prototype.setCollisionFilterGroup = function (group) {
            if (this.m_ghostCollision != null && this.m_ghostCollision.getBroadphaseHandle) {
                this.m_ghostCollision.getBroadphaseHandle().set_m_collisionFilterGroup(group);
            }
        };
        /** Gets character collision mask filter using physics ghost object. (Advanved Use Only) */
        CharacterController.prototype.getCollisionFilterMask = function () {
            var result = -1;
            if (this.m_ghostCollision != null && this.m_ghostCollision.getBroadphaseHandle) {
                result = this.m_ghostCollision.getBroadphaseHandle().get_m_collisionFilterMask();
            }
            return result;
        };
        /** Sets the character collision mask filter using physics ghost object. (Advanved Use Only) */
        CharacterController.prototype.setCollisionFilterMask = function (mask) {
            if (this.m_ghostCollision != null && this.m_ghostCollision.getBroadphaseHandle) {
                this.m_ghostCollision.getBroadphaseHandle().set_m_collisionFilterMask(mask);
            }
        };
        /** Gets the chracter contact processing threshold using physics ghost object. (Advanved Use Only) */
        CharacterController.prototype.getContactProcessingThreshold = function () {
            var result = -1;
            if (this.m_ghostCollision != null && this.m_ghostCollision.getContactProcessingThreshold) {
                result = this.m_ghostCollision.getContactProcessingThreshold();
            }
            return result;
        };
        /** Sets character contact processing threshold using physics ghost object. (Advanved Use Only) */
        CharacterController.prototype.setContactProcessingThreshold = function (threshold) {
            if (this.m_ghostCollision != null && this.m_ghostCollision.setContactProcessingThreshold) {
                this.m_ghostCollision.setContactProcessingThreshold(threshold);
            }
        };
        /** Get the current position of the physics ghost object world transform. (Advanved Use Only) */
        CharacterController.prototype.getGhostWorldPosition = function () {
            var result = new BABYLON.Vector3(0, 0, 0);
            if (this.m_ghostPosition != null) {
                result.set(this.m_ghostPosition.x(), this.m_ghostPosition.y(), this.m_ghostPosition.z());
            }
            return result;
        };
        /** Get the current position of the physics ghost object world transform. (Advanved Use Only) */
        CharacterController.prototype.getGhostWorldPositionToRef = function (result) {
            if (this.m_ghostPosition != null && result != null) {
                result.set(this.m_ghostPosition.x(), this.m_ghostPosition.y(), this.m_ghostPosition.z());
            }
        };
        /** Manually set the position of the physics ghost object world transform. (Advanved Use Only) */
        CharacterController.prototype.setGhostWorldPosition = function (position) {
            if (this.m_ghostObject != null && this.m_ghostTransform != null) {
                if (this.m_ghostPosition != null && position != null) {
                    this.m_ghostPosition.setValue(position.x, position.y, position.z);
                    this.m_ghostTransform.setOrigin(this.m_ghostPosition);
                }
                this.m_ghostObject.setWorldTransform(this.m_ghostTransform);
            }
        };
        /** Set ghost collision shape local scaling. (Advanved Use Only) */
        CharacterController.prototype.scaleGhostCollisionShape = function (x, y, z) {
            this.m_ghostShape.setLocalScaling(new Ammo.btVector3(x, y, z));
            if (this.transform._debugCollider != null && this.transform._debugCollider.scaling != null) {
                this.transform._debugCollider.scaling.set(x, y, z);
            }
        };
        ////////////////////////////////////////////////////
        // Public Character Controller Movement Functions //
        ////////////////////////////////////////////////////
        /** Sets the kinematic character position to the specified location. */
        CharacterController.prototype.set = function (x, y, z) {
            this._tmpPositionBuffer.set(x, y, z);
            this.setGhostWorldPosition(this._tmpPositionBuffer);
        };
        /** Translates the kinematic character with the specfied velocity. */
        CharacterController.prototype.move = function (velocity) {
            if (velocity != null) {
                this.m_moveDeltaX = velocity.x;
                this.m_moveDeltaZ = velocity.z;
                if (Math.abs(velocity.x) < this._minMoveDistance) {
                    if (velocity.x > 0) {
                        this.m_moveDeltaX = this._minMoveDistance;
                    }
                    else if (velocity.x < 0) {
                        this.m_moveDeltaX = -this._minMoveDistance;
                    }
                }
                if (Math.abs(velocity.z) < this._minMoveDistance) {
                    if (velocity.z > 0) {
                        this.m_moveDeltaZ = this._minMoveDistance;
                    }
                    else if (velocity.z < 0) {
                        this.m_moveDeltaZ = -this._minMoveDistance;
                    }
                }
                if (this.m_walkDirection != null) {
                    this._movementVelocity.set(this.m_moveDeltaX, 0, this.m_moveDeltaZ);
                    this.m_walkDirection.setValue(this._movementVelocity.x, this._movementVelocity.y, this._movementVelocity.z);
                    this.internalSetWalkDirection(this.m_walkDirection);
                }
            }
        };
        /** Jumps the kinematic chacracter with the specified speed. */
        CharacterController.prototype.jump = function (speed) {
            this.internalSetJumpSpeed(speed);
            this.internalJump();
        };
        /** Warps the kinematic chacracter to the specified position. */
        CharacterController.prototype.warp = function (position) {
            if (this.m_warpPosition != null) {
                this.m_warpPosition.setValue(position.x, position.y, position.z);
                this.internalWarp(this.m_warpPosition);
            }
        };
        return CharacterController;
    }(BABYLON.ScriptComponent));
    BABYLON.CharacterController = CharacterController;
})(BABYLON || (BABYLON = {}));
var BABYLON;
(function (BABYLON) {
    /**
     * Babylon navigation agent pro class (Unity Style Navigation Agent System)
     * @class NavigationAgent - All rights reserved (c) 2020 Mackey Kinard
     */
    var NavigationAgent = /** @class */ (function (_super) {
        __extends(NavigationAgent, _super);
        function NavigationAgent() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.distanceToTarget = 0;
            _this.teleporting = false;
            _this.moveDirection = new BABYLON.Vector3(0.0, 0.0, 0.0);
            _this.resetPosition = new BABYLON.Vector3(0.0, 0.0, 0.0);
            _this.lastPosition = new BABYLON.Vector3(0.0, 0.0, 0.0);
            _this.distancePosition = new BABYLON.Vector3(0.0, 0.0, 0.0);
            _this.currentPosition = new BABYLON.Vector3(0.0, 0.0, 0.0);
            _this.currentRotation = new BABYLON.Quaternion(0.0, 0.0, 0.0, 1.0);
            _this.currentVelocity = new BABYLON.Vector3(0.0, 0.0, 0.0);
            _this.currentWaypoint = new BABYLON.Vector3(0.0, 0.0, 0.0);
            _this.heightOffset = 0;
            _this.angularSpeed = 0;
            _this.updatePosition = true;
            _this.updateRotation = true;
            _this.distanceEpsilon = 0.1;
            _this.velocityEpsilon = 1.1;
            _this.offMeshVelocity = 1.5;
            _this.stoppingDistance = 0;
            /** Register handler that is triggered when the agent is ready for navigation */
            _this.onReadyObservable = new BABYLON.Observable();
            /** Register handler that is triggered before the navigation update */
            _this.onPreUpdateObservable = new BABYLON.Observable();
            /** Register handler that is triggered after the navigation update */
            _this.onPostUpdateObservable = new BABYLON.Observable();
            /** Register handler that is triggered when the navigation is complete */
            _this.onNavCompleteObservable = new BABYLON.Observable();
            _this.m_agentState = 0;
            _this.m_agentIndex = -1;
            _this.m_agentReady = false;
            _this.m_agentGhost = null;
            _this.m_agentParams = null;
            _this.m_agentMovement = new BABYLON.Vector3(0.0, 0.0, 0.0);
            _this.m_agentDirection = new BABYLON.Vector3(0.0, 0.0, 1.0);
            _this.m_agentQuaternion = new BABYLON.Quaternion(0.0, 0.0, 0.0, 1.0);
            _this.m_agentDestination = null;
            return _this;
        }
        NavigationAgent.prototype.isReady = function () { return this.m_agentReady; };
        NavigationAgent.prototype.isNavigating = function () { return (this.m_agentDestination != null); };
        NavigationAgent.prototype.isTeleporting = function () { return this.teleporting; };
        NavigationAgent.prototype.isOnOffMeshLink = function () { return (this.m_agentState === BABYLON.CrowdAgentState.DT_CROWDAGENT_STATE_OFFMESH); };
        NavigationAgent.prototype.getAgentType = function () { return this.type; };
        NavigationAgent.prototype.getAgentState = function () { return this.m_agentState; };
        NavigationAgent.prototype.getAgentIndex = function () { return this.m_agentIndex; };
        NavigationAgent.prototype.getAgentOffset = function () { return this.baseOffset; };
        NavigationAgent.prototype.getTargetDistance = function () { return this.distanceToTarget; };
        NavigationAgent.prototype.getCurrentPosition = function () { return this.currentPosition; };
        NavigationAgent.prototype.getCurrentRotation = function () { return this.currentRotation; };
        NavigationAgent.prototype.getCurrentVelocity = function () { return this.currentVelocity; };
        NavigationAgent.prototype.getAgentParameters = function () { return this.m_agentParams; };
        NavigationAgent.prototype.setAgentParameters = function (parameters) { this.m_agentParams = parameters; this.updateAgentParameters(); };
        NavigationAgent.prototype.awake = function () { this.awakeNavigationAgent(); };
        NavigationAgent.prototype.update = function () { this.updateNavigationAgent(); };
        NavigationAgent.prototype.destroy = function () { this.destroyNavigationAgent(); };
        //////////////////////////////////////////////////////
        // Navigation Private Functions                     //
        //////////////////////////////////////////////////////
        NavigationAgent.prototype.awakeNavigationAgent = function () {
            this.type = this.getProperty("type", this.type);
            this.speed = this.getProperty("speed", this.speed);
            this.baseOffset = this.getProperty("offset", this.baseOffset);
            this.angularSpeed = this.getProperty("angularspeed", this.angularSpeed);
            this.acceleration = this.getProperty("acceleration", this.acceleration);
            this.stoppingDistance = this.getProperty("stoppingdistance", this.stoppingDistance);
            this.autoBraking = this.getProperty("autobraking", this.autoBraking);
            this.avoidRadius = this.getProperty("avoidradius", this.avoidRadius);
            this.avoidHeight = this.getProperty("avoidheight", this.avoidHeight);
            this.obstacleAvoidanceType = this.getProperty("avoidquality", this.obstacleAvoidanceType);
            this.avoidancePriority = this.getProperty("avoidpriority", this.avoidancePriority);
            this.autoTraverseOffMeshLink = this.getProperty("autotraverse", this.autoTraverseOffMeshLink);
            this.autoRepath = this.getProperty("autopepath", this.autoRepath);
            this.areaMask = this.getProperty("areamask", this.areaMask);
            // ..
            BABYLON.Utilities.ValidateTransformQuaternion(this.transform);
            // DEBUG: this.m_agentGhost = BABYLON.Mesh.CreateBox((this.transform.name + "Agent"), 1, this.scene);
            this.m_agentGhost = new BABYLON.TransformNode((this.transform.name + ".Agent"), this.scene);
            this.m_agentGhost.position = new BABYLON.Vector3(0.0, 0.0, 0.0);
            this.m_agentGhost.rotation = new BABYLON.Vector3(0.0, 0.0, 0.0);
            BABYLON.Utilities.ValidateTransformQuaternion(this.m_agentGhost);
            this.m_agentGhost.position.copyFrom(this.transform.position);
            this.lastPosition.copyFrom(this.transform.position);
        };
        NavigationAgent.prototype.updateNavigationAgent = function () {
            var crowd = BABYLON.SceneManager.GetCrowdInterface(this.scene);
            if (crowd == null)
                return; // Note: No Detour Navigation Mesh Available Yet
            if (this.m_agentIndex < 0) {
                this.m_agentParams = {
                    radius: this.avoidRadius,
                    height: this.avoidHeight,
                    maxSpeed: this.speed,
                    maxAcceleration: this.acceleration,
                    collisionQueryRange: 2.0,
                    pathOptimizationRange: 20.0,
                    separationWeight: 1.0
                };
                BABYLON.Utilities.GetAbsolutePositionToRef(this.transform, this.resetPosition);
                this.m_agentIndex = crowd.addAgent(this.resetPosition, this.m_agentParams, this.m_agentGhost);
                if (this.m_agentIndex >= 0) {
                    this.m_agentReady = true;
                    if (this.onReadyObservable.hasObservers() === true) {
                        this.onReadyObservable.notifyObservers(this.transform);
                    }
                }
                return; // Note: Start Updating Navigation Agent Next Frame
            }
            // ..
            this.m_agentState = crowd.getAgentState(this.m_agentIndex);
            this.getAgentWaypointToRef(this.currentWaypoint);
            this.getAgentPositionToRef(this.currentPosition);
            this.distancePosition.copyFrom(this.currentPosition);
            if (this.isOnOffMeshLink()) {
                this.currentPosition.subtractToRef(this.lastPosition, this.currentVelocity);
                this.currentVelocity.scaleInPlace(this.speed * this.offMeshVelocity);
            }
            else {
                this.getAgentVelocityToRef(this.currentVelocity);
            }
            if (this.onPreUpdateObservable.hasObservers() === true) {
                this.onPreUpdateObservable.notifyObservers(this.transform);
            }
            this.currentPosition.y += (this.baseOffset + this.heightOffset);
            if (this.currentVelocity.length() >= this.velocityEpsilon) {
                this.currentVelocity.normalize();
                var rotateFactor = (this.angularSpeed * BABYLON.NavigationAgent.ANGULAR_SPEED_RATIO * this.getDeltaSeconds());
                ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                // KEEP FOR REFERENCE: Compute Agent Orientation
                ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                // Note: Interpolate the rotation on Y to get a smoother orientation change
                // const desiredRotation:number = Math.atan2(this.currentVelocity.x, this.currentVelocity.z);
                // this.transform.rotation.y = this.transform.rotation.y + (desiredRotation - this.transform.rotation.y) * 0.05;
                ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                if (this.isOnOffMeshLink()) {
                    // Rotate Toward Velocity Direction
                    this.moveDirection.copyFrom(this.m_agentDirection);
                    this.m_agentDirection.set((this.moveDirection.x + (this.currentVelocity.x - this.moveDirection.x)), (this.moveDirection.y + (this.currentVelocity.y - this.moveDirection.y)), (this.moveDirection.z + (this.currentVelocity.z - this.moveDirection.z)));
                    this.m_agentDirection.normalize();
                    var targetAngle = (BABYLON.NavigationAgent.TARGET_ANGLE_FACTOR - Math.atan2(this.m_agentDirection.x, this.m_agentDirection.z));
                    BABYLON.Quaternion.FromEulerAnglesToRef(0.0, targetAngle, 0.0, this.currentRotation);
                    // Rotation Update
                    if (this.isNavigating() && this.updateRotation === true) {
                        BABYLON.Quaternion.SlerpToRef(this.transform.rotationQuaternion, this.currentRotation, rotateFactor, this.transform.rotationQuaternion);
                    }
                }
                else {
                    // Rotate Toward Next Target Waypoint
                    this.m_agentQuaternion.copyFrom(this.transform.rotationQuaternion);
                    if (this.isNavigating() && this.updateRotation === true) {
                        this.transform.lookAt(this.currentWaypoint);
                    }
                    // Correct Transform Look At Rotation
                    this.transform.rotationQuaternion.toEulerAnglesToRef(this.m_agentDirection);
                    BABYLON.Quaternion.FromEulerAnglesToRef(0.0, this.m_agentDirection.y, 0.0, this.currentRotation);
                    // Rotation Update
                    if (this.isNavigating() && this.updateRotation === true) {
                        BABYLON.Quaternion.SlerpToRef(this.m_agentQuaternion, this.currentRotation, rotateFactor, this.transform.rotationQuaternion);
                    }
                }
            }
            // Position Update
            if (this.isNavigating() && this.updatePosition === true) {
                this.transform.position.copyFrom(this.currentPosition);
            }
            // Target Distance
            if (this.isNavigating()) {
                this.distanceToTarget = BABYLON.Vector3.Distance(this.distancePosition, this.m_agentDestination);
                if (this.distanceToTarget <= Math.max(this.distanceEpsilon, this.stoppingDistance)) {
                    this.cancelNavigation();
                    if (this.onNavCompleteObservable.hasObservers() === true) {
                        this.onNavCompleteObservable.notifyObservers(this.transform);
                    }
                }
            }
            else {
                this.distanceToTarget = 0;
            }
            // Final Post Update
            this.lastPosition.copyFrom(this.currentPosition);
            if (this.onPostUpdateObservable.hasObservers() === true) {
                this.onPostUpdateObservable.notifyObservers(this.transform);
            }
            // Reset Teleport Flag
            this.teleporting = false;
        };
        NavigationAgent.prototype.updateAgentParameters = function () {
            var crowd = BABYLON.SceneManager.GetCrowdInterface(this.scene);
            if (crowd != null && this.m_agentIndex >= 0)
                crowd.updateAgentParameters(this.m_agentIndex, this.m_agentParams);
        };
        NavigationAgent.prototype.destroyNavigationAgent = function () {
            this.m_agentIndex = -1;
            this.m_agentReady = false;
            this.m_agentMovement = null;
            this.m_agentDirection = null;
            this.m_agentDestination = null;
            this.moveDirection = null;
            this.resetPosition = null;
            this.lastPosition = null;
            this.currentPosition = null;
            this.currentRotation = null;
            this.currentVelocity = null;
            this.currentWaypoint = null;
            this.onReadyObservable.clear();
            this.onReadyObservable = null;
            this.onPreUpdateObservable.clear();
            this.onPreUpdateObservable = null;
            this.onPostUpdateObservable.clear();
            this.onPostUpdateObservable = null;
            this.onNavCompleteObservable.clear();
            this.onNavCompleteObservable = null;
            if (this.m_agentGhost != null) {
                this.m_agentGhost.dispose();
                this.m_agentGhost = null;
            }
        };
        //////////////////////////////////////////////////////
        // Navigation Public Functions                      //
        //////////////////////////////////////////////////////
        /** Move agent relative to current position. */
        NavigationAgent.prototype.move = function (offset, closetPoint) {
            if (closetPoint === void 0) { closetPoint = true; }
            var plugin = BABYLON.SceneManager.GetNavigationTools();
            var crowd = BABYLON.SceneManager.GetCrowdInterface(this.scene);
            if (plugin != null && crowd != null) {
                crowd.getAgentPosition(this.m_agentIndex).addToRef(offset, this.m_agentMovement);
                if (closetPoint === true)
                    this.m_agentDestination = plugin.getClosestPoint(this.m_agentMovement);
                else
                    this.m_agentDestination = this.m_agentMovement.clone();
                if (this.m_agentIndex >= 0)
                    crowd.agentGoto(this.m_agentIndex, this.m_agentDestination);
            }
            else {
                BABYLON.Tools.Warn("No recast navigation mesh or crowd interface data available!");
            }
        };
        /** Teleport agent to destination point. */
        NavigationAgent.prototype.teleport = function (destination, closetPoint) {
            if (closetPoint === void 0) { closetPoint = true; }
            var plugin = BABYLON.SceneManager.GetNavigationTools();
            var crowd = BABYLON.SceneManager.GetCrowdInterface(this.scene);
            if (plugin != null && crowd != null) {
                this.teleporting = true;
                if (closetPoint === true)
                    this.m_agentDestination = plugin.getClosestPoint(destination);
                else
                    this.m_agentDestination = destination.clone();
                if (this.m_agentIndex >= 0)
                    crowd.agentTeleport(this.m_agentIndex, this.m_agentDestination);
            }
            else {
                BABYLON.Tools.Warn("No recast navigation mesh or crowd interface data available!");
            }
        };
        /** Sets agent current destination point. */
        NavigationAgent.prototype.setDestination = function (destination, closetPoint) {
            if (closetPoint === void 0) { closetPoint = true; }
            var plugin = BABYLON.SceneManager.GetNavigationTools();
            var crowd = BABYLON.SceneManager.GetCrowdInterface(this.scene);
            if (plugin != null && crowd != null) {
                if (closetPoint === true)
                    this.m_agentDestination = plugin.getClosestPoint(destination);
                else
                    this.m_agentDestination = destination.clone();
                if (this.m_agentIndex >= 0)
                    crowd.agentGoto(this.m_agentIndex, this.m_agentDestination);
            }
            else {
                BABYLON.Tools.Warn("No recast navigation mesh or crowd interface data available!");
            }
        };
        /** Gets agent current world space velocity. */
        NavigationAgent.prototype.getAgentVelocity = function () {
            var crowd = BABYLON.SceneManager.GetCrowdInterface(this.scene);
            return (crowd != null && this.m_agentIndex >= 0) ? crowd.getAgentVelocity(this.m_agentIndex) : null;
        };
        /** Gets agent current world space velocity. */
        NavigationAgent.prototype.getAgentVelocityToRef = function (result) {
            var crowd = BABYLON.SceneManager.GetCrowdInterface(this.scene);
            if (crowd != null && this.m_agentIndex >= 0)
                crowd.getAgentVelocityToRef(this.m_agentIndex, result);
        };
        /** Gets agent current world space position. */
        NavigationAgent.prototype.getAgentPosition = function () {
            var crowd = BABYLON.SceneManager.GetCrowdInterface(this.scene);
            return (crowd != null && this.m_agentIndex >= 0) ? crowd.getAgentPosition(this.m_agentIndex) : null;
        };
        /** Gets agent current world space position. */
        NavigationAgent.prototype.getAgentPositionToRef = function (result) {
            var crowd = BABYLON.SceneManager.GetCrowdInterface(this.scene);
            if (crowd != null && this.m_agentIndex >= 0)
                crowd.getAgentPositionToRef(this.m_agentIndex, result);
        };
        /** Gets agent current waypoint position. */
        NavigationAgent.prototype.getAgentWaypoint = function () {
            var crowd = BABYLON.SceneManager.GetCrowdInterface(this.scene);
            return (crowd != null && this.m_agentIndex >= 0) ? crowd.getAgentNextTargetPath(this.m_agentIndex) : null;
        };
        /** Gets agent current waypoint position. */
        NavigationAgent.prototype.getAgentWaypointToRef = function (result) {
            var crowd = BABYLON.SceneManager.GetCrowdInterface(this.scene);
            if (crowd != null && this.m_agentIndex >= 0)
                crowd.getAgentNextTargetPathToRef(this.m_agentIndex, result);
        };
        /** Cancel current waypoint path navigation. */
        NavigationAgent.prototype.cancelNavigation = function () {
            this.m_agentDestination = null; // Note: Disable Auto Position Update
            var crowd = BABYLON.SceneManager.GetCrowdInterface(this.scene);
            var position = this.getAgentPosition();
            if (position != null && crowd != null && this.m_agentIndex >= 0) {
                crowd.agentTeleport(this.m_agentIndex, position);
                // DEPRECIATED: position.y += (this.baseOffset + this.heightOffset);
                // DEPRECIATED: this.transform.position.copyFrom(position);
            }
        };
        NavigationAgent.TARGET_ANGLE_FACTOR = (Math.PI * 0.5);
        NavigationAgent.ANGULAR_SPEED_RATIO = 0.05;
        return NavigationAgent;
    }(BABYLON.ScriptComponent));
    BABYLON.NavigationAgent = NavigationAgent;
    /**
     *  Recast Detour Crowd Agent States
     */
    var CrowdAgentState;
    (function (CrowdAgentState) {
        CrowdAgentState[CrowdAgentState["DT_CROWDAGENT_STATE_INVALID"] = 0] = "DT_CROWDAGENT_STATE_INVALID";
        CrowdAgentState[CrowdAgentState["DT_CROWDAGENT_STATE_WALKING"] = 1] = "DT_CROWDAGENT_STATE_WALKING";
        CrowdAgentState[CrowdAgentState["DT_CROWDAGENT_STATE_OFFMESH"] = 2] = "DT_CROWDAGENT_STATE_OFFMESH";
    })(CrowdAgentState = BABYLON.CrowdAgentState || (BABYLON.CrowdAgentState = {}));
    ;
})(BABYLON || (BABYLON = {}));
var BABYLON;
(function (BABYLON) {
    /**
     * Babylon raycast vehicle controller pro class (Native Bullet Physics 2.82)
     * @class RaycastVehicle - All rights reserved (c) 2020 Mackey Kinard
     */
    var RaycastVehicle = /** @class */ (function () {
        function RaycastVehicle(entity, world, center, defaultAngularFactor) {
            if (defaultAngularFactor === void 0) { defaultAngularFactor = null; }
            this._centerMass = new BABYLON.Vector3(0, 0, 0);
            this._chassisMesh = null;
            this._tempVectorPos = new BABYLON.Vector3(0, 0, 0);
            this.lockedWheelIndexes = null;
            this.m_vehicle = null;
            this.m_vehicleTuning = null;
            this.m_vehicleRaycaster = null;
            this.m_vehicleColliders = null;
            this.m_tempTransform = null;
            this.m_tempPosition = null;
            this.m_wheelDirectionCS0 = null;
            this.m_wheelAxleCS = null;
            this._chassisMesh = entity;
            this._centerMass = center;
            this.m_vehicleTuning = new Ammo.btVehicleTuning();
            this.m_vehicleRaycaster = (Ammo.btSmoothVehicleRaycaster != null) ? new Ammo.btSmoothVehicleRaycaster(world) : new Ammo.btDefaultVehicleRaycaster(world);
            this.m_vehicleColliders = (this._chassisMesh.metadata != null && this._chassisMesh.metadata.unity != null && this._chassisMesh.metadata.unity.wheels != null) ? this._chassisMesh.metadata.unity.wheels : null;
            this.m_vehicle = new Ammo.btRaycastVehicle(this.m_vehicleTuning, this._chassisMesh.physicsImpostor.physicsBody, this.m_vehicleRaycaster);
            this.m_vehicle.setCoordinateSystem(0, 1, 2); // Y-UP-AXIS
            this.m_wheelDirectionCS0 = new Ammo.btVector3(0, -1, 0); // Y-UP-AXIS
            this.m_wheelAxleCS = new Ammo.btVector3(-1, 0, 0); // Y-UP-AXIS
            this.m_tempPosition = null;
            this.m_tempTransform = null;
            this.setupWheelInformation(defaultAngularFactor);
            world.addAction(this.m_vehicle);
        }
        RaycastVehicle.prototype.getCenterMassOffset = function () { return this._centerMass; };
        RaycastVehicle.prototype.getInternalVehicle = function () { return this.m_vehicle; };
        RaycastVehicle.prototype.getUpAxis = function () { if (this.m_vehicle != null)
            return this.m_vehicle.getUpAxis(); };
        RaycastVehicle.prototype.getRightAxis = function () { if (this.m_vehicle != null)
            return this.m_vehicle.getRightAxis(); };
        RaycastVehicle.prototype.getForwardAxis = function () { if (this.m_vehicle != null)
            return this.m_vehicle.getForwardAxis(); };
        RaycastVehicle.prototype.getForwardVector = function () { if (this.m_vehicle != null)
            return this.m_vehicle.getForwardVector(); };
        RaycastVehicle.prototype.getNumWheels = function () { if (this.m_vehicle != null)
            return this.m_vehicle.getNumWheels(); };
        RaycastVehicle.prototype.getWheelInfo = function (wheel) { if (this.m_vehicle != null)
            return this.m_vehicle.getWheelInfo(wheel); }; // Ammo.btWheelInfo
        RaycastVehicle.prototype.resetSuspension = function () { if (this.m_vehicle != null)
            this.m_vehicle.resetSuspension(); };
        RaycastVehicle.prototype.setPitchControl = function (pitch) { if (this.m_vehicle != null)
            this.m_vehicle.setPitchControl(pitch); };
        RaycastVehicle.prototype.setEngineForce = function (power, wheel) { if (this.m_vehicle != null)
            this.m_vehicle.applyEngineForce(power, wheel); };
        RaycastVehicle.prototype.setBrakingForce = function (brake, wheel) { if (this.m_vehicle != null)
            this.m_vehicle.setBrake(brake, wheel); };
        RaycastVehicle.prototype.getWheelTransform = function (wheel) { if (this.m_vehicle != null)
            return this.m_vehicle.getWheelTransformWS(wheel); }; // Ammo.btTransform
        RaycastVehicle.prototype.updateWheelTransform = function (wheel, interpolate) { if (this.m_vehicle != null)
            this.m_vehicle.updateWheelTransform(wheel, interpolate); };
        RaycastVehicle.prototype.getUserConstraintType = function () { if (this.m_vehicle != null)
            return this.m_vehicle.getUserConstraintType(); };
        RaycastVehicle.prototype.setUserConstraintType = function (userConstraintType) { if (this.m_vehicle != null)
            this.m_vehicle.setUserConstraintType(userConstraintType); };
        RaycastVehicle.prototype.setUserConstraintId = function (uid) { if (this.m_vehicle != null)
            this.m_vehicle.setUserConstraintId(uid); };
        RaycastVehicle.prototype.getUserConstraintId = function () { if (this.m_vehicle != null)
            return this.m_vehicle.getUserConstraintId(); };
        RaycastVehicle.prototype.getRawCurrentSpeedKph = function () { if (this.m_vehicle != null)
            return this.m_vehicle.getCurrentSpeedKmHour(); };
        RaycastVehicle.prototype.getRawCurrentSpeedMph = function () { if (this.m_vehicle != null)
            return this.m_vehicle.getCurrentSpeedKmHour() * BABYLON.System.Kph2Mph; };
        RaycastVehicle.prototype.getAbsCurrentSpeedKph = function () { if (this.m_vehicle != null)
            return Math.abs(this.m_vehicle.getCurrentSpeedKmHour()); };
        RaycastVehicle.prototype.getAbsCurrentSpeedMph = function () { if (this.m_vehicle != null)
            return Math.abs(this.m_vehicle.getCurrentSpeedKmHour()) * BABYLON.System.Kph2Mph; };
        RaycastVehicle.prototype.getVehicleTuningSystem = function () { return this.m_vehicleTuning; }; // Ammo.btVehicleTuning
        RaycastVehicle.prototype.getChassisWorldTransform = function () { if (this.m_vehicle != null)
            return this.m_vehicle.getChassisWorldTransform(); }; // Ammo.btTransform
        RaycastVehicle.prototype.dispose = function () {
            this.deleteWheelInformation();
            if (this.m_vehicle != null) {
                Ammo.destroy(this.m_vehicle);
                this.m_vehicle = null;
            }
            if (this.m_vehicleTuning != null) {
                Ammo.destroy(this.m_vehicleTuning);
                this.m_vehicleTuning = null;
            }
            if (this.m_vehicleRaycaster != null) {
                Ammo.destroy(this.m_vehicleRaycaster);
                this.m_vehicleRaycaster = null;
            }
            if (this.m_wheelDirectionCS0 != null) {
                Ammo.destroy(this.m_wheelDirectionCS0);
                this.m_wheelDirectionCS0 = null;
            }
            if (this.m_wheelAxleCS != null) {
                Ammo.destroy(this.m_wheelAxleCS);
                this.m_wheelAxleCS = null;
            }
            if (this.m_tempPosition != null) {
                this.m_tempPosition = null;
            }
            if (this.m_tempTransform != null) {
                this.m_tempTransform = null;
            }
            this.m_vehicleColliders = null;
        };
        ///////////////////////////////////////////////////////
        // Static Raycast Vehicle Instance Helper Functions
        ///////////////////////////////////////////////////////
        /** Gets the rigidbody raycast vehicle controller for the entity. Note: Wheel collider metadata informaion is required for raycast vehicle control. */
        RaycastVehicle.GetInstance = function (scene, rigidbody, defaultAngularFactor) {
            if (defaultAngularFactor === void 0) { defaultAngularFactor = null; }
            var anybody = rigidbody;
            if (anybody.m_raycastVehicle == null) {
                if (rigidbody.hasWheelColliders()) {
                    var rightHanded = BABYLON.SceneManager.GetRightHanded(scene);
                    if (rightHanded === true)
                        BABYLON.Tools.Warn("Raycast vehicle not supported for right handed scene: " + anybody._abstractMesh.name);
                    anybody.m_raycastVehicle = new BABYLON.RaycastVehicle(anybody._abstractMesh, anybody.m_physicsWorld, anybody._centerOfMass, defaultAngularFactor);
                }
                else {
                    BABYLON.Tools.Warn("No wheel collider metadata found for: " + anybody._abstractMesh.name);
                }
            }
            return anybody.m_raycastVehicle;
        };
        ///////////////////////////////////////////////////////
        // Smooth Raycast Vehicle Advanced Helper Functions
        ///////////////////////////////////////////////////////
        /** Gets vehicle enable multi raycast flag using physics vehicle object. (Advanved Use Only) */
        RaycastVehicle.prototype.getEnableMultiRaycast = function () {
            var result = false;
            if (this.m_vehicle != null && this.m_vehicle.get_m_enableMultiRaycast) {
                result = this.m_vehicle.get_m_enableMultiRaycast();
            }
            return result;
        };
        /** Sets vehicle enable multi raycast flag using physics vehicle object. (Advanved Use Only) */
        RaycastVehicle.prototype.setEnableMultiRaycast = function (flag) {
            if (this.m_vehicle != null && this.m_vehicle.set_m_enableMultiRaycast) {
                this.m_vehicle.set_m_enableMultiRaycast(flag);
            }
        };
        /** Gets vehicle stable force using physics vehicle object. (Advanved Use Only) */
        RaycastVehicle.prototype.getStabilizingForce = function () {
            var result = -1;
            if (this.m_vehicle != null && this.m_vehicle.get_m_stabilizingForce) {
                result = this.m_vehicle.get_m_stabilizingForce();
            }
            return result;
        };
        /** Sets vehicle stable force using physics vehicle object. (Advanved Use Only) */
        RaycastVehicle.prototype.setStabilizingForce = function (force) {
            if (this.m_vehicle != null && this.m_vehicle.set_m_stabilizingForce) {
                this.m_vehicle.set_m_stabilizingForce(force);
            }
        };
        /** Gets vehicle max stable force using physics vehicle object. (Advanved Use Only) */
        RaycastVehicle.prototype.getMaxImpulseForce = function () {
            var result = -1;
            if (this.m_vehicle != null && this.m_vehicle.get_m_maxImpulseForce) {
                result = this.m_vehicle.get_m_maxImpulseForce();
            }
            return result;
        };
        /** Sets vehicle max stable force using physics vehicle object. (Advanved Use Only) */
        RaycastVehicle.prototype.setMaxImpulseForce = function (force) {
            if (this.m_vehicle != null && this.m_vehicle.set_m_maxImpulseForce) {
                this.m_vehicle.set_m_maxImpulseForce(force);
            }
        };
        /** Gets vehicle smooth flying impulse force using physics vehicle object. (Advanved Use Only) */
        RaycastVehicle.prototype.getSmoothFlyingImpulse = function () {
            var result = -1;
            if (this.m_vehicle != null && this.m_vehicle.get_m_smoothFlyingImpulse) {
                result = this.m_vehicle.get_m_smoothFlyingImpulse();
            }
            return result;
        };
        /** Sets vehicle smooth flying impulse using physics vehicle object. (Advanved Use Only) */
        RaycastVehicle.prototype.setSmoothFlyingImpulse = function (impulse) {
            if (this.m_vehicle != null && this.m_vehicle.set_m_smoothFlyingImpulse) {
                this.m_vehicle.set_m_smoothFlyingImpulse(impulse);
            }
        };
        /** Gets vehicle track connection accel force using physics vehicle object. (Advanved Use Only) */
        RaycastVehicle.prototype.getTrackConnectionAccel = function () {
            var result = -1;
            if (this.m_vehicle != null && this.m_vehicle.get_m_trackConnectionAccel) {
                result = this.m_vehicle.get_m_trackConnectionAccel();
            }
            return result;
        };
        /** Sets vehicle track connection accel force using physics vehicle object. (Advanved Use Only) */
        RaycastVehicle.prototype.setTrackConnectionAccel = function (force) {
            if (this.m_vehicle != null && this.m_vehicle.set_m_trackConnectionAccel) {
                this.m_vehicle.set_m_trackConnectionAccel(force);
            }
        };
        /** Gets vehicle min wheel contact count using physics vehicle object. (Advanved Use Only) */
        RaycastVehicle.prototype.getMinimumWheelContacts = function () {
            var result = -1;
            if (this.m_vehicle != null && this.m_vehicle.get_m_minimumWheelContacts) {
                result = this.m_vehicle.get_m_minimumWheelContacts();
            }
            return result;
        };
        /** Sets vehicle min wheel contact count using physics vehicle object. (Advanved Use Only) */
        RaycastVehicle.prototype.setMinimumWheelContacts = function (force) {
            if (this.m_vehicle != null && this.m_vehicle.set_m_minimumWheelContacts) {
                this.m_vehicle.set_m_minimumWheelContacts(force);
            }
        };
        /** Gets vehicle interpolate mesh normals flag using physics raycaster object. (Advanved Use Only) */
        RaycastVehicle.prototype.getInterpolateNormals = function () {
            var result = false;
            if (this.m_vehicleRaycaster != null && this.m_vehicleRaycaster.get_m_interpolateNormals) {
                result = this.m_vehicleRaycaster.get_m_interpolateNormals();
            }
            return result;
        };
        /** Sets the vehicle interpolate mesh normals using physics raycaster object. (Advanved Use Only) */
        RaycastVehicle.prototype.setInterpolateNormals = function (flag) {
            if (this.m_vehicleRaycaster != null && this.m_vehicleRaycaster.set_m_interpolateNormals) {
                this.m_vehicleRaycaster.set_m_interpolateNormals(flag);
            }
        };
        /** Gets vehicle shape testing mode using physics raycaster object. (Advanved Use Only) */
        RaycastVehicle.prototype.getShapeTestingMode = function () {
            var result = false;
            if (this.m_vehicleRaycaster != null && this.m_vehicleRaycaster.get_m_shapeTestingMode) {
                result = this.m_vehicleRaycaster.get_m_shapeTestingMode();
            }
            return result;
        };
        /** Sets the vehicle shape testing mode using physics raycaster object. (Advanved Use Only) */
        RaycastVehicle.prototype.setShapeTestingMode = function (mode) {
            if (this.m_vehicleRaycaster != null && this.m_vehicleRaycaster.set_m_shapeTestingMode) {
                this.m_vehicleRaycaster.set_m_shapeTestingMode(mode);
            }
        };
        /** Gets vehicle shape testing size using physics raycaster object. (Advanved Use Only) */
        RaycastVehicle.prototype.getShapeTestingSize = function () {
            var result = 0;
            if (this.m_vehicleRaycaster != null && this.m_vehicleRaycaster.get_m_shapeTestingSize) {
                result = this.m_vehicleRaycaster.get_m_shapeTestingSize();
            }
            return result;
        };
        /** Sets the vehicle shape testing mode using physics raycaster object. (Advanved Use Only) */
        RaycastVehicle.prototype.setShapeTestingSize = function (size) {
            if (this.m_vehicleRaycaster != null && this.m_vehicleRaycaster.set_m_shapeTestingSize) {
                this.m_vehicleRaycaster.set_m_shapeTestingSize(size);
            }
        };
        /** Gets vehicle shape test point count using physics raycaster object. (Advanved Use Only) */
        RaycastVehicle.prototype.getShapeTestingCount = function () {
            var result = 0;
            if (this.m_vehicleRaycaster != null && this.m_vehicleRaycaster.get_m_testPointCount) {
                result = this.m_vehicleRaycaster.get_m_testPointCount();
            }
            return result;
        };
        /** Sets the vehicle shape test point count using physics raycaster object. (Advanved Use Only) */
        RaycastVehicle.prototype.setShapeTestingCount = function (count) {
            if (this.m_vehicleRaycaster != null && this.m_vehicleRaycaster.set_m_testPointCount) {
                this.m_vehicleRaycaster.set_m_testPointCount(count);
            }
        };
        /** Gets vehicle sweep penetration amount using physics raycaster object. (Advanved Use Only) */
        RaycastVehicle.prototype.getSweepPenetration = function () {
            var result = 0;
            if (this.m_vehicleRaycaster != null && this.m_vehicleRaycaster.get_m_sweepPenetration) {
                result = this.m_vehicleRaycaster.get_m_sweepPenetration();
            }
            return result;
        };
        /** Sets the vehicle sweep penetration amount using physics raycaster object. (Advanved Use Only) */
        RaycastVehicle.prototype.setSweepPenetration = function (amount) {
            if (this.m_vehicleRaycaster != null && this.m_vehicleRaycaster.set_m_sweepPenetration) {
                this.m_vehicleRaycaster.set_m_sweepPenetration(amount);
            }
        };
        ///////////////////////////////////////////////////////
        // Smooth Raycast Vehicle Advanced Collision Functions
        ///////////////////////////////////////////////////////
        /** Gets vehicle collision group filter using physics raycaster object. (Advanved Use Only) */
        RaycastVehicle.prototype.getCollisionFilterGroup = function () {
            var result = -1;
            if (this.m_vehicleRaycaster != null && this.m_vehicleRaycaster.get_m_collisionFilterGroup) {
                result = this.m_vehicleRaycaster.get_m_collisionFilterGroup();
            }
            return result;
        };
        /** Sets vehicle collision group filter using physics raycaster object. (Advanved Use Only) */
        RaycastVehicle.prototype.setCollisionFilterGroup = function (group) {
            if (this.m_vehicleRaycaster != null && this.m_vehicleRaycaster.set_m_collisionFilterGroup) {
                this.m_vehicleRaycaster.set_m_collisionFilterGroup(group);
            }
        };
        /** Gets vehicle collision mask filter using physics raycaster object. (Advanved Use Only) */
        RaycastVehicle.prototype.getCollisionFilterMask = function () {
            var result = -1;
            if (this.m_vehicleRaycaster != null && this.m_vehicleRaycaster.get_m_collisionFilterMask) {
                result = this.m_vehicleRaycaster.get_m_collisionFilterMask();
            }
            return result;
        };
        /** Sets the vehicle collision mask filter using physics raycaster object. (Advanved Use Only) */
        RaycastVehicle.prototype.setCollisionFilterMask = function (mask) {
            if (this.m_vehicleRaycaster != null && this.m_vehicleRaycaster.set_m_collisionFilterMask) {
                this.m_vehicleRaycaster.set_m_collisionFilterMask(mask);
            }
        };
        ///////////////////////////////////////////////////////
        // Raycast Vehicle Wheel Information Helper Funtions
        ///////////////////////////////////////////////////////
        /** Gets the internal wheel index by id string. */
        RaycastVehicle.prototype.getWheelIndexByID = function (id) {
            var result = -1;
            if (this.m_vehicleColliders != null && this.m_vehicleColliders.length > 0) {
                for (var index = 0; index < this.m_vehicleColliders.length; index++) {
                    var wheel = this.m_vehicleColliders[index];
                    if (id.toLowerCase() === wheel.id.toLowerCase()) {
                        result = index;
                        break;
                    }
                }
            }
            return result;
        };
        /** Gets the internal wheel index by name string. */
        RaycastVehicle.prototype.getWheelIndexByName = function (name) {
            var result = -1;
            if (this.m_vehicleColliders != null && this.m_vehicleColliders.length > 0) {
                for (var index = 0; index < this.m_vehicleColliders.length; index++) {
                    var wheel = this.m_vehicleColliders[index];
                    if (name.toLowerCase() === wheel.name.toLowerCase()) {
                        result = index;
                        break;
                    }
                }
            }
            return result;
        };
        /** Gets the internal wheel collider information. */
        RaycastVehicle.prototype.getWheelColliderInfo = function (wheel) {
            var result = -1;
            if (this.m_vehicleColliders != null && this.m_vehicleColliders.length > 0 && this.m_vehicleColliders.length > wheel) {
                result = this.m_vehicleColliders[wheel];
            }
            return result;
        };
        /** Sets the internal wheel hub transform mesh by index. Used to rotate and bounce wheels. */
        RaycastVehicle.prototype.setWheelTransformMesh = function (wheel, transform) {
            if (transform == null)
                return;
            var wheelinfo = this.getWheelInfo(wheel);
            if (wheelinfo != null)
                wheelinfo.transform = transform;
        };
        ///////////////////////////////////////////////////////
        // Smooth Raycast Vehicle Seering Helper Functions
        ///////////////////////////////////////////////////////
        RaycastVehicle.prototype.getVisualSteeringAngle = function (wheel) {
            var result = 0;
            var wheelinfo = this.getWheelInfo(wheel);
            if (wheelinfo != null && wheelinfo.steeringAngle != null) {
                result = wheelinfo.steeringAngle;
            }
            return result;
        };
        RaycastVehicle.prototype.setVisualSteeringAngle = function (angle, wheel) {
            var wheelinfo = this.getWheelInfo(wheel);
            if (wheelinfo != null) {
                wheelinfo.steeringAngle = angle;
            }
        };
        RaycastVehicle.prototype.getPhysicsSteeringAngle = function (wheel) {
            if (this.m_vehicle != null) {
                return Math.abs(this.m_vehicle.getSteeringValue(wheel));
            }
        };
        RaycastVehicle.prototype.setPhysicsSteeringAngle = function (angle, wheel) {
            if (this.m_vehicle != null) {
                this.m_vehicle.setSteeringValue(angle, wheel);
            }
        };
        /////////////////////////////////////////////
        // Setup Wheel Information Helper Funtions //
        /////////////////////////////////////////////
        RaycastVehicle.prototype.setupWheelInformation = function (defaultAngularFactor) {
            if (defaultAngularFactor === void 0) { defaultAngularFactor = null; }
            if (this._chassisMesh != null && this._chassisMesh.physicsImpostor != null && this._chassisMesh.physicsImpostor.physicsBody != null) {
                if (defaultAngularFactor != null) {
                    // https://pybullet.org/Bullet/phpBB3/viewtopic.php?t=8153
                    // prevent vehicle from flip over, by limit the rotation  on forward axis or limit angles for vehicle stablization
                    if (BABYLON.RaycastVehicle.TempAmmoVector == null)
                        BABYLON.RaycastVehicle.TempAmmoVector = new Ammo.btVector3(0, 0, 0);
                    BABYLON.RaycastVehicle.TempAmmoVector.setValue(defaultAngularFactor.x, defaultAngularFactor.y, defaultAngularFactor.z);
                    this._chassisMesh.physicsImpostor.physicsBody.setAngularFactor(BABYLON.RaycastVehicle.TempAmmoVector);
                }
                this._chassisMesh.physicsImpostor.physicsBody.setActivationState(BABYLON.CollisionState.DISABLE_DEACTIVATION);
            }
            if (this.m_vehicle != null && this.m_vehicleColliders != null && this.m_vehicleColliders.length > 0) {
                var index = -1;
                for (index = 0; index < this.m_vehicleColliders.length; index++) {
                    var wheel = this.m_vehicleColliders[index];
                    var wheelName = (wheel.name != null) ? wheel.name : "Unknown";
                    var wheelRadius = (wheel.radius != null) ? wheel.radius : 0.35;
                    var wheelHalfTrack = (wheel.position != null && wheel.position.length >= 3) ? wheel.position[0] : 1;
                    var wheelAxisPosition = (wheel.position != null && wheel.position.length >= 3) ? wheel.position[2] : -1;
                    // ..
                    // Raycast Wheel Script Properties
                    // ..
                    var wheelConnectionPoint = (wheel.wheelconnectionpoint != null) ? wheel.wheelconnectionpoint : 0.5;
                    var suspensionRestLength = (wheel.suspensionrestlength != null) ? wheel.suspensionrestlength : 0.3;
                    var isfrontwheel = (wheel.frontwheel != null) ? true : (wheelName.toLowerCase().indexOf("front") >= 0);
                    var wheelposition = wheelAxisPosition;
                    var wheeltracking = wheelHalfTrack;
                    var centermassx = -this._centerMass.x;
                    var centermassz = -this._centerMass.z;
                    if (BABYLON.RaycastVehicle.TempAmmoVector == null)
                        BABYLON.RaycastVehicle.TempAmmoVector = new Ammo.btVector3(0, 0, 0);
                    BABYLON.RaycastVehicle.TempAmmoVector.setValue((wheeltracking + centermassx), wheelConnectionPoint, (wheelposition + centermassz));
                    this.m_vehicle.addWheel(BABYLON.RaycastVehicle.TempAmmoVector, this.m_wheelDirectionCS0, this.m_wheelAxleCS, suspensionRestLength, wheelRadius, this.m_vehicleTuning, isfrontwheel);
                }
                if (this.m_vehicle.getNumWheels() === this.m_vehicleColliders.length) {
                    for (index = 0; index < this.m_vehicleColliders.length; index++) {
                        var wheel = this.m_vehicleColliders[index];
                        var defaultForce = (wheel.totalsuspensionforces != null) ? wheel.totalsuspensionforces : 25000; // Bullet: 6000
                        var defaultTravel = (wheel.suspensiontravelcm != null) ? wheel.suspensiontravelcm : 100; // Bullet: 500
                        var defaultRolling = (wheel.rollinfluence != null) ? wheel.rollinfluence : 0.2; // Bullet: 0.1
                        var defaultFriction = (wheel.frictionslip != null) ? wheel.frictionslip : 10; // Bullet: 10.5
                        var suspensionStiffness = (wheel.suspensionstiffness != null) ? wheel.suspensionstiffness : 50; // Bullet: 5.88
                        var suspensionCompression = (wheel.dampingcompression != null) ? wheel.dampingcompression : 2.5; // Bullet: 0.83
                        var suspensionDamping = (wheel.dampingrelaxation != null) ? wheel.dampingrelaxation : 4.5; // Bullet: 0.88
                        var wheelinfo = this.m_vehicle.getWheelInfo(index);
                        if (wheelinfo != null) {
                            wheelinfo.steeringAngle = 0;
                            wheelinfo.rotationBoost = 0;
                            wheelinfo.defaultFriction = defaultFriction;
                            wheelinfo.set_m_frictionSlip(defaultFriction);
                            wheelinfo.set_m_rollInfluence(defaultRolling);
                            wheelinfo.set_m_maxSuspensionForce(defaultForce);
                            wheelinfo.set_m_maxSuspensionTravelCm(defaultTravel);
                            wheelinfo.set_m_suspensionStiffness(suspensionStiffness);
                            wheelinfo.set_m_wheelsDampingCompression(suspensionCompression);
                            wheelinfo.set_m_wheelsDampingRelaxation(suspensionDamping);
                        }
                    }
                }
                else {
                    BABYLON.Tools.Warn("Failed to create proper number of wheels for: " + this._chassisMesh.name);
                }
            }
        };
        RaycastVehicle.prototype.updateWheelInformation = function () {
            var wheels = this.getNumWheels();
            if (wheels > 0) {
                for (var index = 0; index < wheels; index++) {
                    var wheelinfo = this.getWheelInfo(index);
                    if (wheelinfo != null) {
                        var locked = this.lockedWheelInformation(index);
                        this.updateWheelTransform(index, false);
                        // Update Wheel Information Internals
                        this.m_tempTransform = this.getWheelTransform(index);
                        this.m_tempPosition = this.m_tempTransform.getOrigin();
                        // Sync Wheel Hub Transform To Raycast Wheel
                        if (wheelinfo.transform != null) {
                            var transform = wheelinfo.transform;
                            if (transform.parent != null) {
                                // Update Wheel Hub Position
                                BABYLON.Utilities.ConvertAmmoVector3ToRef(this.m_tempPosition, this._tempVectorPos);
                                BABYLON.Utilities.InverseTransformPointToRef(transform.parent, this._tempVectorPos, this._tempVectorPos);
                                transform.position.y = this._tempVectorPos.y;
                                // Update Wheel Hub Steering
                                var steeringAngle = (wheelinfo.steeringAngle != null) ? wheelinfo.steeringAngle : 0;
                                BABYLON.Quaternion.FromEulerAnglesToRef(0, steeringAngle, 0, transform.rotationQuaternion);
                                // Update Wheel Spinner Rotation
                                if (wheelinfo.spinner != null && wheelinfo.spinner.addRotation) {
                                    if (locked === false) {
                                        var wheelrotation = 0;
                                        var deltaRotation = (wheelinfo.get_m_deltaRotation != null) ? wheelinfo.get_m_deltaRotation() : 0;
                                        var rotationBoost = (wheelinfo.rotationBoost != null) ? wheelinfo.rotationBoost : 0;
                                        if (deltaRotation < 0)
                                            wheelrotation = (deltaRotation + -rotationBoost);
                                        else
                                            wheelrotation = (deltaRotation + rotationBoost);
                                        wheelinfo.spinner.addRotation(wheelrotation, 0, 0);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        };
        RaycastVehicle.prototype.lockedWheelInformation = function (wheel) {
            var result = false;
            if (this.lockedWheelIndexes != null && this.lockedWheelIndexes.length > 0) {
                for (var index = 0; index < this.lockedWheelIndexes.length; index++) {
                    if (this.lockedWheelIndexes[index] === wheel) {
                        result = true;
                        break;
                    }
                }
            }
            return result;
        };
        RaycastVehicle.prototype.deleteWheelInformation = function () {
            var wheels = this.getNumWheels();
            if (wheels > 0) {
                for (var index = 0; index < wheels; index++) {
                    var info = this.getWheelInfo(index);
                    if (info != null) {
                        if (info.transform != null) {
                            delete info.transform;
                        }
                        if (info.spinner != null) {
                            delete info.spinner;
                        }
                        if (info.steeringAngle != null) {
                            delete info.steeringAngle;
                        }
                        if (info.rotationBoost != null) {
                            delete info.rotationBoost;
                        }
                        if (info.defaultFriction != null) {
                            delete info.defaultFriction;
                        }
                    }
                }
            }
        };
        RaycastVehicle.TempAmmoVector = null;
        return RaycastVehicle;
    }());
    BABYLON.RaycastVehicle = RaycastVehicle;
})(BABYLON || (BABYLON = {}));
var BABYLON;
(function (BABYLON) {
    /**
     * Babylon realtime reflection system pro class (Unity Style Realtime Reflection Probes)
     * @class RealtimeReflection - All rights reserved (c) 2020 Mackey Kinard
     */
    var RealtimeReflection = /** @class */ (function (_super) {
        __extends(RealtimeReflection, _super);
        function RealtimeReflection() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.renderList = null;
            _this.probeList = null;
            _this.refreshMode = 0;
            _this.cullingMask = 0;
            _this.clearFlags = 0;
            _this.probeid = 0;
            _this.useProbeList = false;
            _this.includeChildren = false;
            _this.resolution = 128;
            _this.boxPos = null;
            _this.boxSize = null;
            _this.boxProjection = false;
            return _this;
        }
        RealtimeReflection.prototype.getProbeList = function () { return this.probeList; };
        RealtimeReflection.prototype.getRenderList = function () { return this.renderList; };
        RealtimeReflection.prototype.awake = function () { this.awakeRealtimReflections(); };
        RealtimeReflection.prototype.start = function () { this.startRealtimReflections(); };
        RealtimeReflection.prototype.destroy = function () { this.destroyRealtimReflections(); };
        RealtimeReflection.prototype.awakeRealtimReflections = function () {
            this.probeid = this.getProperty("id", this.probeid);
            this.resolution = this.getProperty("resolution", this.resolution);
            this.cullingMask = this.getProperty("culling", this.cullingMask);
            this.clearFlags = this.getProperty("clearflags", this.clearFlags);
            this.refreshMode = this.getProperty("refreshmode", this.refreshMode);
            this.useProbeList = this.getProperty("useprobelist", this.useProbeList);
            this.includeChildren = this.getProperty("includechildren", this.includeChildren);
            this.boxProjection = this.getProperty("boxprojection", this.boxProjection);
            if (this.boxProjection === true) {
                var bbp = this.getProperty("boundingboxposition");
                if (bbp != null && bbp.length >= 3) {
                    this.boxPos = new BABYLON.Vector3(bbp[0], bbp[1], bbp[2]);
                }
                var bbz = this.getProperty("boundingboxsize");
                if (bbz != null && bbz.length >= 3) {
                    this.boxSize = new BABYLON.Vector3(bbz[0], bbz[1], bbz[2]);
                }
            }
        };
        RealtimeReflection.prototype.startRealtimReflections = function () {
            var _a;
            var index = 0;
            var quality = BABYLON.SceneManager.GetRenderQuality();
            var allowReflections = (quality === BABYLON.RenderQuality.High);
            if (allowReflections === true) {
                if (this.cullingMask === 0) { // Nothing
                    if (this.clearFlags === BABYLON.RealtimeReflection.SKYBOX_FLAG) {
                        var skybox = BABYLON.SceneManager.GetAmbientSkybox(this.scene);
                        if (skybox != null) {
                            if (this.renderList == null)
                                this.renderList = [];
                            this.renderList.push(skybox);
                        }
                    }
                }
                else if (this.cullingMask === -1) { // Everything
                    for (index = 0; index < this.scene.meshes.length; index++) {
                        var render = false;
                        var mesh = this.scene.meshes[index];
                        if (mesh != null) {
                            if (mesh.id === "Ambient Skybox") {
                                render = (this.clearFlags === BABYLON.RealtimeReflection.SKYBOX_FLAG);
                            }
                            else {
                                render = true;
                            }
                            if (render === true) {
                                if (this.renderList == null)
                                    this.renderList = [];
                                this.renderList.push(mesh);
                            }
                        }
                    }
                }
                else { // Parse Render List Meta Data
                    var renderListData = this.getProperty("renderlist");
                    if (renderListData != null && renderListData.length > 0) {
                        var _loop_2 = function () {
                            var renderId = renderListData[index];
                            var renderMesh = BABYLON.SceneManager.GetMeshByID(this_2.scene, renderId);
                            if (renderMesh != null) {
                                if (this_2.renderList == null)
                                    this_2.renderList = [];
                                var detailName_1 = renderMesh.name + ".Detail";
                                var detailChildren = renderMesh.getChildren(function (node) { return (node.name === detailName_1); }, true);
                                if (detailChildren != null && detailChildren.length > 0) {
                                    this_2.renderList.push(detailChildren[0]);
                                }
                                else {
                                    this_2.renderList.push(renderMesh);
                                }
                            }
                        };
                        var this_2 = this;
                        for (index = 0; index < renderListData.length; index++) {
                            _loop_2();
                        }
                    }
                    if (this.clearFlags === BABYLON.RealtimeReflection.SKYBOX_FLAG) {
                        var skybox = BABYLON.SceneManager.GetAmbientSkybox(this.scene);
                        if (skybox != null) {
                            if (this.renderList == null)
                                this.renderList = [];
                            this.renderList.push(skybox);
                        }
                    }
                }
                // ..
                // Get Probe Render List
                // ..
                if (this.useProbeList === true) {
                    var probeListData = this.getProperty("probelist");
                    if (probeListData != null && probeListData.length > 0) {
                        for (index = 0; index < probeListData.length; index++) {
                            var probeId = probeListData[index];
                            var probeMesh = BABYLON.SceneManager.GetMeshByID(this.scene, probeId);
                            if (probeMesh != null) {
                                if (this.probeList == null)
                                    this.probeList = [];
                                this.probeList.push(probeMesh);
                                if (this.includeChildren === true) {
                                    var childMeshes = probeMesh.getChildMeshes(false);
                                    for (var ii = 0; ii < childMeshes.length; ii++) {
                                        var childMesh = childMeshes[ii];
                                        this.probeList.push(childMesh);
                                    }
                                }
                            }
                        }
                    }
                }
                else {
                    var probeTag = "PROBE_" + this.probeid.toFixed(0);
                    this.probeList = this.scene.getMeshesByTags(probeTag);
                }
                if (this.probeList != null && this.probeList.length > 0) {
                    var abstractMesh = this.getAbstractMesh();
                    for (index = 0; index < this.probeList.length; index++) {
                        var probemesh = this.probeList[index];
                        var reflectionProbe = new BABYLON.ReflectionProbe(probemesh.name + ".Probe", this.resolution, this.scene);
                        reflectionProbe.refreshRate = (this.refreshMode === 0) ? BABYLON.RenderTargetTexture.REFRESHRATE_RENDER_ONCE : BABYLON.RenderTargetTexture.REFRESHRATE_RENDER_ONEVERYFRAME;
                        (_a = reflectionProbe.renderList).push.apply(_a, this.renderList);
                        if (abstractMesh != null)
                            reflectionProbe.attachToMesh(abstractMesh);
                        if (this.boxProjection === true) {
                            if (this.boxSize != null) {
                                reflectionProbe.cubeTexture.boundingBoxSize = this.boxSize;
                            }
                            if (this.boxPos != null) {
                                reflectionProbe.cubeTexture.boundingBoxPosition = this.boxPos;
                            }
                        }
                        if (probemesh.material instanceof BABYLON.MultiMaterial) {
                            var mmat1 = probemesh.material.clone(probemesh.material.name + "." + probemesh.name);
                            for (var xx = 0; xx < mmat1.subMaterials.length; xx++) {
                                var smat1 = mmat1.subMaterials[xx];
                                var subMaterial = mmat1.subMaterials[xx].clone(mmat1.subMaterials[xx].name + "_" + probemesh.name);
                                subMaterial.unfreeze();
                                subMaterial.reflectionTexture = reflectionProbe.cubeTexture;
                                mmat1.subMaterials[xx] = subMaterial;
                            }
                            probemesh.material = mmat1;
                        }
                        else {
                            var meshMaterial = probemesh.material.clone(probemesh.material.name + "." + probemesh.name);
                            meshMaterial.unfreeze();
                            meshMaterial.reflectionTexture = reflectionProbe.cubeTexture;
                            probemesh.material = meshMaterial;
                        }
                    }
                }
            }
        };
        RealtimeReflection.prototype.destroyRealtimReflections = function () {
            this.probeList = null;
            this.renderList = null;
        };
        RealtimeReflection.SKYBOX_FLAG = 1;
        return RealtimeReflection;
    }(BABYLON.ScriptComponent));
    BABYLON.RealtimeReflection = RealtimeReflection;
})(BABYLON || (BABYLON = {}));
var BABYLON;
(function (BABYLON) {
    /**
     * Babylon full rigidbody physics pro class (Native Bullet Physics 2.82)
     * @class RigidbodyPhysics - All rights reserved (c) 2020 Mackey Kinard
     */
    var RigidbodyPhysics = /** @class */ (function (_super) {
        __extends(RigidbodyPhysics, _super);
        function RigidbodyPhysics() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this._abstractMesh = null;
            _this._isKinematic = false;
            _this._maxCollisions = 4;
            _this._isPhysicsReady = false;
            _this._collisionObject = null;
            _this._centerOfMass = new BABYLON.Vector3(0, 0, 0);
            _this._tmpLinearFactor = new BABYLON.Vector3(0, 0, 0);
            _this._tmpAngularFactor = new BABYLON.Vector3(0, 0, 0);
            _this._tmpCenterOfMass = new BABYLON.Vector3(0, 0, 0);
            _this._tmpCollisionContacts = null;
            /** Register handler that is triggered when the a collision contact has entered */
            _this.onCollisionEnterObservable = new BABYLON.Observable();
            /** Register handler that is triggered when the a collision contact is active */
            _this.onCollisionStayObservable = new BABYLON.Observable();
            /** Register handler that is triggered when the a collision contact has exited */
            _this.onCollisionExitObservable = new BABYLON.Observable();
            _this.m_physicsWorld = null;
            _this.m_physicsEngine = null;
            _this.m_raycastVehicle = null;
            return _this;
        }
        Object.defineProperty(RigidbodyPhysics.prototype, "isKinematic", {
            get: function () { return this._isKinematic; },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(RigidbodyPhysics.prototype, "centerOfMass", {
            get: function () { return this._centerOfMass; },
            enumerable: false,
            configurable: true
        });
        RigidbodyPhysics.prototype.awake = function () { this.awakeRigidbodyState(); };
        RigidbodyPhysics.prototype.update = function () { this.updateRigidbodyState(); };
        RigidbodyPhysics.prototype.after = function () { this.afterRigidbodyState(); };
        RigidbodyPhysics.prototype.destroy = function () { this.destroyRigidbodyState(); };
        /////////////////////////////////////////////////
        // Protected Rigidbody Physics State Functions //
        /////////////////////////////////////////////////
        RigidbodyPhysics.prototype.awakeRigidbodyState = function () {
            this._abstractMesh = this.getAbstractMesh();
            this._isKinematic = this.getProperty("isKinematic", this._isKinematic);
            this.m_physicsWorld = BABYLON.SceneManager.GetPhysicsWorld(this.scene);
            this.m_physicsEngine = BABYLON.SceneManager.GetPhysicsEngine(this.scene);
            if (this.transform.metadata != null && this.transform.metadata.unity != null && this.transform.metadata.unity.physics != null) {
                this._centerOfMass = (this.transform.metadata.unity.physics.center != null) ? BABYLON.Utilities.ParseVector3(this.transform.metadata.unity.physics.center, this._centerOfMass) : this._centerOfMass;
            }
            //console.warn("Starting Rigidbody Physics For: " + this.transform.name);
            this.setMaxNotifications(this._maxCollisions);
            BABYLON.Utilities.ValidateTransformQuaternion(this.transform);
            this._isPhysicsReady = (this.m_physicsEngine != null && this._tmpCollisionContacts != null && this._abstractMesh != null && this._abstractMesh.physicsImpostor != null && this._abstractMesh.physicsImpostor.physicsBody != null);
            var collisionGroup = (this._isKinematic === true) ? BABYLON.CollisionFilters.StaticFilter : BABYLON.CollisionFilters.DefaultFilter;
            var collisionMask = (this._isKinematic === true) ? BABYLON.CollisionFilters.AllFilter ^ BABYLON.CollisionFilters.StaticFilter : BABYLON.CollisionFilters.AllFilter;
            this.setCollisionFilterGroup(collisionGroup);
            this.setCollisionFilterMask(collisionMask);
            this.resetBodyCollisionContacts();
        };
        RigidbodyPhysics.prototype.updateRigidbodyState = function () {
            this.syncronizeVehicleController();
        };
        RigidbodyPhysics.prototype.afterRigidbodyState = function () {
            this.parseBodyCollisionContacts();
            this.resetBodyCollisionContacts();
        };
        RigidbodyPhysics.prototype.destroyRigidbodyState = function () {
            this.m_physicsWorld = null;
            this.m_physicsEngine = null;
            if (this.m_raycastVehicle != null) {
                if (this.m_raycastVehicle.dispose) {
                    this.m_raycastVehicle.dispose();
                }
                this.m_raycastVehicle = null;
            }
            this.onCollisionEnterObservable.clear();
            this.onCollisionEnterObservable = null;
            this.onCollisionStayObservable.clear();
            this.onCollisionStayObservable = null;
            this.onCollisionExitObservable.clear();
            this.onCollisionExitObservable = null;
            this._tmpCollisionContacts = null;
            this._collisionObject = null;
            this._abstractMesh = null;
        };
        //////////////////////////////////////////////////
        // Rigidbody Physics Life Cycle Event Functions //
        //////////////////////////////////////////////////
        RigidbodyPhysics.prototype.syncronizeVehicleController = function () {
            if (this.m_raycastVehicle != null) {
                if (this.m_raycastVehicle.updateWheelInformation) {
                    this.m_raycastVehicle.updateWheelInformation();
                }
            }
        };
        RigidbodyPhysics.prototype.parseBodyCollisionContacts = function () {
            if (this._isPhysicsReady === true) {
                var hasEnterObservers = this.onCollisionEnterObservable.hasObservers();
                var hasStayObservers = this.onCollisionStayObservable.hasObservers();
                var hasExitObservers = this.onCollisionExitObservable.hasObservers();
                if (hasEnterObservers || hasStayObservers || hasExitObservers) {
                    var index = 0; // Note: Flag All Collision List Items For End Contact State
                    for (index = 0; index < this._tmpCollisionContacts.length; index++) {
                        this._tmpCollisionContacts[index].reset = true;
                    }
                    // ..
                    // Parse Overlapping Body Contact Objects
                    // ..
                    var collisionCount = 0;
                    if (this._abstractMesh.physicsImpostor.tmpCollisionObjects != null) {
                        var tmpCollisionObjectMap = this._abstractMesh.physicsImpostor.tmpCollisionObjects;
                        for (var contactKey in tmpCollisionObjectMap) {
                            var foundindex = -1;
                            var contactMesh = tmpCollisionObjectMap[contactKey];
                            for (index = 0; index < this._tmpCollisionContacts.length; index++) {
                                var check = this._tmpCollisionContacts[index];
                                if (check.mesh != null && check.mesh === contactMesh) {
                                    check.state = 1;
                                    check.reset = false;
                                    foundindex = index;
                                    break;
                                }
                            }
                            if (foundindex === -1) {
                                for (index = 0; index < this._tmpCollisionContacts.length; index++) {
                                    var insert = this._tmpCollisionContacts[index];
                                    if (insert.mesh == null) {
                                        insert.mesh = contactMesh;
                                        insert.state = 0;
                                        insert.reset = false;
                                        break;
                                    }
                                }
                            }
                            collisionCount++;
                            if (collisionCount > this._maxCollisions)
                                break;
                        }
                    }
                    // ..
                    // Dispatch Body Collision Contact State
                    // ..
                    for (index = 0; index < this._tmpCollisionContacts.length; index++) {
                        var info = this._tmpCollisionContacts[index];
                        if (info.reset === true) {
                            // Dispatch On Collision Exit Event
                            if (hasExitObservers && info.mesh != null) {
                                this.onCollisionExitObservable.notifyObservers(info.mesh);
                            }
                            // Reset Collision Contact Info Item
                            info.mesh = null;
                            info.state = 0;
                            info.reset = false;
                        }
                        else {
                            if (info.state === 0) {
                                // Dispatch On Collision Enter Event
                                if (hasEnterObservers && info.mesh != null) {
                                    this.onCollisionEnterObservable.notifyObservers(info.mesh);
                                }
                            }
                            else {
                                // Dispatch On Collision Stay Event
                                if (hasStayObservers && info.mesh != null) {
                                    this.onCollisionStayObservable.notifyObservers(info.mesh);
                                }
                            }
                        }
                    }
                }
            }
        };
        RigidbodyPhysics.prototype.resetBodyCollisionContacts = function () {
            if (this._isPhysicsReady === true) {
                var hasEnterObservers = this.onCollisionEnterObservable.hasObservers();
                var hasStayObservers = this.onCollisionStayObservable.hasObservers();
                var hasExitObservers = this.onCollisionExitObservable.hasObservers();
                if (hasEnterObservers || hasStayObservers || hasExitObservers) {
                    this._abstractMesh.physicsImpostor.tmpCollisionObjects = {};
                }
                else {
                    this._abstractMesh.physicsImpostor.tmpCollisionObjects = null;
                }
            }
        };
        ////////////////////////////////////////////////////////////////////////////////////
        // Rigidbody Physics Gravity Advanced Helper Functions
        ////////////////////////////////////////////////////////////////////////////////////
        /** Sets entity gravity value using physics impostor body. */
        RigidbodyPhysics.prototype.setGravity = function (gravity) {
            if (this._abstractMesh != null && this._abstractMesh.physicsImpostor != null && this._abstractMesh.physicsImpostor.physicsBody != null && this._abstractMesh.physicsImpostor.physicsBody.setGravity) {
                if (gravity != null) {
                    if (BABYLON.RigidbodyPhysics.TempAmmoVector == null)
                        BABYLON.RigidbodyPhysics.TempAmmoVector = new Ammo.btVector3(0, 0, 0);
                    BABYLON.RigidbodyPhysics.TempAmmoVector.setValue(gravity.x, gravity.y, gravity.z);
                    this._abstractMesh.physicsImpostor.physicsBody.setGravity(BABYLON.RigidbodyPhysics.TempAmmoVector);
                }
            }
        };
        /** Gets entity gravity value using physics impostor body. */
        RigidbodyPhysics.prototype.getGravity = function () {
            var result = new BABYLON.Vector3(0, 0, 0);
            this.getGravityToRef(result);
            return result;
        };
        /** Gets entity gravity value using physics impostor body. */
        RigidbodyPhysics.prototype.getGravityToRef = function (result) {
            if (this._abstractMesh != null && this._abstractMesh.physicsImpostor != null && this._abstractMesh.physicsImpostor.physicsBody != null && this._abstractMesh.physicsImpostor.physicsBody.getGravity) {
                var gravity = this._abstractMesh.physicsImpostor.physicsBody.getGravity();
                BABYLON.Utilities.ConvertAmmoVector3ToRef(gravity, result);
            }
        };
        ////////////////////////////////////////////////////////////////////////////////////
        // Rigidbody Physics Impostor Helper Functions -  TODO - Use Native Physics API - ???
        ////////////////////////////////////////////////////////////////////////////////////
        /** Gets mass of entity using physics impostor. */
        RigidbodyPhysics.prototype.getMass = function () {
            var result = 0;
            if (this._abstractMesh != null && this._abstractMesh.physicsImpostor != null) {
                result = this._abstractMesh.physicsImpostor.mass;
            }
            return result;
        };
        /** Sets mass to entity using physics impostor. */
        RigidbodyPhysics.prototype.setMass = function (mass) {
            if (this._abstractMesh != null && this._abstractMesh.physicsImpostor != null) {
                if (this._abstractMesh.physicsImpostor.mass !== mass) {
                    this._abstractMesh.physicsImpostor.mass = mass;
                }
            }
        };
        /** Gets entity friction level using physics impostor. */
        RigidbodyPhysics.prototype.getFriction = function () {
            var result = 0;
            if (this._abstractMesh != null && this._abstractMesh.physicsImpostor != null) {
                result = this._abstractMesh.physicsImpostor.friction;
            }
            return result;
        };
        /** Applies friction to entity using physics impostor. */
        RigidbodyPhysics.prototype.setFriction = function (friction) {
            if (this._abstractMesh != null && this._abstractMesh.physicsImpostor != null) {
                if (this._abstractMesh.physicsImpostor.friction !== friction) {
                    this._abstractMesh.physicsImpostor.friction = friction;
                }
            }
        };
        /** Gets restitution of entity using physics impostor. */
        RigidbodyPhysics.prototype.getRestitution = function () {
            var result = 0;
            if (this._abstractMesh != null && this._abstractMesh.physicsImpostor != null) {
                result = this._abstractMesh.physicsImpostor.restitution;
            }
            return result;
        };
        /** Sets restitution to entity using physics impostor. */
        RigidbodyPhysics.prototype.setRestitution = function (restitution) {
            if (this._abstractMesh != null && this._abstractMesh.physicsImpostor != null) {
                if (this._abstractMesh.physicsImpostor.restitution !== restitution) {
                    this._abstractMesh.physicsImpostor.restitution = restitution;
                }
            }
        };
        /** Gets entity linear velocity using physics impostor. */
        RigidbodyPhysics.prototype.getLinearVelocity = function () {
            var result = null;
            if (this._abstractMesh != null && this._abstractMesh.physicsImpostor != null) {
                result = this._abstractMesh.physicsImpostor.getLinearVelocity();
            }
            return result;
        };
        /** Sets entity linear velocity using physics impostor. */
        RigidbodyPhysics.prototype.setLinearVelocity = function (velocity) {
            if (this._abstractMesh != null && this._abstractMesh.physicsImpostor != null) {
                if (velocity != null)
                    this._abstractMesh.physicsImpostor.setLinearVelocity(velocity);
            }
        };
        /** Gets entity angular velocity using physics impostor. */
        RigidbodyPhysics.prototype.getAngularVelocity = function () {
            var result = null;
            if (this._abstractMesh != null && this._abstractMesh.physicsImpostor != null) {
                result = this._abstractMesh.physicsImpostor.getAngularVelocity();
            }
            return result;
        };
        /** Sets entity angular velocity using physics impostor. */
        RigidbodyPhysics.prototype.setAngularVelocity = function (velocity) {
            if (this._abstractMesh != null && this._abstractMesh.physicsImpostor != null) {
                if (velocity != null)
                    this._abstractMesh.physicsImpostor.setAngularVelocity(velocity);
            }
        };
        ////////////////////////////////////////////////////////////////////////////////////
        // Rigidbody Physics Transform Helper Functions
        ////////////////////////////////////////////////////////////////////////////////////
        /** Gets the native physics world transform object using physics impostor body. (Ammo.btTransform) */
        RigidbodyPhysics.prototype.getWorldTransform = function () {
            var result = null;
            if (this._abstractMesh != null && this._abstractMesh.physicsImpostor != null && this._abstractMesh.physicsImpostor.physicsBody != null) {
                if (this._collisionObject == null)
                    this._collisionObject = Ammo.castObject(this._abstractMesh.physicsImpostor.physicsBody, Ammo.btCollisionObject);
                if (this._collisionObject != null && this._collisionObject.getWorldTransform) {
                    result = this._collisionObject.getWorldTransform();
                }
            }
            return result;
        };
        /** sets the native physics world transform object using physics impostor body. (Ammo.btTransform) */
        RigidbodyPhysics.prototype.setWorldTransform = function (btTransform) {
            var result = null;
            if (this._abstractMesh != null && this._abstractMesh.physicsImpostor != null && this._abstractMesh.physicsImpostor.physicsBody != null) {
                if (this._collisionObject == null)
                    this._collisionObject = Ammo.castObject(this._abstractMesh.physicsImpostor.physicsBody, Ammo.btCollisionObject);
                if (this._collisionObject != null && this._collisionObject.setWorldTransform) {
                    this._collisionObject.setWorldTransform(btTransform);
                }
                if (this._abstractMesh.physicsImpostor.mass === 0 && this._abstractMesh.physicsImpostor.physicsBody.getMotionState) {
                    var motionState = this._abstractMesh.physicsImpostor.physicsBody.getMotionState();
                    if (motionState != null && motionState.setWorldTransform) {
                        motionState.setWorldTransform(btTransform);
                    }
                }
            }
            return result;
        };
        ////////////////////////////////////////////////////////////////////////////////////
        // Rigidbody Applied Physics Movement Functions
        ////////////////////////////////////////////////////////////////////////////////////
        RigidbodyPhysics.prototype.clearForces = function () {
            if (this._abstractMesh != null && this._abstractMesh.physicsImpostor != null && this._abstractMesh.physicsImpostor.physicsBody != null && this._abstractMesh.physicsImpostor.physicsBody.clearForces) {
                this._abstractMesh.physicsImpostor.physicsBody.clearForces();
            }
        };
        ////////////////////////////////////////////////// 
        // TODO - Use Function Specific Temp Ammo Buffer //
        ////////////////////////////////////////////////// 
        RigidbodyPhysics.prototype.applyTorque = function (torque) {
            if (this._abstractMesh != null && this._abstractMesh.physicsImpostor != null && this._abstractMesh.physicsImpostor.physicsBody != null && this._abstractMesh.physicsImpostor.physicsBody.applyTorque) {
                if (torque != null) {
                    if (BABYLON.RigidbodyPhysics.TempAmmoVector == null)
                        BABYLON.RigidbodyPhysics.TempAmmoVector = new Ammo.btVector3(0, 0, 0);
                    BABYLON.RigidbodyPhysics.TempAmmoVector.setValue(torque.x, torque.y, torque.z);
                    this._abstractMesh.physicsImpostor.physicsBody.applyTorque(BABYLON.RigidbodyPhysics.TempAmmoVector);
                }
            }
        };
        RigidbodyPhysics.prototype.applyLocalTorque = function (torque) {
            if (this._abstractMesh != null && this._abstractMesh.physicsImpostor != null && this._abstractMesh.physicsImpostor.physicsBody != null && this._abstractMesh.physicsImpostor.physicsBody.applyLocalTorque) {
                if (torque != null) {
                    if (BABYLON.RigidbodyPhysics.TempAmmoVector == null)
                        BABYLON.RigidbodyPhysics.TempAmmoVector = new Ammo.btVector3(0, 0, 0);
                    BABYLON.RigidbodyPhysics.TempAmmoVector.setValue(torque.x, torque.y, torque.z);
                    this._abstractMesh.physicsImpostor.physicsBody.applyLocalTorque(BABYLON.RigidbodyPhysics.TempAmmoVector);
                }
            }
        };
        RigidbodyPhysics.prototype.applyImpulse = function (impulse, rel_pos) {
            if (this._abstractMesh != null && this._abstractMesh.physicsImpostor != null && this._abstractMesh.physicsImpostor.physicsBody != null && this._abstractMesh.physicsImpostor.physicsBody.applyImpulse) {
                if (impulse != null) {
                    if (BABYLON.RigidbodyPhysics.TempAmmoVector == null)
                        BABYLON.RigidbodyPhysics.TempAmmoVector = new Ammo.btVector3(0, 0, 0);
                    if (BABYLON.RigidbodyPhysics.TempAmmoVectorAux == null)
                        BABYLON.RigidbodyPhysics.TempAmmoVectorAux = new Ammo.btVector3(0, 0, 0);
                    BABYLON.RigidbodyPhysics.TempAmmoVector.setValue(impulse.x, impulse.y, impulse.z);
                    BABYLON.RigidbodyPhysics.TempAmmoVectorAux.setValue(rel_pos.x, rel_pos.y, rel_pos.z);
                    this._abstractMesh.physicsImpostor.physicsBody.applyImpulse(BABYLON.RigidbodyPhysics.TempAmmoVector, BABYLON.RigidbodyPhysics.TempAmmoVectorAux);
                }
            }
        };
        RigidbodyPhysics.prototype.applyCentralImpulse = function (impulse) {
            if (this._abstractMesh != null && this._abstractMesh.physicsImpostor != null && this._abstractMesh.physicsImpostor.physicsBody != null && this._abstractMesh.physicsImpostor.physicsBody.applyCentralImpulse) {
                if (impulse != null) {
                    if (BABYLON.RigidbodyPhysics.TempAmmoVector == null)
                        BABYLON.RigidbodyPhysics.TempAmmoVector = new Ammo.btVector3(0, 0, 0);
                    BABYLON.RigidbodyPhysics.TempAmmoVector.setValue(impulse.x, impulse.y, impulse.z);
                    this._abstractMesh.physicsImpostor.physicsBody.applyCentralImpulse(BABYLON.RigidbodyPhysics.TempAmmoVector);
                }
            }
        };
        RigidbodyPhysics.prototype.applyTorqueImpulse = function (torque) {
            if (this._abstractMesh != null && this._abstractMesh.physicsImpostor != null && this._abstractMesh.physicsImpostor.physicsBody != null && this._abstractMesh.physicsImpostor.physicsBody.applyTorqueImpulse) {
                if (torque != null) {
                    if (BABYLON.RigidbodyPhysics.TempAmmoVector == null)
                        BABYLON.RigidbodyPhysics.TempAmmoVector = new Ammo.btVector3(0, 0, 0);
                    BABYLON.RigidbodyPhysics.TempAmmoVector.setValue(torque.x, torque.y, torque.z);
                    this._abstractMesh.physicsImpostor.physicsBody.applyTorqueImpulse(BABYLON.RigidbodyPhysics.TempAmmoVector);
                }
            }
        };
        RigidbodyPhysics.prototype.applyForce = function (force, rel_pos) {
            if (this._abstractMesh != null && this._abstractMesh.physicsImpostor != null && this._abstractMesh.physicsImpostor.physicsBody != null && this._abstractMesh.physicsImpostor.physicsBody.applyForce) {
                if (force != null) {
                    if (BABYLON.RigidbodyPhysics.TempAmmoVector == null)
                        BABYLON.RigidbodyPhysics.TempAmmoVector = new Ammo.btVector3(0, 0, 0);
                    if (BABYLON.RigidbodyPhysics.TempAmmoVectorAux == null)
                        BABYLON.RigidbodyPhysics.TempAmmoVectorAux = new Ammo.btVector3(0, 0, 0);
                    BABYLON.RigidbodyPhysics.TempAmmoVector.setValue(force.x, force.y, force.z);
                    BABYLON.RigidbodyPhysics.TempAmmoVectorAux.setValue(rel_pos.x, rel_pos.y, rel_pos.z);
                    this._abstractMesh.physicsImpostor.physicsBody.applyForce(BABYLON.RigidbodyPhysics.TempAmmoVector, BABYLON.RigidbodyPhysics.TempAmmoVectorAux);
                }
            }
        };
        RigidbodyPhysics.prototype.applyCentralForce = function (force) {
            if (this._abstractMesh != null && this._abstractMesh.physicsImpostor != null && this._abstractMesh.physicsImpostor.physicsBody != null && this._abstractMesh.physicsImpostor.physicsBody.applyCentralForce) {
                if (force != null) {
                    if (BABYLON.RigidbodyPhysics.TempAmmoVector == null)
                        BABYLON.RigidbodyPhysics.TempAmmoVector = new Ammo.btVector3(0, 0, 0);
                    BABYLON.RigidbodyPhysics.TempAmmoVector.setValue(force.x, force.y, force.z);
                    this._abstractMesh.physicsImpostor.physicsBody.applyCentralForce(BABYLON.RigidbodyPhysics.TempAmmoVector);
                }
            }
        };
        RigidbodyPhysics.prototype.applyCentralLocalForce = function (force) {
            if (this._abstractMesh != null && this._abstractMesh.physicsImpostor != null && this._abstractMesh.physicsImpostor.physicsBody != null && this._abstractMesh.physicsImpostor.physicsBody.applyCentralLocalForce) {
                if (force != null) {
                    if (BABYLON.RigidbodyPhysics.TempAmmoVector == null)
                        BABYLON.RigidbodyPhysics.TempAmmoVector = new Ammo.btVector3(0, 0, 0);
                    BABYLON.RigidbodyPhysics.TempAmmoVector.setValue(force.x, force.y, force.z);
                    this._abstractMesh.physicsImpostor.physicsBody.applyCentralLocalForce(BABYLON.RigidbodyPhysics.TempAmmoVector);
                }
            }
        };
        /** gets rigidbody center of mass */
        RigidbodyPhysics.prototype.getCenterOfMassTransform = function () {
            if (this._abstractMesh != null && this._abstractMesh.physicsImpostor != null && this._abstractMesh.physicsImpostor.physicsBody != null && this._abstractMesh.physicsImpostor.physicsBody.getCenterOfMassTransform) {
                var bttransform = this._abstractMesh.physicsImpostor.physicsBody.getCenterOfMassTransform();
                var btposition = bttransform.getOrigin();
                this._tmpCenterOfMass.set(btposition.x(), btposition.y(), btposition.z());
            }
            return this._tmpCenterOfMass;
        };
        /** Sets rigidbody center of mass */
        RigidbodyPhysics.prototype.setCenterOfMassTransform = function (center) {
            if (this._abstractMesh != null && this._abstractMesh.physicsImpostor != null && this._abstractMesh.physicsImpostor.physicsBody != null && this._abstractMesh.physicsImpostor.physicsBody.setCenterOfMassTransform) {
                if (center != null) {
                    if (BABYLON.RigidbodyPhysics.TempAmmoVector == null)
                        BABYLON.RigidbodyPhysics.TempAmmoVector = new Ammo.btVector3(0, 0, 0);
                    BABYLON.RigidbodyPhysics.TempAmmoVector.setValue(center.x, center.y, center.z);
                    if (BABYLON.RigidbodyPhysics.TempCenterTransform == null)
                        BABYLON.RigidbodyPhysics.TempCenterTransform = new Ammo.btTransform();
                    BABYLON.RigidbodyPhysics.TempCenterTransform.setIdentity();
                    BABYLON.RigidbodyPhysics.TempCenterTransform.setOrigin(BABYLON.RigidbodyPhysics.TempAmmoVector);
                    this._abstractMesh.physicsImpostor.physicsBody.setCenterOfMassTransform(BABYLON.RigidbodyPhysics.TempCenterTransform);
                }
            }
        };
        ////////////////////////////////////////////////////////////////////////////////////
        // Rigidbody Physics Native Body Helper Functions
        ////////////////////////////////////////////////////////////////////////////////////
        /** Gets entity linear factor using physics impostor body. */
        RigidbodyPhysics.prototype.getLinearFactor = function () {
            if (this._abstractMesh != null && this._abstractMesh.physicsImpostor != null && this._abstractMesh.physicsImpostor.physicsBody != null && this._abstractMesh.physicsImpostor.physicsBody.getLinearFactor) {
                var linearFactor = this._abstractMesh.physicsImpostor.physicsBody.getLinearFactor();
                this._tmpLinearFactor.set(linearFactor.x(), linearFactor.y(), linearFactor.z());
            }
            return this._tmpLinearFactor;
        };
        /** Sets entity linear factor using physics impostor body. */
        RigidbodyPhysics.prototype.setLinearFactor = function (factor) {
            if (this._abstractMesh != null && this._abstractMesh.physicsImpostor != null && this._abstractMesh.physicsImpostor.physicsBody != null && this._abstractMesh.physicsImpostor.physicsBody.setLinearFactor) {
                if (BABYLON.RigidbodyPhysics.TempAmmoVector == null)
                    BABYLON.RigidbodyPhysics.TempAmmoVector = new Ammo.btVector3(0, 0, 0);
                BABYLON.RigidbodyPhysics.TempAmmoVector.setValue(factor.x, factor.y, factor.z);
                this._abstractMesh.physicsImpostor.physicsBody.setLinearFactor(BABYLON.RigidbodyPhysics.TempAmmoVector);
            }
        };
        /** Gets entity angular factor using physics impostor body. */
        RigidbodyPhysics.prototype.getAngularFactor = function () {
            if (this._abstractMesh != null && this._abstractMesh.physicsImpostor != null && this._abstractMesh.physicsImpostor.physicsBody != null && this._abstractMesh.physicsImpostor.physicsBody.getAngularFactor) {
                var angularFactor = this._abstractMesh.physicsImpostor.physicsBody.getAngularFactor();
                this._tmpAngularFactor.set(angularFactor.x(), angularFactor.y(), angularFactor.z());
            }
            return this._tmpAngularFactor;
        };
        /** Sets entity angular factor using physics impostor body. */
        RigidbodyPhysics.prototype.setAngularFactor = function (factor) {
            if (this._abstractMesh != null && this._abstractMesh.physicsImpostor != null && this._abstractMesh.physicsImpostor.physicsBody != null && this._abstractMesh.physicsImpostor.physicsBody.setAngularFactor) {
                if (BABYLON.RigidbodyPhysics.TempAmmoVector == null)
                    BABYLON.RigidbodyPhysics.TempAmmoVector = new Ammo.btVector3(0, 0, 0);
                BABYLON.RigidbodyPhysics.TempAmmoVector.setValue(factor.x, factor.y, factor.z);
                this._abstractMesh.physicsImpostor.physicsBody.setAngularFactor(BABYLON.RigidbodyPhysics.TempAmmoVector);
            }
        };
        /** Gets entity angular damping using physics impostor body. */
        RigidbodyPhysics.prototype.getAngularDamping = function () {
            var result = 0;
            if (this._abstractMesh != null && this._abstractMesh.physicsImpostor != null && this._abstractMesh.physicsImpostor.physicsBody != null && this._abstractMesh.physicsImpostor.physicsBody.getAngularDamping) {
                result = this._abstractMesh.physicsImpostor.physicsBody.getAngularDamping();
            }
            return result;
        };
        /** Gets entity linear damping using physics impostor body. */
        RigidbodyPhysics.prototype.getLinearDamping = function () {
            var result = 0;
            if (this._abstractMesh != null && this._abstractMesh.physicsImpostor != null && this._abstractMesh.physicsImpostor.physicsBody != null && this._abstractMesh.physicsImpostor.physicsBody.getLinearDamping) {
                result = this._abstractMesh.physicsImpostor.physicsBody.getLinearDamping();
            }
            return result;
        };
        /** Sets entity drag damping using physics impostor body. */
        RigidbodyPhysics.prototype.setDamping = function (linear, angular) {
            if (this._abstractMesh != null && this._abstractMesh.physicsImpostor != null && this._abstractMesh.physicsImpostor.physicsBody != null && this._abstractMesh.physicsImpostor.physicsBody.setDamping) {
                this._abstractMesh.physicsImpostor.physicsBody.setDamping(linear, angular);
            }
        };
        /** Sets entity sleeping threshold using physics impostor body. */
        RigidbodyPhysics.prototype.setSleepingThresholds = function (linear, angular) {
            if (this._abstractMesh != null && this._abstractMesh.physicsImpostor != null && this._abstractMesh.physicsImpostor.physicsBody != null && this._abstractMesh.physicsImpostor.physicsBody.setSleepingThresholds) {
                this._abstractMesh.physicsImpostor.physicsBody.setSleepingThresholds(linear, angular);
            }
        };
        ////////////////////////////////////////////////////////////////////////////////////
        // Rigidbody Physics Native Advanced Helper Functions
        ////////////////////////////////////////////////////////////////////////////////////
        /** Checks if rigidbody has wheel collider metadata for the entity. Note: Wheel collider metadata informaion is required for vehicle control. */
        RigidbodyPhysics.prototype.hasWheelColliders = function () {
            return (this._isPhysicsReady === true && this._abstractMesh.metadata != null && this._abstractMesh.metadata.unity != null && this._abstractMesh.metadata.unity.wheels != null);
        };
        /** Sets the maximum number of simultaneous contact notfications to dispatch per frame. Defaults value is 4. (Advanved Use Only) */
        RigidbodyPhysics.prototype.setMaxNotifications = function (max) {
            this._maxCollisions = max;
            this._tmpCollisionContacts = [];
            for (var index = 0; index < this._maxCollisions; index++) {
                this._tmpCollisionContacts.push(new CollisionContactInfo());
            }
        };
        /** Sets entity collision activation state using physics impostor body. (Advanved Use Only) */
        RigidbodyPhysics.prototype.setActivationState = function (state) {
            if (this._abstractMesh != null && this._abstractMesh.physicsImpostor != null && this._abstractMesh.physicsImpostor.physicsBody != null) {
                if (this._collisionObject == null)
                    this._collisionObject = Ammo.castObject(this._abstractMesh.physicsImpostor.physicsBody, Ammo.btCollisionObject);
                if (this._collisionObject != null && this._collisionObject.setActivationState) {
                    this._collisionObject.setActivationState(state);
                }
            }
        };
        /** Gets entity collision filter group using physics impostor body. (Advanved Use Only) */
        RigidbodyPhysics.prototype.getCollisionFilterGroup = function () {
            var result = -1;
            if (this._abstractMesh != null && this._abstractMesh.physicsImpostor != null && this._abstractMesh.physicsImpostor.physicsBody != null && this._abstractMesh.physicsImpostor.physicsBody.getBroadphaseProxy) {
                result = this._abstractMesh.physicsImpostor.physicsBody.getBroadphaseProxy().get_m_collisionFilterGroup();
            }
            return result;
        };
        /** Sets entity collision filter group using physics impostor body. (Advanved Use Only) */
        RigidbodyPhysics.prototype.setCollisionFilterGroup = function (group) {
            if (this._abstractMesh != null && this._abstractMesh.physicsImpostor != null && this._abstractMesh.physicsImpostor.physicsBody != null && this._abstractMesh.physicsImpostor.physicsBody.getBroadphaseProxy) {
                this._abstractMesh.physicsImpostor.physicsBody.getBroadphaseProxy().set_m_collisionFilterGroup(group);
            }
        };
        /** Gets entity collision filter mask using physics impostor body. (Advanved Use Only) */
        RigidbodyPhysics.prototype.getCollisionFilterMask = function () {
            var result = -1;
            if (this._abstractMesh != null && this._abstractMesh.physicsImpostor != null && this._abstractMesh.physicsImpostor.physicsBody != null && this._abstractMesh.physicsImpostor.physicsBody.getBroadphaseProxy) {
                result = this._abstractMesh.physicsImpostor.physicsBody.getBroadphaseProxy().get_m_collisionFilterMask();
            }
            return result;
        };
        /** Sets entity collision filter mask using physics impostor body. (Advanved Use Only) */
        RigidbodyPhysics.prototype.setCollisionFilterMask = function (mask) {
            if (this._abstractMesh != null && this._abstractMesh.physicsImpostor != null && this._abstractMesh.physicsImpostor.physicsBody != null && this._abstractMesh.physicsImpostor.physicsBody.getBroadphaseProxy) {
                this._abstractMesh.physicsImpostor.physicsBody.getBroadphaseProxy().set_m_collisionFilterMask(mask);
            }
        };
        /** Gets the entity collision shape type using physics impostor body. (Advanved Use Only) */
        RigidbodyPhysics.prototype.getCollisionShapeType = function () {
            var result = -1;
            if (this._abstractMesh != null && this._abstractMesh.physicsImpostor != null && this._abstractMesh.physicsImpostor.physicsBody != null) {
                if (this._collisionObject == null)
                    this._collisionObject = Ammo.castObject(this._abstractMesh.physicsImpostor.physicsBody, Ammo.btCollisionObject);
                if (this._collisionObject != null) {
                    var collisionShape = this._collisionObject.getCollisionShape();
                    if (collisionShape != null && collisionShape.getShapeType) {
                        result = collisionShape.getShapeType();
                    }
                }
            }
            return result;
        };
        /** Gets the entity collision shape margin using physics impostor body. (Advanved Use Only) */
        RigidbodyPhysics.prototype.getCollisionShapeMargin = function () {
            var result = -1;
            if (this._abstractMesh != null && this._abstractMesh.physicsImpostor != null && this._abstractMesh.physicsImpostor.physicsBody != null) {
                if (this._collisionObject == null)
                    this._collisionObject = Ammo.castObject(this._abstractMesh.physicsImpostor.physicsBody, Ammo.btCollisionObject);
                if (this._collisionObject != null) {
                    var collisionShape = this._collisionObject.getCollisionShape();
                    if (collisionShape != null && collisionShape.getMargin) {
                        result = collisionShape.getMargin();
                    }
                }
            }
            return result;
        };
        /** Sets entity collision shape margin using physics impostor body. (Advanved Use Only) */
        RigidbodyPhysics.prototype.setCollisionShapeMargin = function (margin) {
            if (this._abstractMesh != null && this._abstractMesh.physicsImpostor != null && this._abstractMesh.physicsImpostor.physicsBody != null) {
                if (this._collisionObject == null)
                    this._collisionObject = Ammo.castObject(this._abstractMesh.physicsImpostor.physicsBody, Ammo.btCollisionObject);
                if (this._collisionObject != null) {
                    var collisionShape = this._collisionObject.getCollisionShape();
                    if (collisionShape != null && collisionShape.setMargin) {
                        collisionShape.setMargin(margin);
                    }
                }
            }
        };
        /** Gets the entity contact processing threshold using physics impostor body. (Advanved Use Only) */
        /* DEPRECIATED: TODO - Must Expose This Function In Ammo.idl
        public getContactProcessingThreshold():number {
            let result:number = -1;
            if (this._abstractMesh != null && this._abstractMesh.physicsImpostor != null && this._abstractMesh.physicsImpostor.physicsBody != null) {
                if (this._collisionObject == null) this._collisionObject = Ammo.castObject(this._abstractMesh.physicsImpostor.physicsBody, Ammo.btCollisionObject);
                if (this._collisionObject != null && this._collisionObject.getContactProcessingThreshold) {
                    result = this._collisionObject.getContactProcessingThreshold();
                }
            }
            return result;
        }*/
        /** Sets entity contact processing threshold using physics impostor body. (Advanved Use Only) */
        RigidbodyPhysics.prototype.setContactProcessingThreshold = function (threshold) {
            if (this._abstractMesh != null && this._abstractMesh.physicsImpostor != null && this._abstractMesh.physicsImpostor.physicsBody != null) {
                if (this._collisionObject == null)
                    this._collisionObject = Ammo.castObject(this._abstractMesh.physicsImpostor.physicsBody, Ammo.btCollisionObject);
                if (this._collisionObject != null && this._collisionObject.setContactProcessingThreshold) {
                    this._collisionObject.setContactProcessingThreshold(threshold);
                }
            }
        };
        // ************************************ //
        // * Physics Physics Helper Functions * //
        // ************************************ //
        /** TODO */
        RigidbodyPhysics.CreatePhysicsMetadata = function (mass, drag, angularDrag, centerMass) {
            if (drag === void 0) { drag = 0.0; }
            if (angularDrag === void 0) { angularDrag = 0.05; }
            if (centerMass === void 0) { centerMass = null; }
            var center = (centerMass != null) ? centerMass : new BABYLON.Vector3(0, 0, 0);
            return {
                "type": "rigidbody",
                "mass": mass,
                "ldrag": drag,
                "adrag": angularDrag,
                "center": {
                    "x": center.x,
                    "y": center.y,
                    "z": center.z
                }
            };
        };
        /** TODO */
        RigidbodyPhysics.CreateCollisionMetadata = function (type, trigger, convexmesh, restitution, dynamicfriction, staticfriction) {
            if (trigger === void 0) { trigger = false; }
            if (convexmesh === void 0) { convexmesh = false; }
            if (restitution === void 0) { restitution = 0.0; }
            if (dynamicfriction === void 0) { dynamicfriction = 0.6; }
            if (staticfriction === void 0) { staticfriction = 0.6; }
            return {
                "type": type,
                "trigger": trigger,
                "convexmesh": convexmesh,
                "restitution": restitution,
                "dynamicfriction": dynamicfriction,
                "staticfriction": staticfriction,
                "wheelinformation": null
            };
        };
        /** TODO */
        RigidbodyPhysics.CreatePhysicsProperties = function (mass, drag, angularDrag, useGravity, isKinematic) {
            if (drag === void 0) { drag = 0.0; }
            if (angularDrag === void 0) { angularDrag = 0.05; }
            if (useGravity === void 0) { useGravity = true; }
            if (isKinematic === void 0) { isKinematic = false; }
            return {
                "mass": mass,
                "drag": drag,
                "angularDrag": angularDrag,
                "useGravity": useGravity,
                "isKinematic": isKinematic
            };
        };
        /** TODO */
        RigidbodyPhysics.SetupPhysicsComponent = function (scene, entity) {
            // console.warn("Setup Physics Component: " + entity.name);
            // console.log(entity);
            var metadata = (entity.metadata != null && entity.metadata.unity != null) ? entity.metadata.unity : null;
            if (metadata != null && (metadata.physics != null || metadata.collision != null)) {
                // Physics Metadata
                var hasphysics = (metadata.physics != null);
                var isroot = (metadata.physics != null && metadata.physics.root != null) ? metadata.physics.root : false;
                var mass = (metadata.physics != null && metadata.physics.mass != null) ? metadata.physics.mass : 0;
                var isstatic = (mass === 0);
                // Create Physics Impostor Node
                if (hasphysics === true) {
                    if (isroot) {
                        var fwheels_1 = null;
                        var fdynamicfriction_1 = 0;
                        var fstaticfriction_1 = 0;
                        var frestitution_1 = 0;
                        var ftrigger_1 = false;
                        var fcount_1 = 0;
                        // Note: Bullet Physics Center Mass Must Offset Meshes (No Working Set Center Mass Property Support)
                        var center_1 = (metadata.physics != null && metadata.physics.center != null) ? BABYLON.Utilities.ParseVector3(metadata.physics.center, BABYLON.Vector3.Zero()) : BABYLON.Vector3.Zero();
                        var centernodes = entity.getChildren(null, true);
                        if (centernodes != null && centernodes.length > 0) {
                            centernodes.forEach(function (centernode) { centernode.position.subtractInPlace(center_1); });
                        }
                        var childnodes = entity.getChildren(null, false);
                        if (childnodes != null && childnodes.length > 0) {
                            childnodes.forEach(function (childnode) {
                                if (childnode.metadata != null && childnode.metadata.unity != null) {
                                    if (childnode.metadata.unity.collision != null) {
                                        var ccollision = childnode.metadata.unity.collision;
                                        var cwheelinformation = (ccollision.wheelinformation != null) ? ccollision.wheelinformation : null;
                                        if (cwheelinformation != null) {
                                            // Trace Wheel Collider
                                            // BABYLON.SceneManager.LogWarning(">>> Setup raycast wheel collider: " + childnode.name + " --> on to: " + entity.name);
                                            if (fwheels_1 == null)
                                                fwheels_1 = [];
                                            fwheels_1.push(cwheelinformation);
                                        }
                                        else {
                                            var cdynamicfriction = (ccollision.dynamicfriction != null) ? ccollision.dynamicfriction : 0.6;
                                            var cstaticfriction = (ccollision.staticfriction != null) ? ccollision.staticfriction : 0.6;
                                            var crestitution = (ccollision.restitution != null) ? ccollision.restitution : 0;
                                            var cistrigger = (ccollision.trigger != null) ? ccollision.trigger : false;
                                            var ccollider = (ccollision.type != null) ? ccollision.type : "BoxCollider";
                                            var cimpostortype = BABYLON.PhysicsImpostor.BoxImpostor;
                                            if (ccollider === "MeshCollider") {
                                                // Note: Always Force Convex Hull Impostor Usage
                                                cimpostortype = BABYLON.PhysicsImpostor.ConvexHullImpostor;
                                            }
                                            else if (ccollider === "CapsuleCollider") {
                                                cimpostortype = BABYLON.PhysicsImpostor.CapsuleImpostor;
                                            }
                                            else if (ccollider === "SphereCollider") {
                                                cimpostortype = BABYLON.PhysicsImpostor.SphereImpostor;
                                            }
                                            else {
                                                cimpostortype = BABYLON.PhysicsImpostor.BoxImpostor;
                                            }
                                            if (cdynamicfriction > fdynamicfriction_1)
                                                fdynamicfriction_1 = cdynamicfriction;
                                            if (cstaticfriction > fstaticfriction_1)
                                                fstaticfriction_1 = cstaticfriction;
                                            if (crestitution > frestitution_1)
                                                frestitution_1 = crestitution;
                                            if (cistrigger == true)
                                                ftrigger_1 = true;
                                            // Trace Compound Collider
                                            // BABYLON.SceneManager.LogWarning(">>> Setup " + BABYLON.SceneManager.GetPhysicsImposterType(cimpostortype).toLowerCase() + " compound imposter for: " + childnode.name);
                                            BABYLON.SceneManager.CreatePhysicsImpostor(scene, childnode, cimpostortype, { mass: 0, friction: 0, restitution: 0 });
                                            BABYLON.RigidbodyPhysics.ConfigRigidbodyPhysics(scene, childnode, true, false, metadata.physics);
                                            fcount_1++;
                                        }
                                    }
                                }
                            });
                        }
                        if (fcount_1 > 0) {
                            // Trace Physics Root
                            // BABYLON.SceneManager.LogWarning(">>> Setup physics root no imposter for: " + entity.name);
                            BABYLON.SceneManager.CreatePhysicsImpostor(scene, entity, BABYLON.PhysicsImpostor.NoImpostor, { mass: mass, friction: fdynamicfriction_1, restitution: frestitution_1 });
                            BABYLON.RigidbodyPhysics.ConfigRigidbodyPhysics(scene, entity, false, ftrigger_1, metadata.physics);
                        }
                        if (fwheels_1 != null && fwheels_1.length > 0) {
                            if (entity.metadata == null)
                                entity.metadata = {};
                            if (entity.metadata.unity == null)
                                entity.metadata.unity = {};
                            entity.metadata.unity.wheels = fwheels_1;
                        }
                        childnodes = null;
                    }
                    else if (metadata.collision != null) {
                        var collider = (metadata.collision.type != null) ? metadata.collision.type : "BoxCollider";
                        var convexmesh = (metadata.collision.convexmesh != null) ? metadata.collision.convexmesh : false;
                        var dynamicfriction = (metadata.collision.dynamicfriction != null) ? metadata.collision.dynamicfriction : 0.6;
                        var staticfriction = (metadata.collision.staticfriction != null) ? metadata.collision.staticfriction : 0.6;
                        var restitution = (metadata.collision.restitution != null) ? metadata.collision.restitution : 0;
                        var istrigger = (metadata.collision.trigger != null) ? metadata.collision.trigger : false;
                        var impostortype = BABYLON.PhysicsImpostor.BoxImpostor;
                        // Config Physics Impostor
                        if (collider === "MeshCollider") {
                            impostortype = (convexmesh === true) ? BABYLON.PhysicsImpostor.ConvexHullImpostor : BABYLON.PhysicsImpostor.MeshImpostor;
                        }
                        else if (collider === "CapsuleCollider") {
                            impostortype = BABYLON.PhysicsImpostor.CapsuleImpostor;
                        }
                        else if (collider === "SphereCollider") {
                            impostortype = BABYLON.PhysicsImpostor.SphereImpostor;
                        }
                        else {
                            impostortype = BABYLON.PhysicsImpostor.BoxImpostor;
                        }
                        // Trace Physics Impostor
                        // BABYLON.SceneManager.LogWarning(">>> Setup " + BABYLON.SceneManager.GetPhysicsImposterType(impostortype).toLowerCase() + " physics impostor for: " + entity.name);
                        BABYLON.SceneManager.CreatePhysicsImpostor(scene, entity, impostortype, { mass: mass, friction: (isstatic) ? staticfriction : dynamicfriction, restitution: restitution });
                        BABYLON.RigidbodyPhysics.ConfigRigidbodyPhysics(scene, entity, false, istrigger, metadata.physics);
                    }
                }
            }
        };
        RigidbodyPhysics.ConfigRigidbodyPhysics = function (scene, entity, child, trigger, physics) {
            if (entity == null)
                return;
            if (entity.physicsImpostor != null) {
                entity.physicsImpostor.executeNativeFunction(function (word, body) {
                    if (body.activate)
                        body.activate();
                    var colobj = Ammo.castObject(body, Ammo.btCollisionObject);
                    colobj.entity = entity;
                    // ..
                    // Legacy Edge Contact (DEPRECIATED: KEEP FOR REFERENCE)
                    // ..
                    //const world:any = BABYLON.SceneManager.GetPhysicsWorld(scene);
                    //if (world != null && world.generateInternalEdgeInfo) {
                    //    const collisionShape:any = colobj.getCollisionShape();
                    //    if (collisionShape != null && collisionShape.getShapeType) {
                    //        const shapeType:number = collisionShape.getShapeType();
                    //        if (shapeType === 21) { // TRIANGLE_MESH_SHAPE_PROXYTYPE
                    //            const triangleShape:any = Ammo.castObject(collisionShape, Ammo.btBvhTriangleMeshShape);
                    //            if (triangleShape != null) {
                    //                colobj.triangleMapInfo = new Ammo.btTriangleInfoMap();
                    //                world.generateInternalEdgeInfo(triangleShape, colobj.triangleMapInfo);
                    //            }
                    //        }
                    //    }
                    //}
                    // ..
                    // Setup Main Gravity
                    // ..
                    var gravity = (physics != null && physics.gravity != null) ? physics.gravity : true;
                    if (gravity === false) {
                        if (body.setGravity) {
                            if (BABYLON.RigidbodyPhysics.TempAmmoVector == null)
                                BABYLON.RigidbodyPhysics.TempAmmoVector = new Ammo.btVector3(0, 0, 0);
                            BABYLON.RigidbodyPhysics.TempAmmoVector.setValue(0, 0, 0);
                            body.setGravity(BABYLON.RigidbodyPhysics.TempAmmoVector);
                        }
                        else {
                            BABYLON.Tools.Warn("Physics engine set gravity override not supported for: " + entity.name);
                        }
                    }
                    // ..
                    // Setup Drag Damping
                    // ..
                    if (body.setDamping) {
                        var ldrag = (physics != null && physics.ldrag != null) ? physics.ldrag : 0;
                        var adrag = (physics != null && physics.adrag != null) ? physics.adrag : 0.05;
                        body.setDamping(ldrag, adrag);
                    }
                    else {
                        BABYLON.Tools.Warn("Physics engine set drag damping not supported for: " + entity.name);
                    }
                    // ..
                    // Setup Collision Flags
                    // ..
                    if (body.setCollisionFlags && body.getCollisionFlags) {
                        // DEPRECIATED: if (trigger === true) body.setCollisionFlags(body.getCollisionFlags() | BABYLON.CollisionFlags.CF_NO_CONTACT_RESPONSE | BABYLON.CollisionFlags.CF_CUSTOM_MATERIAL_CALLBACK);
                        // DEPRECIATED: else body.setCollisionFlags(body.getCollisionFlags() | BABYLON.CollisionFlags.CF_CUSTOM_MATERIAL_CALLBACK);
                        // TODO: if (mass === 0) body.setCollisionFlags(body.getCollisionFlags() | BABYLON.CollisionFlags.CF_KINEMATIC_OBJECT); // STATIC_OBJECT
                        if (trigger === true)
                            body.setCollisionFlags(body.getCollisionFlags() | BABYLON.CollisionFlags.CF_NO_CONTACT_RESPONSE); // TRIGGER_OBJECT
                        body.setCollisionFlags(body.getCollisionFlags() | BABYLON.CollisionFlags.CF_CUSTOM_MATERIAL_CALLBACK); // CUSTOM_MATERIAL
                    }
                    else {
                        BABYLON.Tools.Warn("Physics engine set collision flags not supported for: " + entity.name);
                    }
                    // ..
                    // Setup Freeze Constraints
                    // ..
                    var freeze = (physics != null && physics.freeze != null) ? physics.freeze : null;
                    if (freeze != null) {
                        if (body.setLinearFactor) {
                            var freeze_pos_x = (freeze.positionx != null && freeze.positionx === true) ? 0 : 1;
                            var freeze_pos_y = (freeze.positiony != null && freeze.positiony === true) ? 0 : 1;
                            var freeze_pos_z = (freeze.positionz != null && freeze.positionz === true) ? 0 : 1;
                            if (BABYLON.RigidbodyPhysics.TempAmmoVector == null)
                                BABYLON.RigidbodyPhysics.TempAmmoVector = new Ammo.btVector3(0, 0, 0);
                            BABYLON.RigidbodyPhysics.TempAmmoVector.setValue(freeze_pos_x, freeze_pos_y, freeze_pos_z);
                            body.setLinearFactor(BABYLON.RigidbodyPhysics.TempAmmoVector);
                        }
                        else {
                            BABYLON.Tools.Warn("Physics engine set linear factor not supported for: " + entity.name);
                        }
                        if (body.setAngularFactor) {
                            var freeze_rot_x = (freeze.rotationx != null && freeze.rotationx === true) ? 0 : 1;
                            var freeze_rot_y = (freeze.rotationy != null && freeze.rotationy === true) ? 0 : 1;
                            var freeze_rot_z = (freeze.rotationz != null && freeze.rotationz === true) ? 0 : 1;
                            if (BABYLON.RigidbodyPhysics.TempAmmoVector == null)
                                BABYLON.RigidbodyPhysics.TempAmmoVector = new Ammo.btVector3(0, 0, 0);
                            BABYLON.RigidbodyPhysics.TempAmmoVector.setValue(freeze_rot_x, freeze_rot_y, freeze_rot_z);
                            body.setAngularFactor(BABYLON.RigidbodyPhysics.TempAmmoVector);
                        }
                        else {
                            BABYLON.Tools.Warn("Physics engine set angular factor not supported for: " + entity.name);
                        }
                    }
                });
            }
            else {
                BABYLON.Tools.Warn("No valid physics impostor to setup for " + entity.name);
            }
        };
        RigidbodyPhysics.TempAmmoVector = null;
        RigidbodyPhysics.TempAmmoVectorAux = null;
        RigidbodyPhysics.TempCenterTransform = null;
        return RigidbodyPhysics;
    }(BABYLON.ScriptComponent));
    BABYLON.RigidbodyPhysics = RigidbodyPhysics;
    /**
     * Babylon collision contact info pro class (Native Bullet Physics 2.82)
     * @class CollisionContactInfo - All rights reserved (c) 2020 Mackey Kinard
     */
    var CollisionContactInfo = /** @class */ (function () {
        function CollisionContactInfo() {
            this.mesh = null;
            this.state = 0;
            this.reset = false;
        }
        return CollisionContactInfo;
    }());
    BABYLON.CollisionContactInfo = CollisionContactInfo;
})(BABYLON || (BABYLON = {}));
var BABYLON;
(function (BABYLON) {
    /**
     * Babylon shuriken particle system pro class (Unity Style Shuriken Particle System)
     * @class ShurikenParticles - All rights reserved (c) 2020 Mackey Kinard
     */
    var ShurikenParticles = /** @class */ (function (_super) {
        __extends(ShurikenParticles, _super);
        function ShurikenParticles() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ShurikenParticles.prototype.awake = function () { };
        ShurikenParticles.prototype.start = function () { };
        ShurikenParticles.prototype.ready = function () { };
        ShurikenParticles.prototype.update = function () { };
        ShurikenParticles.prototype.late = function () { };
        ShurikenParticles.prototype.after = function () { };
        ShurikenParticles.prototype.fixed = function () { };
        ShurikenParticles.prototype.destroy = function () { };
        return ShurikenParticles;
    }(BABYLON.ScriptComponent));
    BABYLON.ShurikenParticles = ShurikenParticles;
})(BABYLON || (BABYLON = {}));
var BABYLON;
(function (BABYLON) {
    /**
     * Babylon terrain building system pro class (Unity Style Terrain Building System)
     * @class TerrainGenerator - All rights reserved (c) 2020 Mackey Kinard
     */
    var TerrainGenerator = /** @class */ (function (_super) {
        __extends(TerrainGenerator, _super);
        function TerrainGenerator() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.treeInstances = null;
            return _this;
        }
        TerrainGenerator.prototype.awake = function () {
            /* Init component function */
            // TESTING ONLY: const trees = this.getChildNode("_trees", BABYLON.SearchType.EndsWith, true);
            // TESTING ONLY: if (trees != null) this.treeInstances = trees.getChildren(null, true) as BABYLON.TransformNode[];
            console.log("Terrain Generator: " + this.transform.name);
            console.log(this);
        };
        TerrainGenerator.prototype.start = function () {
            /* Start render loop function */
        };
        TerrainGenerator.prototype.ready = function () {
            /* Execute when ready function */
        };
        TerrainGenerator.prototype.update = function () {
            /* Update render loop function */
        };
        TerrainGenerator.prototype.late = function () {
            /* Late update render loop function */
        };
        TerrainGenerator.prototype.after = function () {
            /* After update render loop function */
        };
        TerrainGenerator.prototype.fixed = function () {
            /* Fixed update physics step function */
        };
        TerrainGenerator.prototype.destroy = function () {
            /* Destroy component function */
        };
        return TerrainGenerator;
    }(BABYLON.ScriptComponent));
    BABYLON.TerrainGenerator = TerrainGenerator;
})(BABYLON || (BABYLON = {}));
var BABYLON;
(function (BABYLON) {
    /**
     * Babylon web video player pro class (Unity Style Shuriken Particle System)
     * @class WebVideoPlayer - All rights reserved (c) 2020 Mackey Kinard
     */
    var WebVideoPlayer = /** @class */ (function (_super) {
        __extends(WebVideoPlayer, _super);
        function WebVideoPlayer() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.videoLoop = false;
            _this.videoMuted = false;
            _this.videoAlpha = false;
            _this.videoFaded = false;
            _this.videoPoster = null;
            _this.videoInvert = true;
            _this.videoSample = 3;
            _this.videoVolume = 1.0;
            _this.videoMipmaps = false;
            _this.videoPlayback = 1.0;
            _this.videoPlayOnAwake = true;
            _this.videoPreloaderUrl = null;
            _this.videoBlobUrl = null;
            _this.videoPreload = false;
            _this._initializedReadyInstance = false;
            /** Register handler that is triggered when the video clip is ready */
            _this.onReadyObservable = new BABYLON.Observable();
            _this.m_abstractMesh = null;
            _this.m_videoTexture = null;
            _this.m_videoMaterial = null;
            _this.m_diffuseIntensity = 1.0;
            return _this;
        }
        WebVideoPlayer.prototype.getVideoMaterial = function () { return this.m_videoMaterial; };
        WebVideoPlayer.prototype.getVideoTexture = function () { return this.m_videoTexture; };
        WebVideoPlayer.prototype.getVideoElement = function () { return (this.m_videoTexture != null) ? this.m_videoTexture.video : null; };
        WebVideoPlayer.prototype.getVideoScreen = function () { return this.m_abstractMesh; };
        WebVideoPlayer.prototype.getVideoBlobUrl = function () { return this.videoBlobUrl; };
        WebVideoPlayer.prototype.awake = function () { this.awakeWebVideoPlayer(); };
        WebVideoPlayer.prototype.destroy = function () { this.destroyWebVideoPlayer(); };
        WebVideoPlayer.prototype.awakeWebVideoPlayer = function () {
            this.videoLoop = this.getProperty("looping", false);
            this.videoMuted = this.getProperty("muted", false);
            this.videoInvert = this.getProperty("inverty", true);
            this.videoSample = this.getProperty("sampling", 3);
            this.videoVolume = this.getProperty("volume", 1.0);
            this.videoMipmaps = this.getProperty("mipmaps", false);
            this.videoAlpha = this.getProperty("texturealpha", false);
            this.videoFaded = this.getProperty("diffusealpha", false);
            this.videoPlayback = this.getProperty("playbackspeed", 1.0);
            this.videoPlayOnAwake = this.getProperty("playonawake", true);
            this.videoPreload = this.getProperty("preload", this.videoPreload);
            this.m_diffuseIntensity = this.getProperty("intensity", 1.0);
            this.m_abstractMesh = this.getAbstractMesh();
            // ..
            var setPoster = this.getProperty("poster");
            if (setPoster === true && this.m_abstractMesh != null && this.m_abstractMesh.material != null) {
                if (this.m_abstractMesh.material instanceof BABYLON.PBRMaterial) {
                    if (this.m_abstractMesh.material.albedoTexture != null && this.m_abstractMesh.material.albedoTexture.url != null && this.m_abstractMesh.material.albedoTexture.url !== "") {
                        this.videoPoster = this.m_abstractMesh.material.albedoTexture.url.replace("data:", "");
                    }
                }
                else if (this.m_abstractMesh.material instanceof BABYLON.StandardMaterial) {
                    if (this.m_abstractMesh.material.diffuseTexture != null && this.m_abstractMesh.material.diffuseTexture.url != null && this.m_abstractMesh.material.diffuseTexture.url !== "") {
                        this.videoPoster = this.m_abstractMesh.material.diffuseTexture.url.replace("data:", "");
                    }
                }
            }
            // ..
            var videoUrl = this.getProperty("url", null);
            var videoSrc = this.getProperty("source", null);
            var playUrl = videoUrl;
            if (videoSrc != null && videoSrc.filename != null && videoSrc.filename !== "") {
                var rootUrl = BABYLON.SceneManager.GetRootUrl(this.scene);
                playUrl = (rootUrl + videoSrc.filename);
            }
            if (playUrl != null && playUrl !== "") {
                if (this.videoPreload === true) {
                    this.videoPreloaderUrl = playUrl;
                }
                else {
                    this.setDataSource(playUrl);
                }
            }
        };
        WebVideoPlayer.prototype.destroyWebVideoPlayer = function () {
            this.m_abstractMesh = null;
            if (this.m_videoTexture != null) {
                this.m_videoTexture.dispose();
                this.m_videoTexture = null;
            }
            if (this.m_videoMaterial != null) {
                this.m_videoMaterial.dispose();
                this.m_videoMaterial = null;
            }
            this.revokeVideoBlobUrl();
        };
        /**
         * Gets the video ready status
         */
        WebVideoPlayer.prototype.isReady = function () {
            return (this.getVideoElement() != null);
        };
        /**
         * Gets the video playing status
         */
        WebVideoPlayer.prototype.isPlaying = function () {
            var result = false;
            var video = this.getVideoElement();
            if (video != null) {
                result = (video.paused === false);
            }
            return result;
        };
        /**
         * Gets the video paused status
         */
        WebVideoPlayer.prototype.isPaused = function () {
            var result = false;
            var video = this.getVideoElement();
            if (video != null) {
                result = (video.paused === true);
            }
            return result;
        };
        /**
         * Play the video track
         */
        WebVideoPlayer.prototype.play = function () {
            var _this = this;
            if (BABYLON.SceneManager.HasAudioContext()) {
                this.internalPlay();
            }
            else {
                BABYLON.Engine.audioEngine.onAudioUnlockedObservable.addOnce(function () { _this.internalPlay(); });
            }
            return true;
        };
        WebVideoPlayer.prototype.internalPlay = function () {
            var _this = this;
            if (this._initializedReadyInstance === true) {
                this.checkedPlay();
            }
            else {
                this.onReadyObservable.addOnce(function () { _this.checkedPlay(); });
            }
        };
        WebVideoPlayer.prototype.checkedPlay = function () {
            var _this = this;
            var video = this.getVideoElement();
            if (video != null) {
                video.play().then(function () {
                    if (video.paused === true) {
                        _this.checkedRePlay();
                    }
                });
            }
        };
        WebVideoPlayer.prototype.checkedRePlay = function () {
            var video = this.getVideoElement();
            if (video != null) {
                video.play().then(function () { });
            }
        };
        /**
         * Pause the video track
         */
        WebVideoPlayer.prototype.pause = function () {
            var result = false;
            var video = this.getVideoElement();
            if (video != null) {
                video.pause();
                result = true;
            }
            return result;
        };
        /**
         * Mute the video track
         */
        WebVideoPlayer.prototype.mute = function () {
            var result = false;
            var video = this.getVideoElement();
            if (video != null) {
                video.muted = true;
                result = true;
            }
            return result;
        };
        /**
         * Unmute the video track
         */
        WebVideoPlayer.prototype.unmute = function () {
            var result = false;
            var video = this.getVideoElement();
            if (video != null) {
                video.muted = false;
                result = true;
            }
            return result;
        };
        /**
         * Gets the video volume
         */
        WebVideoPlayer.prototype.getVolume = function () {
            var result = 0;
            var video = this.getVideoElement();
            if (video != null) {
                result = video.volume;
            }
            return result;
        };
        /**
         * Sets the video volume
         * @param volume Define the new volume of the sound
         */
        WebVideoPlayer.prototype.setVolume = function (volume) {
            var result = false;
            var video = this.getVideoElement();
            if (video != null) {
                video.volume = volume;
                result = true;
            }
            return result;
        };
        /** Set video data source */
        WebVideoPlayer.prototype.setDataSource = function (source) {
            var _this = this;
            if (this.m_abstractMesh != null) {
                // ..
                // Create Video Material
                // ..
                if (this.m_videoMaterial == null) {
                    this.m_videoMaterial = new BABYLON.StandardMaterial(this.transform.name + ".VideoMat", this.scene);
                    this.m_videoMaterial.roughness = 1;
                    this.m_videoMaterial.diffuseColor = new BABYLON.Color3(1, 1, 1);
                    this.m_videoMaterial.emissiveColor = new BABYLON.Color3(1, 1, 1);
                    this.m_videoMaterial.useAlphaFromDiffuseTexture = this.videoFaded;
                    this.m_abstractMesh.material = this.m_videoMaterial;
                }
                // ..
                // Setup Video Texture
                // ..
                if (this.m_videoMaterial != null) {
                    this.m_videoMaterial.diffuseTexture = null;
                    if (this.m_videoTexture != null) {
                        this.m_videoTexture.dispose();
                        this.m_videoTexture = null;
                    }
                    this._initializedReadyInstance = false;
                    this.m_videoTexture = new BABYLON.VideoTexture(this.transform.name + ".VideoTex", source, this.scene, this.videoMipmaps, this.videoInvert, this.videoSample, { autoUpdateTexture: true, poster: this.videoPoster });
                    if (this.m_videoTexture != null) {
                        this.m_videoTexture.hasAlpha = this.videoAlpha;
                        if (this.m_videoTexture.video != null) {
                            this.m_videoTexture.video.loop = this.videoLoop;
                            this.m_videoTexture.video.muted = this.videoMuted;
                            this.m_videoTexture.video.volume = this.videoVolume;
                            this.m_videoTexture.video.playbackRate = this.videoPlayback;
                            this.m_videoTexture.video.addEventListener("loadeddata", function () {
                                _this._initializedReadyInstance = true;
                                if (_this.onReadyObservable.hasObservers() === true) {
                                    _this.onReadyObservable.notifyObservers(_this.m_videoTexture);
                                }
                                if (_this.videoPlayOnAwake === true) {
                                    _this.play();
                                }
                            });
                            this.m_videoTexture.video.load();
                        }
                    }
                    if (this.m_videoTexture != null) {
                        this.m_videoTexture.level = this.m_diffuseIntensity;
                        this.m_videoMaterial.diffuseTexture = this.m_videoTexture;
                    }
                }
                else {
                    BABYLON.Tools.Warn("No video mesh or material available for: " + this.transform.name);
                }
            }
        };
        /** Revokes the current video blob url and releases resouces */
        WebVideoPlayer.prototype.revokeVideoBlobUrl = function () {
            if (this.videoBlobUrl != null) {
                URL.revokeObjectURL(this.videoBlobUrl);
                this.videoBlobUrl = null;
            }
        };
        /** Add video preloader asset tasks (https://doc.babylonjs.com/divingDeeper/importers/assetManager) */
        WebVideoPlayer.prototype.addPreloaderTasks = function (assetsManager) {
            var _this = this;
            if (this.videoPreload === true) {
                var assetTask = assetsManager.addBinaryFileTask((this.transform.name + ".VideoTask"), this.videoPreloaderUrl);
                assetTask.onSuccess = function (task) {
                    _this.revokeVideoBlobUrl();
                    _this.videoBlobUrl = URL.createObjectURL(new Blob([task.data]));
                    _this.setDataSource(_this.videoBlobUrl);
                };
                assetTask.onError = function (task, message, exception) { console.error(message, exception); };
            }
        };
        return WebVideoPlayer;
    }(BABYLON.ScriptComponent));
    BABYLON.WebVideoPlayer = WebVideoPlayer;
})(BABYLON || (BABYLON = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2VlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL0Fzc2V0cy9Db250ZW50L0RlYnVnZ2VyLnRzIiwiLi4vQXNzZXRzL0NvbnRlbnQvQ2FtZXJhL1VuaXZlcnNhbENhbWVyYVN5c3RlbS50cyIsIi4uL0Fzc2V0cy9Db250ZW50L0N1c3RvbS9BbmltYXRpb25TcGVsbC9BbGdvL1BhcnRpY2xlQWxnby50cyIsIi4uL0Fzc2V0cy9Db250ZW50L0N1c3RvbS9BbmltYXRpb25TcGVsbC9BbGdvL0NpcmNsZUFsZ28udHMiLCIuLi9Bc3NldHMvQ29udGVudC9DdXN0b20vQW5pbWF0aW9uU3BlbGwvQWxnby9JUGFydGljdWxlQWxnby50cyIsIi4uL0Fzc2V0cy9Db250ZW50L0N1c3RvbS9BbmltYXRpb25TcGVsbC9BbGdvL1NwaGVyZUFsZ28udHMiLCIuLi9Bc3NldHMvQ29udGVudC9DdXN0b20vQW5pbWF0aW9uU3BlbGwvUGFydGljdWxlcy9QYXJ0aWNsZUZhY3RvcnkudHMiLCIuLi9Bc3NldHMvQ29udGVudC9DdXN0b20vQW5pbWF0aW9uU3BlbGwvUGFydGljdWxlcy9TcGhlcmVQYXJ0aWNsZS50cyIsIi4uL0Fzc2V0cy9Db250ZW50L0N1c3RvbS9BbmltYXRpb25TcGVsbC9TcGVsbC9JU3BlbGwudHMiLCIuLi9Bc3NldHMvQ29udGVudC9DdXN0b20vQW5pbWF0aW9uU3BlbGwvU3BlbGwvU3BlbGwudHMiLCIuLi9Bc3NldHMvQ29udGVudC9DdXN0b20vQW5pbWF0aW9uU3BlbGwvU3BlbGwvU3BlbGxUcmFuc2l0aW9uLnRzIiwiLi4vQXNzZXRzL0NvbnRlbnQvQ3VzdG9tL0FuaW1hdGlvblNwZWxsL1NwZWxsTWFuYWdlci9BbmltYXRpb25NYW5hZ2VyLnRzIiwiLi4vQXNzZXRzL0NvbnRlbnQvQ3VzdG9tL0FuaW1hdGlvblNwZWxsL1NwZWxsTWFuYWdlci9BbmltYXRpb25TcGVsbFN5bmMudHMiLCIuLi9Bc3NldHMvQ29udGVudC9DdXN0b20vQW5pbWF0aW9uU3BlbGwvU3BlbGxNYW5hZ2VyL1NwZWxsTGF5ZXIudHMiLCIuLi9Bc3NldHMvQ29udGVudC9DdXN0b20vQW5pbWF0aW9uU3BlbGwvU3BlbGxTZXQvU3BlbGxTZXQudHMiLCIuLi9Bc3NldHMvQ29udGVudC9DdXN0b20vQW5pbWF0aW9uU3BlbGwvU3BlbGxTZXQvU3BlbGxUZXN0U2V0LnRzIiwiLi4vQXNzZXRzL0NvbnRlbnQvQ3VzdG9tL0FuaW1hdGlvblNwZWxsL1V0aWxzL0FuaW1hdGlvblV0aWxzLnRzIiwiLi4vQXNzZXRzL0NvbnRlbnQvQ3VzdG9tL0FuaW1hdGlvblNwZWxsL1V0aWxzL0NvbG9yUGF0dGVybi50cyIsIi4uL0Fzc2V0cy9Db250ZW50L0N1c3RvbS9BbmltYXRpb25TcGVsbC9VdGlscy9NYXRoVXRpbHMudHMiLCIuLi9Bc3NldHMvQ29udGVudC9DdXN0b20vT3B0aW1pemF0aW9uL09ialJlbmRlci50cyIsIi4uL0Fzc2V0cy9Db250ZW50L0N1c3RvbS9TaGFkZXIvVG9vbi9Ub29uLnRzIiwiLi4vQXNzZXRzL0NvbnRlbnQvQ3VzdG9tL1NoYWRlci9Ub29uL1Rvb25NYXRlcmlhbC50cyIsIi4uL0Fzc2V0cy9Db250ZW50L0N1c3RvbS9VaS9BZHZhbmNlZFRleHR1cmVVaS50cyIsIi4uL0Fzc2V0cy9Db250ZW50L0xpZ2h0cy9MaWdodFByb2plY3Rpb24udHMiLCIuLi9Bc3NldHMvQ29udGVudC9NYXRlcmlhbC9Ob2RlTWF0ZXJpYWxJbnN0YW5jZS50cyIsIi4uL0Fzc2V0cy9Db250ZW50L01hdGVyaWFsL05vZGVNYXRlcmlhbFBhcnRpY2xlLnRzIiwiLi4vQXNzZXRzL0NvbnRlbnQvTWF0ZXJpYWwvTm9kZU1hdGVyaWFsUHJvY2Vzcy50cyIsIi4uL0Fzc2V0cy9Db250ZW50L01hdGVyaWFsL05vZGVNYXRlcmlhbFRleHR1cmUudHMiLCIuLi9Bc3NldHMvQ29udGVudC9NZXNzYWdlL1Bvc3RSb2JvdC50cyIsIi4uL0Fzc2V0cy9Db250ZW50L01vYmlsZS9Nb2JpbGVJbnB1dENvbnRyb2xsZXIudHMiLCIuLi9Bc3NldHMvQ29udGVudC9QbGF5ZXIvVW5pdmVyc2FsUGxheWVyQ29udHJvbGxlci50cyIsIi4uL0Fzc2V0cy9Db250ZW50L1NoYWRlci9GeFBhcnRpY2xlU3lzdGVtLnRzIiwiLi4vQXNzZXRzL0NvbnRlbnQvU2hhZGVyL1NreU1hdGVyaWFsU3lzdGVtLnRzIiwiLi4vQXNzZXRzL0NvbnRlbnQvU2hhZGVyL1dhdGVyTWF0ZXJpYWxTeXN0ZW0udHMiLCIuLi9Bc3NldHMvQ29udGVudC9UYXJnZXQvU2ltcGxlRm9sbG93Q2FtZXJhLnRzIiwiLi4vQXNzZXRzL0NvbnRlbnQvVGFyZ2V0L1Ntb290aEZvbGxvd1RhcmdldC50cyIsIi4uL0Fzc2V0cy9Db250ZW50L1RhcmdldC9XYXlwb2ludFRhcmdldE1hbmFnZXIudHMiLCIuLi9Bc3NldHMvQ29udGVudC9UZXN0aW5nL0RlYnVnSW5mb3JtYXRpb24udHMiLCIuLi9Bc3NldHMvQ29udGVudC9UZXN0aW5nL1Rlc3ROYXZpZ2F0aW9uQWdlbnQudHMiLCIuLi9Bc3NldHMvQ29udGVudC9UZXN0aW5nL1Rlc3RSb290TW90aW9uLnRzIiwiLi4vQXNzZXRzL0NvbnRlbnQvV2luZG93cy9XaW5kb3dzUGxhdGZvcm0udHMiLCIuLi9Bc3NldHMvU2NlbmVzL0RlYnVnZ2VyLnRzIiwiLi4vQXNzZXRzL1NjZW5lcy9GaXhUZXJyYWluLnRzIiwiLi4vQXNzZXRzL1tCYWJ5bG9uXS9bUHJvXS9BbmltYXRpb25TdGF0ZS50cyIsIi4uL0Fzc2V0cy9bQmFieWxvbl0vW1Byb10vQXVkaW9Tb3VyY2UudHMiLCIuLi9Bc3NldHMvW0JhYnlsb25dL1tQcm9dL0NoYXJhY3RlckNvbnRyb2xsZXIudHMiLCIuLi9Bc3NldHMvW0JhYnlsb25dL1tQcm9dL05hdmlnYXRpb25BZ2VudC50cyIsIi4uL0Fzc2V0cy9bQmFieWxvbl0vW1Byb10vUmF5Y2FzdFZlaGljbGUudHMiLCIuLi9Bc3NldHMvW0JhYnlsb25dL1tQcm9dL1JlYWx0aW1lUmVmbGVjdGlvbi50cyIsIi4uL0Fzc2V0cy9bQmFieWxvbl0vW1Byb10vUmlnaWRib2R5UGh5c2ljcy50cyIsIi4uL0Fzc2V0cy9bQmFieWxvbl0vW1Byb10vU2h1cmlrZW5QYXJ0aWNsZXMudHMiLCIuLi9Bc3NldHMvW0JhYnlsb25dL1tQcm9dL1RlcnJhaW5HZW5lcmF0b3IudHMiLCIuLi9Bc3NldHMvW0JhYnlsb25dL1tQcm9dL1dlYlZpZGVvUGxheWVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQU8sS0FBSyxDQTRCWDtBQTVCRCxXQUFPLEtBQUs7SUFDUjtRQUFBO1FBMEJBLENBQUM7UUF6QmlCLFlBQUcsR0FBakIsVUFBa0IsT0FBZTtZQUM3QixPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3pCLENBQUM7UUFFYSxhQUFJLEdBQWxCLFVBQW1CLE9BQWU7WUFDOUIsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUMxQixDQUFDO1FBRWEsY0FBSyxHQUFuQixVQUFvQixPQUFlO1lBQy9CLE9BQU8sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDM0IsQ0FBQztRQUVhLGVBQU0sR0FBcEIsVUFBcUIsU0FBa0IsRUFBRSxPQUFlO1lBQ3BELElBQUksQ0FBQyxTQUFTLEVBQUU7Z0JBQ1osT0FBTyxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsT0FBTyxDQUFDLENBQUM7YUFDdEM7UUFDTCxDQUFDO1FBRWEsb0JBQVcsR0FBekIsVUFBMEIsU0FBa0IsRUFBRSxPQUFlO1lBQ3pELFlBQVk7WUFDWixJQUFJLENBQUMsU0FBUyxFQUFFO2dCQUNaLE9BQU8sQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFLE9BQU8sQ0FBQyxDQUFDO2FBQ3RDO1lBQ0QsU0FBUztRQUNiLENBQUM7UUFDTCxlQUFDO0lBQUQsQ0FBQyxBQTFCRCxJQTBCQztJQTFCWSxjQUFRLFdBMEJwQixDQUFBO0FBQ0wsQ0FBQyxFQTVCTSxLQUFLLEtBQUwsS0FBSyxRQTRCWDs7Ozs7Ozs7Ozs7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WUFDdkUsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7WUFDdkUsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7WUFDdkUsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLGVBQWUsRUFBRSxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7WUFDN0UsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLGNBQWMsRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7WUFDMUUsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLGVBQWUsRUFBRSxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7WUFDN0UsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLGVBQWUsRUFBRSxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7WUFDN0UsSUFBSSxDQUFDLGtCQUFrQixHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsbUJBQW1CLEVBQUUsSUFBSSxDQUFDLGtCQUFrQixDQUFDLENBQUM7WUFDekYsSUFBSSxDQUFDLHNCQUFzQixHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsdUJBQXVCLEVBQUUsSUFBSSxDQUFDLHNCQUFzQixDQUFDLENBQUM7WUFDckcsSUFBSSxJQUFJLENBQUMsS0FBSyxJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsS0FBSyxLQUFLLEVBQUU7Z0JBQUUsSUFBSSxDQUFDLEtBQUssR0FBRyxTQUFTLENBQUM7WUFDcEUsS0FBSztZQUNMLElBQU0sUUFBUSxHQUFVLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDakQsSUFBSSxRQUFRLElBQUksSUFBSSxJQUFJLFFBQVEsS0FBSyxFQUFFLEVBQUU7Z0JBQ3JDLElBQU0sT0FBTyxHQUFV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U0FBUyxHQUErQixhQUFhLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksR0FBRyxZQUFZLENBQUMsRUFBRSxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQztnQkFDNUksU0FBUyxDQUFDLFNBQVMsR0FBRyxVQUFDLElBQWdDO29CQUNuRCxLQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztvQkFDMUIsS0FBSSxDQUFDLFlBQVksR0FBRyxHQUFHLENBQUMsZUFBZSxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDL0QsS0FBSSxDQUFDLGFBQWEsQ0FBQyxLQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7Z0JBQzFDLENBQUMsQ0FBQztnQkFDRixTQUFTLENBQUMsT0FBTyxHQUFHLFVBQUMsSUFBaUMsRUFBRSxPQUFnQixFQUFFLFNBQWUsSUFBTyxPQUFPLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUN4STtRQUNMLENBQUM7UUFDTCxxQkFBQztJQUFELENBQUMsQUExUkQsQ0FBb0MsT0FBTyxDQUFDLGVBQWUsR0EwUjFEO0lBMVJZLHNCQUFjLGlCQTBSMUIsQ0FBQTtBQUNMLENBQUMsRUFoU00sT0FBTyxLQUFQLE9BQU8sUUFnU2IiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUgREVCVUcge1xyXG4gICAgZXhwb3J0IGNsYXNzIERlYnVnZ2VyIHtcclxuICAgICAgICBwdWJsaWMgc3RhdGljIGxvZyhtZXNzYWdlOiBzdHJpbmcpOiB2b2lkIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2cobWVzc2FnZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgd2FybihtZXNzYWdlOiBzdHJpbmcpOiB2b2lkIHtcclxuICAgICAgICAgICAgY29uc29sZS53YXJuKG1lc3NhZ2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBwdWJsaWMgc3RhdGljIGVycm9yKG1lc3NhZ2U6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKG1lc3NhZ2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBwdWJsaWMgc3RhdGljIGFzc2VydChjb25kaXRpb246IGJvb2xlYW4sIG1lc3NhZ2U6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgICAgICAgICBpZiAoIWNvbmRpdGlvbikge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5hc3NlcnQoY29uZGl0aW9uLCBtZXNzYWdlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBwdWJsaWMgc3RhdGljIGRlYnVnQXNzZXJ0KGNvbmRpdGlvbjogYm9vbGVhbiwgbWVzc2FnZTogc3RyaW5nKTogdm9pZCB7XHJcbiAgICAgICAgICAgIC8vICNpZiBERUJVR1xyXG4gICAgICAgICAgICBpZiAoIWNvbmRpdGlvbikge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5hc3NlcnQoY29uZGl0aW9uLCBtZXNzYWdlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyAjZW5kaWZcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJtb2R1bGUgUFJPSkVDVCB7XHJcbiAgICAvKipcclxuICAgICAqIEJhYnlsb24gdW5pdmVyc2FsIGNhbWVyYSByaWcgc3lzdGVtIHBybyBjbGFzc1xyXG4gICAgICogQGNsYXNzIFVuaXZlcnNhbENhbWVyYVN5c3RlbSAtIEFsbCByaWdodHMgcmVzZXJ2ZWQgKGMpIDIwMjAgTWFja2V5IEtpbmFyZFxyXG4gICAgICogaHR0cHM6Ly9kb2MuYmFieWxvbmpzLmNvbS9kaXZpbmdEZWVwZXIvcG9zdFByb2Nlc3Nlcy9kZWZhdWx0UmVuZGVyaW5nUGlwZWxpbmVcclxuICAgICAqL1xyXG4gICAgZXhwb3J0IGNsYXNzIFVuaXZlcnNhbENhbWVyYVN5c3RlbSBleHRlbmRzIEJBQllMT04uU2NyaXB0Q29tcG9uZW50IHtcclxuICAgICAgICBwcm90ZWN0ZWQgc3RhdGljIFBsYXllck9uZUNhbWVyYTpCQUJZTE9OLkZyZWVDYW1lcmEgPSBudWxsO1xyXG4gICAgICAgIHByb3RlY3RlZCBzdGF0aWMgUGxheWVyVHdvQ2FtZXJhOkJBQllMT04uRnJlZUNhbWVyYSA9IG51bGw7XHJcbiAgICAgICAgcHJvdGVjdGVkIHN0YXRpYyBQbGF5ZXJUaHJlZUNhbWVyYTpCQUJZTE9OLkZyZWVDYW1lcmEgPSBudWxsO1xyXG4gICAgICAgIHByb3RlY3RlZCBzdGF0aWMgUGxheWVyRm91ckNhbWVyYTpCQUJZTE9OLkZyZWVDYW1lcmEgPSBudWxsO1xyXG4gICAgICAgIHByb3RlY3RlZCBzdGF0aWMgWFJFeHBlcmllbmNlSGVscGVyOkJBQllMT04uV2ViWFJEZWZhdWx0RXhwZXJpZW5jZSA9IG51bGw7XHJcblxyXG4gICAgICAgIHByaXZhdGUgc3RhdGljIG11bHRpUGxheWVyVmlldzpib29sZWFuID0gZmFsc2U7XHJcbiAgICAgICAgcHJpdmF0ZSBzdGF0aWMgbXVsdGlQbGF5ZXJDb3VudDpudW1iZXIgPSAxO1xyXG4gICAgICAgIHByaXZhdGUgc3RhdGljIG11bHRpUGxheWVyQ2FtZXJhczpCQUJZTE9OLkNhbWVyYVtdID0gbnVsbDtcclxuICAgICAgICBwcml2YXRlIHN0YXRpYyBzdGVyZW9DYW1lcmFzOmJvb2xlYW4gPSB0cnVlO1xyXG4gICAgICAgIHByaXZhdGUgc3RhdGljIHN0YXJ0dXBNb2RlOm51bWJlciA9IDE7XHJcbiAgICAgICAgcHJpdmF0ZSBzdGF0aWMgY2FtZXJhUmVhZHk6Ym9vbGVhbiA9IGZhbHNlO1xyXG4gICAgICAgIHByaXZhdGUgc3RhdGljIHJlbmRlcmluZ1BpcGVsaW5lOkJBQllMT04uRGVmYXVsdFJlbmRlcmluZ1BpcGVsaW5lID0gbnVsbDtcclxuICAgICAgICBwcml2YXRlIHN0YXRpYyBzY3JlZW5TcGFjZVBpcGVsaW5lOkJBQllMT04uU1NBT1JlbmRlcmluZ1BpcGVsaW5lID0gbnVsbDtcclxuICAgICAgICBwdWJsaWMgc3RhdGljIEdldFJlbmRlcmluZ1BpcGVsaW5lKCk6QkFCWUxPTi5EZWZhdWx0UmVuZGVyaW5nUGlwZWxpbmUgeyByZXR1cm4gUFJPSkVDVC5Vbml2ZXJzYWxDYW1lcmFTeXN0ZW0ucmVuZGVyaW5nUGlwZWxpbmU7IH07XHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBHZXRTY3JlZW5TcGFjZVBpcGVsaW5lKCk6QkFCWUxPTi5TU0FPUmVuZGVyaW5nUGlwZWxpbmUgeyByZXR1cm4gUFJPSkVDVC5Vbml2ZXJzYWxDYW1lcmFTeXN0ZW0uc2NyZWVuU3BhY2VQaXBlbGluZTsgfTtcclxuICAgICAgICBwdWJsaWMgc3RhdGljIElzQ2FtZXJhU3lzdGVtUmVhZHkoKTpib29sZWFuIHsgcmV0dXJuIFBST0pFQ1QuVW5pdmVyc2FsQ2FtZXJhU3lzdGVtLmNhbWVyYVJlYWR5OyB9XHJcbiAgICAgICAgLyoqIFJlZ2lzdGVyIGhhbmRsZXIgdGhhdCBpcyB0cmlnZ2VyZWQgd2hlbiB0aGUgd2VieHIgZXhwZXJpZW5jZSBoZWxwZXIgaGFzIGJlZW4gY3JlYXRlZCAqL1xyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgT25YUkV4cGVyaWVuY2VIZWxwZXJPYnNlcnZhYmxlID0gbmV3IEJBQllMT04uT2JzZXJ2YWJsZTxCQUJZTE9OLldlYlhSRGVmYXVsdEV4cGVyaWVuY2U+KCk7XHJcblxyXG4gICAgICAgIHByaXZhdGUgbWFpbkNhbWVyYTpib29sZWFuID0gZmFsc2U7XHJcbiAgICAgICAgcHJpdmF0ZSBjYW1lcmFUeXBlOm51bWJlciA9IDA7XHJcbiAgICAgICAgcHJpdmF0ZSBjYW1lcmFJbmVydGlhOm51bWJlciA9IDAuNTtcclxuICAgICAgICBwcml2YXRlIGNhbWVyYUNvbnRyb2xsZXI6YW55ID0gbnVsbDtcclxuICAgICAgICBwcml2YXRlIGltbWVyc2l2ZU9wdGlvbnM6YW55ID0gbnVsbDtcclxuICAgICAgICBwcml2YXRlIGFyY1JvdGF0ZUNvbmZpZzphbnkgPSBudWxsO1xyXG4gICAgICAgIHByaXZhdGUgbXVsdGlQbGF5ZXJTZXR1cDphbnkgPSBudWxsO1xyXG4gICAgICAgIHByaXZhdGUgZWRpdG9yUG9zdFByb2Nlc3Npbmc6UFJPSkVDVC5JRWRpdG9yUG9zdFByb2Nlc3NpbmcgPSBudWxsO1xyXG5cclxuICAgICAgICBwdWJsaWMgaXNNYWluQ2FtZXJhKCk6Ym9vbGVhbiB7IHJldHVybiB0aGlzLm1haW5DYW1lcmE7IH1cclxuICAgICAgICBwdWJsaWMgZ2V0Q2FtZXJhVHlwZSgpOm51bWJlciB7IHJldHVybiB0aGlzLmNhbWVyYVR5cGU7IH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgcHJvdGVjdGVkIG1fY2FtZXJhUmlnOkJBQllMT04uVGFyZ2V0Q2FtZXJhID0gbnVsbDtcclxuXHJcbiAgICAgICAgcHJvdGVjdGVkIGF3YWtlKCk6IHZvaWQgeyB0aGlzLmF3YWtlQ2FtZXJhU3lzdGVtU3RhdGUoKTsgfVxyXG4gICAgICAgIHByb3RlY3RlZCBzdGFydCgpOiB2b2lkIHsgdGhpcy5zdGFydENhbWVyYVN5c3RlbVN0YXRlKCk7IH1cclxuICAgICAgICBwcm90ZWN0ZWQgdXBkYXRlKCk6IHZvaWQgeyB0aGlzLnVwZGF0ZUNhbWVyYVN5c3RlbVN0YXRlKCk7IH1cclxuICAgICAgICBwcm90ZWN0ZWQgZGVzdHJveSgpOiB2b2lkIHsgdGhpcy5kZXN0cm95Q2FtZXJhU3lzdGVtU3RhdGUoKTsgfVxyXG5cclxuICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuICAgICAgICAvLyBVbml2ZXJzYWwgQ2FtZXJhIFN5c3RlbSBTdGF0ZSBGdW5jdGlvbnMgLy9cclxuICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuXHJcbiAgICAgICAgcHJvdGVjdGVkIGF3YWtlQ2FtZXJhU3lzdGVtU3RhdGUoKTp2b2lkIHtcclxuICAgICAgICAgICAgdGhpcy5tYWluQ2FtZXJhID0gKHRoaXMuZ2V0VHJhbnNmb3JtVGFnKCkgPT09IFwiTWFpbkNhbWVyYVwiKTtcclxuICAgICAgICAgICAgdGhpcy5jYW1lcmFUeXBlID0gdGhpcy5nZXRQcm9wZXJ0eShcIm1haW5DYW1lcmFUeXBlXCIsIHRoaXMuY2FtZXJhVHlwZSk7XHJcbiAgICAgICAgICAgIHRoaXMuY2FtZXJhSW5lcnRpYSA9IHRoaXMuZ2V0UHJvcGVydHkoXCJzZXRDYW1lcmFJbmVydGlhXCIsIHRoaXMuY2FtZXJhSW5lcnRpYSk7XHJcbiAgICAgICAgICAgIHRoaXMuaW1tZXJzaXZlT3B0aW9ucyA9IHRoaXMuZ2V0UHJvcGVydHkoXCJpbW1lcnNpdmVPcHRpb25zXCIsIHRoaXMuaW1tZXJzaXZlT3B0aW9ucyk7XHJcbiAgICAgICAgICAgIHRoaXMuYXJjUm90YXRlQ29uZmlnID0gdGhpcy5nZXRQcm9wZXJ0eShcImFyY1JvdGF0ZUNvbmZpZ1wiLCB0aGlzLmFyY1JvdGF0ZUNvbmZpZyk7XHJcbiAgICAgICAgICAgIHRoaXMubXVsdGlQbGF5ZXJTZXR1cCA9IHRoaXMuZ2V0UHJvcGVydHkoXCJtdWx0aVBsYXllclNldHVwXCIsIHRoaXMubXVsdGlQbGF5ZXJTZXR1cCk7XHJcbiAgICAgICAgICAgIHRoaXMuY2FtZXJhQ29udHJvbGxlciA9IHRoaXMuZ2V0UHJvcGVydHkoXCJjYW1lcmFDb250cm9sbGVyXCIsIHRoaXMuY2FtZXJhQ29udHJvbGxlcik7XHJcbiAgICAgICAgICAgIHRoaXMuZWRpdG9yUG9zdFByb2Nlc3NpbmcgPSB0aGlzLmdldFByb3BlcnR5KFwicmVuZGVyaW5nUGlwZWxpbmVcIiwgdGhpcy5lZGl0b3JQb3N0UHJvY2Vzc2luZyk7XHJcbiAgICAgICAgICAgIHRoaXMuY2xlYW5DYW1lcmFTeXN0ZW1TdGF0ZSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJvdGVjdGVkIGFzeW5jIHN0YXJ0Q2FtZXJhU3lzdGVtU3RhdGUoKTpQcm9taXNlPHZvaWQ+IHtcclxuICAgICAgICAgICAgQkFCWUxPTi5VdGlsaXRpZXMuVmFsaWRhdGVUcmFuc2Zvcm1RdWF0ZXJuaW9uKHRoaXMudHJhbnNmb3JtKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMubXVsdGlQbGF5ZXJTZXR1cCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBQUk9KRUNULlVuaXZlcnNhbENhbWVyYVN5c3RlbS5zdGFydHVwTW9kZSA9IHRoaXMubXVsdGlQbGF5ZXJTZXR1cC5wbGF5ZXJTdGFydHVwTW9kZTtcclxuICAgICAgICAgICAgICAgIFBST0pFQ1QuVW5pdmVyc2FsQ2FtZXJhU3lzdGVtLnN0ZXJlb0NhbWVyYXMgPSB0aGlzLm11bHRpUGxheWVyU2V0dXAuc3RlcmVvU2lkZUJ5U2lkZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyAuLlxyXG4gICAgICAgICAgICAvLyBEZWZhdWx0IENhbWVyYSBTeXN0ZW0gU3VwcG9ydFxyXG4gICAgICAgICAgICAvLyAuLlxyXG4gICAgICAgICAgICB0aGlzLm1fY2FtZXJhUmlnID0gdGhpcy5nZXRDYW1lcmFSaWcoKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMubV9jYW1lcmFSaWcgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tX2NhbWVyYVJpZy5pbmVydGlhID0gdGhpcy5jYW1lcmFJbmVydGlhO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuY2FtZXJhQ29udHJvbGxlciAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tX2NhbWVyYVJpZy5zcGVlZCA9IHRoaXMuY2FtZXJhQ29udHJvbGxlci5jYW1lcmFTcGVlZDtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1fY2FtZXJhUmlnLmludmVyc2VSb3RhdGlvblNwZWVkID0gdGhpcy5jYW1lcmFDb250cm9sbGVyLmludlJvdGF0aW9uU3BlZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm1fY2FtZXJhUmlnIGluc3RhbmNlb2YgQkFCWUxPTi5Vbml2ZXJzYWxDYW1lcmEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tX2NhbWVyYVJpZy5nYW1lcGFkQW5ndWxhclNlbnNpYmlsaXR5ID0gdGhpcy5jYW1lcmFDb250cm9sbGVyLmdhbWVwYWRSb3RhdGlvbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tX2NhbWVyYVJpZy5nYW1lcGFkTW92ZVNlbnNpYmlsaXR5ID0gdGhpcy5jYW1lcmFDb250cm9sbGVyLmdhbWVwYWRNb3ZlbWVudDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tX2NhbWVyYVJpZy50b3VjaEFuZ3VsYXJTZW5zaWJpbGl0eSA9IHRoaXMuY2FtZXJhQ29udHJvbGxlci50b3VjaFJvdGF0aW9uO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1fY2FtZXJhUmlnLnRvdWNoTW92ZVNlbnNpYmlsaXR5ID0gdGhpcy5jYW1lcmFDb250cm9sbGVyLnRvdWNoTW92ZW1lbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmNhbWVyYUNvbnRyb2xsZXIua2V5Ym9hcmRXQVNEID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm1fY2FtZXJhUmlnLmlucHV0cyAhPSBudWxsICYmIHRoaXMubV9jYW1lcmFSaWcuaW5wdXRzLmF0dGFjaGVkICE9IG51bGwgJiYgdGhpcy5tX2NhbWVyYVJpZy5pbnB1dHMuYXR0YWNoZWQua2V5Ym9hcmQgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubV9jYW1lcmFSaWcuaW5wdXRzLmF0dGFjaGVkLmtleWJvYXJkIGluc3RhbmNlb2YgQkFCWUxPTi5GcmVlQ2FtZXJhS2V5Ym9hcmRNb3ZlSW5wdXQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjaW5wdXQ6QkFCWUxPTi5GcmVlQ2FtZXJhS2V5Ym9hcmRNb3ZlSW5wdXQgPSB0aGlzLm1fY2FtZXJhUmlnLmlucHV0cy5hdHRhY2hlZC5rZXlib2FyZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaW5wdXQua2V5c1VwLnB1c2goQkFCWUxPTi5Vc2VySW5wdXRLZXkuVyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2lucHV0LmtleXNMZWZ0LnB1c2goQkFCWUxPTi5Vc2VySW5wdXRLZXkuQSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2lucHV0LmtleXNEb3duLnB1c2goQkFCWUxPTi5Vc2VySW5wdXRLZXkuUyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2lucHV0LmtleXNSaWdodC5wdXNoKEJBQllMT04uVXNlcklucHV0S2V5LkQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNpbnB1dC5yb3RhdGlvblNwZWVkID0gdGhpcy5jYW1lcmFDb250cm9sbGVyLnJvdGF0aW9uU3BlZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuY2FtZXJhQ29udHJvbGxlci5hcnJvd0tleVJvdGF0aW9uID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNpbnB1dC5rZXlzTGVmdCA9IFtCQUJZTE9OLlVzZXJJbnB1dEtleS5BXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2lucHV0LmtleXNSaWdodCA9IFtCQUJZTE9OLlVzZXJJbnB1dEtleS5EXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2lucHV0LmtleXNSb3RhdGVMZWZ0ID0gW0JBQllMT04uVXNlcklucHV0S2V5LkxlZnRBcnJvd107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNpbnB1dC5rZXlzUm90YXRlUmlnaHQgPSBbQkFCWUxPTi5Vc2VySW5wdXRLZXkuUmlnaHRBcnJvd107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMubV9jYW1lcmFSaWcuaW5wdXRzICE9IG51bGwgJiYgdGhpcy5tX2NhbWVyYVJpZy5pbnB1dHMuYXR0YWNoZWQgIT0gbnVsbCAmJiB0aGlzLm1fY2FtZXJhUmlnLmlucHV0cy5hdHRhY2hlZC5tb3VzZSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbW91c2VJbnB1dDphbnkgPSB0aGlzLm1fY2FtZXJhUmlnLmlucHV0cy5hdHRhY2hlZC5tb3VzZTtcclxuICAgICAgICAgICAgICAgICAgICAvLyAuLlxyXG4gICAgICAgICAgICAgICAgICAgIC8vIE5PVEU6IFRvdWNoIEVuYWJsZWQgTW91c2UgSGFja1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIC4uXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKEJBQllMT04uVXRpbGl0aWVzLkhhc093blByb3BlcnR5KG1vdXNlSW5wdXQsIFwidG91Y2hFbmFibGVkXCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vdXNlSW5wdXQudG91Y2hFbmFibGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5jYW1lcmFUeXBlID09PSAwIHx8IHRoaXMuY2FtZXJhVHlwZSA9PT0gNCkgeyAvLyBVbml2ZXJzYWwgQW5kIEZyZWUgVGFyZ2V0IENhbWVyYVxyXG4gICAgICAgICAgICAgICAgICAgIC8vaWYgKFBST0pFQ1QuVW5pdmVyc2FsQ2FtZXJhU3lzdGVtLlBsYXllck9uZUNhbWVyYSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFBST0pFQ1QuVW5pdmVyc2FsQ2FtZXJhU3lzdGVtLlBsYXllck9uZUNhbWVyYSA9ICh0aGlzLm1fY2FtZXJhUmlnIGFzIEJBQllMT04uRnJlZUNhbWVyYSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFBST0pFQ1QuVW5pdmVyc2FsQ2FtZXJhU3lzdGVtLlBsYXllck9uZUNhbWVyYS5pbmVydGlhID0gdGhpcy5jYW1lcmFJbmVydGlhO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAoPGFueT5QUk9KRUNULlVuaXZlcnNhbENhbWVyYVN5c3RlbS5QbGF5ZXJPbmVDYW1lcmEpLnRyYW5zZm9ybSA9IHRoaXMudHJhbnNmb3JtO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vfSAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5jYW1lcmFUeXBlID09PSAxIHx8IHRoaXMuY2FtZXJhVHlwZSA9PT0gMikgeyAvLyBXZWJYUiBDYW1lcmEgVHlwZXNcclxuICAgICAgICAgICAgICAgICAgICAvL2lmIChQUk9KRUNULlVuaXZlcnNhbENhbWVyYVN5c3RlbS5QbGF5ZXJPbmVDYW1lcmEgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBQUk9KRUNULlVuaXZlcnNhbENhbWVyYVN5c3RlbS5QbGF5ZXJPbmVDYW1lcmEgPSAodGhpcy5tX2NhbWVyYVJpZyBhcyBCQUJZTE9OLkZyZWVDYW1lcmEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBQUk9KRUNULlVuaXZlcnNhbENhbWVyYVN5c3RlbS5QbGF5ZXJPbmVDYW1lcmEuaW5lcnRpYSA9IHRoaXMuY2FtZXJhSW5lcnRpYTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgKDxhbnk+UFJPSkVDVC5Vbml2ZXJzYWxDYW1lcmFTeXN0ZW0uUGxheWVyT25lQ2FtZXJhKS50cmFuc2Zvcm0gPSB0aGlzLnRyYW5zZm9ybTtcclxuICAgICAgICAgICAgICAgICAgICAvL30gICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaW1tZXJzaXZlT3B0aW9ucyAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGxvY2FsU3RvcmFnZVJlcXVpcmVkOmJvb2xlYW4gPSAodGhpcy5pbW1lcnNpdmVPcHRpb25zLmxvY2FsU3RvcmFnZU9wdGlvbiA9PT0gdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsb2NhbFN0b3JhZ2VSZXF1aXJlZCA9PT0gZmFsc2UgfHwgKGxvY2FsU3RvcmFnZVJlcXVpcmVkID09PSB0cnVlICYmIEJBQllMT04uU2NlbmVNYW5hZ2VyLkdldFZpcnR1YWxSZWFsaXR5RW5hYmxlZCgpKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHdlYnZyRmxvb3JNZXNoZXM6QkFCWUxPTi5NZXNoW10gPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHdlYnZySGVscGVyT3B0aW9uczpCQUJZTE9OLldlYlhSRGVmYXVsdEV4cGVyaWVuY2VPcHRpb25zID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB3ZWJ2ckltbWVyc2l2ZU1vZGU6WFJTZXNzaW9uTW9kZSA9ICh0aGlzLmNhbWVyYVR5cGUgPT09IDEpID8gXCJpbW1lcnNpdmUtYXJcIiA6IFwiaW1tZXJzaXZlLXZyXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgd2VidnJSZWZlcmVuY2VUeXBlOlhSUmVmZXJlbmNlU3BhY2VUeXBlID0gXCJsb2NhbC1mbG9vclwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLmltbWVyc2l2ZU9wdGlvbnMucmVmZXJlbmNlU3BhY2VUeXBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3ZWJ2clJlZmVyZW5jZVR5cGUgPSBcInZpZXdlclwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdlYnZyUmVmZXJlbmNlVHlwZSA9IFwibG9jYWxcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3ZWJ2clJlZmVyZW5jZVR5cGUgPSBcImxvY2FsLWZsb29yXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2VidnJSZWZlcmVuY2VUeXBlID0gXCJ1bmJvdW5kZWRcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2VidnJSZWZlcmVuY2VUeXBlID0gXCJsb2NhbC1mbG9vclwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmltbWVyc2l2ZU9wdGlvbnMuc2V0Rmxvb3JNZXNoZXNUYWdzID09IG51bGwgfHwgdGhpcy5pbW1lcnNpdmVPcHRpb25zLnNldEZsb29yTWVzaGVzVGFncyA9PT0gXCJcIikgdGhpcy5pbW1lcnNpdmVPcHRpb25zLnNldEZsb29yTWVzaGVzVGFncyA9IFwiTmF2aWdhdGlvblwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaW1tZXJzaXZlT3B0aW9ucy5kZWZhdWx0VGVsZXBvcnRhdGlvblNldHVwLnVzZVRlbGVwb3J0YXRpb24gPT09IHRydWUpIHdlYnZyRmxvb3JNZXNoZXMgPSB0aGlzLnNjZW5lLmdldE1lc2hlc0J5VGFncyh0aGlzLmltbWVyc2l2ZU9wdGlvbnMuc2V0Rmxvb3JNZXNoZXNUYWdzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmltbWVyc2l2ZU9wdGlvbnMuZGVmYXVsdFRlbGVwb3J0YXRpb25TZXR1cC51c2VUZWxlcG9ydGF0aW9uID09PSB0cnVlICYmIHdlYnZyRmxvb3JNZXNoZXMgIT0gbnVsbCAmJiB3ZWJ2ckZsb29yTWVzaGVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3ZWJ2ckhlbHBlck9wdGlvbnMgPSB7IFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbG9vck1lc2hlczogd2VidnJGbG9vck1lc2hlcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uYWxGZWF0dXJlczogdGhpcy5pbW1lcnNpdmVPcHRpb25zLm9wdGlvbmFsRmVhdHVyZXMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzZVN0YWJsZVBsdWdpbnM6IHRoaXMuaW1tZXJzaXZlT3B0aW9ucy51c2VTdGFibGVQbHVnaW5zLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW5kZXJpbmdHcm91cElkOiB0aGlzLmltbWVyc2l2ZU9wdGlvbnMucmVuZGVyaW5nR3JvdXBOdW0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVEZWZhdWx0VUk6IHRoaXMuaW1tZXJzaXZlT3B0aW9ucy5kaXNhYmxlVXNlckludGVyZmFjZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzYWJsZVRlbGVwb3J0YXRpb246ICh0aGlzLmltbWVyc2l2ZU9wdGlvbnMuZGVmYXVsdFRlbGVwb3J0YXRpb25TZXR1cC51c2VUZWxlcG9ydGF0aW9uID09PSBmYWxzZSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVQb2ludGVyU2VsZWN0aW9uOiB0aGlzLmltbWVyc2l2ZU9wdGlvbnMuZGlzYWJsZVBvaW50ZXJTZWxlY3QsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlnbm9yZU5hdGl2ZUNhbWVyYVRyYW5zZm9ybWF0aW9uOiB0aGlzLmltbWVyc2l2ZU9wdGlvbnMuaWdub3JlTmF0aXZlQ2FtZXJhLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dE9wdGlvbnM6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvTm90TG9hZENvbnRyb2xsZXJNZXNoZXM6IHRoaXMuaW1tZXJzaXZlT3B0aW9ucy5leHBlcmllbmNlSW5wdXRPcHRpb25zLmRpc2FibGVNZXNoTG9hZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcmNlSW5wdXRQcm9maWxlOiB0aGlzLmltbWVyc2l2ZU9wdGlvbnMuZXhwZXJpZW5jZUlucHV0T3B0aW9ucy5mb3JjZUlucHV0UHJvZmlsZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVPbmxpbmVDb250cm9sbGVyUmVwb3NpdG9yeTogdGhpcy5pbW1lcnNpdmVPcHRpb25zLmV4cGVyaWVuY2VJbnB1dE9wdGlvbnMuZGlzYWJsZVJlcG9zaXRvcnksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXN0b21Db250cm9sbGVyc1JlcG9zaXRvcnlVUkw6IHRoaXMuaW1tZXJzaXZlT3B0aW9ucy5leHBlcmllbmNlSW5wdXRPcHRpb25zLmN1c3RvbVJlcG9zaXRvcnksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNhYmxlQ29udHJvbGxlckFuaW1hdGlvbjogdGhpcy5pbW1lcnNpdmVPcHRpb25zLmV4cGVyaWVuY2VJbnB1dE9wdGlvbnMuZGlzYWJsZU1vZGVsQW5pbSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXJPcHRpb25zOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzYWJsZU1vdGlvbkNvbnRyb2xsZXJBbmltYXRpb246IHRoaXMuaW1tZXJzaXZlT3B0aW9ucy5leHBlcmllbmNlSW5wdXRPcHRpb25zLmNvbnRyb2xsZXJPcHRpb25zLmRpc2FibGVDdHJsQW5pbSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb05vdExvYWRDb250cm9sbGVyTWVzaDogdGhpcy5pbW1lcnNpdmVPcHRpb25zLmV4cGVyaWVuY2VJbnB1dE9wdGlvbnMuY29udHJvbGxlck9wdGlvbnMuZGlzYWJsZUN0cmxNZXNoLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcmNlQ29udHJvbGxlclByb2ZpbGU6IHRoaXMuaW1tZXJzaXZlT3B0aW9ucy5leHBlcmllbmNlSW5wdXRPcHRpb25zLmNvbnRyb2xsZXJPcHRpb25zLmZvcmNlQ3RybFByb2ZpbGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVyaW5nR3JvdXBJZDogdGhpcy5pbW1lcnNpdmVPcHRpb25zLmV4cGVyaWVuY2VJbnB1dE9wdGlvbnMuY29udHJvbGxlck9wdGlvbnMucmVuZGVyaW5nR3JvdXBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdWlPcHRpb25zOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXNzaW9uTW9kZTogd2VidnJJbW1lcnNpdmVNb2RlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmZXJlbmNlU3BhY2VUeXBlOiB3ZWJ2clJlZmVyZW5jZVR5cGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3ZWJ2ckhlbHBlck9wdGlvbnMgPSB7IFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25hbEZlYXR1cmVzOiB0aGlzLmltbWVyc2l2ZU9wdGlvbnMub3B0aW9uYWxGZWF0dXJlcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNlU3RhYmxlUGx1Z2luczogdGhpcy5pbW1lcnNpdmVPcHRpb25zLnVzZVN0YWJsZVBsdWdpbnMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlcmluZ0dyb3VwSWQ6IHRoaXMuaW1tZXJzaXZlT3B0aW9ucy5yZW5kZXJpbmdHcm91cE51bSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzYWJsZURlZmF1bHRVSTogdGhpcy5pbW1lcnNpdmVPcHRpb25zLmRpc2FibGVVc2VySW50ZXJmYWNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNhYmxlVGVsZXBvcnRhdGlvbjogKHRoaXMuaW1tZXJzaXZlT3B0aW9ucy5kZWZhdWx0VGVsZXBvcnRhdGlvblNldHVwLnVzZVRlbGVwb3J0YXRpb24gPT09IGZhbHNlKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzYWJsZVBvaW50ZXJTZWxlY3Rpb246IHRoaXMuaW1tZXJzaXZlT3B0aW9ucy5kaXNhYmxlUG9pbnRlclNlbGVjdCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWdub3JlTmF0aXZlQ2FtZXJhVHJhbnNmb3JtYXRpb246IHRoaXMuaW1tZXJzaXZlT3B0aW9ucy5pZ25vcmVOYXRpdmVDYW1lcmEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0T3B0aW9uczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9Ob3RMb2FkQ29udHJvbGxlck1lc2hlczogdGhpcy5pbW1lcnNpdmVPcHRpb25zLmV4cGVyaWVuY2VJbnB1dE9wdGlvbnMuZGlzYWJsZU1lc2hMb2FkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yY2VJbnB1dFByb2ZpbGU6IHRoaXMuaW1tZXJzaXZlT3B0aW9ucy5leHBlcmllbmNlSW5wdXRPcHRpb25zLmZvcmNlSW5wdXRQcm9maWxlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzYWJsZU9ubGluZUNvbnRyb2xsZXJSZXBvc2l0b3J5OiB0aGlzLmltbWVyc2l2ZU9wdGlvbnMuZXhwZXJpZW5jZUlucHV0T3B0aW9ucy5kaXNhYmxlUmVwb3NpdG9yeSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1c3RvbUNvbnRyb2xsZXJzUmVwb3NpdG9yeVVSTDogdGhpcy5pbW1lcnNpdmVPcHRpb25zLmV4cGVyaWVuY2VJbnB1dE9wdGlvbnMuY3VzdG9tUmVwb3NpdG9yeSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVDb250cm9sbGVyQW5pbWF0aW9uOiB0aGlzLmltbWVyc2l2ZU9wdGlvbnMuZXhwZXJpZW5jZUlucHV0T3B0aW9ucy5kaXNhYmxlTW9kZWxBbmltLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlck9wdGlvbnM6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNhYmxlTW90aW9uQ29udHJvbGxlckFuaW1hdGlvbjogdGhpcy5pbW1lcnNpdmVPcHRpb25zLmV4cGVyaWVuY2VJbnB1dE9wdGlvbnMuY29udHJvbGxlck9wdGlvbnMuZGlzYWJsZUN0cmxBbmltLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvTm90TG9hZENvbnRyb2xsZXJNZXNoOiB0aGlzLmltbWVyc2l2ZU9wdGlvbnMuZXhwZXJpZW5jZUlucHV0T3B0aW9ucy5jb250cm9sbGVyT3B0aW9ucy5kaXNhYmxlQ3RybE1lc2gsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yY2VDb250cm9sbGVyUHJvZmlsZTogdGhpcy5pbW1lcnNpdmVPcHRpb25zLmV4cGVyaWVuY2VJbnB1dE9wdGlvbnMuY29udHJvbGxlck9wdGlvbnMuZm9yY2VDdHJsUHJvZmlsZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW5kZXJpbmdHcm91cElkOiB0aGlzLmltbWVyc2l2ZU9wdGlvbnMucmVuZGVyaW5nR3JvdXBOdW1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdWlPcHRpb25zOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXNzaW9uTW9kZTogd2VidnJJbW1lcnNpdmVNb2RlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmZXJlbmNlU3BhY2VUeXBlOiB3ZWJ2clJlZmVyZW5jZVR5cGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgUFJPSkVDVC5Vbml2ZXJzYWxDYW1lcmFTeXN0ZW0uWFJFeHBlcmllbmNlSGVscGVyID0gYXdhaXQgdGhpcy5zY2VuZS5jcmVhdGVEZWZhdWx0WFJFeHBlcmllbmNlQXN5bmMod2VidnJIZWxwZXJPcHRpb25zKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChQUk9KRUNULlVuaXZlcnNhbENhbWVyYVN5c3RlbS5YUkV4cGVyaWVuY2VIZWxwZXIgIT0gbnVsbCAmJiBQUk9KRUNULlVuaXZlcnNhbENhbWVyYVN5c3RlbS5YUkV4cGVyaWVuY2VIZWxwZXIuYmFzZUV4cGVyaWVuY2UgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChQUk9KRUNULlVuaXZlcnNhbENhbWVyYVN5c3RlbS5YUkV4cGVyaWVuY2VIZWxwZXIudGVsZXBvcnRhdGlvbiAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBST0pFQ1QuVW5pdmVyc2FsQ2FtZXJhU3lzdGVtLlhSRXhwZXJpZW5jZUhlbHBlci50ZWxlcG9ydGF0aW9uLnJvdGF0aW9uQW5nbGUgPSBCQUJZTE9OLlRvb2xzLlRvUmFkaWFucyh0aGlzLmltbWVyc2l2ZU9wdGlvbnMuZGVmYXVsdFRlbGVwb3J0YXRpb25TZXR1cC50dXJuaW5nQXhpc0FuZ2xlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUFJPSkVDVC5Vbml2ZXJzYWxDYW1lcmFTeXN0ZW0uWFJFeHBlcmllbmNlSGVscGVyLnRlbGVwb3J0YXRpb24ucm90YXRpb25FbmFibGVkID0gdGhpcy5pbW1lcnNpdmVPcHRpb25zLmRlZmF1bHRUZWxlcG9ydGF0aW9uU2V0dXAucm90YXRpb25zRW5hYmxlZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUFJPSkVDVC5Vbml2ZXJzYWxDYW1lcmFTeXN0ZW0uWFJFeHBlcmllbmNlSGVscGVyLnRlbGVwb3J0YXRpb24uYmFja3dhcmRzTW92ZW1lbnRFbmFibGVkID0gdGhpcy5pbW1lcnNpdmVPcHRpb25zLmRlZmF1bHRUZWxlcG9ydGF0aW9uU2V0dXAuYmFja3dhcmRzRW5hYmxlZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUFJPSkVDVC5Vbml2ZXJzYWxDYW1lcmFTeXN0ZW0uWFJFeHBlcmllbmNlSGVscGVyLnRlbGVwb3J0YXRpb24uYmFja3dhcmRzVGVsZXBvcnRhdGlvbkRpc3RhbmNlID0gdGhpcy5pbW1lcnNpdmVPcHRpb25zLmRlZmF1bHRUZWxlcG9ydGF0aW9uU2V0dXAuYmFja3dhcmRzRGlzdGFuY2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBST0pFQ1QuVW5pdmVyc2FsQ2FtZXJhU3lzdGVtLlhSRXhwZXJpZW5jZUhlbHBlci50ZWxlcG9ydGF0aW9uLnBhcmFib2xpY0NoZWNrUmFkaXVzID0gdGhpcy5pbW1lcnNpdmVPcHRpb25zLmRlZmF1bHRUZWxlcG9ydGF0aW9uU2V0dXAucGFyYWJvbGljUmFkaXVzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoUFJPSkVDVC5Vbml2ZXJzYWxDYW1lcmFTeXN0ZW0uT25YUkV4cGVyaWVuY2VIZWxwZXJPYnNlcnZhYmxlLmhhc09ic2VydmVycygpID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBST0pFQ1QuVW5pdmVyc2FsQ2FtZXJhU3lzdGVtLk9uWFJFeHBlcmllbmNlSGVscGVyT2JzZXJ2YWJsZS5ub3RpZnlPYnNlcnZlcnMoUFJPSkVDVC5Vbml2ZXJzYWxDYW1lcmFTeXN0ZW0uWFJFeHBlcmllbmNlSGVscGVyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKEJBQllMT04uU2NlbmVNYW5hZ2VyLkhhc05hdmlnYXRpb25EYXRhKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbmF2bWVzaDpCQUJZTE9OLk1lc2ggPSBCQUJZTE9OLlNjZW5lTWFuYWdlci5HZXROYXZpZ2F0aW9uTWVzaCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQUk9KRUNULlVuaXZlcnNhbENhbWVyYVN5c3RlbS5TZXR1cE5hdmlnYXRpb25XZWJYUihuYXZtZXNoLCB0aGlzLmltbWVyc2l2ZU9wdGlvbnMuc2V0Rmxvb3JNZXNoZXNUYWdzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBCQUJZTE9OLlNjZW5lTWFuYWdlci5Pbk5hdk1lc2hSZWFkeU9ic2VydmFibGUuYWRkT25jZSgobmF2bWVzaDpCQUJZTE9OLk1lc2gpPT57XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQUk9KRUNULlVuaXZlcnNhbENhbWVyYVN5c3RlbS5TZXR1cE5hdmlnYXRpb25XZWJYUihuYXZtZXNoLCB0aGlzLmltbWVyc2l2ZU9wdGlvbnMuc2V0Rmxvb3JNZXNoZXNUYWdzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBCQUJZTE9OLlNjZW5lTWFuYWdlci5Mb2dXYXJuaW5nKFwiV2ViWFIgbm90IHN1cHBvcnRlZCBpbiBjdXJyZW50IGJyb3dzZXIuXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmNhbWVyYVR5cGUgPT09IDMpIHsgLy8gTXVsdGkgUGxheWVyIENhbWVyYVxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNhbWVyYU5hbWUgPSB0aGlzLm1fY2FtZXJhUmlnLm5hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9pZiAoUFJPSkVDVC5Vbml2ZXJzYWxDYW1lcmFTeXN0ZW0uUGxheWVyT25lQ2FtZXJhID09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcGxheWVyT25lVHJhbnNmb3JtOkJBQllMT04uVHJhbnNmb3JtTm9kZSA9IG5ldyBCQUJZTE9OLlRyYW5zZm9ybU5vZGUoXCJQbGF5ZXIgQ2FtZXJhIDFcIiwgdGhpcy5zY2VuZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBsYXllck9uZVRyYW5zZm9ybS5yb3RhdGlvblF1YXRlcm5pb24gPSB0aGlzLnRyYW5zZm9ybS5yb3RhdGlvblF1YXRlcm5pb24uY2xvbmUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGxheWVyT25lVHJhbnNmb3JtLnBvc2l0aW9uID0gdGhpcy50cmFuc2Zvcm0ucG9zaXRpb24uY2xvbmUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGxheWVyT25lVHJhbnNmb3JtLnBhcmVudCA9IHRoaXMudHJhbnNmb3JtLnBhcmVudDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gLi5cclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcGxheWVyT25lTmFtZTpzdHJpbmcgPSBjYW1lcmFOYW1lICsgXCIuMVwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwbGF5ZXJPbmVDYW1lcmF4OkJBQllMT04uRnJlZUNhbWVyYSA9IHRoaXMubV9jYW1lcmFSaWcuY2xvbmUocGxheWVyT25lTmFtZSkgYXMgQkFCWUxPTi5GcmVlQ2FtZXJhO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXJPbmVDYW1lcmF4Lm5hbWUgPSBwbGF5ZXJPbmVOYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXJPbmVDYW1lcmF4LnBhcmVudCA9IHBsYXllck9uZVRyYW5zZm9ybTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGxheWVyT25lQ2FtZXJheC5wb3NpdGlvbiA9IG5ldyBCQUJZTE9OLlZlY3RvcjMoMCwwLDApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXJPbmVDYW1lcmF4LnJvdGF0aW9uUXVhdGVybmlvbiA9IG5ldyBCQUJZTE9OLlF1YXRlcm5pb24oMCwwLDAsMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBsYXllck9uZUNhbWVyYXgudmlld3BvcnQgPSBuZXcgQkFCWUxPTi5WaWV3cG9ydCgwLCAwLCAwLCAwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGxheWVyT25lQ2FtZXJheC5zZXRFbmFibGVkKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgUFJPSkVDVC5Vbml2ZXJzYWxDYW1lcmFTeXN0ZW0uUGxheWVyT25lQ2FtZXJhID0gcGxheWVyT25lQ2FtZXJheDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgUFJPSkVDVC5Vbml2ZXJzYWxDYW1lcmFTeXN0ZW0uUGxheWVyT25lQ2FtZXJhLmluZXJ0aWEgPSB0aGlzLmNhbWVyYUluZXJ0aWE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICg8YW55PlBST0pFQ1QuVW5pdmVyc2FsQ2FtZXJhU3lzdGVtLlBsYXllck9uZUNhbWVyYSkudHJhbnNmb3JtID0gcGxheWVyT25lVHJhbnNmb3JtO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAoPGFueT5wbGF5ZXJPbmVUcmFuc2Zvcm0pLmNhbWVyYVJpZyA9IFBST0pFQ1QuVW5pdmVyc2FsQ2FtZXJhU3lzdGVtLlBsYXllck9uZUNhbWVyYTtcclxuICAgICAgICAgICAgICAgICAgICAvL30gICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgLy9pZiAoUFJPSkVDVC5Vbml2ZXJzYWxDYW1lcmFTeXN0ZW0uUGxheWVyVHdvQ2FtZXJhID09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcGxheWVyVHdvVHJhbnNmb3JtOkJBQllMT04uVHJhbnNmb3JtTm9kZSA9IG5ldyBCQUJZTE9OLlRyYW5zZm9ybU5vZGUoXCJQbGF5ZXIgQ2FtZXJhIDJcIiwgdGhpcy5zY2VuZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBsYXllclR3b1RyYW5zZm9ybS5yb3RhdGlvblF1YXRlcm5pb24gPSB0aGlzLnRyYW5zZm9ybS5yb3RhdGlvblF1YXRlcm5pb24uY2xvbmUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGxheWVyVHdvVHJhbnNmb3JtLnBvc2l0aW9uID0gdGhpcy50cmFuc2Zvcm0ucG9zaXRpb24uY2xvbmUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGxheWVyVHdvVHJhbnNmb3JtLnBhcmVudCA9IHRoaXMudHJhbnNmb3JtLnBhcmVudDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gLi5cclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcGxheWVyVHdvTmFtZTpzdHJpbmcgPSBjYW1lcmFOYW1lICsgXCIuMlwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwbGF5ZXJUd29DYW1lcmF4OkJBQllMT04uRnJlZUNhbWVyYSA9IHRoaXMubV9jYW1lcmFSaWcuY2xvbmUocGxheWVyVHdvTmFtZSkgYXMgQkFCWUxPTi5GcmVlQ2FtZXJhO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXJUd29DYW1lcmF4Lm5hbWUgPSBwbGF5ZXJUd29OYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXJUd29DYW1lcmF4LnBhcmVudCA9IHBsYXllclR3b1RyYW5zZm9ybTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGxheWVyVHdvQ2FtZXJheC5wb3NpdGlvbiA9IG5ldyBCQUJZTE9OLlZlY3RvcjMoMCwwLDApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXJUd29DYW1lcmF4LnJvdGF0aW9uUXVhdGVybmlvbiA9IG5ldyBCQUJZTE9OLlF1YXRlcm5pb24oMCwwLDAsMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBsYXllclR3b0NhbWVyYXgudmlld3BvcnQgPSBuZXcgQkFCWUxPTi5WaWV3cG9ydCgwLCAwLCAwLCAwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGxheWVyVHdvQ2FtZXJheC5zZXRFbmFibGVkKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgUFJPSkVDVC5Vbml2ZXJzYWxDYW1lcmFTeXN0ZW0uUGxheWVyVHdvQ2FtZXJhID0gcGxheWVyVHdvQ2FtZXJheDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgUFJPSkVDVC5Vbml2ZXJzYWxDYW1lcmFTeXN0ZW0uUGxheWVyVHdvQ2FtZXJhLmluZXJ0aWEgPSB0aGlzLmNhbWVyYUluZXJ0aWE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICg8YW55PlBST0pFQ1QuVW5pdmVyc2FsQ2FtZXJhU3lzdGVtLlBsYXllclR3b0NhbWVyYSkudHJhbnNmb3JtID0gcGxheWVyVHdvVHJhbnNmb3JtO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAoPGFueT5wbGF5ZXJUd29UcmFuc2Zvcm0pLmNhbWVyYVJpZyA9IFBST0pFQ1QuVW5pdmVyc2FsQ2FtZXJhU3lzdGVtLlBsYXllclR3b0NhbWVyYTtcclxuICAgICAgICAgICAgICAgICAgICAvL31cclxuICAgICAgICAgICAgICAgICAgICAvL2lmIChQUk9KRUNULlVuaXZlcnNhbENhbWVyYVN5c3RlbS5QbGF5ZXJUaHJlZUNhbWVyYSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHBsYXllclRocmVlVHJhbnNmb3JtOkJBQllMT04uVHJhbnNmb3JtTm9kZSA9IG5ldyBCQUJZTE9OLlRyYW5zZm9ybU5vZGUoXCJQbGF5ZXIgQ2FtZXJhIDNcIiwgdGhpcy5zY2VuZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBsYXllclRocmVlVHJhbnNmb3JtLnJvdGF0aW9uUXVhdGVybmlvbiA9IHRoaXMudHJhbnNmb3JtLnJvdGF0aW9uUXVhdGVybmlvbi5jbG9uZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXJUaHJlZVRyYW5zZm9ybS5wb3NpdGlvbiA9IHRoaXMudHJhbnNmb3JtLnBvc2l0aW9uLmNsb25lKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBsYXllclRocmVlVHJhbnNmb3JtLnBhcmVudCA9IHRoaXMudHJhbnNmb3JtLnBhcmVudDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gLi5cclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcGxheWVyVGhyZWVOYW1lOnN0cmluZyA9IGNhbWVyYU5hbWUgKyBcIi4zXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHBsYXllclRocmVlQ2FtZXJheDpCQUJZTE9OLkZyZWVDYW1lcmEgPSB0aGlzLm1fY2FtZXJhUmlnLmNsb25lKHBsYXllclRocmVlTmFtZSkgYXMgQkFCWUxPTi5GcmVlQ2FtZXJhO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXJUaHJlZUNhbWVyYXgubmFtZSA9IHBsYXllclRocmVlTmFtZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGxheWVyVGhyZWVDYW1lcmF4LnBhcmVudCA9IHBsYXllclRocmVlVHJhbnNmb3JtO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXJUaHJlZUNhbWVyYXgucG9zaXRpb24gPSBuZXcgQkFCWUxPTi5WZWN0b3IzKDAsMCwwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGxheWVyVGhyZWVDYW1lcmF4LnJvdGF0aW9uUXVhdGVybmlvbiA9IG5ldyBCQUJZTE9OLlF1YXRlcm5pb24oMCwwLDAsMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBsYXllclRocmVlQ2FtZXJheC52aWV3cG9ydCA9IG5ldyBCQUJZTE9OLlZpZXdwb3J0KDAsIDAsIDAsIDApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXJUaHJlZUNhbWVyYXguc2V0RW5hYmxlZChmYWxzZSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBQUk9KRUNULlVuaXZlcnNhbENhbWVyYVN5c3RlbS5QbGF5ZXJUaHJlZUNhbWVyYSA9IHBsYXllclRocmVlQ2FtZXJheDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgUFJPSkVDVC5Vbml2ZXJzYWxDYW1lcmFTeXN0ZW0uUGxheWVyVGhyZWVDYW1lcmEuaW5lcnRpYSA9IHRoaXMuY2FtZXJhSW5lcnRpYTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgKDxhbnk+UFJPSkVDVC5Vbml2ZXJzYWxDYW1lcmFTeXN0ZW0uUGxheWVyVGhyZWVDYW1lcmEpLnRyYW5zZm9ybSA9IHBsYXllclRocmVlVHJhbnNmb3JtO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAoPGFueT5wbGF5ZXJUaHJlZVRyYW5zZm9ybSkuY2FtZXJhUmlnID0gUFJPSkVDVC5Vbml2ZXJzYWxDYW1lcmFTeXN0ZW0uUGxheWVyVGhyZWVDYW1lcmE7XHJcbiAgICAgICAgICAgICAgICAgICAgLy99XHJcbiAgICAgICAgICAgICAgICAgICAgLy9pZiAoUFJPSkVDVC5Vbml2ZXJzYWxDYW1lcmFTeXN0ZW0uUGxheWVyRm91ckNhbWVyYSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHBsYXllckZvdXJUcmFuc2Zvcm06QkFCWUxPTi5UcmFuc2Zvcm1Ob2RlID0gbmV3IEJBQllMT04uVHJhbnNmb3JtTm9kZShcIlBsYXllciBDYW1lcmEgNFwiLCB0aGlzLnNjZW5lKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGxheWVyRm91clRyYW5zZm9ybS5yb3RhdGlvblF1YXRlcm5pb24gPSB0aGlzLnRyYW5zZm9ybS5yb3RhdGlvblF1YXRlcm5pb24uY2xvbmUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGxheWVyRm91clRyYW5zZm9ybS5wb3NpdGlvbiA9IHRoaXMudHJhbnNmb3JtLnBvc2l0aW9uLmNsb25lKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBsYXllckZvdXJUcmFuc2Zvcm0ucGFyZW50ID0gdGhpcy50cmFuc2Zvcm0ucGFyZW50O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAuLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwbGF5ZXJGb3VyTmFtZTpzdHJpbmcgPSBjYW1lcmFOYW1lICsgXCIuNFwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwbGF5ZXJGb3VyQ2FtZXJheDpCQUJZTE9OLkZyZWVDYW1lcmEgPSB0aGlzLm1fY2FtZXJhUmlnLmNsb25lKHBsYXllckZvdXJOYW1lKSBhcyBCQUJZTE9OLkZyZWVDYW1lcmE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBsYXllckZvdXJDYW1lcmF4Lm5hbWUgPSBwbGF5ZXJGb3VyTmFtZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGxheWVyRm91ckNhbWVyYXgucGFyZW50ID0gcGxheWVyRm91clRyYW5zZm9ybTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGxheWVyRm91ckNhbWVyYXgucG9zaXRpb24gPSBuZXcgQkFCWUxPTi5WZWN0b3IzKDAsMCwwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGxheWVyRm91ckNhbWVyYXgucm90YXRpb25RdWF0ZXJuaW9uID0gbmV3IEJBQllMT04uUXVhdGVybmlvbigwLDAsMCwxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGxheWVyRm91ckNhbWVyYXgudmlld3BvcnQgPSBuZXcgQkFCWUxPTi5WaWV3cG9ydCgwLCAwLCAwLCAwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGxheWVyRm91ckNhbWVyYXguc2V0RW5hYmxlZChmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFBST0pFQ1QuVW5pdmVyc2FsQ2FtZXJhU3lzdGVtLlBsYXllckZvdXJDYW1lcmEgPSBwbGF5ZXJGb3VyQ2FtZXJheDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgUFJPSkVDVC5Vbml2ZXJzYWxDYW1lcmFTeXN0ZW0uUGxheWVyRm91ckNhbWVyYS5pbmVydGlhID0gdGhpcy5jYW1lcmFJbmVydGlhO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAoPGFueT5QUk9KRUNULlVuaXZlcnNhbENhbWVyYVN5c3RlbS5QbGF5ZXJGb3VyQ2FtZXJhKS50cmFuc2Zvcm0gPSBwbGF5ZXJGb3VyVHJhbnNmb3JtO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAoPGFueT5wbGF5ZXJGb3VyVHJhbnNmb3JtKS5jYW1lcmFSaWcgPSBQUk9KRUNULlVuaXZlcnNhbENhbWVyYVN5c3RlbS5QbGF5ZXJGb3VyQ2FtZXJhO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vfVxyXG4gICAgICAgICAgICAgICAgICAgIFBST0pFQ1QuVW5pdmVyc2FsQ2FtZXJhU3lzdGVtLm11bHRpUGxheWVyVmlldyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgUFJPSkVDVC5Vbml2ZXJzYWxDYW1lcmFTeXN0ZW0uU2V0TXVsdGlQbGF5ZXJWaWV3TGF5b3V0KHRoaXMuc2NlbmUsIFBST0pFQ1QuVW5pdmVyc2FsQ2FtZXJhU3lzdGVtLnN0YXJ0dXBNb2RlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIC4uXHJcbiAgICAgICAgICAgICAgICAvLyBWYWxpZGF0ZSBDYW1lcmEgQXR0YWNoIENvbnRyb2xcclxuICAgICAgICAgICAgICAgIC8vIC4uXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5jYW1lcmFDb250cm9sbGVyLmF0dGFjaENvbnRyb2wgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1fY2FtZXJhUmlnLnBhcmVudCA9IG51bGw7IC8vIERldGFjaCBDYW1lcmEgUGFyZW50IFdoZW4gQXR0YWNoaW5nIENvbnRyb2xcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1fY2FtZXJhUmlnLnBvc2l0aW9uLmNvcHlGcm9tKHRoaXMudHJhbnNmb3JtLnBvc2l0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1fY2FtZXJhUmlnLnJvdGF0aW9uUXVhdGVybmlvbiA9ICh0aGlzLnRyYW5zZm9ybS5yb3RhdGlvblF1YXRlcm5pb24gIT0gbnVsbCkgPyB0aGlzLnRyYW5zZm9ybS5yb3RhdGlvblF1YXRlcm5pb24uY2xvbmUoKSA6IEJBQllMT04uUXVhdGVybmlvbi5Gcm9tRXVsZXJBbmdsZXModGhpcy50cmFuc2Zvcm0ucm90YXRpb24ueCwgdGhpcy50cmFuc2Zvcm0ucm90YXRpb24ueSwgdGhpcy50cmFuc2Zvcm0ucm90YXRpb24ueik7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubV9jYW1lcmFSaWcgaW5zdGFuY2VvZiBCQUJZTE9OLkZyZWVDYW1lcmEpIHsgLy8gTm90ZTogQ2hlY2sgQmFzZSBDbGFzcyBGb3IgVW5pdmVyc2FsIENhbWVyYVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1fY2FtZXJhUmlnLmNoZWNrQ29sbGlzaW9ucyA9IHRoaXMuY2FtZXJhQ29udHJvbGxlci5jaGVja0NvbGxpc2lvbnM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubV9jYW1lcmFSaWcuYXBwbHlHcmF2aXR5ID0gdGhpcy5jYW1lcmFDb250cm9sbGVyLnNldEFwcGx5R3Jhdml0eTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tX2NhbWVyYVJpZy5hdHRhY2hDb250cm9sKHRoaXMuY2FtZXJhQ29udHJvbGxlci5wcmV2ZW50RGVmYXVsdCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgcXVhbGl0eTpCQUJZTE9OLlJlbmRlclF1YWxpdHkgPSBCQUJZTE9OLlNjZW5lTWFuYWdlci5HZXRSZW5kZXJRdWFsaXR5KCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGFsbG93UHJvY2Vzc2luZzpib29sZWFuID0gKHF1YWxpdHkgPT09IEJBQllMT04uUmVuZGVyUXVhbGl0eS5IaWdoKTtcclxuICAgICAgICAgICAgLy9pZiAoUFJPSkVDVC5Vbml2ZXJzYWxDYW1lcmFTeXN0ZW0ucmVuZGVyaW5nUGlwZWxpbmUgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGFsbG93UHJvY2Vzc2luZyA9PT0gdHJ1ZSAmJiB0aGlzLmVkaXRvclBvc3RQcm9jZXNzaW5nICE9IG51bGwgJiYgdGhpcy5lZGl0b3JQb3N0UHJvY2Vzc2luZy51c2VQb3N0UHJvY2Vzc2luZyA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIFBST0pFQ1QuVW5pdmVyc2FsQ2FtZXJhU3lzdGVtLnJlbmRlcmluZ1BpcGVsaW5lID0gbmV3IEJBQllMT04uRGVmYXVsdFJlbmRlcmluZ1BpcGVsaW5lKFwiVW5pdmVyc2FsQ2FtZXJhU3lzdGVtXCIsIHRoaXMuZWRpdG9yUG9zdFByb2Nlc3NpbmcuaGlnaER5bmFtaWNSYW5nZSwgdGhpcy5zY2VuZSwgdGhpcy5zY2VuZS5jYW1lcmFzLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoUFJPSkVDVC5Vbml2ZXJzYWxDYW1lcmFTeXN0ZW0ucmVuZGVyaW5nUGlwZWxpbmUuaXNTdXBwb3J0ZWQgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZGVmYXVsdFBpcGVsaW5lOkJBQllMT04uRGVmYXVsdFJlbmRlcmluZ1BpcGVsaW5lID0gUFJPSkVDVC5Vbml2ZXJzYWxDYW1lcmFTeXN0ZW0ucmVuZGVyaW5nUGlwZWxpbmU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRQaXBlbGluZS5zYW1wbGVzID0gdGhpcy5lZGl0b3JQb3N0UHJvY2Vzc2luZy5zY3JlZW5BbnRpQWxpYXNpbmcubXNhYVNhbXBsZXM7IC8vIDEgYnkgZGVmYXVsdCAoTVNBQSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgLyogSW1hZ2UgUHJvY2Vzc2luZyAqL1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0UGlwZWxpbmUuaW1hZ2VQcm9jZXNzaW5nRW5hYmxlZCA9IHRoaXMuZWRpdG9yUG9zdFByb2Nlc3NpbmcuaW1hZ2VQcm9jZXNzaW5nQ29uZmlnLmltYWdlUHJvY2Vzc2luZzsgLy90cnVlIGJ5IGRlZmF1bHRcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRlZmF1bHRQaXBlbGluZS5pbWFnZVByb2Nlc3NpbmdFbmFibGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0UGlwZWxpbmUuaW1hZ2VQcm9jZXNzaW5nLmNvbnRyYXN0ID0gdGhpcy5lZGl0b3JQb3N0UHJvY2Vzc2luZy5pbWFnZVByb2Nlc3NpbmdDb25maWcuaW1hZ2VDb250cmFzdDsgLy8gMSBieSBkZWZhdWx0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0UGlwZWxpbmUuaW1hZ2VQcm9jZXNzaW5nLmV4cG9zdXJlID0gdGhpcy5lZGl0b3JQb3N0UHJvY2Vzc2luZy5pbWFnZVByb2Nlc3NpbmdDb25maWcuaW1hZ2VFeHBvc3VyZTsgLy8gMSBieSBkZWZhdWx0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0UGlwZWxpbmUuaW1hZ2VQcm9jZXNzaW5nLnZpZ25ldHRlRW5hYmxlZCA9IHRoaXMuZWRpdG9yUG9zdFByb2Nlc3NpbmcuaW1hZ2VQcm9jZXNzaW5nQ29uZmlnLnZpZ25ldHRlRW5hYmxlZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkZWZhdWx0UGlwZWxpbmUuaW1hZ2VQcm9jZXNzaW5nLnZpZ25ldHRlRW5hYmxlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRQaXBlbGluZS5pbWFnZVByb2Nlc3NpbmcudmlnbmV0dGVCbGVuZE1vZGUgPSB0aGlzLmVkaXRvclBvc3RQcm9jZXNzaW5nLmltYWdlUHJvY2Vzc2luZ0NvbmZpZy52aWduZXR0ZUJsZW5kTW9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0UGlwZWxpbmUuaW1hZ2VQcm9jZXNzaW5nLnZpZ25ldHRlQ2FtZXJhRm92ID0gdGhpcy5lZGl0b3JQb3N0UHJvY2Vzc2luZy5pbWFnZVByb2Nlc3NpbmdDb25maWcudmlnbmV0dGVDYW1lcmFGb3Y7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdFBpcGVsaW5lLmltYWdlUHJvY2Vzc2luZy52aWduZXR0ZUNlbnRyZVggPSB0aGlzLmVkaXRvclBvc3RQcm9jZXNzaW5nLmltYWdlUHJvY2Vzc2luZ0NvbmZpZy52aWduZXR0ZUNlbnRyZVg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdFBpcGVsaW5lLmltYWdlUHJvY2Vzc2luZy52aWduZXR0ZUNlbnRyZVkgPSB0aGlzLmVkaXRvclBvc3RQcm9jZXNzaW5nLmltYWdlUHJvY2Vzc2luZ0NvbmZpZy52aWduZXR0ZUNlbnRyZVk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdFBpcGVsaW5lLmltYWdlUHJvY2Vzc2luZy52aWduZXR0ZVN0cmV0Y2ggPSB0aGlzLmVkaXRvclBvc3RQcm9jZXNzaW5nLmltYWdlUHJvY2Vzc2luZ0NvbmZpZy52aWduZXR0ZVN0cmV0Y2g7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdFBpcGVsaW5lLmltYWdlUHJvY2Vzc2luZy52aWduZXR0ZVdlaWdodCA9IHRoaXMuZWRpdG9yUG9zdFByb2Nlc3NpbmcuaW1hZ2VQcm9jZXNzaW5nQ29uZmlnLnZpZ25ldHRlV2VpZ2h0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmVkaXRvclBvc3RQcm9jZXNzaW5nLmltYWdlUHJvY2Vzc2luZ0NvbmZpZy52aWduZXR0ZUNvbG9yICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdmNvbG9yOkJBQllMT04uQ29sb3I0ID0gQkFCWUxPTi5VdGlsaXRpZXMuUGFyc2VDb2xvcjQodGhpcy5lZGl0b3JQb3N0UHJvY2Vzc2luZy5pbWFnZVByb2Nlc3NpbmdDb25maWcudmlnbmV0dGVDb2xvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2Y29sb3IgIT0gbnVsbCkgZGVmYXVsdFBpcGVsaW5lLmltYWdlUHJvY2Vzc2luZy52aWduZXR0ZUNvbG9yID0gdmNvbG9yO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIENvbG9yIEdyYWRpbmcgKi9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRQaXBlbGluZS5pbWFnZVByb2Nlc3NpbmcuY29sb3JHcmFkaW5nRW5hYmxlZCA9IHRoaXMuZWRpdG9yUG9zdFByb2Nlc3NpbmcuaW1hZ2VQcm9jZXNzaW5nQ29uZmlnLnVzZUNvbG9yR3JhZGluZzsgLy8gZmFsc2UgYnkgZGVmYXVsdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRlZmF1bHRQaXBlbGluZS5pbWFnZVByb2Nlc3NpbmcuY29sb3JHcmFkaW5nRW5hYmxlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEtFRVAgRk9SIFJFRkVSRU5DRVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIHVzaW5nIC4zZGwgKGJlc3QpIDogZGVmYXVsdFBpcGVsaW5lLmltYWdlUHJvY2Vzc2luZy5jb2xvckdyYWRpbmdUZXh0dXJlID0gbmV3IEJBQllMT04uQ29sb3JHcmFkaW5nVGV4dHVyZShcInRleHR1cmVzL0xhdGVTdW5zZXQuM2RsXCIsIHRoaXMuc2NlbmUpOyAqL1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIHVzaW5nIC5wbmcgOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb2xvckdyYWRpbmdUZXh0dXJlID0gbmV3IEJBQllMT04uVGV4dHVyZShcInRleHR1cmVzL2NvbG9yR3JhZGUtaGlnaENvbnRyYXN0LnBuZ1wiLCB0aGlzLnNjZW5lLCB0cnVlLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JHcmFkaW5nVGV4dHVyZS53cmFwVSA9IEJBQllMT04uVGV4dHVyZS5DTEFNUF9BRERSRVNTTU9ERTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvckdyYWRpbmdUZXh0dXJlLndyYXBWID0gQkFCWUxPTi5UZXh0dXJlLkNMQU1QX0FERFJFU1NNT0RFOyAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0UGlwZWxpbmUuaW1hZ2VQcm9jZXNzaW5nLmNvbG9yR3JhZGluZ1RleHR1cmUgPSBjb2xvckdyYWRpbmdUZXh0dXJlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRQaXBlbGluZS5pbWFnZVByb2Nlc3NpbmcuY29sb3JHcmFkaW5nV2l0aEdyZWVuRGVwdGggPSBmYWxzZTsgKi9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmVkaXRvclBvc3RQcm9jZXNzaW5nLmltYWdlUHJvY2Vzc2luZ0NvbmZpZy5zZXRHcmFkaW5nVGV4dHVyZSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbG9yR3JhZGluZ1RleHR1cmU6QkFCWUxPTi5UZXh0dXJlID0gQkFCWUxPTi5VdGlsaXRpZXMuUGFyc2VUZXh0dXJlKHRoaXMuZWRpdG9yUG9zdFByb2Nlc3NpbmcuaW1hZ2VQcm9jZXNzaW5nQ29uZmlnLnNldEdyYWRpbmdUZXh0dXJlLCB0aGlzLnNjZW5lLCB0cnVlLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yR3JhZGluZ1RleHR1cmUud3JhcFUgPSBCQUJZTE9OLlRleHR1cmUuQ0xBTVBfQUREUkVTU01PREU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yR3JhZGluZ1RleHR1cmUud3JhcFYgPSBCQUJZTE9OLlRleHR1cmUuQ0xBTVBfQUREUkVTU01PREU7ICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0UGlwZWxpbmUuaW1hZ2VQcm9jZXNzaW5nLmNvbG9yR3JhZGluZ1RleHR1cmUgPSBjb2xvckdyYWRpbmdUZXh0dXJlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoPGFueT5kZWZhdWx0UGlwZWxpbmUuaW1hZ2VQcm9jZXNzaW5nKS5jb2xvckdyYWRpbmdXaXRoR3JlZW5EZXB0aCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIENvbG9yIEN1cnZlcyAqL1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdFBpcGVsaW5lLmltYWdlUHJvY2Vzc2luZy5jb2xvckN1cnZlc0VuYWJsZWQgPSB0aGlzLmVkaXRvclBvc3RQcm9jZXNzaW5nLmltYWdlUHJvY2Vzc2luZ0NvbmZpZy5pbWFnaW5nQ29sb3JDdXJ2ZXMuY3VydmVzRW5hYmxlZDsgLy8gZmFsc2UgYnkgZGVmYXVsdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRlZmF1bHRQaXBlbGluZS5pbWFnZVByb2Nlc3NpbmcuY29sb3JDdXJ2ZXNFbmFibGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGN1cnZlID0gbmV3IEJBQllMT04uQ29sb3JDdXJ2ZXMoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJ2ZS5nbG9iYWxEZW5zaXR5ID0gdGhpcy5lZGl0b3JQb3N0UHJvY2Vzc2luZy5pbWFnZVByb2Nlc3NpbmdDb25maWcuaW1hZ2luZ0NvbG9yQ3VydmVzLmdsb2JhbERlbjsgLy8gMCBieSBkZWZhdWx0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VydmUuZ2xvYmFsRXhwb3N1cmUgPSB0aGlzLmVkaXRvclBvc3RQcm9jZXNzaW5nLmltYWdlUHJvY2Vzc2luZ0NvbmZpZy5pbWFnaW5nQ29sb3JDdXJ2ZXMuZ2xvYmFsRXhwOyAvLyAwIGJ5IGRlZmF1bHRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJ2ZS5nbG9iYWxIdWUgPSB0aGlzLmVkaXRvclBvc3RQcm9jZXNzaW5nLmltYWdlUHJvY2Vzc2luZ0NvbmZpZy5pbWFnaW5nQ29sb3JDdXJ2ZXMuZ2xvYmFsSHVlOyAvLyAzMCBieSBkZWZhdWx0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VydmUuZ2xvYmFsU2F0dXJhdGlvbiA9IHRoaXMuZWRpdG9yUG9zdFByb2Nlc3NpbmcuaW1hZ2VQcm9jZXNzaW5nQ29uZmlnLmltYWdpbmdDb2xvckN1cnZlcy5nbG9iYWxTYXQ7IC8vIDAgYnkgZGVmYXVsdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnZlLmhpZ2hsaWdodHNEZW5zaXR5ID0gdGhpcy5lZGl0b3JQb3N0UHJvY2Vzc2luZy5pbWFnZVByb2Nlc3NpbmdDb25maWcuaW1hZ2luZ0NvbG9yQ3VydmVzLmhpZ2hsaWdodHNEZW47IC8vIDAgYnkgZGVmYXVsdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnZlLmhpZ2hsaWdodHNFeHBvc3VyZSA9IHRoaXMuZWRpdG9yUG9zdFByb2Nlc3NpbmcuaW1hZ2VQcm9jZXNzaW5nQ29uZmlnLmltYWdpbmdDb2xvckN1cnZlcy5oaWdobGlnaHRzRXhwOyAvLyAwIGJ5IGRlZmF1bHRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJ2ZS5oaWdobGlnaHRzSHVlID0gdGhpcy5lZGl0b3JQb3N0UHJvY2Vzc2luZy5pbWFnZVByb2Nlc3NpbmdDb25maWcuaW1hZ2luZ0NvbG9yQ3VydmVzLmhpZ2hsaWdodHNIdWU7IC8vIDMwIGJ5IGRlZmF1bHRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJ2ZS5oaWdobGlnaHRzU2F0dXJhdGlvbiA9IHRoaXMuZWRpdG9yUG9zdFByb2Nlc3NpbmcuaW1hZ2VQcm9jZXNzaW5nQ29uZmlnLmltYWdpbmdDb2xvckN1cnZlcy5oaWdobGlnaHRzU2F0OyAvLyAwIGJ5IGRlZmF1bHRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJ2ZS5taWR0b25lc0RlbnNpdHkgPSB0aGlzLmVkaXRvclBvc3RQcm9jZXNzaW5nLmltYWdlUHJvY2Vzc2luZ0NvbmZpZy5pbWFnaW5nQ29sb3JDdXJ2ZXMubWlkdG9uZXNEZW47IC8vIDAgYnkgZGVmYXVsdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnZlLm1pZHRvbmVzRXhwb3N1cmUgPSB0aGlzLmVkaXRvclBvc3RQcm9jZXNzaW5nLmltYWdlUHJvY2Vzc2luZ0NvbmZpZy5pbWFnaW5nQ29sb3JDdXJ2ZXMubWlkdG9uZXNFeHA7IC8vIDAgYnkgZGVmYXVsdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnZlLm1pZHRvbmVzSHVlID0gdGhpcy5lZGl0b3JQb3N0UHJvY2Vzc2luZy5pbWFnZVByb2Nlc3NpbmdDb25maWcuaW1hZ2luZ0NvbG9yQ3VydmVzLm1pZHRvbmVzSHVlOyAvLyAzMCBieSBkZWZhdWx0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VydmUubWlkdG9uZXNTYXR1cmF0aW9uID0gdGhpcy5lZGl0b3JQb3N0UHJvY2Vzc2luZy5pbWFnZVByb2Nlc3NpbmdDb25maWcuaW1hZ2luZ0NvbG9yQ3VydmVzLm1pZHRvbmVzU2F0OyAvLyAwIGJ5IGRlZmF1bHRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJ2ZS5zaGFkb3dzRGVuc2l0eSA9IHRoaXMuZWRpdG9yUG9zdFByb2Nlc3NpbmcuaW1hZ2VQcm9jZXNzaW5nQ29uZmlnLmltYWdpbmdDb2xvckN1cnZlcy5zaGFkb3dzRGVuOyAvLyAwIGJ5IGRlZmF1bHRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJ2ZS5zaGFkb3dzRXhwb3N1cmUgPSB0aGlzLmVkaXRvclBvc3RQcm9jZXNzaW5nLmltYWdlUHJvY2Vzc2luZ0NvbmZpZy5pbWFnaW5nQ29sb3JDdXJ2ZXMuc2hhZG93c0V4cDsgLy8gODAwIGJ5IGRlZmF1bHRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJ2ZS5zaGFkb3dzSHVlID0gdGhpcy5lZGl0b3JQb3N0UHJvY2Vzc2luZy5pbWFnZVByb2Nlc3NpbmdDb25maWcuaW1hZ2luZ0NvbG9yQ3VydmVzLnNoYWRvd3NIdWU7IC8vIDMwIGJ5IGRlZmF1bHRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJ2ZS5zaGFkb3dzU2F0dXJhdGlvbiA9IHRoaXMuZWRpdG9yUG9zdFByb2Nlc3NpbmcuaW1hZ2VQcm9jZXNzaW5nQ29uZmlnLmltYWdpbmdDb2xvckN1cnZlcy5zaGFkb3dzU2F0OyAvLyAwIGJ5IGRlZmF1bHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdFBpcGVsaW5lLmltYWdlUHJvY2Vzc2luZy5jb2xvckN1cnZlcyA9IGN1cnZlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qIEJsb29tICovXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRQaXBlbGluZS5ibG9vbUVuYWJsZWQgPSB0aGlzLmVkaXRvclBvc3RQcm9jZXNzaW5nLmJsb29tRWZmZWN0UHJvcGVydGllcy5ibG9vbUVuYWJsZWQ7IC8vIGZhbHNlIGJ5IGRlZmF1bHRcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRlZmF1bHRQaXBlbGluZS5ibG9vbUVuYWJsZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRQaXBlbGluZS5ibG9vbUtlcm5lbCA9IHRoaXMuZWRpdG9yUG9zdFByb2Nlc3NpbmcuYmxvb21FZmZlY3RQcm9wZXJ0aWVzLmJsb29tS2VybmVsOyAvLyA2NCBieSBkZWZhdWx0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0UGlwZWxpbmUuYmxvb21TY2FsZSA9IHRoaXMuZWRpdG9yUG9zdFByb2Nlc3NpbmcuYmxvb21FZmZlY3RQcm9wZXJ0aWVzLmJsb29tU2NhbGU7IC8vIDAuNSBieSBkZWZhdWx0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0UGlwZWxpbmUuYmxvb21XZWlnaHQgPSB0aGlzLmVkaXRvclBvc3RQcm9jZXNzaW5nLmJsb29tRWZmZWN0UHJvcGVydGllcy5ibG9vbVdlaWdodDsgLy8gMC4xNSBieSBkZWZhdWx0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0UGlwZWxpbmUuYmxvb21UaHJlc2hvbGQgPSB0aGlzLmVkaXRvclBvc3RQcm9jZXNzaW5nLmJsb29tRWZmZWN0UHJvcGVydGllcy5ibG9vbVRocmVzaG9sZDsgLy8gMC45IGJ5IGRlZmF1bHRcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvKiBDaHJvbWF0aWMgQWJiZXJhdGlvbiAqL1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0UGlwZWxpbmUuY2hyb21hdGljQWJlcnJhdGlvbkVuYWJsZWQgPSB0aGlzLmVkaXRvclBvc3RQcm9jZXNzaW5nLmNocm9tYXRpY0FiZXJyYXRpb24uYWJlcnJhdGlvbkVuYWJsZWQ7IC8vIGZhbHNlIGJ5IGRlZmF1bHRcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRlZmF1bHRQaXBlbGluZS5jaHJvbWF0aWNBYmVycmF0aW9uRW5hYmxlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdFBpcGVsaW5lLmNocm9tYXRpY0FiZXJyYXRpb24uYWJlcnJhdGlvbkFtb3VudCA9IHRoaXMuZWRpdG9yUG9zdFByb2Nlc3NpbmcuY2hyb21hdGljQWJlcnJhdGlvbi5hYmVycmF0aW9uQW1vdW50OyAvLyAzMCBieSBkZWZhdWx0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0UGlwZWxpbmUuY2hyb21hdGljQWJlcnJhdGlvbi5hZGFwdFNjYWxlVG9DdXJyZW50Vmlld3BvcnQgPSB0aGlzLmVkaXRvclBvc3RQcm9jZXNzaW5nLmNocm9tYXRpY0FiZXJyYXRpb24uYWRhcHRTY2FsZVZpZXdwb3J0OyAvLyBmYWxzZSBieSBkZWZhdWx0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0UGlwZWxpbmUuY2hyb21hdGljQWJlcnJhdGlvbi5hbHBoYU1vZGUgPSB0aGlzLmVkaXRvclBvc3RQcm9jZXNzaW5nLmNocm9tYXRpY0FiZXJyYXRpb24uYWxwaGFNb2RlOyAvLyAwIGJ5IGRlZmF1bHRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRQaXBlbGluZS5jaHJvbWF0aWNBYmVycmF0aW9uLmFsd2F5c0ZvcmNlUE9UID0gdGhpcy5lZGl0b3JQb3N0UHJvY2Vzc2luZy5jaHJvbWF0aWNBYmVycmF0aW9uLmFsd2F5c0ZvcmNlUE9UOyAvLyBmYWxzZSBieSBkZWZhdWx0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0UGlwZWxpbmUuY2hyb21hdGljQWJlcnJhdGlvbi5lbmFibGVQaXhlbFBlcmZlY3RNb2RlID0gdGhpcy5lZGl0b3JQb3N0UHJvY2Vzc2luZy5jaHJvbWF0aWNBYmVycmF0aW9uLnBpeGVsUGVyZmVjdE1vZGU7IC8vIGZhbHNlIGJ5IGRlZmF1bHRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRQaXBlbGluZS5jaHJvbWF0aWNBYmVycmF0aW9uLmZvcmNlRnVsbHNjcmVlblZpZXdwb3J0ID0gdGhpcy5lZGl0b3JQb3N0UHJvY2Vzc2luZy5jaHJvbWF0aWNBYmVycmF0aW9uLmZ1bGxzY3JlZW5WaWV3cG9ydDsgLy8gdHJ1ZSBieSBkZWZhdWx0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgLyogRE9GICovXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRQaXBlbGluZS5kZXB0aE9mRmllbGRFbmFibGVkID0gdGhpcy5lZGl0b3JQb3N0UHJvY2Vzc2luZy5mb2NhbERlcHRoT2ZGaWVsZC5kZXB0aE9mRmllbGQ7IC8vIGZhbHNlIGJ5IGRlZmF1bHRcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRlZmF1bHRQaXBlbGluZS5kZXB0aE9mRmllbGRFbmFibGVkICYmIGRlZmF1bHRQaXBlbGluZS5kZXB0aE9mRmllbGQuaXNTdXBwb3J0ZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRQaXBlbGluZS5kZXB0aE9mRmllbGRCbHVyTGV2ZWwgPSB0aGlzLmVkaXRvclBvc3RQcm9jZXNzaW5nLmZvY2FsRGVwdGhPZkZpZWxkLmJsdXJMZXZlbDsgLy8gMCBieSBkZWZhdWx0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0UGlwZWxpbmUuZGVwdGhPZkZpZWxkLmZTdG9wID0gdGhpcy5lZGl0b3JQb3N0UHJvY2Vzc2luZy5mb2NhbERlcHRoT2ZGaWVsZC5mb2NhbFN0b3A7IC8vIDEuNCBieSBkZWZhdWx0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0UGlwZWxpbmUuZGVwdGhPZkZpZWxkLmZvY2FsTGVuZ3RoID0gdGhpcy5lZGl0b3JQb3N0UHJvY2Vzc2luZy5mb2NhbERlcHRoT2ZGaWVsZC5mb2NhbExlbmd0aDsgLy8gNTAgYnkgZGVmYXVsdCwgbW1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRQaXBlbGluZS5kZXB0aE9mRmllbGQuZm9jdXNEaXN0YW5jZSA9IHRoaXMuZWRpdG9yUG9zdFByb2Nlc3NpbmcuZm9jYWxEZXB0aE9mRmllbGQuZm9jdXNEaXN0YW5jZTsgLy8gMjAwMCBieSBkZWZhdWx0LCBtbVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdFBpcGVsaW5lLmRlcHRoT2ZGaWVsZC5sZW5zU2l6ZSA9IHRoaXMuZWRpdG9yUG9zdFByb2Nlc3NpbmcuZm9jYWxEZXB0aE9mRmllbGQubWF4TGVuc1NpemU7IC8vIDUwIGJ5IGRlZmF1bHRcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvKiBGWEFBICovXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRQaXBlbGluZS5meGFhRW5hYmxlZCA9IHRoaXMuZWRpdG9yUG9zdFByb2Nlc3Npbmcuc2NyZWVuQW50aUFsaWFzaW5nLmZ4YWFFbmFibGVkOyAvLyBmYWxzZSBieSBkZWZhdWx0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkZWZhdWx0UGlwZWxpbmUuZnhhYUVuYWJsZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRQaXBlbGluZS5meGFhLnNhbXBsZXMgPSB0aGlzLmVkaXRvclBvc3RQcm9jZXNzaW5nLnNjcmVlbkFudGlBbGlhc2luZy5meGFhU2FtcGxlczsgLy8gMSBieSBkZWZhdWx0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0UGlwZWxpbmUuZnhhYS5hZGFwdFNjYWxlVG9DdXJyZW50Vmlld3BvcnQgPSB0aGlzLmVkaXRvclBvc3RQcm9jZXNzaW5nLnNjcmVlbkFudGlBbGlhc2luZy5meGFhU2NhbGluZzsgLy8gZmFsc2UgYnkgZGVmYXVsdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qIEdsb3dMYXllciAqL1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0UGlwZWxpbmUuZ2xvd0xheWVyRW5hYmxlZCA9IHRoaXMuZWRpdG9yUG9zdFByb2Nlc3NpbmcuZ2xvd0xheWVyUHJvcGVydGllcy5nbG93RW5hYmxlZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRlZmF1bHRQaXBlbGluZS5nbG93TGF5ZXJFbmFibGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0UGlwZWxpbmUuZ2xvd0xheWVyLmludGVuc2l0eSA9IHRoaXMuZWRpdG9yUG9zdFByb2Nlc3NpbmcuZ2xvd0xheWVyUHJvcGVydGllcy5nbG93SW50ZW5zaXR5OyAvLyAxIGJ5IGRlZmF1bHRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRQaXBlbGluZS5nbG93TGF5ZXIuYmx1cktlcm5lbFNpemUgPSB0aGlzLmVkaXRvclBvc3RQcm9jZXNzaW5nLmdsb3dMYXllclByb3BlcnRpZXMuYmx1cktlcm5lbFNpemU7IC8vIDE2IGJ5IGRlZmF1bHRcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvKiBHcmFpbiAqL1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0UGlwZWxpbmUuZ3JhaW5FbmFibGVkID0gdGhpcy5lZGl0b3JQb3N0UHJvY2Vzc2luZy5ncmFpbkVmZmVjdFByb3BlcnRpZXMuZ3JhaW5FbmFibGVkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGVmYXVsdFBpcGVsaW5lLmdyYWluRW5hYmxlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdFBpcGVsaW5lLmdyYWluLmFuaW1hdGVkID0gdGhpcy5lZGl0b3JQb3N0UHJvY2Vzc2luZy5ncmFpbkVmZmVjdFByb3BlcnRpZXMuZ3JhaW5BbmltYXRlZDsgLy8gZmFsc2UgYnkgZGVmYXVsdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdFBpcGVsaW5lLmdyYWluLmludGVuc2l0eSA9IHRoaXMuZWRpdG9yUG9zdFByb2Nlc3NpbmcuZ3JhaW5FZmZlY3RQcm9wZXJ0aWVzLmdyYWluSW50ZW5zaXR5OyAvLyAzMCBieSBkZWZhdWx0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0UGlwZWxpbmUuZ3JhaW4uYWRhcHRTY2FsZVRvQ3VycmVudFZpZXdwb3J0ID0gdGhpcy5lZGl0b3JQb3N0UHJvY2Vzc2luZy5ncmFpbkVmZmVjdFByb3BlcnRpZXMuYWRhcHRTY2FsZVZpZXdwb3J0OyAvLyBmYWxzZSBieSBkZWZhdWx0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgLyogU2hhcnBlbiAqL1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0UGlwZWxpbmUuc2hhcnBlbkVuYWJsZWQgPSB0aGlzLmVkaXRvclBvc3RQcm9jZXNzaW5nLnNoYXJwRWZmZWN0UHJvcGVydGllcy5zaGFycGVuRW5hYmxlZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRlZmF1bHRQaXBlbGluZS5zaGFycGVuRW5hYmxlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdFBpcGVsaW5lLnNoYXJwZW4uZWRnZUFtb3VudCA9IHRoaXMuZWRpdG9yUG9zdFByb2Nlc3Npbmcuc2hhcnBFZmZlY3RQcm9wZXJ0aWVzLnNoYXJwRWRnZUFtb3VudDsgLy8gMC4zIGJ5IGRlZmF1bHRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRQaXBlbGluZS5zaGFycGVuLmNvbG9yQW1vdW50ID0gdGhpcy5lZGl0b3JQb3N0UHJvY2Vzc2luZy5zaGFycEVmZmVjdFByb3BlcnRpZXMuc2hhcnBDb2xvckFtb3VudDsgLy8gMSBieSBkZWZhdWx0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0UGlwZWxpbmUuc2hhcnBlbi5hZGFwdFNjYWxlVG9DdXJyZW50Vmlld3BvcnQgPSB0aGlzLmVkaXRvclBvc3RQcm9jZXNzaW5nLnNoYXJwRWZmZWN0UHJvcGVydGllcy5hZGFwdFNjYWxlVmlld3BvcnQ7IC8vIGZhbHNlIGJ5IGRlZmF1bHRcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIEJBQllMT04uU2NlbmVNYW5hZ2VyLkxvZ1dhcm5pbmcoXCJCYWJ5bG9uLmpzIGRlZmF1bHQgcmVuZGVyaW5nIHBpcGVsaW5lIG5vdCBzdXBwb3J0ZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIC4uXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gU2NyZWVuIFNwYWNlIEFtYmllbnQgT2NjbHVzaW9uXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gLi5cclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5lZGl0b3JQb3N0UHJvY2Vzc2luZy5zY3JlZW5TcGFjZVJlbmRlcmluZyAhPSBudWxsICYmIHRoaXMuZWRpdG9yUG9zdFByb2Nlc3Npbmcuc2NyZWVuU3BhY2VSZW5kZXJpbmcuU1NBTyA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzc2FvUmF0aW86YW55ID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3Nhb1JhdGlvOiB0aGlzLmVkaXRvclBvc3RQcm9jZXNzaW5nLnNjcmVlblNwYWNlUmVuZGVyaW5nLlNTQU9SYXRpbywgICAgIC8vIFJhdGlvIG9mIHRoZSBTU0FPIHBvc3QtcHJvY2VzcywgaW4gYSBsb3dlciByZXNvbHV0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21iaW5lUmF0aW86IHRoaXMuZWRpdG9yUG9zdFByb2Nlc3Npbmcuc2NyZWVuU3BhY2VSZW5kZXJpbmcuY29tYmluZVJhdGlvICAgLy8gUmF0aW8gb2YgdGhlIGNvbWJpbmUgcG9zdC1wcm9jZXNzIChjb21iaW5lcyB0aGUgU1NBTyBhbmQgdGhlIHNjZW5lKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9OyAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBQUk9KRUNULlVuaXZlcnNhbENhbWVyYVN5c3RlbS5zY3JlZW5TcGFjZVBpcGVsaW5lID0gbmV3IEJBQllMT04uU1NBT1JlbmRlcmluZ1BpcGVsaW5lKFwiVW5pdmVyc2FsQ2FtZXJhU3lzdGVtLVNTQU9cIiwgdGhpcy5zY2VuZSwgc3Nhb1JhdGlvLCB0aGlzLnNjZW5lLmNhbWVyYXMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoUFJPSkVDVC5Vbml2ZXJzYWxDYW1lcmFTeXN0ZW0uc2NyZWVuU3BhY2VQaXBlbGluZS5pc1N1cHBvcnRlZCA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3Nhb1BpcGVsaW5lOkJBQllMT04uU1NBT1JlbmRlcmluZ1BpcGVsaW5lID0gUFJPSkVDVC5Vbml2ZXJzYWxDYW1lcmFTeXN0ZW0uc2NyZWVuU3BhY2VQaXBlbGluZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNzYW9QaXBlbGluZS5mYWxsT2ZmID0gdGhpcy5lZGl0b3JQb3N0UHJvY2Vzc2luZy5zY3JlZW5TcGFjZVJlbmRlcmluZy5mYWxsT2ZmO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3Nhb1BpcGVsaW5lLmFyZWEgPSB0aGlzLmVkaXRvclBvc3RQcm9jZXNzaW5nLnNjcmVlblNwYWNlUmVuZGVyaW5nLmFyZWE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzc2FvUGlwZWxpbmUucmFkaXVzID0gdGhpcy5lZGl0b3JQb3N0UHJvY2Vzc2luZy5zY3JlZW5TcGFjZVJlbmRlcmluZy5yYWRpdXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzc2FvUGlwZWxpbmUudG90YWxTdHJlbmd0aCA9IHRoaXMuZWRpdG9yUG9zdFByb2Nlc3Npbmcuc2NyZWVuU3BhY2VSZW5kZXJpbmcudG90YWxTdHJlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNzYW9QaXBlbGluZS5iYXNlID0gdGhpcy5lZGl0b3JQb3N0UHJvY2Vzc2luZy5zY3JlZW5TcGFjZVJlbmRlcmluZy5iYXNlVmFsdWU7ICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJBQllMT04uU2NlbmVNYW5hZ2VyLkxvZ1dhcm5pbmcoXCJCYWJ5bG9uLmpzIFNTQU8gcmVuZGVyaW5nIHBpcGVsaW5lIG5vdCBzdXBwb3J0ZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vfVxyXG4gICAgICAgICAgICBQUk9KRUNULlVuaXZlcnNhbENhbWVyYVN5c3RlbS5jYW1lcmFSZWFkeSA9IHRydWU7ICAgICAgICAgICAgXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHByb3RlY3RlZCB1cGRhdGVDYW1lcmFTeXN0ZW1TdGF0ZSgpOnZvaWQge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5tX2NhbWVyYVJpZyAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5jYW1lcmFUeXBlID09PSAwKSB7ICAgICAgICAvLyBEZWZhdWx0IFVuaXZlcnNhbCBDYW1lcmFcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5jYW1lcmFUeXBlID09PSAxKSB7IC8vIEF1Z21lbnRlZCBSZWFsaXR5IENhbWVyYVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmNhbWVyYVR5cGUgPT09IDIpIHsgLy8gVmlydHVhbCBSZWFsaXR5IENhbWVyYVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmNhbWVyYVR5cGUgPT09IDMpIHsgLy8gTXVsdGkgUGxheWVyIENhbWVyYVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHByb3RlY3RlZCBjbGVhbkNhbWVyYVN5c3RlbVN0YXRlKCk6dm9pZCB7XHJcbiAgICAgICAgICAgIGlmIChQUk9KRUNULlVuaXZlcnNhbENhbWVyYVN5c3RlbS5QbGF5ZXJPbmVDYW1lcmEgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgLy9QUk9KRUNULlVuaXZlcnNhbENhbWVyYVN5c3RlbS5QbGF5ZXJPbmVDYW1lcmEuZGlzcG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgUFJPSkVDVC5Vbml2ZXJzYWxDYW1lcmFTeXN0ZW0uUGxheWVyT25lQ2FtZXJhID0gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoUFJPSkVDVC5Vbml2ZXJzYWxDYW1lcmFTeXN0ZW0uUGxheWVyVHdvQ2FtZXJhICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIC8vUFJPSkVDVC5Vbml2ZXJzYWxDYW1lcmFTeXN0ZW0uUGxheWVyVHdvQ2FtZXJhLmRpc3Bvc2UoKTtcclxuICAgICAgICAgICAgICAgIFBST0pFQ1QuVW5pdmVyc2FsQ2FtZXJhU3lzdGVtLlBsYXllclR3b0NhbWVyYSA9IG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKFBST0pFQ1QuVW5pdmVyc2FsQ2FtZXJhU3lzdGVtLlBsYXllclRocmVlQ2FtZXJhICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIC8vUFJPSkVDVC5Vbml2ZXJzYWxDYW1lcmFTeXN0ZW0uUGxheWVyVGhyZWVDYW1lcmEuZGlzcG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgUFJPSkVDVC5Vbml2ZXJzYWxDYW1lcmFTeXN0ZW0uUGxheWVyVGhyZWVDYW1lcmEgPSBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChQUk9KRUNULlVuaXZlcnNhbENhbWVyYVN5c3RlbS5QbGF5ZXJGb3VyQ2FtZXJhICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIC8vUFJPSkVDVC5Vbml2ZXJzYWxDYW1lcmFTeXN0ZW0uUGxheWVyRm91ckNhbWVyYS5kaXNwb3NlKCk7XHJcbiAgICAgICAgICAgICAgICBQUk9KRUNULlVuaXZlcnNhbENhbWVyYVN5c3RlbS5QbGF5ZXJGb3VyQ2FtZXJhID0gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBwcm90ZWN0ZWQgZGVzdHJveUNhbWVyYVN5c3RlbVN0YXRlKCk6dm9pZCB7XHJcbiAgICAgICAgICAgIHRoaXMuaW1tZXJzaXZlT3B0aW9ucyA9IG51bGw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuICAgICAgICAvLyBVbml2ZXJzYWwgQ2FtZXJhIFZpcnR1YWwgUmVhbGl0eSBGdW5jdGlvbnNcclxuICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuXHJcbiAgICAgICAgLyoqIEdldCB0aGUgV2ViWFIgZGVmYXVsdCBleHBlcmllbmNlIGhlbHBlciAqL1xyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgR2V0V2ViWFIoKTpCQUJZTE9OLldlYlhSRGVmYXVsdEV4cGVyaWVuY2UgeyByZXR1cm4gUFJPSkVDVC5Vbml2ZXJzYWxDYW1lcmFTeXN0ZW0uWFJFeHBlcmllbmNlSGVscGVyOyB9XHJcbiAgICAgICAgLyoqIElzIHVuaXZlcnNhbCBjYW1lcmEgc3lzdGVtIGluIFdlYlhSIG1vZGUgKi9cclxuICAgICAgICBwdWJsaWMgc3RhdGljIElzSW5XZWJYUigpOmJvb2xlYW4geyByZXR1cm4gKFBST0pFQ1QuVW5pdmVyc2FsQ2FtZXJhU3lzdGVtLlhSRXhwZXJpZW5jZUhlbHBlciAhPSBudWxsICYmIFBST0pFQ1QuVW5pdmVyc2FsQ2FtZXJhU3lzdGVtLlhSRXhwZXJpZW5jZUhlbHBlci5iYXNlRXhwZXJpZW5jZSAhPSBudWxsICYmIFBST0pFQ1QuVW5pdmVyc2FsQ2FtZXJhU3lzdGVtLlhSRXhwZXJpZW5jZUhlbHBlci5iYXNlRXhwZXJpZW5jZS5zdGF0ZSA9PT0gQkFCWUxPTi5XZWJYUlN0YXRlLklOX1hSKTsgfVxyXG4gICAgICAgIC8qKiBTZXR1cCBuYXZpZ2F0aW9uIG1lc2ggZm9yIFdlYlhSICovXHJcbiAgICAgICAgcHJpdmF0ZSBzdGF0aWMgU2V0dXBOYXZpZ2F0aW9uV2ViWFIobWVzaDpCQUJZTE9OLk1lc2gsIHRhZzpzdHJpbmcpOnZvaWQge1xyXG4gICAgICAgICAgICBjb25zdCB3ZWJ4cjpCQUJZTE9OLldlYlhSRGVmYXVsdEV4cGVyaWVuY2UgPSBQUk9KRUNULlVuaXZlcnNhbENhbWVyYVN5c3RlbS5YUkV4cGVyaWVuY2VIZWxwZXI7XHJcbiAgICAgICAgICAgIGlmICh3ZWJ4ciAhPSBudWxsICYmIHdlYnhyLnRlbGVwb3J0YXRpb24gIT0gbnVsbCAmJiBtZXNoICE9IG51bGwgJiYgdGFnICE9IG51bGwgJiYgdGFnICE9IFwiXCIpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGhhc3RhZzpib29sZWFuID0gQkFCWUxPTi5UYWdzLk1hdGNoZXNRdWVyeShtZXNoLCB0YWcpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGhhc3RhZyA9PT0gdHJ1ZSkgd2VieHIudGVsZXBvcnRhdGlvbi5hZGRGbG9vck1lc2gobWVzaCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4gICAgICAgIC8vIFVuaXZlcnNhbCBDYW1lcmEgU3lzdGVtIFBsYXllciBGdW5jdGlvbnNcclxuICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuXHJcbiAgICAgICAgLyoqIEdldCBtYWluIGNhbWVyYSByaWcgZm9yIHRoZSBzY2VuZSAqL1xyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgR2V0TWFpbkNhbWVyYShzY2VuZTpCQUJZTE9OLlNjZW5lLCBkZXRhY2g6Ym9vbGVhbiA9IGZhbHNlKTpCQUJZTE9OLkZyZWVDYW1lcmEgeyBcclxuICAgICAgICAgICAgcmV0dXJuIFBST0pFQ1QuVW5pdmVyc2FsQ2FtZXJhU3lzdGVtLkdldFBsYXllckNhbWVyYShzY2VuZSwgQkFCWUxPTi5QbGF5ZXJOdW1iZXIuT25lLCBkZXRhY2gpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvKiogR2V0IHVuaXZlcnNhbCBjYW1lcmEgcmlnIGZvciBkZXNpcmVkIHBsYXllciAqL1xyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgR2V0UGxheWVyQ2FtZXJhKHNjZW5lOkJBQllMT04uU2NlbmUsIHBsYXllcjpCQUJZTE9OLlBsYXllck51bWJlciA9IEJBQllMT04uUGxheWVyTnVtYmVyLk9uZSwgZGV0YWNoOmJvb2xlYW4gPSBmYWxzZSk6QkFCWUxPTi5GcmVlQ2FtZXJhIHsgXHJcbiAgICAgICAgICAgIGxldCByZXN1bHQ6QkFCWUxPTi5GcmVlQ2FtZXJhID0gbnVsbDtcclxuICAgICAgICAgICAgaWYgKFBST0pFQ1QuVW5pdmVyc2FsQ2FtZXJhU3lzdGVtLklzQ2FtZXJhU3lzdGVtUmVhZHkoKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHBsYXllciA9PT0gQkFCWUxPTi5QbGF5ZXJOdW1iZXIuT25lICYmIFBST0pFQ1QuVW5pdmVyc2FsQ2FtZXJhU3lzdGVtLlBsYXllck9uZUNhbWVyYSAhPSBudWxsKSByZXN1bHQgPSBQUk9KRUNULlVuaXZlcnNhbENhbWVyYVN5c3RlbS5QbGF5ZXJPbmVDYW1lcmE7XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChwbGF5ZXIgPT09IEJBQllMT04uUGxheWVyTnVtYmVyLlR3byAmJiBQUk9KRUNULlVuaXZlcnNhbENhbWVyYVN5c3RlbS5QbGF5ZXJUd29DYW1lcmEgIT0gbnVsbCkgcmVzdWx0ID0gUFJPSkVDVC5Vbml2ZXJzYWxDYW1lcmFTeXN0ZW0uUGxheWVyVHdvQ2FtZXJhO1xyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAocGxheWVyID09PSBCQUJZTE9OLlBsYXllck51bWJlci5UaHJlZSAmJiBQUk9KRUNULlVuaXZlcnNhbENhbWVyYVN5c3RlbS5QbGF5ZXJUaHJlZUNhbWVyYSAhPSBudWxsKSByZXN1bHQgPSBQUk9KRUNULlVuaXZlcnNhbENhbWVyYVN5c3RlbS5QbGF5ZXJUaHJlZUNhbWVyYTtcclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHBsYXllciA9PT0gQkFCWUxPTi5QbGF5ZXJOdW1iZXIuRm91ciAmJiBQUk9KRUNULlVuaXZlcnNhbENhbWVyYVN5c3RlbS5QbGF5ZXJGb3VyQ2FtZXJhICE9IG51bGwpIHJlc3VsdCA9IFBST0pFQ1QuVW5pdmVyc2FsQ2FtZXJhU3lzdGVtLlBsYXllckZvdXJDYW1lcmE7XHJcbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0ICE9IG51bGwgJiYgZGV0YWNoID09PSB0cnVlICYmIHBhcmVudCAhPSBudWxsKSByZXN1bHQucGFyZW50ID0gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH1cclxuICAgICAgICAvKiogR2V0IGNhbWVyYSB0cmFuc2Zvcm0gbm9kZSBmb3IgZGVzaXJlZCBwbGF5ZXIgKi9cclxuICAgICAgICBwdWJsaWMgc3RhdGljIEdldENhbWVyYVRyYW5zZm9ybShzY2VuZTpCQUJZTE9OLlNjZW5lLCBwbGF5ZXI6QkFCWUxPTi5QbGF5ZXJOdW1iZXIgPSBCQUJZTE9OLlBsYXllck51bWJlci5PbmUpOkJBQllMT04uVHJhbnNmb3JtTm9kZSB7IFxyXG4gICAgICAgICAgICBsZXQgcmVzdWx0OkJBQllMT04uVHJhbnNmb3JtTm9kZSA9IG51bGw7XHJcbiAgICAgICAgICAgIGlmIChQUk9KRUNULlVuaXZlcnNhbENhbWVyYVN5c3RlbS5Jc0NhbWVyYVN5c3RlbVJlYWR5KCkpIHtcclxuICAgICAgICAgICAgICAgIGlmIChwbGF5ZXIgPT09IEJBQllMT04uUGxheWVyTnVtYmVyLk9uZSAmJiBQUk9KRUNULlVuaXZlcnNhbENhbWVyYVN5c3RlbS5QbGF5ZXJPbmVDYW1lcmEgIT0gbnVsbCAmJiAoPGFueT5QUk9KRUNULlVuaXZlcnNhbENhbWVyYVN5c3RlbS5QbGF5ZXJPbmVDYW1lcmEpLnRyYW5zZm9ybSAhPSBudWxsKSByZXN1bHQgPSAoPGFueT5QUk9KRUNULlVuaXZlcnNhbENhbWVyYVN5c3RlbS5QbGF5ZXJPbmVDYW1lcmEpLnRyYW5zZm9ybTtcclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHBsYXllciA9PT0gQkFCWUxPTi5QbGF5ZXJOdW1iZXIuVHdvICYmIFBST0pFQ1QuVW5pdmVyc2FsQ2FtZXJhU3lzdGVtLlBsYXllclR3b0NhbWVyYSAhPSBudWxsICYmICg8YW55PlBST0pFQ1QuVW5pdmVyc2FsQ2FtZXJhU3lzdGVtLlBsYXllclR3b0NhbWVyYSkudHJhbnNmb3JtICE9IG51bGwpIHJlc3VsdCA9ICg8YW55PlBST0pFQ1QuVW5pdmVyc2FsQ2FtZXJhU3lzdGVtLlBsYXllclR3b0NhbWVyYSkudHJhbnNmb3JtO1xyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAocGxheWVyID09PSBCQUJZTE9OLlBsYXllck51bWJlci5UaHJlZSAmJiBQUk9KRUNULlVuaXZlcnNhbENhbWVyYVN5c3RlbS5QbGF5ZXJUaHJlZUNhbWVyYSAhPSBudWxsICYmICg8YW55PlBST0pFQ1QuVW5pdmVyc2FsQ2FtZXJhU3lzdGVtLlBsYXllclRocmVlQ2FtZXJhKS50cmFuc2Zvcm0gIT0gbnVsbCkgcmVzdWx0ID0gKDxhbnk+UFJPSkVDVC5Vbml2ZXJzYWxDYW1lcmFTeXN0ZW0uUGxheWVyVGhyZWVDYW1lcmEpLnRyYW5zZm9ybTtcclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHBsYXllciA9PT0gQkFCWUxPTi5QbGF5ZXJOdW1iZXIuRm91ciAmJiBQUk9KRUNULlVuaXZlcnNhbENhbWVyYVN5c3RlbS5QbGF5ZXJGb3VyQ2FtZXJhICE9IG51bGwgJiYgKDxhbnk+UFJPSkVDVC5Vbml2ZXJzYWxDYW1lcmFTeXN0ZW0uUGxheWVyRm91ckNhbWVyYSkudHJhbnNmb3JtICE9IG51bGwpIHJlc3VsdCA9ICg8YW55PlBST0pFQ1QuVW5pdmVyc2FsQ2FtZXJhU3lzdGVtLlBsYXllckZvdXJDYW1lcmEpLnRyYW5zZm9ybTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbiAgICAgICAgLy8gVW5pdmVyc2FsIENhbWVyYSBTeXN0ZW0gTXVsdGkgUGxheWVyIEZ1bmN0aW9uc1xyXG4gICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG5cclxuICAgICAgICAvKiogQXJlIHN0ZXJlbyBzaWRlIHNpZGUgY2FtZXJhIHNlcnZpY2VzIGF2YWlsYWJsZS4gKi9cclxuICAgICAgICBwdWJsaWMgc3RhdGljIElzU3RlcmVvQ2FtZXJhcygpOmJvb2xlYW4geyBcclxuICAgICAgICAgICAgcmV0dXJuIFBST0pFQ1QuVW5pdmVyc2FsQ2FtZXJhU3lzdGVtLnN0ZXJlb0NhbWVyYXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8qKiBBcmUgbG9jYWwgbXVsdGkgcGxheWVyIHZpZXcgc2VydmljZXMgYXZhaWxhYmxlLiAqL1xyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgSXNNdWx0aVBsYXllclZpZXcoKTpib29sZWFuIHsgXHJcbiAgICAgICAgICAgIHJldHVybiBQUk9KRUNULlVuaXZlcnNhbENhbWVyYVN5c3RlbS5tdWx0aVBsYXllclZpZXc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8qKiBHZXQgdGhlIGN1cnJlbnQgbG9jYWwgbXVsdGkgcGxheWVyIGNvdW50ICovXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBHZXRNdWx0aVBsYXllckNvdW50KCk6bnVtYmVyIHsgXHJcbiAgICAgICAgICAgIHJldHVybiBQUk9KRUNULlVuaXZlcnNhbENhbWVyYVN5c3RlbS5tdWx0aVBsYXllckNvdW50O1xyXG4gICAgICAgIH1cclxuICAgICAgICAvKiogQWN0aXZhdGVzIGN1cnJlbnQgbG9jYWwgbXVsdGkgcGxheWVyIGNhbWVyYXMuICovXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBBY3RpdmF0ZU11bHRpUGxheWVyQ2FtZXJhcyhzY2VuZTpCQUJZTE9OLlNjZW5lKTpib29sZWFuIHtcclxuICAgICAgICAgICAgbGV0IHJlc3VsdDpib29sZWFuID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGlmIChQUk9KRUNULlVuaXZlcnNhbENhbWVyYVN5c3RlbS5tdWx0aVBsYXllckNhbWVyYXMgIT0gbnVsbCAmJiBQUk9KRUNULlVuaXZlcnNhbENhbWVyYVN5c3RlbS5tdWx0aVBsYXllckNhbWVyYXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgc2NlbmUuYWN0aXZlQ2FtZXJhcyA9IFBST0pFQ1QuVW5pdmVyc2FsQ2FtZXJhU3lzdGVtLm11bHRpUGxheWVyQ2FtZXJhcztcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9XHJcbiAgICAgICAgLyoqIERpc3Bvc2VzIGN1cnJlbnQgbG9jYWwgbXVsdGlwbGF5ZXIgY2FtZXJhcyAqL1xyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgRGlzcG9zZU11bHRpUGxheWVyQ2FtZXJhcygpOnZvaWQge1xyXG4gICAgICAgICAgICBpZiAoUFJPSkVDVC5Vbml2ZXJzYWxDYW1lcmFTeXN0ZW0uUGxheWVyT25lQ2FtZXJhICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIFBST0pFQ1QuVW5pdmVyc2FsQ2FtZXJhU3lzdGVtLlBsYXllck9uZUNhbWVyYS5kaXNwb3NlKCk7XHJcbiAgICAgICAgICAgICAgICBQUk9KRUNULlVuaXZlcnNhbENhbWVyYVN5c3RlbS5QbGF5ZXJPbmVDYW1lcmEgPSBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChQUk9KRUNULlVuaXZlcnNhbENhbWVyYVN5c3RlbS5QbGF5ZXJUd29DYW1lcmEgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgUFJPSkVDVC5Vbml2ZXJzYWxDYW1lcmFTeXN0ZW0uUGxheWVyVHdvQ2FtZXJhLmRpc3Bvc2UoKTtcclxuICAgICAgICAgICAgICAgIFBST0pFQ1QuVW5pdmVyc2FsQ2FtZXJhU3lzdGVtLlBsYXllclR3b0NhbWVyYSA9IG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKFBST0pFQ1QuVW5pdmVyc2FsQ2FtZXJhU3lzdGVtLlBsYXllclRocmVlQ2FtZXJhICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIFBST0pFQ1QuVW5pdmVyc2FsQ2FtZXJhU3lzdGVtLlBsYXllclRocmVlQ2FtZXJhLmRpc3Bvc2UoKTtcclxuICAgICAgICAgICAgICAgIFBST0pFQ1QuVW5pdmVyc2FsQ2FtZXJhU3lzdGVtLlBsYXllclRocmVlQ2FtZXJhID0gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoUFJPSkVDVC5Vbml2ZXJzYWxDYW1lcmFTeXN0ZW0uUGxheWVyRm91ckNhbWVyYSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBQUk9KRUNULlVuaXZlcnNhbENhbWVyYVN5c3RlbS5QbGF5ZXJGb3VyQ2FtZXJhLmRpc3Bvc2UoKTtcclxuICAgICAgICAgICAgICAgIFBST0pFQ1QuVW5pdmVyc2FsQ2FtZXJhU3lzdGVtLlBsYXllckZvdXJDYW1lcmEgPSBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8qKiBTZXRzIHRoZSBtdWx0aSBwbGF5ZXIgY2FtZXJhIHZpZXcgbGF5b3V0ICovXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBTZXRNdWx0aVBsYXllclZpZXdMYXlvdXQoc2NlbmU6QkFCWUxPTi5TY2VuZSwgdG90YWxOdW1QbGF5ZXJzOm51bWJlcik6Ym9vbGVhbiB7XHJcbiAgICAgICAgICAgIGxldCByZXN1bHQ6Ym9vbGVhbiA9IGZhbHNlO1xyXG4gICAgICAgICAgICBsZXQgcGxheWVyczpudW1iZXIgPSBCQUJZTE9OLlNjYWxhci5DbGFtcCh0b3RhbE51bVBsYXllcnMsIDEsIDQpO1xyXG4gICAgICAgICAgICBpZiAoUFJPSkVDVC5Vbml2ZXJzYWxDYW1lcmFTeXN0ZW0uSXNNdWx0aVBsYXllclZpZXcoKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKFBST0pFQ1QuVW5pdmVyc2FsQ2FtZXJhU3lzdGVtLlBsYXllck9uZUNhbWVyYSAhPSBudWxsICYmIFBST0pFQ1QuVW5pdmVyc2FsQ2FtZXJhU3lzdGVtLlBsYXllclR3b0NhbWVyYSAhPSBudWxsICYmIFBST0pFQ1QuVW5pdmVyc2FsQ2FtZXJhU3lzdGVtLlBsYXllclRocmVlQ2FtZXJhICE9IG51bGwgJiYgUFJPSkVDVC5Vbml2ZXJzYWxDYW1lcmFTeXN0ZW0uUGxheWVyRm91ckNhbWVyYSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgUFJPSkVDVC5Vbml2ZXJzYWxDYW1lcmFTeXN0ZW0ubXVsdGlQbGF5ZXJDYW1lcmFzID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBsYXllcnMgPT09IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgUFJPSkVDVC5Vbml2ZXJzYWxDYW1lcmFTeXN0ZW0uUGxheWVyT25lQ2FtZXJhLnZpZXdwb3J0ID0gbmV3IEJBQllMT04uVmlld3BvcnQoMCwgMCwgMSwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFBST0pFQ1QuVW5pdmVyc2FsQ2FtZXJhU3lzdGVtLlBsYXllclR3b0NhbWVyYS52aWV3cG9ydCA9IG5ldyBCQUJZTE9OLlZpZXdwb3J0KDAsIDAsIDAsIDApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBQUk9KRUNULlVuaXZlcnNhbENhbWVyYVN5c3RlbS5QbGF5ZXJUd29DYW1lcmEuc2V0RW5hYmxlZChmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFBST0pFQ1QuVW5pdmVyc2FsQ2FtZXJhU3lzdGVtLlBsYXllclRocmVlQ2FtZXJhLnZpZXdwb3J0ID0gbmV3IEJBQllMT04uVmlld3BvcnQoMCwgMCwgMCwgMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFBST0pFQ1QuVW5pdmVyc2FsQ2FtZXJhU3lzdGVtLlBsYXllclRocmVlQ2FtZXJhLnNldEVuYWJsZWQoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBQUk9KRUNULlVuaXZlcnNhbENhbWVyYVN5c3RlbS5QbGF5ZXJGb3VyQ2FtZXJhLnZpZXdwb3J0ID0gbmV3IEJBQllMT04uVmlld3BvcnQoMCwgMCwgMCwgMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFBST0pFQ1QuVW5pdmVyc2FsQ2FtZXJhU3lzdGVtLlBsYXllckZvdXJDYW1lcmEuc2V0RW5hYmxlZChmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFBST0pFQ1QuVW5pdmVyc2FsQ2FtZXJhU3lzdGVtLm11bHRpUGxheWVyQ2FtZXJhcy5wdXNoKFBST0pFQ1QuVW5pdmVyc2FsQ2FtZXJhU3lzdGVtLlBsYXllck9uZUNhbWVyYSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChwbGF5ZXJzID09PSAyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChQUk9KRUNULlVuaXZlcnNhbENhbWVyYVN5c3RlbS5zdGVyZW9DYW1lcmFzID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBQUk9KRUNULlVuaXZlcnNhbENhbWVyYVN5c3RlbS5QbGF5ZXJPbmVDYW1lcmEudmlld3BvcnQgPSBuZXcgQkFCWUxPTi5WaWV3cG9ydCgwLCAwLCAwLjUsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgUFJPSkVDVC5Vbml2ZXJzYWxDYW1lcmFTeXN0ZW0uUGxheWVyVHdvQ2FtZXJhLnZpZXdwb3J0ID0gbmV3IEJBQllMT04uVmlld3BvcnQoMC41LCAwLCAwLjUsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgUFJPSkVDVC5Vbml2ZXJzYWxDYW1lcmFTeXN0ZW0uUGxheWVyT25lQ2FtZXJhLnZpZXdwb3J0ID0gbmV3IEJBQllMT04uVmlld3BvcnQoMCwgMC41LCAxLCAwLjUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgUFJPSkVDVC5Vbml2ZXJzYWxDYW1lcmFTeXN0ZW0uUGxheWVyVHdvQ2FtZXJhLnZpZXdwb3J0ID0gbmV3IEJBQllMT04uVmlld3BvcnQoMCwgMCwgMSwgMC41KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBQUk9KRUNULlVuaXZlcnNhbENhbWVyYVN5c3RlbS5QbGF5ZXJUd29DYW1lcmEuc2V0RW5hYmxlZCh0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgUFJPSkVDVC5Vbml2ZXJzYWxDYW1lcmFTeXN0ZW0uUGxheWVyVGhyZWVDYW1lcmEudmlld3BvcnQgPSBuZXcgQkFCWUxPTi5WaWV3cG9ydCgwLCAwLCAwLCAwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgUFJPSkVDVC5Vbml2ZXJzYWxDYW1lcmFTeXN0ZW0uUGxheWVyVGhyZWVDYW1lcmEuc2V0RW5hYmxlZChmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFBST0pFQ1QuVW5pdmVyc2FsQ2FtZXJhU3lzdGVtLlBsYXllckZvdXJDYW1lcmEudmlld3BvcnQgPSBuZXcgQkFCWUxPTi5WaWV3cG9ydCgwLCAwLCAwLCAwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgUFJPSkVDVC5Vbml2ZXJzYWxDYW1lcmFTeXN0ZW0uUGxheWVyRm91ckNhbWVyYS5zZXRFbmFibGVkKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgUFJPSkVDVC5Vbml2ZXJzYWxDYW1lcmFTeXN0ZW0ubXVsdGlQbGF5ZXJDYW1lcmFzLnB1c2goUFJPSkVDVC5Vbml2ZXJzYWxDYW1lcmFTeXN0ZW0uUGxheWVyT25lQ2FtZXJhKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgUFJPSkVDVC5Vbml2ZXJzYWxDYW1lcmFTeXN0ZW0ubXVsdGlQbGF5ZXJDYW1lcmFzLnB1c2goUFJPSkVDVC5Vbml2ZXJzYWxDYW1lcmFTeXN0ZW0uUGxheWVyVHdvQ2FtZXJhKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHBsYXllcnMgPT09IDMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgUFJPSkVDVC5Vbml2ZXJzYWxDYW1lcmFTeXN0ZW0uUGxheWVyT25lQ2FtZXJhLnZpZXdwb3J0ID0gbmV3IEJBQllMT04uVmlld3BvcnQoMCwgMCwgMC41LCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgUFJPSkVDVC5Vbml2ZXJzYWxDYW1lcmFTeXN0ZW0uUGxheWVyVHdvQ2FtZXJhLnZpZXdwb3J0ID0gbmV3IEJBQllMT04uVmlld3BvcnQoMC41LCAwLjUsIDAuNSwgMC41KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgUFJPSkVDVC5Vbml2ZXJzYWxDYW1lcmFTeXN0ZW0uUGxheWVyVHdvQ2FtZXJhLnNldEVuYWJsZWQodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFBST0pFQ1QuVW5pdmVyc2FsQ2FtZXJhU3lzdGVtLlBsYXllclRocmVlQ2FtZXJhLnZpZXdwb3J0ID0gbmV3IEJBQllMT04uVmlld3BvcnQoMC41LCAwLCAwLjUsIDAuNSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFBST0pFQ1QuVW5pdmVyc2FsQ2FtZXJhU3lzdGVtLlBsYXllclRocmVlQ2FtZXJhLnNldEVuYWJsZWQodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFBST0pFQ1QuVW5pdmVyc2FsQ2FtZXJhU3lzdGVtLlBsYXllckZvdXJDYW1lcmEudmlld3BvcnQgPSBuZXcgQkFCWUxPTi5WaWV3cG9ydCgwLCAwLCAwLCAwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgUFJPSkVDVC5Vbml2ZXJzYWxDYW1lcmFTeXN0ZW0uUGxheWVyRm91ckNhbWVyYS5zZXRFbmFibGVkKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgUFJPSkVDVC5Vbml2ZXJzYWxDYW1lcmFTeXN0ZW0ubXVsdGlQbGF5ZXJDYW1lcmFzLnB1c2goUFJPSkVDVC5Vbml2ZXJzYWxDYW1lcmFTeXN0ZW0uUGxheWVyT25lQ2FtZXJhKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgUFJPSkVDVC5Vbml2ZXJzYWxDYW1lcmFTeXN0ZW0ubXVsdGlQbGF5ZXJDYW1lcmFzLnB1c2goUFJPSkVDVC5Vbml2ZXJzYWxDYW1lcmFTeXN0ZW0uUGxheWVyVHdvQ2FtZXJhKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgUFJPSkVDVC5Vbml2ZXJzYWxDYW1lcmFTeXN0ZW0ubXVsdGlQbGF5ZXJDYW1lcmFzLnB1c2goUFJPSkVDVC5Vbml2ZXJzYWxDYW1lcmFTeXN0ZW0uUGxheWVyVGhyZWVDYW1lcmEpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocGxheWVycyA9PT0gNCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBQUk9KRUNULlVuaXZlcnNhbENhbWVyYVN5c3RlbS5QbGF5ZXJPbmVDYW1lcmEudmlld3BvcnQgPSBuZXcgQkFCWUxPTi5WaWV3cG9ydCgwLCAwLjUsIDAuNSwgMC41KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgUFJPSkVDVC5Vbml2ZXJzYWxDYW1lcmFTeXN0ZW0uUGxheWVyVHdvQ2FtZXJhLnZpZXdwb3J0ID0gbmV3IEJBQllMT04uVmlld3BvcnQoMCwgMCwgMC41LCAwLjUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBQUk9KRUNULlVuaXZlcnNhbENhbWVyYVN5c3RlbS5QbGF5ZXJUd29DYW1lcmEuc2V0RW5hYmxlZCh0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgUFJPSkVDVC5Vbml2ZXJzYWxDYW1lcmFTeXN0ZW0uUGxheWVyVGhyZWVDYW1lcmEudmlld3BvcnQgPSBuZXcgQkFCWUxPTi5WaWV3cG9ydCgwLjUsIDAuNSwgMC41LCAwLjUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBQUk9KRUNULlVuaXZlcnNhbENhbWVyYVN5c3RlbS5QbGF5ZXJUaHJlZUNhbWVyYS5zZXRFbmFibGVkKHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBQUk9KRUNULlVuaXZlcnNhbENhbWVyYVN5c3RlbS5QbGF5ZXJGb3VyQ2FtZXJhLnZpZXdwb3J0ID0gbmV3IEJBQllMT04uVmlld3BvcnQoMC41LCAwLCAwLjUsIDAuNSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFBST0pFQ1QuVW5pdmVyc2FsQ2FtZXJhU3lzdGVtLlBsYXllckZvdXJDYW1lcmEuc2V0RW5hYmxlZCh0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgUFJPSkVDVC5Vbml2ZXJzYWxDYW1lcmFTeXN0ZW0ubXVsdGlQbGF5ZXJDYW1lcmFzLnB1c2goUFJPSkVDVC5Vbml2ZXJzYWxDYW1lcmFTeXN0ZW0uUGxheWVyT25lQ2FtZXJhKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgUFJPSkVDVC5Vbml2ZXJzYWxDYW1lcmFTeXN0ZW0ubXVsdGlQbGF5ZXJDYW1lcmFzLnB1c2goUFJPSkVDVC5Vbml2ZXJzYWxDYW1lcmFTeXN0ZW0uUGxheWVyVHdvQ2FtZXJhKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgUFJPSkVDVC5Vbml2ZXJzYWxDYW1lcmFTeXN0ZW0ubXVsdGlQbGF5ZXJDYW1lcmFzLnB1c2goUFJPSkVDVC5Vbml2ZXJzYWxDYW1lcmFTeXN0ZW0uUGxheWVyVGhyZWVDYW1lcmEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBQUk9KRUNULlVuaXZlcnNhbENhbWVyYVN5c3RlbS5tdWx0aVBsYXllckNhbWVyYXMucHVzaChQUk9KRUNULlVuaXZlcnNhbENhbWVyYVN5c3RlbS5QbGF5ZXJGb3VyQ2FtZXJhKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBCQUJZTE9OLlNjZW5lTWFuYWdlci5Mb2dXYXJuaW5nKFwiQmFieWxvbi5qcyBjYW1lcmEgcmlnIGludmFsaWQgcGxheWVyIGNvdW50IHNwZWNpZmllZDogXCIgKyBwbGF5ZXJzKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIEJBQllMT04uU2NlbmVNYW5hZ2VyLkxvZ1dhcm5pbmcoXCJCYWJ5bG9uLmpzIGNhbWVyYSByaWcgZmFpbGVkIHRvIGluaXRpYWxpemUgbXVsdGkgcGxheWVyIGNhbWVyYXNcIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBQUk9KRUNULlVuaXZlcnNhbENhbWVyYVN5c3RlbS5tdWx0aVBsYXllckNvdW50ID0gcGxheWVycztcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IFBST0pFQ1QuVW5pdmVyc2FsQ2FtZXJhU3lzdGVtLkFjdGl2YXRlTXVsdGlQbGF5ZXJDYW1lcmFzKHNjZW5lKTtcclxuICAgICAgICAgICAgICAgIGlmIChyZXN1bHQgPT09IGZhbHNlKSBCQUJZTE9OLlNjZW5lTWFuYWdlci5Mb2dXYXJuaW5nKFwiQmFieWxvbi5qcyBjYW1lcmEgcmlnIGZhaWxlZCB0byBpbml0aWFsaXplIG11bHRpIHBsYXllciB2aWV3c1wiKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIEJBQllMT04uU2NlbmVNYW5hZ2VyLkxvZ1dhcm5pbmcoXCJCYWJ5bG9uLmpzIGNhbWVyYSByaWcgbXVsdGkgcGxheWVyIHZpZXcgb3B0aW9uIG5vdCBlbmFibGVkXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuICAgIC8qKiBDYW1lcmEgRWRpdG9yIFByb3BlcnRpZXMgU3VwcG9ydCBDbGFzc2VzICovXHJcbiAgICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG4gICAgZXhwb3J0IGludGVyZmFjZSBJRWRpdG9yQXJjUnRvdGF0ZSB7XHJcbiAgICAgICAgYWxwaGE6bnVtYmVyO1xyXG4gICAgICAgIGJldGE6bnVtYmVyO1xyXG4gICAgICAgIHJhZGl1czpudW1iZXI7XHJcbiAgICAgICAgdGFyZ2V0OkJBQllMT04uSVVuaXR5VmVjdG9yMztcclxuICAgIH1cclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSUVkaXRvclBvc3RQcm9jZXNzaW5nIHtcclxuICAgICAgICB1c2VQb3N0UHJvY2Vzc2luZzpib29sZWFuO1xyXG4gICAgICAgIGhpZ2hEeW5hbWljUmFuZ2U6Ym9vbGVhbjtcclxuICAgICAgICBzY3JlZW5BbnRpQWxpYXNpbmc6UFJPSkVDVC5JRWRpdG9yQW50aUFsaWFzaW5nO1xyXG4gICAgICAgIGZvY2FsRGVwdGhPZkZpZWxkOlBST0pFQ1QuSUVkaXRvckRlcHRoT2ZGaWVsZDtcclxuICAgICAgICBjaHJvbWF0aWNBYmVycmF0aW9uOlBST0pFQ1QuSUVkaXRvckNocm9tYXRpY0FiZXJyYXRpb247XHJcbiAgICAgICAgZ2xvd0xheWVyUHJvcGVydGllczpQUk9KRUNULklFZGl0b3JHbG93TGF5ZXI7XHJcbiAgICAgICAgZ3JhaW5FZmZlY3RQcm9wZXJ0aWVzOlBST0pFQ1QuSUVkaXRvckdyYWluRWZmZWN0O1xyXG4gICAgICAgIHNoYXJwRWZmZWN0UHJvcGVydGllczpQUk9KRUNULklFZGl0b3JTaGFycGVuRWZmZWN0O1xyXG4gICAgICAgIGJsb29tRWZmZWN0UHJvcGVydGllczpQUk9KRUNULklFZGl0b3JCbG9vbVByb2Nlc3Npbmc7XHJcbiAgICAgICAgaW1hZ2VQcm9jZXNzaW5nQ29uZmlnOlBST0pFQ1QuSUVkaXRvckltYWdlUHJvY2Vzc2luZztcclxuICAgICAgICBzY3JlZW5TcGFjZVJlbmRlcmluZzpQUk9KRUNULklFZGl0b3JTY3JlZW5TcGFjZTtcclxuICAgIH1cclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSUVkaXRvclNjcmVlblNwYWNlIHtcclxuICAgICAgICBTU0FPOmJvb2xlYW47XHJcbiAgICAgICAgU1NBT1JhdGlvOm51bWJlcjtcclxuICAgICAgICBjb21iaW5lUmF0aW86bnVtYmVyO1xyXG4gICAgICAgIHRvdGFsU3RyZW5ndGg6bnVtYmVyO1xyXG4gICAgICAgIHJhZGl1czpudW1iZXI7XHJcbiAgICAgICAgYXJlYTpudW1iZXI7XHJcbiAgICAgICAgZmFsbE9mZjpudW1iZXI7XHJcbiAgICAgICAgYmFzZVZhbHVlOm51bWJlcjtcclxuICAgIH1cclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSUVkaXRvckFudGlBbGlhc2luZyB7XHJcbiAgICAgICAgbXNhYVNhbXBsZXM6bnVtYmVyO1xyXG4gICAgICAgIGZ4YWFFbmFibGVkOmJvb2xlYW47XHJcbiAgICAgICAgZnhhYVNjYWxpbmc6Ym9vbGVhbjtcclxuICAgICAgICBmeGFhU2FtcGxlczpudW1iZXI7XHJcbiAgICB9XHJcbiAgICBleHBvcnQgaW50ZXJmYWNlIElFZGl0b3JEZXB0aE9mRmllbGQge1xyXG4gICAgICAgIGRlcHRoT2ZGaWVsZDpib29sZWFuO1xyXG4gICAgICAgIGJsdXJMZXZlbDpudW1iZXI7XHJcbiAgICAgICAgZm9jYWxTdG9wOm51bWJlcjtcclxuICAgICAgICBmb2NhbExlbmd0aDpudW1iZXI7XHJcbiAgICAgICAgZm9jdXNEaXN0YW5jZTpudW1iZXI7XHJcbiAgICAgICAgbWF4TGVuc1NpemU6bnVtYmVyO1xyXG4gICAgfVxyXG4gICAgZXhwb3J0IGludGVyZmFjZSBJRWRpdG9yQ2hyb21hdGljQWJlcnJhdGlvbiB7XHJcbiAgICAgICAgYWJlcnJhdGlvbkVuYWJsZWQ6Ym9vbGVhbjtcclxuICAgICAgICBhYmVycmF0aW9uQW1vdW50Om51bWJlcjtcclxuICAgICAgICBhZGFwdFNjYWxlVmlld3BvcnQ6Ym9vbGVhbjtcclxuICAgICAgICBhbHBoYU1vZGU6bnVtYmVyO1xyXG4gICAgICAgIGFsd2F5c0ZvcmNlUE9UOmJvb2xlYW47XHJcbiAgICAgICAgcGl4ZWxQZXJmZWN0TW9kZTpib29sZWFuO1xyXG4gICAgICAgIGZ1bGxzY3JlZW5WaWV3cG9ydDpib29sZWFuO1xyXG4gICAgfVxyXG4gICAgZXhwb3J0IGludGVyZmFjZSBJRWRpdG9yR2xvd0xheWVyIHtcclxuICAgICAgICBnbG93RW5hYmxlZDpib29sZWFuO1xyXG4gICAgICAgIGdsb3dJbnRlbnNpdHk6bnVtYmVyO1xyXG4gICAgICAgIGJsdXJLZXJuZWxTaXplOm51bWJlcjtcclxuICAgIH1cclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSUVkaXRvckdyYWluRWZmZWN0IHtcclxuICAgICAgICBncmFpbkVuYWJsZWQ6Ym9vbGVhbjtcclxuICAgICAgICBncmFpbkFuaW1hdGVkOmJvb2xlYW47XHJcbiAgICAgICAgZ3JhaW5JbnRlbnNpdHk6bnVtYmVyO1xyXG4gICAgICAgIGFkYXB0U2NhbGVWaWV3cG9ydDpib29sZWFuO1xyXG4gICAgfVxyXG4gICAgZXhwb3J0IGludGVyZmFjZSBJRWRpdG9yU2hhcnBlbkVmZmVjdCB7XHJcbiAgICAgICAgc2hhcnBlbkVuYWJsZWQ6Ym9vbGVhbjtcclxuICAgICAgICBzaGFycEVkZ2VBbW91bnQ6bnVtYmVyO1xyXG4gICAgICAgIHNoYXJwQ29sb3JBbW91bnQ6bnVtYmVyO1xyXG4gICAgICAgIGFkYXB0U2NhbGVWaWV3cG9ydDpib29sZWFuO1xyXG4gICAgfVxyXG4gICAgZXhwb3J0IGludGVyZmFjZSBJRWRpdG9yQmxvb21Qcm9jZXNzaW5nIHtcclxuICAgICAgICBibG9vbUVuYWJsZWQ6Ym9vbGVhbjtcclxuICAgICAgICBibG9vbUtlcm5lbDpudW1iZXI7XHJcbiAgICAgICAgYmxvb21TY2FsZTpudW1iZXI7XHJcbiAgICAgICAgYmxvb21XZWlnaHQ6bnVtYmVyO1xyXG4gICAgICAgIGJsb29tVGhyZXNob2xkOm51bWJlcjtcclxuICAgIH1cclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSUVkaXRvckNvbG9yQ3VydmVzIHtcclxuICAgICAgICBjdXJ2ZXNFbmFibGVkOmJvb2xlYW47XHJcbiAgICAgICAgZ2xvYmFsRGVuOm51bWJlcjtcclxuICAgICAgICBnbG9iYWxFeHA6bnVtYmVyO1xyXG4gICAgICAgIGdsb2JhbEh1ZTpudW1iZXI7XHJcbiAgICAgICAgZ2xvYmFsU2F0Om51bWJlcjtcclxuICAgICAgICBoaWdobGlnaHRzRGVuOm51bWJlcjtcclxuICAgICAgICBoaWdobGlnaHRzRXhwOm51bWJlcjtcclxuICAgICAgICBoaWdobGlnaHRzSHVlOm51bWJlcjtcclxuICAgICAgICBoaWdobGlnaHRzU2F0Om51bWJlcjtcclxuICAgICAgICBtaWR0b25lc0RlbjpudW1iZXI7XHJcbiAgICAgICAgbWlkdG9uZXNFeHA6bnVtYmVyO1xyXG4gICAgICAgIG1pZHRvbmVzSHVlOm51bWJlcjtcclxuICAgICAgICBtaWR0b25lc1NhdDpudW1iZXI7XHJcbiAgICAgICAgc2hhZG93c0RlbjpudW1iZXI7XHJcbiAgICAgICAgc2hhZG93c0V4cDpudW1iZXI7XHJcbiAgICAgICAgc2hhZG93c0h1ZTpudW1iZXI7XHJcbiAgICAgICAgc2hhZG93c1NhdDpudW1iZXI7XHJcbiAgICB9XHJcbiAgICBleHBvcnQgaW50ZXJmYWNlIElFZGl0b3JJbWFnZVByb2Nlc3Npbmcge1xyXG4gICAgICAgIGltYWdlUHJvY2Vzc2luZzpib29sZWFuO1xyXG4gICAgICAgIGltYWdlQ29udHJhc3Q6bnVtYmVyO1xyXG4gICAgICAgIGltYWdlRXhwb3N1cmU6bnVtYmVyO1xyXG4gICAgICAgIHZpZ25ldHRlRW5hYmxlZDogYm9vbGVhbjtcclxuICAgICAgICB2aWduZXR0ZUJsZW5kTW9kZTogbnVtYmVyO1xyXG4gICAgICAgIHZpZ25ldHRlQ2FtZXJhRm92OiBudW1iZXI7XHJcbiAgICAgICAgdmlnbmV0dGVTdHJldGNoOiBudW1iZXI7XHJcbiAgICAgICAgdmlnbmV0dGVDZW50cmVYOiBudW1iZXI7XHJcbiAgICAgICAgdmlnbmV0dGVDZW50cmVZOiBudW1iZXI7XHJcbiAgICAgICAgdmlnbmV0dGVXZWlnaHQ6IG51bWJlcjtcclxuICAgICAgICB2aWduZXR0ZUNvbG9yOiBCQUJZTE9OLklVbml0eUNvbG9yO1xyXG4gICAgICAgIHVzZUNvbG9yR3JhZGluZzpib29sZWFuO1xyXG4gICAgICAgIHNldEdyYWRpbmdUZXh0dXJlOmFueTtcclxuICAgICAgICBpbWFnaW5nQ29sb3JDdXJ2ZXM6UFJPSkVDVC5JRWRpdG9yQ29sb3JDdXJ2ZXM7XHJcbiAgICB9XHJcbn0iLCJtb2R1bGUgUFJPSkVDVCB7XHJcbiAgICBpbXBvcnQgQm9uZSA9IEJBQllMT04uQm9uZTtcclxuICAgIGltcG9ydCBWZWN0b3IzID0gQkFCWUxPTi5WZWN0b3IzO1xyXG5cclxuICAgIGV4cG9ydCBhYnN0cmFjdCBjbGFzcyBQYXJ0aWNsZUFsZ28gaW1wbGVtZW50cyBJUGFydGljbGVBbGdvIHtcclxuICAgICAgICBwcm90ZWN0ZWQgcGFydGljbGVzOiBCQUJZTE9OLkdQVVBhcnRpY2xlU3lzdGVtW107XHJcbiAgICAgICAgcHJvdGVjdGVkIGJvbmU6IEJvbmU7XHJcblxyXG4gICAgICAgIHByb3RlY3RlZCBjb25zdHJ1Y3Rvcihib25lPzogQm9uZSkge1xyXG4gICAgICAgICAgICB0aGlzLmJvbmUgPSBib25lO1xyXG4gICAgICAgICAgICB0aGlzLnBhcnRpY2xlcyA9IFtdXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgYWRkUGFydGljbGUocGFydGljbGU6IEJBQllMT04uR1BVUGFydGljbGVTeXN0ZW0pOiB2b2lkIHtcclxuICAgICAgICAgICAgdGhpcy5wYXJ0aWNsZXMucHVzaChwYXJ0aWNsZSlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGFic3RyYWN0IHVwZGF0ZUFsZ28odXBjOiBVbml2ZXJzYWxQbGF5ZXJDb250cm9sbGVyKTogdm9pZFxyXG5cclxuICAgICAgICBhYnN0cmFjdCByZXNldCgpOiB2b2lkO1xyXG5cclxuICAgICAgICBhYnN0cmFjdCBnZXREYW1hZ2VQb2ludCgpOiBWZWN0b3IzO1xyXG4gICAgfVxyXG59IiwiLy8vPHJlZmVyZW5jZSBwYXRoPVwiUGFydGljbGVBbGdvLnRzXCIvPlxyXG5tb2R1bGUgUFJPSkVDVCB7XHJcbiAgICBpbXBvcnQgVmVjdG9yMyA9IEJBQllMT04uVmVjdG9yMztcclxuICAgIGltcG9ydCBCb25lID0gQkFCWUxPTi5Cb25lO1xyXG5cclxuICAgIGV4cG9ydCBjbGFzcyBDaXJjbGVBbGdvIGV4dGVuZHMgUGFydGljbGVBbGdvIHtcclxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IHJhZGl1czogbnVtYmVyO1xyXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgcnBzOiBudW1iZXI7XHJcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBmb3J3YXJkU3BlZWQ6IG51bWJlcjtcclxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IGhlaWdodDogbnVtYmVyO1xyXG4gICAgICAgIHByaXZhdGUgaTogbnVtYmVyO1xyXG5cclxuICAgICAgICBjb25zdHJ1Y3Rvcihib25lOiBCb25lLCByYWRpdXM6IG51bWJlciwgcm90YXRpb25QZXJTZWNvbmQ6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIgPSAwLCBmb3J3YXJkU3BlZWQ6IG51bWJlciA9IDApIHtcclxuICAgICAgICAgICAgc3VwZXIoYm9uZSk7XHJcbiAgICAgICAgICAgIHRoaXMucmFkaXVzID0gcmFkaXVzO1xyXG4gICAgICAgICAgICB0aGlzLnJwcyA9IDEgLyByb3RhdGlvblBlclNlY29uZDtcclxuICAgICAgICAgICAgdGhpcy5mb3J3YXJkU3BlZWQgPSBmb3J3YXJkU3BlZWQ7XHJcbiAgICAgICAgICAgIHRoaXMuaGVpZ2h0ID0gaGVpZ2h0O1xyXG4gICAgICAgICAgICB0aGlzLmkgPSAwO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHVwZGF0ZUFsZ28odXBjOiBVbml2ZXJzYWxQbGF5ZXJDb250cm9sbGVyKTogdm9pZCB7XHJcbiAgICAgICAgICAgIGxldCBpbmRleCA9IDA7XHJcbiAgICAgICAgICAgIGxldCBwb3NpdGlvbkJvbmUgPSB1cGMudHJhbnNmb3JtLnBvc2l0aW9uO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5ib25lICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHBvc2l0aW9uQm9uZSA9IHRoaXMuYm9uZS5nZXRBYnNvbHV0ZVBvc2l0aW9uKCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGxldCBuZXdSYWRpdXMgPSB0aGlzLmkgKiAwLjA1ID49IHRoaXMucmFkaXVzID8gdGhpcy5yYWRpdXMgOiB0aGlzLmkgKiAwLjA1O1xyXG4gICAgICAgICAgICB0aGlzLnBhcnRpY2xlcy5mb3JFYWNoKHBhcnRpY2xlID0+IHtcclxuICAgICAgICAgICAgICAgIGxldCBvZmZzZXQgPSAoKDIgKiBNYXRoLlBJKSAvIHRoaXMucGFydGljbGVzLmxlbmd0aCkgKiBpbmRleDtcclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgY2lyY2xlVmVjdG9yID0gbmV3IFZlY3RvcjMoTWF0aC5zaW4ob2Zmc2V0ICsgdGhpcy5pIC8gTWF0aC5QSSkgKiBuZXdSYWRpdXMsIE1hdGguY29zKG9mZnNldCArIHRoaXMuaSAvIE1hdGguUEkpICogbmV3UmFkaXVzKTtcclxuICAgICAgICAgICAgICAgIGxldCBvdGhlclZlY3RvciA9IG5ldyBWZWN0b3IzKDAsIHRoaXMuaGVpZ2h0LCB0aGlzLmZvcndhcmRTcGVlZCAqIHRoaXMuaSk7XHJcblxyXG4gICAgICAgICAgICAgICAgcGFydGljbGUuZW1pdHRlciA9IE1hdGhVdGlscy5yb3RhdGUoTWF0aFV0aWxzLmFkZFZlY3RvcnMoW2NpcmNsZVZlY3RvciwgcG9zaXRpb25Cb25lLCBvdGhlclZlY3Rvcl0pLCB1cGMudHJhbnNmb3JtLnBvc2l0aW9uLCB1cGMudHJhbnNmb3JtLnJvdGF0aW9uUXVhdGVybmlvbi50b0V1bGVyQW5nbGVzKCkueSAqIDE4MCAvIE1hdGguUEkpO1xyXG4gICAgICAgICAgICAgICAgaW5kZXgrKztcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmkgKz0gKE1hdGguUEkgLyB0aGlzLnJwcykgLyAoMSAvIHVwYy5nZXREZWx0YVNlY29uZHMoKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgZ2V0RGFtYWdlUG9pbnQoKTogVmVjdG9yMyB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1ldGhvZCBub3QgaW1wbGVtZW50ZWQuXCIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHJlc2V0KCk6IHZvaWQge1xyXG4gICAgICAgICAgICB0aGlzLmkgPSAwO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsIm1vZHVsZSBQUk9KRUNUIHtcclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSVBhcnRpY2xlQWxnbyB7XHJcblxyXG4gICAgICAgIHVwZGF0ZUFsZ28odXBjOiBVbml2ZXJzYWxQbGF5ZXJDb250cm9sbGVyKTogdm9pZDtcclxuXHJcbiAgICAgICAgcmVzZXQoKTogdm9pZDtcclxuICAgIH1cclxufSIsIm1vZHVsZSBQUk9KRUNUIHtcclxuICAgIGltcG9ydCBCb25lID0gQkFCWUxPTi5Cb25lO1xyXG4gICAgaW1wb3J0IFZlY3RvcjMgPSBCQUJZTE9OLlZlY3RvcjM7XHJcblxyXG4gICAgZXhwb3J0IGNsYXNzIFNwaGVyZUFsZ28gZXh0ZW5kcyBQYXJ0aWNsZUFsZ28ge1xyXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgaGVpZ2h0O1xyXG5cclxuICAgICAgICBjb25zdHJ1Y3Rvcihib25lOiBCb25lLCBoZWlnaHQ6IG51bWJlcikge1xyXG4gICAgICAgICAgICBzdXBlcihib25lKTtcclxuICAgICAgICAgICAgdGhpcy5oZWlnaHQgPSBoZWlnaHQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgdXBkYXRlQWxnbyh1cGM6IFVuaXZlcnNhbFBsYXllckNvbnRyb2xsZXIpOiB2b2lkIHtcclxuICAgICAgICAgICAgbGV0IHBvc2l0aW9uQm9uZSA9IHVwYy50cmFuc2Zvcm0ucG9zaXRpb247XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmJvbmUgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgcG9zaXRpb25Cb25lID0gdGhpcy5ib25lLmdldEFic29sdXRlUG9zaXRpb24oKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLnBhcnRpY2xlcy5mb3JFYWNoKHBhcnRpY2xlID0+IHtcclxuICAgICAgICAgICAgICAgIHBhcnRpY2xlLmVtaXR0ZXIgPSBuZXcgQkFCWUxPTi5WZWN0b3IzKHBvc2l0aW9uQm9uZS54LCB0aGlzLmhlaWdodCArIHBvc2l0aW9uQm9uZS55LCBwb3NpdGlvbkJvbmUueik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIGdldERhbWFnZVBvaW50KCk6IFZlY3RvcjMge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNZXRob2Qgbm90IGltcGxlbWVudGVkLlwiKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyByZXNldCgpOiB2b2lkIHtcclxuICAgICAgICAgICAgLy8gaWdub3JlZFxyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsIm1vZHVsZSBQUk9KRUNUIHtcclxuICAgIGltcG9ydCBHUFVQYXJ0aWNsZVN5c3RlbSA9IEJBQllMT04uR1BVUGFydGljbGVTeXN0ZW07XHJcbiAgICBpbXBvcnQgU2NlbmUgPSBCQUJZTE9OLlNjZW5lO1xyXG5cclxuICAgIGV4cG9ydCBhYnN0cmFjdCBjbGFzcyBQYXJ0aWNsZUZhY3Rvcnkge1xyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlU3BoZXJlUGFydGljbGUoc2NlbmU6IFNjZW5lLCBjb2xvcjogQkFCWUxPTi5Db2xvcjRbXSwgc3BoZXJlU2l6ZTogbnVtYmVyLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWluU2l6ZTogbnVtYmVyLCBtYXhTaXplOiBudW1iZXIsIG1pbkVtaXRQb3dlcjogbnVtYmVyLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF4RW1pdFBvd2VyOiBudW1iZXIsIGVtaXRSYXRlOiBudW1iZXIsIG1pbkxpZmVUaW1lOiBudW1iZXIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXhMaWZlVGltZTogbnVtYmVyLCBjYXBhY2l0eTogbnVtYmVyID0gMjAwMCk6IEdQVVBhcnRpY2xlU3lzdGVtIHtcclxuICAgICAgICAgICAgbGV0IHNwaGVyZVBhcnRpY2xlID0gbmV3IFNwaGVyZVBhcnRpY2xlKFwiXCIsIHtjYXBhY2l0eTogY2FwYWNpdHl9LCBzY2VuZSk7XHJcblxyXG4gICAgICAgICAgICBzcGhlcmVQYXJ0aWNsZS5jcmVhdGVQYXJ0aWNsZXMoY29sb3IsIHNwaGVyZVNpemUsIHttaW5TaXplOiBtaW5TaXplLCBtYXhTaXplOiBtYXhTaXplfSwge1xyXG4gICAgICAgICAgICAgICAgbWluRW1pdFBvd2VyOiBtaW5FbWl0UG93ZXIsXHJcbiAgICAgICAgICAgICAgICBtYXhFbWl0UG93ZXI6IG1heEVtaXRQb3dlcixcclxuICAgICAgICAgICAgICAgIGVtaXRSYXRlOiBlbWl0UmF0ZVxyXG4gICAgICAgICAgICB9LCB7bWluTGlmZVRpbWU6IG1pbkxpZmVUaW1lLCBtYXhMaWZlVGltZTogbWF4TGlmZVRpbWV9KTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBzcGhlcmVQYXJ0aWNsZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlU3BoZXJlc1BhcnRpY2xlKHNwaGVyZUNvdW50OiBudW1iZXIsIHNjZW5lOiBTY2VuZSwgY29sb3JzOiBCQUJZTE9OLkNvbG9yNFtdW10sIHNwaGVyZVNpemU6IG51bWJlcixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW5TaXplOiBudW1iZXIsIG1heFNpemU6IG51bWJlciwgbWluRW1pdFBvd2VyOiBudW1iZXIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF4RW1pdFBvd2VyOiBudW1iZXIsIGVtaXRSYXRlOiBudW1iZXIsIG1pbkxpZmVUaW1lOiBudW1iZXIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF4TGlmZVRpbWU6IG51bWJlciwgY2FwYWNpdHk6IG51bWJlciA9IDIwMDApOiBHUFVQYXJ0aWNsZVN5c3RlbVtdIHtcclxuICAgICAgICAgICAgbGV0IHNwaGVyZVBhcnRpY2xlczogR1BVUGFydGljbGVTeXN0ZW1bXSA9IFtdO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNwaGVyZUNvdW50OyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHNwaGVyZVBhcnRpY2xlcy5wdXNoKFBhcnRpY2xlRmFjdG9yeS5jcmVhdGVTcGhlcmVQYXJ0aWNsZShzY2VuZSwgY29sb3JzW2ldLCBzcGhlcmVTaXplLFxyXG4gICAgICAgICAgICAgICAgICAgIG1pblNpemUsIG1heFNpemUsIG1pbkVtaXRQb3dlciwgbWF4RW1pdFBvd2VyLCBlbWl0UmF0ZSwgbWluTGlmZVRpbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgbWF4TGlmZVRpbWUsIGNhcGFjaXR5KSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBzcGhlcmVQYXJ0aWNsZXM7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwibW9kdWxlIFBST0pFQ1Qge1xyXG4gICAgaW1wb3J0IFNjZW5lID0gQkFCWUxPTi5TY2VuZTtcclxuICAgIGltcG9ydCBUaGluRW5naW5lID0gQkFCWUxPTi5UaGluRW5naW5lO1xyXG4gICAgaW1wb3J0IENvbG9yNCA9IEJBQllMT04uQ29sb3I0O1xyXG5cclxuICAgIGV4cG9ydCBjbGFzcyBTcGhlcmVQYXJ0aWNsZSBleHRlbmRzIEJBQllMT04uR1BVUGFydGljbGVTeXN0ZW0ge1xyXG4gICAgICAgIGNvbnN0cnVjdG9yKG5hbWU6IHN0cmluZywgb3B0aW9uczogUGFydGlhbDx7XHJcbiAgICAgICAgICAgIGNhcGFjaXR5OiBudW1iZXI7XHJcbiAgICAgICAgICAgIHJhbmRvbVRleHR1cmVTaXplOiBudW1iZXI7XHJcbiAgICAgICAgfT4sIHNjZW5lT3JFbmdpbmU6IFNjZW5lIHwgVGhpbkVuZ2luZSkge1xyXG4gICAgICAgICAgICBzdXBlcihuYW1lLCBvcHRpb25zLCBzY2VuZU9yRW5naW5lKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBjcmVhdGVQYXJ0aWNsZXMoY29sb3I6IENvbG9yNFtdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3BoZXJlU2l6ZTogbnVtYmVyLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZXM6IFBhcnRpYWw8e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pblNpemU6IG51bWJlcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXhTaXplOiBudW1iZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9PixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvd2VyczogUGFydGlhbDx7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWluRW1pdFBvd2VyOiBudW1iZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF4RW1pdFBvd2VyOiBudW1iZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW1pdFJhdGU6IG51bWJlcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0+LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlmZTogUGFydGlhbDx7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWluTGlmZVRpbWU6IG51bWJlcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXhMaWZlVGltZTogbnVtYmVyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfT4sXHJcbiAgICAgICAgKTogdm9pZCB7XHJcbiAgICAgICAgICAgIC8vIHRvZG8gVXBsb2FkIGltYWdlIHRvIG91IHNlcnZlclxyXG4gICAgICAgICAgICB0aGlzLnBhcnRpY2xlVGV4dHVyZSA9IG5ldyBCQUJZTE9OLlRleHR1cmUoXCJodHRwczovL3d3dy5iYWJ5bG9uanMtcGxheWdyb3VuZC5jb20vdGV4dHVyZXMvZmxhcmUucG5nXCIsIHRoaXMuX3NjZW5lKTtcclxuICAgICAgICAgICAgdGhpcy5lbWl0dGVyID0gQkFCWUxPTi5WZWN0b3IzLlplcm8oKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuY29sb3IxID0gY29sb3JbMF07XHJcbiAgICAgICAgICAgIHRoaXMuY29sb3IyID0gY29sb3JbMV07XHJcbiAgICAgICAgICAgIHRoaXMuY29sb3JEZWFkID0gY29sb3JbMl07XHJcblxyXG4gICAgICAgICAgICB0aGlzLm1pblNpemUgPSBzaXplcy5taW5TaXplO1xyXG4gICAgICAgICAgICB0aGlzLm1heFNpemUgPSBzaXplcy5tYXhTaXplO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5taW5MaWZlVGltZSA9IGxpZmUubWluTGlmZVRpbWU7XHJcbiAgICAgICAgICAgIHRoaXMubWF4TGlmZVRpbWUgPSBsaWZlLm1heExpZmVUaW1lO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5jcmVhdGVTcGhlcmVFbWl0dGVyKHNwaGVyZVNpemUpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5taW5FbWl0UG93ZXIgPSBwb3dlcnMubWluRW1pdFBvd2VyO1xyXG4gICAgICAgICAgICB0aGlzLm1heEVtaXRQb3dlciA9IHBvd2Vycy5tYXhFbWl0UG93ZXI7XHJcbiAgICAgICAgICAgIHRoaXMuZW1pdFJhdGUgPSBwb3dlcnMuZW1pdFJhdGU7XHJcblxyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVNwZWVkID0gMC4wMDU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwibW9kdWxlIFBST0pFQ1Qge1xyXG4gICAgaW1wb3J0IEdQVVBhcnRpY2xlU3lzdGVtID0gQkFCWUxPTi5HUFVQYXJ0aWNsZVN5c3RlbTtcclxuICAgIGltcG9ydCBWZWN0b3IzID0gQkFCWUxPTi5WZWN0b3IzO1xyXG5cclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSVNwZWxsIHtcclxuICAgICAgICB1cGRhdGUodXBjOiBVbml2ZXJzYWxQbGF5ZXJDb250cm9sbGVyKTogdm9pZDtcclxuXHJcbiAgICAgICAgc2V0UGFydGljbGVzKHBhcnRpY2xlczogR1BVUGFydGljbGVTeXN0ZW1bXSk6IHZvaWQ7XHJcblxyXG4gICAgICAgIGdldFN0YXJ0VGltZSgpOiBudW1iZXI7XHJcblxyXG4gICAgICAgIGdldFN0b3BUaW1lKCk6IG51bWJlcjtcclxuXHJcbiAgICAgICAgcmVzZXQoKTogdm9pZDtcclxuICAgIH1cclxufSIsIm1vZHVsZSBQUk9KRUNUIHtcclxuICAgIGltcG9ydCBHUFVQYXJ0aWNsZVN5c3RlbSA9IEJBQllMT04uR1BVUGFydGljbGVTeXN0ZW07XHJcbiAgICBpbXBvcnQgVmVjdG9yMyA9IEJBQllMT04uVmVjdG9yMztcclxuXHJcbiAgICBleHBvcnQgY2xhc3MgU3BlbGwgaW1wbGVtZW50cyBJU3BlbGwge1xyXG4gICAgICAgIHByaXZhdGUgcGFydGljbGVBbGdvOiBQYXJ0aWNsZUFsZ287XHJcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBzdGFydFRpbWU6IG51bWJlcjtcclxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IHN0b3BUaW1lOiBudW1iZXI7XHJcblxyXG4gICAgICAgIGNvbnN0cnVjdG9yKHBhcnRpY2xlQWxnbzogUGFydGljbGVBbGdvLCBvcHRpb25zOiBQYXJ0aWFsPHtcclxuICAgICAgICAgICAgc3RhcnRUaW1lPzogbnVtYmVyLFxyXG4gICAgICAgICAgICBzdG9wVGltZT86IG51bWJlclxyXG4gICAgICAgIH0+KSB7XHJcbiAgICAgICAgICAgIHRoaXMucGFydGljbGVBbGdvID0gcGFydGljbGVBbGdvO1xyXG4gICAgICAgICAgICB0aGlzLnN0YXJ0VGltZSA9IG9wdGlvbnMuc3RhcnRUaW1lID09IG51bGwgPyBOdW1iZXIuTUlOX1NBRkVfSU5URUdFUiA6IG9wdGlvbnMuc3RhcnRUaW1lO1xyXG4gICAgICAgICAgICB0aGlzLnN0b3BUaW1lID0gb3B0aW9ucy5zdG9wVGltZSA9PSBudWxsID8gTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIgOiBvcHRpb25zLnN0b3BUaW1lO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHJlc2V0KCk6IHZvaWQge1xyXG4gICAgICAgICAgICB0aGlzLnBhcnRpY2xlQWxnby5yZXNldCgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHVwZGF0ZSh1cGM6IFVuaXZlcnNhbFBsYXllckNvbnRyb2xsZXIpOiB2b2lkIHtcclxuICAgICAgICAgICAgdGhpcy5wYXJ0aWNsZUFsZ28udXBkYXRlQWxnbyh1cGMpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHNldFBhcnRpY2xlcyhwYXJ0aWNsZXM6IEdQVVBhcnRpY2xlU3lzdGVtW10pOiB2b2lkIHtcclxuICAgICAgICAgICAgcGFydGljbGVzLmZvckVhY2gocGFydGljbGUgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wYXJ0aWNsZUFsZ28uYWRkUGFydGljbGUocGFydGljbGUpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBnZXRTdGFydFRpbWUoKTogbnVtYmVyIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3RhcnRUaW1lO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIGdldFN0b3BUaW1lKCk6IG51bWJlciB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnN0b3BUaW1lO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsIm1vZHVsZSBQUk9KRUNUIHtcclxuICAgIGltcG9ydCBHUFVQYXJ0aWNsZVN5c3RlbSA9IEJBQllMT04uR1BVUGFydGljbGVTeXN0ZW07XHJcbiAgICBpbXBvcnQgVmVjdG9yMyA9IEJBQllMT04uVmVjdG9yMztcclxuXHJcbiAgICBleHBvcnQgY2xhc3MgU3BlbGxUcmFuc2l0aW9uIGltcGxlbWVudHMgSVNwZWxsIHtcclxuICAgICAgICBwcml2YXRlIHBhcnRpY2xlczogR1BVUGFydGljbGVTeXN0ZW1bXTtcclxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IHN0YXJ0VGltZTogbnVtYmVyO1xyXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgc3RvcFRpbWU6IG51bWJlcjtcclxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IHRyYW5zaXRpb25UaW1lOiBudW1iZXI7XHJcbiAgICAgICAgcHJpdmF0ZSB0aW1lRWxhcHNlZDogbnVtYmVyO1xyXG4gICAgICAgIHByaXZhdGUgcG9zQjogVmVjdG9yMztcclxuXHJcbiAgICAgICAgY29uc3RydWN0b3IocG9zQjogVmVjdG9yMywgb3B0aW9uczogUGFydGlhbDx7XHJcbiAgICAgICAgICAgIHN0YXJ0VGltZT86IG51bWJlcixcclxuICAgICAgICAgICAgc3RvcFRpbWU/OiBudW1iZXJcclxuICAgICAgICB9Pikge1xyXG4gICAgICAgICAgICB0aGlzLnN0YXJ0VGltZSA9IG9wdGlvbnMuc3RhcnRUaW1lO1xyXG4gICAgICAgICAgICB0aGlzLnN0b3BUaW1lID0gb3B0aW9ucy5zdG9wVGltZTtcclxuICAgICAgICAgICAgdGhpcy50cmFuc2l0aW9uVGltZSA9IHRoaXMuc3RvcFRpbWUgLSB0aGlzLnN0YXJ0VGltZTtcclxuICAgICAgICAgICAgdGhpcy50aW1lRWxhcHNlZCA9IDA7XHJcbiAgICAgICAgICAgIHRoaXMucG9zQiA9IHBvc0I7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgcmVzZXQoKTogdm9pZCB7XHJcbiAgICAgICAgICAgIHRoaXMudGltZUVsYXBzZWQgPSAwO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHVwZGF0ZSh1cGM6IFVuaXZlcnNhbFBsYXllckNvbnRyb2xsZXIpOiB2b2lkIHtcclxuICAgICAgICAgICAgdGhpcy5wYXJ0aWNsZXMuZm9yRWFjaChwYXJ0aWNsZSA9PiB7XHJcbiAgICAgICAgICAgICAgICBsZXQgcGxheWVyUG9zaXRpb24gPSB1cGMudHJhbnNmb3JtLnBvc2l0aW9uO1xyXG4gICAgICAgICAgICAgICAgcGFydGljbGUuZW1pdHRlciA9IEFuaW1hdGlvblV0aWxzLmxlcnBWZWN0b3IocGFydGljbGUuZW1pdHRlciBhcyBWZWN0b3IzLCBuZXcgVmVjdG9yMyhwbGF5ZXJQb3NpdGlvbi54ICsgdGhpcy5wb3NCLngsIHBsYXllclBvc2l0aW9uLnkgKyB0aGlzLnBvc0IueSwgcGxheWVyUG9zaXRpb24ueiArIHRoaXMucG9zQi56KSwgdGhpcy50aW1lRWxhcHNlZCAvIHRoaXMudHJhbnNpdGlvblRpbWUpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB0aGlzLnRpbWVFbGFwc2VkICs9IHVwYy5nZXREZWx0YVNlY29uZHMoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzZXRQYXJ0aWNsZXMocGFydGljbGVzOiBHUFVQYXJ0aWNsZVN5c3RlbVtdKTogdm9pZCB7XHJcbiAgICAgICAgICAgIHRoaXMucGFydGljbGVzID0gcGFydGljbGVzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIGdldFN0YXJ0VGltZSgpOiBudW1iZXIge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zdGFydFRpbWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgZ2V0U3RvcFRpbWUoKTogbnVtYmVyIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3RvcFRpbWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwibW9kdWxlIFBST0pFQ1Qge1xyXG5cdGltcG9ydCBCb25lID0gQkFCWUxPTi5Cb25lO1xyXG5cdGltcG9ydCBWZWN0b3IzID0gQkFCWUxPTi5WZWN0b3IzO1xyXG5cdGltcG9ydCBTY2VuZSA9IEJBQllMT04uU2NlbmU7XHJcblxyXG5cdGV4cG9ydCBjbGFzcyBBbmltYXRpb25NYW5hZ2VyIHtcclxuXHRcdHByaXZhdGUgc3BlbGxBbmltU3luY3MgPSBbXTtcclxuXHRcdHByaXZhdGUgc3BlbGxTdGF0ZXMgPSBbXTtcclxuXHRcdHByaXZhdGUgc2V0TmFtZTogc3RyaW5nO1xyXG5cdFx0cHJpdmF0ZSB0cmFuc2Zvcm1Cb25lczogYW55O1xyXG5cdFx0cHJpdmF0ZSBzY2VuZTogU2NlbmU7XHJcblxyXG5cdFx0Y29uc3RydWN0b3Ioc2V0TmFtZTogc3RyaW5nLCB0cmFuc2Zvcm1Cb25lczogYW55LCBzY2VuZTogU2NlbmUpIHtcclxuXHRcdFx0dGhpcy5zZXROYW1lID0gc2V0TmFtZTtcclxuXHRcdFx0dGhpcy50cmFuc2Zvcm1Cb25lcyA9IHRyYW5zZm9ybUJvbmVzO1xyXG5cdFx0XHR0aGlzLnNjZW5lID0gc2NlbmU7XHJcblx0XHRcdHRoaXMubG9hZFNwZWxsblNldCgpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHB1YmxpYyBsb2FkU3BlbGxuU2V0KCkge1xyXG5cdFx0XHRsZXQgc3BlbGxTZXRzOiBTcGVsbFNldFtdID0gW25ldyBTcGVsbFRlc3RTZXQodGhpcy50cmFuc2Zvcm1Cb25lcyldO1xyXG5cdFx0XHRsZXQgc3BlbGxTZXQ6IFNwZWxsU2V0ID0gc3BlbGxTZXRzLmZpbmQoKHNwZWxsU2V0KSA9PlxyXG5cdFx0XHRcdHNwZWxsU2V0LmNhblNldEJlVXNlZCh0aGlzLnNldE5hbWUpXHJcblx0XHRcdCk7XHJcblx0XHRcdGNvbnNvbGUubG9nKFwiU1BFTEwgOiBcIiArIHNwZWxsU2V0KTtcclxuXHRcdFx0aWYgKHNwZWxsU2V0ID09PSB1bmRlZmluZWQpIHJldHVybjtcclxuXHRcdFx0dGhpcy5yZWdpc3RlckFsbEFuaW1hdGlvblRyaWdnZXIoc3BlbGxTZXQuZ2V0QWxsKHRoaXMuc2NlbmUpKTtcclxuXHRcdH1cclxuXHJcblx0XHRwdWJsaWMgcmVnaXN0ZXJBbmltYXRpb25UcmlnZ2VyKFxyXG5cdFx0XHRhbmltYXRpb25TcGVsbFN5bmM6IEFuaW1hdGlvblNwZWxsU3luY1xyXG5cdFx0KTogdm9pZCB7XHJcblx0XHRcdHRoaXMuc3BlbGxBbmltU3luY3MucHVzaCh7XHJcblx0XHRcdFx0W2FuaW1hdGlvblNwZWxsU3luYy5nZXRUcmlnZ2VyQW5pbWF0aW9uTmFtZSgpXTogYW5pbWF0aW9uU3BlbGxTeW5jLFxyXG5cdFx0XHR9KTtcclxuXHRcdFx0dGhpcy5zcGVsbFN0YXRlcy5wdXNoKHtcclxuXHRcdFx0XHRbYW5pbWF0aW9uU3BlbGxTeW5jLmdldFRyaWdnZXJBbmltYXRpb25OYW1lKCldOlxyXG5cdFx0XHRcdFx0QW5pbWF0aW9uU3RhdGUuV0FTX05PVF9DQUxMRUQsXHJcblx0XHRcdH0pO1xyXG5cdFx0fVxyXG5cclxuXHRcdHB1YmxpYyByZWdpc3RlckFsbEFuaW1hdGlvblRyaWdnZXIoXHJcblx0XHRcdGFuaW1hdGlvbnNTcGVsbFN5bmM6IEFuaW1hdGlvblNwZWxsU3luY1tdXHJcblx0XHQpOiB2b2lkIHtcclxuXHRcdFx0YW5pbWF0aW9uc1NwZWxsU3luYy5mb3JFYWNoKChhbmltYXRpb25TcGVsbFN5bmMpID0+IHtcclxuXHRcdFx0XHR0aGlzLnJlZ2lzdGVyQW5pbWF0aW9uVHJpZ2dlcihhbmltYXRpb25TcGVsbFN5bmMpO1xyXG5cdFx0XHR9KTtcclxuXHRcdH1cclxuXHJcblx0XHRwdWJsaWMgdXBkYXRlQW5pbWF0aW9uU3RhdGUoXHJcblx0XHRcdGN1cnJlbnRBbmltYXRpb25TdGF0ZTogQkFCWUxPTi5BbmltYXRpb25TdGF0ZSxcclxuXHRcdFx0dXBjOiBVbml2ZXJzYWxQbGF5ZXJDb250cm9sbGVyXHJcblx0XHQpOiB2b2lkIHtcclxuXHRcdFx0aWYgKGN1cnJlbnRBbmltYXRpb25TdGF0ZSA9PSBudWxsKSByZXR1cm47XHJcblx0XHRcdGlmIChjdXJyZW50QW5pbWF0aW9uU3RhdGUuZ2V0Q3VycmVudFN0YXRlKDApID09IG51bGwpIHJldHVybjtcclxuXHRcdFx0aWYgKGN1cnJlbnRBbmltYXRpb25TdGF0ZS5nZXRDdXJyZW50U3RhdGUoMCkubmFtZSA9PSBudWxsKSByZXR1cm47XHJcblxyXG5cdFx0XHRsZXQgYW5pbWF0aW9uTmFtZTogc3RyaW5nID0gY3VycmVudEFuaW1hdGlvblN0YXRlLmdldEN1cnJlbnRTdGF0ZSgwKS5uYW1lO1xyXG5cdFx0XHRsZXQgYW5pbWF0aW9uVGltZTogbnVtYmVyID0gY3VycmVudEFuaW1hdGlvblN0YXRlLmdldEN1cnJlbnRTdGF0ZSgwKS50aW1lO1xyXG5cclxuXHRcdFx0dGhpcy5zcGVsbFN0YXRlcy5mb3JFYWNoKChzcGVsbFN0YXRlTmFtZSkgPT4ge1xyXG5cdFx0XHRcdGxldCBhbmltYXRpb25TdGF0ZU5hbWVzID0gT2JqZWN0LmtleXMoc3BlbGxTdGF0ZU5hbWUpWzBdO1xyXG5cclxuXHRcdFx0XHRpZiAoXHJcblx0XHRcdFx0XHRhbmltYXRpb25TdGF0ZU5hbWVzID09IGFuaW1hdGlvbk5hbWUgJiZcclxuXHRcdFx0XHRcdE9iamVjdC52YWx1ZXMoc3BlbGxTdGF0ZU5hbWUpWzBdID09IEFuaW1hdGlvblN0YXRlLldBU19OT1RfQ0FMTEVEXHJcblx0XHRcdFx0KSB7XHJcblx0XHRcdFx0XHR0aGlzLnNwZWxsU3RhdGVzLmZpbmQoXHJcblx0XHRcdFx0XHRcdCh4KSA9PiBhbmltYXRpb25TdGF0ZU5hbWVzID09IE9iamVjdC5rZXlzKHgpWzBdXHJcblx0XHRcdFx0XHQpW2FuaW1hdGlvblN0YXRlTmFtZXNdID0gQW5pbWF0aW9uU3RhdGUuSVNfQ0FMTEVEO1xyXG5cdFx0XHRcdFx0KFxyXG5cdFx0XHRcdFx0XHR0aGlzLmdldFZhbHVlQnlOYW1lKFxyXG5cdFx0XHRcdFx0XHRcdHRoaXMuc3BlbGxBbmltU3luY3MsXHJcblx0XHRcdFx0XHRcdFx0YW5pbWF0aW9uU3RhdGVOYW1lc1xyXG5cdFx0XHRcdFx0XHQpIGFzIEFuaW1hdGlvblNwZWxsU3luY1xyXG5cdFx0XHRcdFx0KS5zdGFydCgpO1xyXG5cdFx0XHRcdH0gZWxzZSBpZiAoXHJcblx0XHRcdFx0XHRhbmltYXRpb25TdGF0ZU5hbWVzID09IGFuaW1hdGlvbk5hbWUgJiZcclxuXHRcdFx0XHRcdE9iamVjdC52YWx1ZXMoc3BlbGxTdGF0ZU5hbWUpWzBdID09IEFuaW1hdGlvblN0YXRlLklTX0NBTExFRFxyXG5cdFx0XHRcdCkge1xyXG5cdFx0XHRcdFx0KFxyXG5cdFx0XHRcdFx0XHR0aGlzLmdldFZhbHVlQnlOYW1lKFxyXG5cdFx0XHRcdFx0XHRcdHRoaXMuc3BlbGxBbmltU3luY3MsXHJcblx0XHRcdFx0XHRcdFx0YW5pbWF0aW9uU3RhdGVOYW1lc1xyXG5cdFx0XHRcdFx0XHQpIGFzIEFuaW1hdGlvblNwZWxsU3luY1xyXG5cdFx0XHRcdFx0KS51cGRhdGUoYW5pbWF0aW9uVGltZSwgdXBjKTtcclxuXHRcdFx0XHR9IGVsc2UgaWYgKFxyXG5cdFx0XHRcdFx0YW5pbWF0aW9uU3RhdGVOYW1lcyAhPSBhbmltYXRpb25OYW1lICYmXHJcblx0XHRcdFx0XHRPYmplY3QudmFsdWVzKHNwZWxsU3RhdGVOYW1lKVswXSA9PSBBbmltYXRpb25TdGF0ZS5JU19DQUxMRURcclxuXHRcdFx0XHQpIHtcclxuXHRcdFx0XHRcdHRoaXMuc3BlbGxTdGF0ZXMuZmluZChcclxuXHRcdFx0XHRcdFx0KHgpID0+IGFuaW1hdGlvblN0YXRlTmFtZXMgPT0gT2JqZWN0LmtleXMoeClbMF1cclxuXHRcdFx0XHRcdClbYW5pbWF0aW9uU3RhdGVOYW1lc10gPSBBbmltYXRpb25TdGF0ZS5XQVNfTk9UX0NBTExFRDtcclxuXHRcdFx0XHRcdChcclxuXHRcdFx0XHRcdFx0dGhpcy5nZXRWYWx1ZUJ5TmFtZShcclxuXHRcdFx0XHRcdFx0XHR0aGlzLnNwZWxsQW5pbVN5bmNzLFxyXG5cdFx0XHRcdFx0XHRcdGFuaW1hdGlvblN0YXRlTmFtZXNcclxuXHRcdFx0XHRcdFx0KSBhcyBBbmltYXRpb25TcGVsbFN5bmNcclxuXHRcdFx0XHRcdCkuc3RvcCgpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSk7XHJcblx0XHR9XHJcblxyXG5cdFx0cHVibGljIHJlcG9ydEJvbmVUaW1lKFxyXG5cdFx0XHRjdXJyZW50QW5pbWF0aW9uU3RhdGU6IEJBQllMT04uQW5pbWF0aW9uU3RhdGUsXHJcblx0XHRcdGJvbmU6IEJvbmUsXHJcblx0XHRcdHBsYXllclBvczogVmVjdG9yMyxcclxuXHRcdFx0YW5pbWF0aW9uTmFtZVRhcmdldDogc3RyaW5nXHJcblx0XHQpOiB2b2lkIHtcclxuXHRcdFx0aWYgKGN1cnJlbnRBbmltYXRpb25TdGF0ZSA9PSBudWxsKSByZXR1cm47XHJcblx0XHRcdGlmIChjdXJyZW50QW5pbWF0aW9uU3RhdGUuZ2V0Q3VycmVudFN0YXRlKDApID09IG51bGwpIHJldHVybjtcclxuXHRcdFx0aWYgKGN1cnJlbnRBbmltYXRpb25TdGF0ZS5nZXRDdXJyZW50U3RhdGUoMCkubmFtZSA9PSBudWxsKSByZXR1cm47XHJcblx0XHRcdGlmIChhbmltYXRpb25OYW1lVGFyZ2V0ICE9IGN1cnJlbnRBbmltYXRpb25TdGF0ZS5nZXRDdXJyZW50U3RhdGUoMCkubmFtZSlcclxuXHRcdFx0XHRyZXR1cm47XHJcblxyXG5cdFx0XHRsZXQgcG9zQm9uZSA9IGJvbmUuZ2V0QWJzb2x1dGVQb3NpdGlvbigpO1xyXG5cdFx0XHRjb25zb2xlLmxvZyhcclxuXHRcdFx0XHRib25lLm5hbWUgK1xyXG5cdFx0XHRcdFx0XCIgQVQgXCIgK1xyXG5cdFx0XHRcdFx0bmV3IFZlY3RvcjMoXHJcblx0XHRcdFx0XHRcdHBvc0JvbmUueCAtIHBsYXllclBvcy54LFxyXG5cdFx0XHRcdFx0XHRwb3NCb25lLnkgLSBwbGF5ZXJQb3MueSxcclxuXHRcdFx0XHRcdFx0cG9zQm9uZS56IC0gcGxheWVyUG9zLnpcclxuXHRcdFx0XHRcdCkgK1xyXG5cdFx0XHRcdFx0XCIgQVQgXCIgK1xyXG5cdFx0XHRcdFx0Y3VycmVudEFuaW1hdGlvblN0YXRlLmdldEN1cnJlbnRTdGF0ZSgwKS50aW1lXHJcblx0XHRcdCk7XHJcblx0XHR9XHJcblxyXG5cdFx0cHVibGljIGdldFZhbHVlQnlOYW1lKGFycmF5OiBhbnlbXSwgbmFtZTogc3RyaW5nKTogYW55IHtcclxuXHRcdFx0cmV0dXJuIGFycmF5LmZpbmQoKHgpID0+IG5hbWUgPT0gT2JqZWN0LmtleXMoeClbMF0pW25hbWVdO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0ZXhwb3J0IGVudW0gQW5pbWF0aW9uU3RhdGUge1xyXG5cdFx0V0FTX05PVF9DQUxMRUQsXHJcblx0XHRXQVNfQ0FMTEVELFxyXG5cdFx0SVNfQ0FMTEVELFxyXG5cdH1cclxufVxyXG4iLCJtb2R1bGUgUFJPSkVDVCB7XHJcblx0ZXhwb3J0IGNsYXNzIEFuaW1hdGlvblNwZWxsU3luYyB7XHJcblx0XHRwcml2YXRlIHNwZWxsTGF5ZXJzOiBTcGVsbExheWVyW107XHJcblx0XHRwcml2YXRlIHRyaWdnZXJBbmltYXRpb25OYW1lOiBzdHJpbmc7XHJcblxyXG5cdFx0Y29uc3RydWN0b3IodHJpZ2dlckFuaW1hdGlvbk5hbWU6IHN0cmluZykge1xyXG5cdFx0XHR0aGlzLnNwZWxsTGF5ZXJzID0gW107XHJcblx0XHRcdHRoaXMudHJpZ2dlckFuaW1hdGlvbk5hbWUgPSB0cmlnZ2VyQW5pbWF0aW9uTmFtZTtcclxuXHRcdH1cclxuXHJcblx0XHRwdWJsaWMgYWRkTGF5ZXIobGF5ZXI6IFNwZWxsTGF5ZXIpOiB2b2lkIHtcclxuXHRcdFx0dGhpcy5zcGVsbExheWVycy5wdXNoKGxheWVyKTtcclxuXHRcdH1cclxuXHJcblx0XHRwdWJsaWMgdXBkYXRlKGFuaW1hdGlvblRpbWU6IG51bWJlciwgdXBjOiBVbml2ZXJzYWxQbGF5ZXJDb250cm9sbGVyKTogdm9pZCB7XHJcblx0XHRcdHRoaXMuc3BlbGxMYXllcnMuZm9yRWFjaCgobGF5ZXIpID0+IHtcclxuXHRcdFx0XHRsYXllci51cGRhdGUoYW5pbWF0aW9uVGltZSwgdXBjKTtcclxuXHRcdFx0fSk7XHJcblx0XHR9XHJcblxyXG5cdFx0cHVibGljIHN0YXJ0KCk6IHZvaWQge1xyXG5cdFx0XHR0aGlzLnNwZWxsTGF5ZXJzLmZvckVhY2goKHNwZWxsTGF5ZXIpID0+IHtcclxuXHRcdFx0XHRzcGVsbExheWVyLnN0YXJ0KCk7XHJcblx0XHRcdH0pO1xyXG5cdFx0fVxyXG5cclxuXHRcdHB1YmxpYyBzdG9wKCk6IHZvaWQge1xyXG5cdFx0XHR0aGlzLnNwZWxsTGF5ZXJzLmZvckVhY2goKHNwZWxsTGF5ZXIpID0+IHtcclxuXHRcdFx0XHRzcGVsbExheWVyLnN0b3AoKTtcclxuXHRcdFx0fSk7XHJcblx0XHR9XHJcblxyXG5cdFx0cHVibGljIGdldFRyaWdnZXJBbmltYXRpb25OYW1lKCk6IHN0cmluZyB7XHJcblx0XHRcdHJldHVybiB0aGlzLnRyaWdnZXJBbmltYXRpb25OYW1lO1xyXG5cdFx0fVxyXG5cdH1cclxufVxyXG4iLCJtb2R1bGUgUFJPSkVDVCB7XHJcbiAgICBleHBvcnQgY2xhc3MgU3BlbGxMYXllciB7XHJcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBwYXJ0aWNsZXM6IEJBQllMT04uR1BVUGFydGljbGVTeXN0ZW1bXTtcclxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IHNwZWxsczogSVNwZWxsW107XHJcbiAgICAgICAgcHJpdmF0ZSBpbmRleDogbnVtYmVyO1xyXG5cclxuICAgICAgICBjb25zdHJ1Y3RvcihwYXJ0aWNsZXM6IEJBQllMT04uR1BVUGFydGljbGVTeXN0ZW1bXSwgc3BlbGxzOiBJU3BlbGxbXSkge1xyXG4gICAgICAgICAgICB0aGlzLnBhcnRpY2xlcyA9IHBhcnRpY2xlcztcclxuICAgICAgICAgICAgdGhpcy5zcGVsbHMgPSBzcGVsbHM7XHJcbiAgICAgICAgICAgIHRoaXMuaW5kZXggPSAwO1xyXG4gICAgICAgICAgICB0aGlzLnNwZWxscy5mb3JFYWNoKHggPT4ge1xyXG4gICAgICAgICAgICAgICAgeC5zZXRQYXJ0aWNsZXModGhpcy5wYXJ0aWNsZXMpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHVwZGF0ZShhbmltYXRpb25UaW1lOiBudW1iZXIsIHVwYzogVW5pdmVyc2FsUGxheWVyQ29udHJvbGxlcik6IHZvaWQge1xyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUxheWVyKGFuaW1hdGlvblRpbWUpXHJcbiAgICAgICAgICAgIGxldCBhY3R1YWxBbmltYXRpb24gPSB0aGlzLnNwZWxsc1t0aGlzLmluZGV4XTtcclxuXHJcbiAgICAgICAgICAgIGlmIChhY3R1YWxBbmltYXRpb24gIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgYWN0dWFsQW5pbWF0aW9uLnVwZGF0ZSh1cGMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgdXBkYXRlTGF5ZXIoYW5pbWF0aW9uVGltZTogbnVtYmVyKTogdm9pZCB7XHJcbiAgICAgICAgICAgIGlmICghQW5pbWF0aW9uVXRpbHMuaXNXaXRoaW5TcGVsbChhbmltYXRpb25UaW1lLCB0aGlzLnNwZWxsc1t0aGlzLmluZGV4XSkpXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pbmRleCArIDEgPCB0aGlzLnNwZWxscy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmluZGV4Kys7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhcnQoKTogdm9pZCB7XHJcbiAgICAgICAgICAgIHRoaXMucGFydGljbGVzLmZvckVhY2gocGFydGljbGUgPT4ge1xyXG4gICAgICAgICAgICAgICAgcGFydGljbGUucmVzZXQoKVxyXG4gICAgICAgICAgICAgICAgcGFydGljbGUucmVzZXREcmF3Q2FjaGUoKVxyXG4gICAgICAgICAgICAgICAgcGFydGljbGUuc3RhcnQoKTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdG9wKCk6IHZvaWQge1xyXG4gICAgICAgICAgICB0aGlzLmluZGV4ID0gMDtcclxuICAgICAgICAgICAgdGhpcy5wYXJ0aWNsZXMuZm9yRWFjaChwYXJ0aWNsZSA9PiB7XHJcbiAgICAgICAgICAgICAgICBwYXJ0aWNsZS5zdG9wKCk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIHRoaXMuc3BlbGxzLmZvckVhY2goc3BlbGwgPT4ge1xyXG4gICAgICAgICAgICAgICAgc3BlbGwucmVzZXQoKTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJtb2R1bGUgUFJPSkVDVCB7XHJcblx0aW1wb3J0IFNjZW5lID0gQkFCWUxPTi5TY2VuZTtcclxuXHRleHBvcnQgYWJzdHJhY3QgY2xhc3MgU3BlbGxTZXQge1xyXG5cdFx0cHJvdGVjdGVkIHNldE5hbWU6IHN0cmluZztcclxuXHRcdHByb3RlY3RlZCB0cmFuc2Zvcm1Cb25lczogYW55O1xyXG5cclxuXHRcdGNvbnN0cnVjdG9yKHNldE5hbWU6IHN0cmluZywgdHJhbnNmb3JtQm9uZXM6IGFueSkge1xyXG5cdFx0XHR0aGlzLnNldE5hbWUgPSBzZXROYW1lO1xyXG5cdFx0XHR0aGlzLnRyYW5zZm9ybUJvbmVzID0gdHJhbnNmb3JtQm9uZXM7XHJcblx0XHR9XHJcblxyXG5cdFx0cHVibGljIGFic3RyYWN0IGNhblNldEJlVXNlZChzZXROYW1lOiBzdHJpbmcpOiBib29sZWFuO1xyXG5cdFx0cHVibGljIGFic3RyYWN0IGdldEFsbChzY2VuZTogU2NlbmUpOiBBbmltYXRpb25TcGVsbFN5bmNbXTtcclxuXHJcblx0XHRwcm90ZWN0ZWQgZ2V0Qm9uZShuYW1lOiBzdHJpbmcpIHtcclxuXHRcdFx0bGV0IGJvbmUgPSB0aGlzLnRyYW5zZm9ybUJvbmVzLl9saW5rZWRCb25lLl9za2VsZXRvbjtcclxuXHRcdFx0Zm9yIChjb25zdCBib25lS2V5IGluIGJvbmUuYm9uZXMpIHtcclxuXHRcdFx0XHRpZiAobmFtZSA9PSBib25lLmJvbmVzW2JvbmVLZXldLm5hbWUpIHJldHVybiBib25lLmJvbmVzW2JvbmVLZXldO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRyZXR1cm4gbnVsbDtcclxuXHRcdH1cclxuXHR9XHJcbn1cclxuIiwiLy8vPHJlZmVyZW5jZSBwYXRoPVwiU3BlbGxTZXQudHNcIi8+XHJcbm1vZHVsZSBQUk9KRUNUIHtcclxuXHRpbXBvcnQgVmVjdG9yMyA9IEJBQllMT04uVmVjdG9yMztcclxuXHRpbXBvcnQgU2NlbmUgPSBCQUJZTE9OLlNjZW5lO1xyXG5cclxuXHRleHBvcnQgY2xhc3MgU3BlbGxUZXN0U2V0IGV4dGVuZHMgU3BlbGxTZXQge1xyXG5cdFx0Y29uc3RydWN0b3IodHJhbnNmb3JtQm9uZXM6IGFueSkge1xyXG5cdFx0XHRzdXBlcihcIlNha3VyYVwiLCB0cmFuc2Zvcm1Cb25lcyk7XHJcblx0XHR9XHJcblxyXG5cdFx0Y2FuU2V0QmVVc2VkKHNldE5hbWU6IHN0cmluZyk6IGJvb2xlYW4ge1xyXG5cdFx0XHRyZXR1cm4gc2V0TmFtZSA9PT0gdGhpcy5zZXROYW1lO1xyXG5cdFx0fVxyXG5cclxuXHRcdGdldEFsbChzY2VuZTogU2NlbmUpOiBBbmltYXRpb25TcGVsbFN5bmNbXSB7XHJcblx0XHRcdGxldCBwYXJ0aWNsZXNNYWdpY09uZSA9IFBhcnRpY2xlRmFjdG9yeS5jcmVhdGVTcGhlcmVzUGFydGljbGUoXHJcblx0XHRcdFx0MixcclxuXHRcdFx0XHRzY2VuZSxcclxuXHRcdFx0XHRbQ29sb3JQYXR0ZXJuLnJlZCwgQ29sb3JQYXR0ZXJuLmJsdWVdLFxyXG5cdFx0XHRcdDAuMDIsXHJcblx0XHRcdFx0MC4wMSxcclxuXHRcdFx0XHQwLjAzLFxyXG5cdFx0XHRcdDAuMjUsXHJcblx0XHRcdFx0MC41LFxyXG5cdFx0XHRcdDEwMCxcclxuXHRcdFx0XHQwLjMsXHJcblx0XHRcdFx0MC41XHJcblx0XHRcdCk7XHJcblx0XHRcdGxldCBzcGVsbE9uZU1hZ2ljT25lID0gbmV3IFNwZWxsKFxyXG5cdFx0XHRcdG5ldyBTcGhlcmVBbGdvKHRoaXMuZ2V0Qm9uZShcIkpfQmlwX1JfSGFuZFwiKSwgMC4xKSxcclxuXHRcdFx0XHR7IHN0b3BUaW1lOiA0IH1cclxuXHRcdFx0KTtcclxuXHRcdFx0bGV0IHRyYW5zaXRpb25NYWdpY09uZSA9IG5ldyBTcGVsbFRyYW5zaXRpb24oXHJcblx0XHRcdFx0bmV3IFZlY3RvcjMoMC4zNywgMS4wODEsIDAuMDg0KSxcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRzdGFydFRpbWU6IDQsXHJcblx0XHRcdFx0XHRzdG9wVGltZTogNC40LFxyXG5cdFx0XHRcdH1cclxuXHRcdFx0KTtcclxuXHRcdFx0bGV0IHNwZWxsVHdvTWFnaWNPbmUgPSBuZXcgU3BlbGwoXHJcblx0XHRcdFx0bmV3IENpcmNsZUFsZ28odGhpcy5nZXRCb25lKFwiSl9CaXBfUl9IYW5kXCIpLCAwLjcsIDUpLFxyXG5cdFx0XHRcdHsgc3RhcnRUaW1lOiA0LjQgfVxyXG5cdFx0XHQpO1xyXG5cclxuXHRcdFx0bGV0IGxheWVyT25lTWFnaWNPbmUgPSBuZXcgU3BlbGxMYXllcihwYXJ0aWNsZXNNYWdpY09uZSwgW1xyXG5cdFx0XHRcdHNwZWxsT25lTWFnaWNPbmUsXHJcblx0XHRcdFx0dHJhbnNpdGlvbk1hZ2ljT25lLFxyXG5cdFx0XHRcdHNwZWxsVHdvTWFnaWNPbmUsXHJcblx0XHRcdF0pO1xyXG5cdFx0XHRsZXQgYXNzTWFnaWNPbmUgPSBuZXcgQW5pbWF0aW9uU3BlbGxTeW5jKFwiTWFnaWNPbmVQaGFzZU9uZVwiKTtcclxuXHRcdFx0YXNzTWFnaWNPbmUuYWRkTGF5ZXIobGF5ZXJPbmVNYWdpY09uZSk7XHJcblxyXG5cdFx0XHRsZXQgcGFydGljbGVzTWFnaWNUd28gPSBQYXJ0aWNsZUZhY3RvcnkuY3JlYXRlU3BoZXJlc1BhcnRpY2xlKFxyXG5cdFx0XHRcdDIsXHJcblx0XHRcdFx0c2NlbmUsXHJcblx0XHRcdFx0W0NvbG9yUGF0dGVybi5ncmVlbiwgQ29sb3JQYXR0ZXJuLnllbGxvd10sXHJcblx0XHRcdFx0MC4wNSxcclxuXHRcdFx0XHQwLjAzLFxyXG5cdFx0XHRcdDAuMDUsXHJcblx0XHRcdFx0MSxcclxuXHRcdFx0XHQyLFxyXG5cdFx0XHRcdDEwMDAsXHJcblx0XHRcdFx0MC4zLFxyXG5cdFx0XHRcdDFcclxuXHRcdFx0KTtcclxuXHRcdFx0bGV0IHNwZWxsT25lTWFnaWNUd28gPSBuZXcgU3BlbGwobmV3IENpcmNsZUFsZ28obnVsbCwgMSwgMTAsIDEuMiksIHtcclxuXHRcdFx0XHRzdG9wVGltZTogMSxcclxuXHRcdFx0fSk7XHJcblx0XHRcdGxldCBzcGVsbFR3b01hZ2ljVHdvID0gbmV3IFNwZWxsKG5ldyBDaXJjbGVBbGdvKG51bGwsIDEsIDEwLCAxLjIsIDAuMyksIHtcclxuXHRcdFx0XHRzdGFydFRpbWU6IDEsXHJcblx0XHRcdH0pO1xyXG5cclxuXHRcdFx0bGV0IGxheWVyT25lTWFnaVR3byA9IG5ldyBTcGVsbExheWVyKHBhcnRpY2xlc01hZ2ljVHdvLCBbXHJcblx0XHRcdFx0c3BlbGxPbmVNYWdpY1R3byxcclxuXHRcdFx0XHRzcGVsbFR3b01hZ2ljVHdvLFxyXG5cdFx0XHRdKTtcclxuXHRcdFx0bGV0IGFzc01hZ2ljVHdvID0gbmV3IEFuaW1hdGlvblNwZWxsU3luYyhcIk1hZ2ljT25lUGhhc2VUd29cIik7XHJcblx0XHRcdGFzc01hZ2ljVHdvLmFkZExheWVyKGxheWVyT25lTWFnaVR3byk7XHJcblxyXG5cdFx0XHRyZXR1cm4gW2Fzc01hZ2ljT25lLCBhc3NNYWdpY1R3b107XHJcblx0XHR9XHJcblx0fVxyXG59XHJcbiIsIm1vZHVsZSBQUk9KRUNUIHtcclxuICAgIGltcG9ydCBWZWN0b3IzID0gQkFCWUxPTi5WZWN0b3IzO1xyXG5cclxuICAgIGV4cG9ydCBjbGFzcyBBbmltYXRpb25VdGlscyB7XHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBpc1dpdGhpblNwZWxsKHg6IG51bWJlciwgc3BlbGw6IElTcGVsbCk6IGJvb2xlYW4ge1xyXG4gICAgICAgICAgICByZXR1cm4geCA+PSBzcGVsbC5nZXRTdGFydFRpbWUoKSAmJiB4IDw9IHNwZWxsLmdldFN0b3BUaW1lKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIGxlcnAodjE6IG51bWJlciwgdjI6IG51bWJlciwgdDogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgICAgICAgICAgcmV0dXJuICgxIC0gdCkgKiB2MSArIHQgKiB2MjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgbGVycFZlY3Rvcih2MTogVmVjdG9yMywgdjI6IFZlY3RvcjMsIHNwZWVkOiBudW1iZXIpOiBWZWN0b3IzIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IzKEFuaW1hdGlvblV0aWxzLmxlcnAodjEueCwgdjIueCwgc3BlZWQpLCBBbmltYXRpb25VdGlscy5sZXJwKHYxLnksIHYyLnksIHNwZWVkKSwgQW5pbWF0aW9uVXRpbHMubGVycCh2MS56LCB2Mi56LCBzcGVlZCkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsIm1vZHVsZSBQUk9KRUNUIHtcclxuICAgIGV4cG9ydCBjbGFzcyBDb2xvclBhdHRlcm4ge1xyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgcmVkID0gW1xyXG4gICAgICAgICAgICBuZXcgQkFCWUxPTi5Db2xvcjQoMSwgMC43LCAwLjcpLFxyXG4gICAgICAgICAgICBuZXcgQkFCWUxPTi5Db2xvcjQoMSwgMC4yLCAwLjIpLFxyXG4gICAgICAgICAgICBuZXcgQkFCWUxPTi5Db2xvcjQoMC4yLCAwLCAwLCAwLjApXHJcbiAgICAgICAgXTtcclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyByZWFkb25seSBibHVlID0gW1xyXG4gICAgICAgICAgICBuZXcgQkFCWUxPTi5Db2xvcjQoMC43LCAwLjgsIDEuMCwgMS4wKSxcclxuICAgICAgICAgICAgbmV3IEJBQllMT04uQ29sb3I0KDAuMiwgMC41LCAxLjAsIDEuMCksXHJcbiAgICAgICAgICAgIG5ldyBCQUJZTE9OLkNvbG9yNCgwLCAwLCAwLjIsIDAuMClcclxuICAgICAgICBdO1xyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IGdyZWVuID0gW1xyXG4gICAgICAgICAgICBuZXcgQkFCWUxPTi5Db2xvcjQoMC43LCAxLCAwLjcsIDEuMCksXHJcbiAgICAgICAgICAgIG5ldyBCQUJZTE9OLkNvbG9yNCgwLjIsIDEsIDAuMiwgMS4wKSxcclxuICAgICAgICAgICAgbmV3IEJBQllMT04uQ29sb3I0KDAsIDAuMiwgMCwgMC4wKVxyXG4gICAgICAgIF07XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgeWVsbG93ID0gW1xyXG4gICAgICAgICAgICBuZXcgQkFCWUxPTi5Db2xvcjQoMSwgMSwgMC43LCAxLjApLFxyXG4gICAgICAgICAgICBuZXcgQkFCWUxPTi5Db2xvcjQoMSwgMSwgMC4yLCAxLjApLFxyXG4gICAgICAgICAgICBuZXcgQkFCWUxPTi5Db2xvcjQoMC4yLCAwLjIsIDAsIDAuMClcclxuICAgICAgICBdO1xyXG4gICAgfVxyXG59IiwibW9kdWxlIFBST0pFQ1Qge1xyXG4gICAgaW1wb3J0IFZlY3RvcjMgPSBCQUJZTE9OLlZlY3RvcjM7XHJcblxyXG4gICAgZXhwb3J0IGFic3RyYWN0IGNsYXNzIE1hdGhVdGlscyB7XHJcbiAgICAgICAgcHVibGljIHN0YXRpYyByb3RhdGUocG9pbnRUb01vdmU6IEJBQllMT04uVmVjdG9yMywgb3JpZ2luOiBCQUJZTE9OLlZlY3RvcjMsIGFuZ2xlOiBudW1iZXIpOiBCQUJZTE9OLlZlY3RvcjMge1xyXG4gICAgICAgICAgICBsZXQgeE0sIHpNLCB4LCB6O1xyXG4gICAgICAgICAgICBhbmdsZSAqPSBNYXRoLlBJIC8gMTgwO1xyXG4gICAgICAgICAgICB4TSA9IHBvaW50VG9Nb3ZlLnggLSBvcmlnaW4ueDtcclxuICAgICAgICAgICAgek0gPSBwb2ludFRvTW92ZS56IC0gb3JpZ2luLno7XHJcbiAgICAgICAgICAgIHggPSB4TSAqIE1hdGguY29zKGFuZ2xlKSArIHpNICogTWF0aC5zaW4oYW5nbGUpICsgb3JpZ2luLng7XHJcbiAgICAgICAgICAgIHogPSAteE0gKiBNYXRoLnNpbihhbmdsZSkgKyB6TSAqIE1hdGguY29zKGFuZ2xlKSArIG9yaWdpbi56O1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IEJBQllMT04uVmVjdG9yMyh4LCBwb2ludFRvTW92ZS55LCB6KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgYWRkVmVjdG9ycyh2ZWN0b3JzOiBWZWN0b3IzW10pOiBWZWN0b3IzIHtcclxuICAgICAgICAgICAgbGV0IHJlc3VsdDogVmVjdG9yMyA9IG5ldyBWZWN0b3IzKCk7XHJcbiAgICAgICAgICAgIHZlY3RvcnMuZm9yRWFjaCh2ZWN0b3IgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0LnggKz0gdmVjdG9yLng7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQueSArPSB2ZWN0b3IueTtcclxuICAgICAgICAgICAgICAgIHJlc3VsdC56ICs9IHZlY3Rvci56O1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIG11bHRpcGx5VmVjdG9ycyh2ZWN0b3JzOiBWZWN0b3IzW10pOiBWZWN0b3IzIHtcclxuICAgICAgICAgICAgbGV0IHJlc3VsdDogVmVjdG9yMyA9IG5ldyBWZWN0b3IzKCk7XHJcbiAgICAgICAgICAgIHZlY3RvcnMuZm9yRWFjaCh2ZWN0b3IgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0LnggKj0gdmVjdG9yLng7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQueSAqPSB2ZWN0b3IueTtcclxuICAgICAgICAgICAgICAgIHJlc3VsdC56ICo9IHZlY3Rvci56O1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwibW9kdWxlIFBST0pFQ1Qge1xyXG4gIC8qKlxyXG4gICAqIEJhYnlsb24gU2NyaXB0IENvbXBvbmVudFxyXG4gICAqIEBjbGFzcyBPYmpSZW5kZXJcclxuICAgKi9cclxuXHJcbiAgLy8gVE9ETyBSZWR1Y2luZyBjYWxscyB0byBnbC5jbGVhcigpXHJcbiAgLy8gVE9ETyBVc2luZyBkZXB0aCBwcmUtcGFzc1xyXG4gIC8vIFRPRE8gVXNpbmcgdW5pbmRleGVkIG1lc2hlc1xyXG4gIC8vIFRPRE8gVHVybmluZyBBZGFwdFRvRGV2aWNlUmF0aW8gT2ZmL09uXHJcbiAgLy8gVE9ETyBVc2luZyBBbmltYXRpb24gUmF0aW9cclxuICBleHBvcnQgY2xhc3MgT2JqUmVuZGVyIGV4dGVuZHMgQkFCWUxPTi5TY3JpcHRDb21wb25lbnQge1xyXG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgUkVOREVSX1RBRzogc3RyaW5nID0gXCJSZW5kZXJcIjtcclxuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IFJFTkRFUl9ESVNUQU5DRTogbnVtYmVyID0gMTUwO1xyXG4gICAgcHJpdmF0ZSBtZXNoZXM6IEJBQllMT04uQWJzdHJhY3RNZXNoW10gPSBbXTtcclxuXHJcbiAgICBwcm90ZWN0ZWQgYXdha2UoKTogdm9pZCB7fVxyXG5cclxuICAgIHByb3RlY3RlZCBzdGFydCgpOiB2b2lkIHtcclxuICAgICAgdGhpcy5vcHRpbWl6ZVNjZW5lKCk7XHJcbiAgICAgIGxldCBtZXNoVHlwZXM6IEJBQllMT04uQWJzdHJhY3RNZXNoW10gPSBbXTtcclxuICAgICAgdGhpcy5zY2VuZS5nZXRNZXNoZXNCeVRhZ3MoT2JqUmVuZGVyLlJFTkRFUl9UQUcpLmZvckVhY2goKG1lc2gpID0+IHtcclxuICAgICAgICBsZXQgZ2V0Q2xvbmVkTWVzaCA9IG1lc2hUeXBlcy5maWx0ZXIoKG0pID0+IG0ubmFtZSA9PT0gbWVzaC5uYW1lKTtcclxuICAgICAgICBsZXQgaXNFeGlzdCA9IGdldENsb25lZE1lc2gubGVuZ3RoID09PSAxO1xyXG5cclxuICAgICAgICBsZXQgY3VycmVudE1lc2g6IEJBQllMT04uQWJzdHJhY3RNZXNoO1xyXG4gICAgICAgIGlmICghaXNFeGlzdCkge1xyXG4gICAgICAgICAgbWVzaFR5cGVzLnB1c2gobWVzaCk7XHJcbiAgICAgICAgICBjdXJyZW50TWVzaCA9IG1lc2g7XHJcbiAgICAgICAgICBUb29uTWF0ZXJpYWwuYXBwbHlNYXRlcmlhbCh0aGlzLnNjZW5lLCBbY3VycmVudE1lc2hdKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgY3VycmVudE1lc2ggPSBnZXRDbG9uZWRNZXNoWzBdLmNsb25lKG1lc2gubmFtZSwgbWVzaC5wYXJlbnQpO1xyXG4gICAgICAgICAgY3VycmVudE1lc2gucG9zaXRpb24gPSBtZXNoLnBvc2l0aW9uLmNsb25lKCk7XHJcbiAgICAgICAgICBjdXJyZW50TWVzaC5yb3RhdGlvbiA9IG1lc2gucm90YXRpb24uY2xvbmUoKTtcclxuICAgICAgICAgIGN1cnJlbnRNZXNoLnNjYWxpbmcgPSBtZXNoLnNjYWxpbmcuY2xvbmUoKTtcclxuICAgICAgICAgIGN1cnJlbnRNZXNoLnJvdGF0aW9uUXVhdGVybmlvbiA9IG1lc2gucm90YXRpb25RdWF0ZXJuaW9uLmNsb25lKCk7XHJcbiAgICAgICAgICBtZXNoLmRpc3Bvc2UoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5vcHRpbWl6ZU1lc2goY3VycmVudE1lc2gpO1xyXG4gICAgICAgIHRoaXMubWVzaGVzLnB1c2goY3VycmVudE1lc2gpO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgcmVhZHkoKTogdm9pZCB7XHJcbiAgICAgIC8qIFJlYWR5IGNvbXBvbmVudCBmdW5jdGlvbiAqL1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCB1cGRhdGUoKTogdm9pZCB7XHJcbiAgICAgIHRoaXMuZW5hYmxlRGlzYWJsZURpc3RhbmNlT2JqZWN0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBlbmFibGVEaXNhYmxlRGlzdGFuY2VPYmplY3QoKSB7XHJcbiAgICAgIGxldCBpID0gMDtcclxuICAgICAgdGhpcy5tZXNoZXMuZm9yRWFjaCgobWVzaCkgPT4ge1xyXG4gICAgICAgIGxldCByZXN1bHQgPVxyXG4gICAgICAgICAgQkFCWUxPTi5WZWN0b3IzLkRpc3RhbmNlKFxyXG4gICAgICAgICAgICB0aGlzLmdldEFic3RyYWN0TWVzaCgpLnBvc2l0aW9uLFxyXG4gICAgICAgICAgICBtZXNoLnBvc2l0aW9uXHJcbiAgICAgICAgICApIDw9IE9ialJlbmRlci5SRU5ERVJfRElTVEFOQ0U7XHJcbiAgICAgICAgbWVzaC5zZXRFbmFibGVkKHJlc3VsdCk7XHJcbiAgICAgICAgaWYgKG1lc2guaXNFbmFibGVkKCkpIGkrKztcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBvcHRpbWl6ZU1lc2gobWVzaDogQkFCWUxPTi5BYnN0cmFjdE1lc2gpOiB2b2lkIHtcclxuICAgICAgaWYgKG1lc2guc3ViTWVzaGVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICBtZXNoLmdldENoaWxkTWVzaGVzKCkuZm9yRWFjaCgobWVzaCkgPT4ge1xyXG4gICAgICAgICAgdGhpcy5vcHRpbWl6ZU1lc2gobWVzaCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgbWVzaC5mcmVlemVXb3JsZE1hdHJpeCgpO1xyXG4gICAgICAgIG1lc2guZG9Ob3RTeW5jQm91bmRpbmdJbmZvID0gdHJ1ZTtcclxuICAgICAgICBtZXNoLmlzUGlja2FibGUgPSBmYWxzZTtcclxuICAgICAgICBtZXNoLmN1bGxpbmdTdHJhdGVneSA9XHJcbiAgICAgICAgICBCQUJZTE9OLkFic3RyYWN0TWVzaC5DVUxMSU5HU1RSQVRFR1lfQk9VTkRJTkdTUEhFUkVfT05MWTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgb3B0aW1pemVTY2VuZSgpOiB2b2lkIHtcclxuICAgICAgdGhpcy5zY2VuZS5ibG9ja01hdGVyaWFsRGlydHlNZWNoYW5pc20gPSB0cnVlO1xyXG4gICAgICB0aGlzLnNjZW5lLmRlYnVnTGF5ZXIuc2hvdygpO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBsYXRlKCk6IHZvaWQge1xyXG4gICAgICAvKiBMYXRlIHVwZGF0ZSByZW5kZXIgbG9vcCBmdW5jdGlvbiAqL1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBhZnRlcigpOiB2b2lkIHtcclxuICAgICAgLyogQWZ0ZXIgdXBkYXRlIHJlbmRlciBsb29wIGZ1bmN0aW9uICovXHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIGZpeGVkKCk6IHZvaWQge1xyXG4gICAgICAvKiBGaXhlZCB1cGRhdGUgcGh5c2ljcyBzdGVwIGZ1bmN0aW9uICovXHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIGRlc3Ryb3koKTogdm9pZCB7XHJcbiAgICAgIC8qIERlc3Ryb3kgY29tcG9uZW50IGZ1bmN0aW9uICovXHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiIsIm1vZHVsZSBQUk9KRUNUIHtcclxuICBleHBvcnQgY2xhc3MgVG9vbiBleHRlbmRzIEJBQllMT04uU2NyaXB0Q29tcG9uZW50IHtcclxuICAgIHByaXZhdGUgc2hhZGVyTmFtZTogc3RyaW5nID0gdGhpcy5nZXRDbGFzc05hbWUoKTtcclxuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IFRFWFRVUkVfTElOSzogc3RyaW5nID1cclxuICAgICAgXCIuL3NjZW5lcy9hc3NldHMvO2ZvbGRlcjsvU3BsYXRtYXBzLnBuZ1wiO1xyXG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgVEVYVFVSRV9SRVBMQUNFX1NUUklORzogc3RyaW5nID0gXCI7Zm9sZGVyO1wiO1xyXG5cclxuICAgIHByb3RlY3RlZCBzdGFydCgpOiB2b2lkIHtcclxuICAgICAgY29uc29sZS5sb2coIHRoaXMudHJhbnNmb3JtLmdldENoaWxkcmVuKCkpXHJcbiAgICAgIGxldCBjb2xvciA9IHRoaXMuZ2V0UHJvcGVydHkoXCJjb2xvclwiKSBhcyBhbnlbXTtcclxuICAgICAgbGV0IG5hbWUgPSB0aGlzLmdldFByb3BlcnR5KFwiaWRcIikgYXMgc3RyaW5nO1xyXG4gICAgICBpZiAoY29sb3IubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coXHJcbiAgICAgICAgICBcIlRoaXMgb2JqZWN0IHJlY2VpdmVkIDAgbWF0ZXJpYWxzIChcIiArIHRoaXMudHJhbnNmb3JtLm5hbWUgKyBcIilcIlxyXG4gICAgICAgICk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBsZXQgaXNUZXJyYWluID0gdGhpcy5nZXRQcm9wZXJ0eShcImlzVGVycmFpblwiKSBhcyBib29sZWFuO1xyXG4gICAgICBpZiAoaXNUZXJyYWluKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coIHRoaXMudHJhbnNmb3JtLmdldENoaWxkcmVuKCkpXHJcbiAgICAgICAgdGhpcy5hcHBseU1hdGVyaWFsVGVycmFpbihcclxuICAgICAgICAgIHRoaXMudHJhbnNmb3JtLmdldENoaWxkcmVuKClbMF0uZ2V0Q2hpbGRNZXNoZXMoKSxcclxuICAgICAgICAgIGNvbG9yLFxyXG4gICAgICAgICAgbmFtZVxyXG4gICAgICAgICk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhpcy5hcHBseU1hdGVyaWFsU3RhbmRhcmQodGhpcy50cmFuc2Zvcm0uZ2V0Q2hpbGRNZXNoZXMoKSwgY29sb3IpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBhcHBseU1hdGVyaWFsVGVycmFpbihcclxuICAgICAgbWVzaHM6IEJBQllMT04uQWJzdHJhY3RNZXNoW10sXHJcbiAgICAgIGNvbG9yLFxyXG4gICAgICBuYW1lOiBzdHJpbmdcclxuICAgICkge1xyXG4gICAgICBtZXNocy5mb3JFYWNoKChtZXNoKSA9PiB7XHJcbiAgICAgICAgbWVzaC5tYXRlcmlhbCA9IHRoaXMuZ2V0Tm9kZU1hdGVyaWFsKFxyXG4gICAgICAgICAgY29sb3IgYXMgQkFCWUxPTi5JVW5pdHlDb2xvcixcclxuICAgICAgICAgIHRydWUsXHJcbiAgICAgICAgICBUb29uLlRFWFRVUkVfTElOSy5yZXBsYWNlKFRvb24uVEVYVFVSRV9SRVBMQUNFX1NUUklORywgbmFtZSlcclxuICAgICAgICApO1xyXG4gICAgICAgIG1lc2gubWFya0FzRGlydHkoKTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBhcHBseU1hdGVyaWFsU3RhbmRhcmQobWVzaHM6IEJBQllMT04uQWJzdHJhY3RNZXNoW10sIGNvbG9yKSB7XHJcbiAgICAgIG1lc2hzLmZvckVhY2goKG1lc2gpID0+IHtcclxuICAgICAgICBjb25zb2xlLmxvZyhtZXNoLm1hdGVyaWFsKTtcclxuICAgICAgICBpZiAobWVzaC5tYXRlcmlhbCBpbnN0YW5jZW9mIEJBQllMT04uTXVsdGlNYXRlcmlhbCkge1xyXG4gICAgICAgICAgbWVzaC5tYXRlcmlhbCA9IHRoaXMuZ2V0Tm9kZU1hdGVyaWFsc1N0YW5kYXJkTWVzaChjb2xvcik7XHJcbiAgICAgICAgICBtZXNoLm1hcmtBc0RpcnR5KCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIG1lc2gubWF0ZXJpYWwgPSB0aGlzLmdldE5vZGVNYXRlcmlhbChcclxuICAgICAgICAgICAgY29sb3JbMF0gYXMgQkFCWUxPTi5JVW5pdHlDb2xvcixcclxuICAgICAgICAgICAgZmFsc2VcclxuICAgICAgICAgICk7XHJcbiAgICAgICAgICBtZXNoLm1hcmtBc0RpcnR5KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGdldE5vZGVNYXRlcmlhbHNTdGFuZGFyZE1lc2goY29sb3JzOiBhbnkpIHtcclxuICAgICAgbGV0IG11bHRpbWF0ID0gbmV3IEJBQllMT04uTXVsdGlNYXRlcmlhbCh0aGlzLnNoYWRlck5hbWUsIHRoaXMuc2NlbmUpO1xyXG4gICAgICBjb2xvcnMuZm9yRWFjaCgoY29sb3IpID0+IHtcclxuICAgICAgICBsZXQgYyA9IGNvbG9yIGFzIEJBQllMT04uSVVuaXR5Q29sb3I7XHJcbiAgICAgICAgbXVsdGltYXQuc3ViTWF0ZXJpYWxzLnB1c2godGhpcy5nZXROb2RlTWF0ZXJpYWwoYywgZmFsc2UpKTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICByZXR1cm4gbXVsdGltYXQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBnZXROb2RlTWF0ZXJpYWwoXHJcbiAgICAgIGNvbG9yOiBCQUJZTE9OLklVbml0eUNvbG9yLFxyXG4gICAgICBpc1RleHR1cmU6IGJvb2xlYW4sXHJcbiAgICAgIHRleHR1cmVMaW5rPzogc3RyaW5nXHJcbiAgICApIHtcclxuICAgICAgaWYgKGlzVGV4dHVyZSAmJiB0ZXh0dXJlTGluayA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJNYXRlcmlhbCB1c2luZyB0ZXh0dXJlIGhhcyBubyB0ZXh0dXJlIGxpbmtcIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBsZXQgbm9kZU1hdGVyaWFsID0gbmV3IEJBQllMT04uTm9kZU1hdGVyaWFsKHRoaXMuc2hhZGVyTmFtZSk7XHJcblxyXG4gICAgICAvLyBJbnB1dEJsb2NrXHJcbiAgICAgIHZhciBwb3NpdGlvbiA9IG5ldyBCQUJZTE9OLklucHV0QmxvY2soXCJwb3NpdGlvblwiKTtcclxuICAgICAgcG9zaXRpb24udmlzaWJsZUluSW5zcGVjdG9yID0gZmFsc2U7XHJcbiAgICAgIHBvc2l0aW9uLnZpc2libGVPbkZyYW1lID0gZmFsc2U7XHJcbiAgICAgIHBvc2l0aW9uLnRhcmdldCA9IDE7XHJcbiAgICAgIHBvc2l0aW9uLnNldEFzQXR0cmlidXRlKFwicG9zaXRpb25cIik7XHJcblxyXG4gICAgICAvLyBUcmFuc2Zvcm1CbG9ja1xyXG4gICAgICB2YXIgd29ybGRQb3MgPSBuZXcgQkFCWUxPTi5UcmFuc2Zvcm1CbG9jayhcIndvcmxkUG9zXCIpO1xyXG4gICAgICB3b3JsZFBvcy52aXNpYmxlSW5JbnNwZWN0b3IgPSBmYWxzZTtcclxuICAgICAgd29ybGRQb3MudmlzaWJsZU9uRnJhbWUgPSBmYWxzZTtcclxuICAgICAgd29ybGRQb3MudGFyZ2V0ID0gMTtcclxuICAgICAgd29ybGRQb3MuY29tcGxlbWVudFogPSAwO1xyXG4gICAgICB3b3JsZFBvcy5jb21wbGVtZW50VyA9IDE7XHJcblxyXG4gICAgICAvLyBJbnB1dEJsb2NrXHJcbiAgICAgIHZhciB3b3JsZCA9IG5ldyBCQUJZTE9OLklucHV0QmxvY2soXCJ3b3JsZFwiKTtcclxuICAgICAgd29ybGQudmlzaWJsZUluSW5zcGVjdG9yID0gZmFsc2U7XHJcbiAgICAgIHdvcmxkLnZpc2libGVPbkZyYW1lID0gZmFsc2U7XHJcbiAgICAgIHdvcmxkLnRhcmdldCA9IDE7XHJcbiAgICAgIHdvcmxkLnNldEFzU3lzdGVtVmFsdWUoQkFCWUxPTi5Ob2RlTWF0ZXJpYWxTeXN0ZW1WYWx1ZXMuV29ybGQpO1xyXG5cclxuICAgICAgLy8gVHJhbnNmb3JtQmxvY2tcclxuICAgICAgdmFyIFdvcmxkbm9ybWFsID0gbmV3IEJBQllMT04uVHJhbnNmb3JtQmxvY2soXCJXb3JsZCBub3JtYWxcIik7XHJcbiAgICAgIFdvcmxkbm9ybWFsLnZpc2libGVJbkluc3BlY3RvciA9IGZhbHNlO1xyXG4gICAgICBXb3JsZG5vcm1hbC52aXNpYmxlT25GcmFtZSA9IGZhbHNlO1xyXG4gICAgICBXb3JsZG5vcm1hbC50YXJnZXQgPSAxO1xyXG4gICAgICBXb3JsZG5vcm1hbC5jb21wbGVtZW50WiA9IDA7XHJcbiAgICAgIFdvcmxkbm9ybWFsLmNvbXBsZW1lbnRXID0gMDtcclxuXHJcbiAgICAgIC8vIElucHV0QmxvY2tcclxuICAgICAgdmFyIG5vcm1hbCA9IG5ldyBCQUJZTE9OLklucHV0QmxvY2soXCJub3JtYWxcIik7XHJcbiAgICAgIG5vcm1hbC52aXNpYmxlSW5JbnNwZWN0b3IgPSBmYWxzZTtcclxuICAgICAgbm9ybWFsLnZpc2libGVPbkZyYW1lID0gZmFsc2U7XHJcbiAgICAgIG5vcm1hbC50YXJnZXQgPSAxO1xyXG4gICAgICBub3JtYWwuc2V0QXNBdHRyaWJ1dGUoXCJub3JtYWxcIik7XHJcblxyXG4gICAgICAvLyBWZWN0b3JTcGxpdHRlckJsb2NrXHJcbiAgICAgIHZhciBOID0gbmV3IEJBQllMT04uVmVjdG9yU3BsaXR0ZXJCbG9jayhcIk5cIik7XHJcbiAgICAgIE4udmlzaWJsZUluSW5zcGVjdG9yID0gZmFsc2U7XHJcbiAgICAgIE4udmlzaWJsZU9uRnJhbWUgPSBmYWxzZTtcclxuICAgICAgTi50YXJnZXQgPSA0O1xyXG5cclxuICAgICAgLy8gTm9ybWFsaXplQmxvY2tcclxuICAgICAgdmFyIE5Ob3JtYWxpemVkID0gbmV3IEJBQllMT04uTm9ybWFsaXplQmxvY2soXCJOIChOb3JtYWxpemVkKVwiKTtcclxuICAgICAgTk5vcm1hbGl6ZWQudmlzaWJsZUluSW5zcGVjdG9yID0gZmFsc2U7XHJcbiAgICAgIE5Ob3JtYWxpemVkLnZpc2libGVPbkZyYW1lID0gZmFsc2U7XHJcbiAgICAgIE5Ob3JtYWxpemVkLnRhcmdldCA9IDQ7XHJcblxyXG4gICAgICAvLyBEb3RCbG9ja1xyXG4gICAgICB2YXIgTkRvdExEaWZmdXNlTGlnaHRJbnRlbnNpdHkgPSBuZXcgQkFCWUxPTi5Eb3RCbG9jayhcclxuICAgICAgICBcIk4gRG90IEwgKERpZmZ1c2UgTGlnaHQgSW50ZW5zaXR5KVwiXHJcbiAgICAgICk7XHJcbiAgICAgIE5Eb3RMRGlmZnVzZUxpZ2h0SW50ZW5zaXR5LnZpc2libGVJbkluc3BlY3RvciA9IGZhbHNlO1xyXG4gICAgICBORG90TERpZmZ1c2VMaWdodEludGVuc2l0eS52aXNpYmxlT25GcmFtZSA9IGZhbHNlO1xyXG4gICAgICBORG90TERpZmZ1c2VMaWdodEludGVuc2l0eS50YXJnZXQgPSA0O1xyXG5cclxuICAgICAgLy8gTm9ybWFsaXplQmxvY2tcclxuICAgICAgdmFyIExOb3JtYWxpemVkID0gbmV3IEJBQllMT04uTm9ybWFsaXplQmxvY2soXCJMIChOb3JtYWxpemVkKVwiKTtcclxuICAgICAgTE5vcm1hbGl6ZWQudmlzaWJsZUluSW5zcGVjdG9yID0gZmFsc2U7XHJcbiAgICAgIExOb3JtYWxpemVkLnZpc2libGVPbkZyYW1lID0gZmFsc2U7XHJcbiAgICAgIExOb3JtYWxpemVkLnRhcmdldCA9IDQ7XHJcblxyXG4gICAgICAvLyBMaWdodEluZm9ybWF0aW9uQmxvY2tcclxuICAgICAgdmFyIExpZ2h0aW5mb3JtYXRpb24gPSBuZXcgQkFCWUxPTi5MaWdodEluZm9ybWF0aW9uQmxvY2soXHJcbiAgICAgICAgXCJMaWdodCBpbmZvcm1hdGlvblwiXHJcbiAgICAgICk7XHJcbiAgICAgIExpZ2h0aW5mb3JtYXRpb24udmlzaWJsZUluSW5zcGVjdG9yID0gZmFsc2U7XHJcbiAgICAgIExpZ2h0aW5mb3JtYXRpb24udmlzaWJsZU9uRnJhbWUgPSBmYWxzZTtcclxuICAgICAgTGlnaHRpbmZvcm1hdGlvbi50YXJnZXQgPSAxO1xyXG5cclxuICAgICAgLy8gQWRkQmxvY2tcclxuICAgICAgdmFyIEggPSBuZXcgQkFCWUxPTi5BZGRCbG9jayhcIkhcIik7XHJcbiAgICAgIEgudmlzaWJsZUluSW5zcGVjdG9yID0gZmFsc2U7XHJcbiAgICAgIEgudmlzaWJsZU9uRnJhbWUgPSBmYWxzZTtcclxuICAgICAgSC50YXJnZXQgPSA0O1xyXG5cclxuICAgICAgLy8gTm9ybWFsaXplQmxvY2tcclxuICAgICAgdmFyIFZOb3JtYWxpemVkID0gbmV3IEJBQllMT04uTm9ybWFsaXplQmxvY2soXCJWIChOb3JtYWxpemVkKVwiKTtcclxuICAgICAgVk5vcm1hbGl6ZWQudmlzaWJsZUluSW5zcGVjdG9yID0gZmFsc2U7XHJcbiAgICAgIFZOb3JtYWxpemVkLnZpc2libGVPbkZyYW1lID0gZmFsc2U7XHJcbiAgICAgIFZOb3JtYWxpemVkLnRhcmdldCA9IDQ7XHJcblxyXG4gICAgICAvLyBWaWV3RGlyZWN0aW9uQmxvY2tcclxuICAgICAgdmFyIFZpZXdkaXJlY3Rpb24gPSBuZXcgQkFCWUxPTi5WaWV3RGlyZWN0aW9uQmxvY2soXCJWaWV3IGRpcmVjdGlvblwiKTtcclxuICAgICAgVmlld2RpcmVjdGlvbi52aXNpYmxlSW5JbnNwZWN0b3IgPSBmYWxzZTtcclxuICAgICAgVmlld2RpcmVjdGlvbi52aXNpYmxlT25GcmFtZSA9IGZhbHNlO1xyXG4gICAgICBWaWV3ZGlyZWN0aW9uLnRhcmdldCA9IDQ7XHJcblxyXG4gICAgICAvLyBJbnB1dEJsb2NrXHJcbiAgICAgIHZhciBjYW1lcmFQb3NpdGlvbiA9IG5ldyBCQUJZTE9OLklucHV0QmxvY2soXCJjYW1lcmFQb3NpdGlvblwiKTtcclxuICAgICAgY2FtZXJhUG9zaXRpb24udmlzaWJsZUluSW5zcGVjdG9yID0gZmFsc2U7XHJcbiAgICAgIGNhbWVyYVBvc2l0aW9uLnZpc2libGVPbkZyYW1lID0gZmFsc2U7XHJcbiAgICAgIGNhbWVyYVBvc2l0aW9uLnRhcmdldCA9IDE7XHJcbiAgICAgIGNhbWVyYVBvc2l0aW9uLnNldEFzU3lzdGVtVmFsdWUoXHJcbiAgICAgICAgQkFCWUxPTi5Ob2RlTWF0ZXJpYWxTeXN0ZW1WYWx1ZXMuQ2FtZXJhUG9zaXRpb25cclxuICAgICAgKTtcclxuXHJcbiAgICAgIC8vIERvdEJsb2NrXHJcbiAgICAgIHZhciBORG90ViA9IG5ldyBCQUJZTE9OLkRvdEJsb2NrKFwiTiBEb3QgVlwiKTtcclxuICAgICAgTkRvdFYudmlzaWJsZUluSW5zcGVjdG9yID0gZmFsc2U7XHJcbiAgICAgIE5Eb3RWLnZpc2libGVPbkZyYW1lID0gZmFsc2U7XHJcbiAgICAgIE5Eb3RWLnRhcmdldCA9IDQ7XHJcblxyXG4gICAgICAvLyBPbmVNaW51c0Jsb2NrXHJcbiAgICAgIHZhciBORG90VjEgPSBuZXcgQkFCWUxPTi5PbmVNaW51c0Jsb2NrKFwiMSAtIE4gRG90IFZcIik7XHJcbiAgICAgIE5Eb3RWMS52aXNpYmxlSW5JbnNwZWN0b3IgPSBmYWxzZTtcclxuICAgICAgTkRvdFYxLnZpc2libGVPbkZyYW1lID0gZmFsc2U7XHJcbiAgICAgIE5Eb3RWMS50YXJnZXQgPSA0O1xyXG5cclxuICAgICAgLy8gTXVsdGlwbHlCbG9ja1xyXG4gICAgICB2YXIgUmltSU50ZW5zaXR5ID0gbmV3IEJBQllMT04uTXVsdGlwbHlCbG9jayhcIlJpbSBJTnRlbnNpdHlcIik7XHJcbiAgICAgIFJpbUlOdGVuc2l0eS52aXNpYmxlSW5JbnNwZWN0b3IgPSBmYWxzZTtcclxuICAgICAgUmltSU50ZW5zaXR5LnZpc2libGVPbkZyYW1lID0gZmFsc2U7XHJcbiAgICAgIFJpbUlOdGVuc2l0eS50YXJnZXQgPSA0O1xyXG5cclxuICAgICAgLy8gUG93QmxvY2tcclxuICAgICAgdmFyIFJpbUZhY3RvciA9IG5ldyBCQUJZTE9OLlBvd0Jsb2NrKFwiUmltIEZhY3RvclwiKTtcclxuICAgICAgUmltRmFjdG9yLnZpc2libGVJbkluc3BlY3RvciA9IGZhbHNlO1xyXG4gICAgICBSaW1GYWN0b3IudmlzaWJsZU9uRnJhbWUgPSBmYWxzZTtcclxuICAgICAgUmltRmFjdG9yLnRhcmdldCA9IDQ7XHJcblxyXG4gICAgICAvLyBJbnB1dEJsb2NrXHJcbiAgICAgIHZhciBSaW1JbnRlbnNpdHkgPSBuZXcgQkFCWUxPTi5JbnB1dEJsb2NrKFwiUmltIEludGVuc2l0eVwiKTtcclxuICAgICAgUmltSW50ZW5zaXR5LnZpc2libGVJbkluc3BlY3RvciA9IGZhbHNlO1xyXG4gICAgICBSaW1JbnRlbnNpdHkudmlzaWJsZU9uRnJhbWUgPSBmYWxzZTtcclxuICAgICAgUmltSW50ZW5zaXR5LnRhcmdldCA9IDE7XHJcbiAgICAgIFJpbUludGVuc2l0eS52YWx1ZSA9IDAuNDtcclxuICAgICAgUmltSW50ZW5zaXR5Lm1pbiA9IDA7XHJcbiAgICAgIFJpbUludGVuc2l0eS5tYXggPSAwO1xyXG4gICAgICBSaW1JbnRlbnNpdHkuaXNCb29sZWFuID0gZmFsc2U7XHJcbiAgICAgIFJpbUludGVuc2l0eS5tYXRyaXhNb2RlID0gMDtcclxuICAgICAgUmltSW50ZW5zaXR5LmFuaW1hdGlvblR5cGUgPSBCQUJZTE9OLkFuaW1hdGVkSW5wdXRCbG9ja1R5cGVzLk5vbmU7XHJcbiAgICAgIFJpbUludGVuc2l0eS5pc0NvbnN0YW50ID0gZmFsc2U7XHJcblxyXG4gICAgICAvLyBTdGVwQmxvY2tcclxuICAgICAgdmFyIFF1YW50aXplZFJpbUxpZ2h0SW50ZW5zaXR5ID0gbmV3IEJBQllMT04uU3RlcEJsb2NrKFxyXG4gICAgICAgIFwiUXVhbnRpemVkIFJpbSBMaWdodCBJbnRlbnNpdHlcIlxyXG4gICAgICApO1xyXG4gICAgICBRdWFudGl6ZWRSaW1MaWdodEludGVuc2l0eS52aXNpYmxlSW5JbnNwZWN0b3IgPSBmYWxzZTtcclxuICAgICAgUXVhbnRpemVkUmltTGlnaHRJbnRlbnNpdHkudmlzaWJsZU9uRnJhbWUgPSBmYWxzZTtcclxuICAgICAgUXVhbnRpemVkUmltTGlnaHRJbnRlbnNpdHkudGFyZ2V0ID0gNDtcclxuXHJcbiAgICAgIC8vIElucHV0QmxvY2tcclxuICAgICAgdmFyIFJpbUN1dG9mZiA9IG5ldyBCQUJZTE9OLklucHV0QmxvY2soXCJSaW0gQ3V0b2ZmXCIpO1xyXG4gICAgICBSaW1DdXRvZmYudmlzaWJsZUluSW5zcGVjdG9yID0gZmFsc2U7XHJcbiAgICAgIFJpbUN1dG9mZi52aXNpYmxlT25GcmFtZSA9IGZhbHNlO1xyXG4gICAgICBSaW1DdXRvZmYudGFyZ2V0ID0gMTtcclxuICAgICAgUmltQ3V0b2ZmLnZhbHVlID0gMC42O1xyXG4gICAgICBSaW1DdXRvZmYubWluID0gMDtcclxuICAgICAgUmltQ3V0b2ZmLm1heCA9IDA7XHJcbiAgICAgIFJpbUN1dG9mZi5pc0Jvb2xlYW4gPSBmYWxzZTtcclxuICAgICAgUmltQ3V0b2ZmLm1hdHJpeE1vZGUgPSAwO1xyXG4gICAgICBSaW1DdXRvZmYuYW5pbWF0aW9uVHlwZSA9IEJBQllMT04uQW5pbWF0ZWRJbnB1dEJsb2NrVHlwZXMuTm9uZTtcclxuICAgICAgUmltQ3V0b2ZmLmlzQ29uc3RhbnQgPSBmYWxzZTtcclxuXHJcbiAgICAgIC8vIFNjYWxlQmxvY2tcclxuICAgICAgdmFyIFNjYWxlID0gbmV3IEJBQllMT04uU2NhbGVCbG9jayhcIlNjYWxlXCIpO1xyXG4gICAgICBTY2FsZS52aXNpYmxlSW5JbnNwZWN0b3IgPSBmYWxzZTtcclxuICAgICAgU2NhbGUudmlzaWJsZU9uRnJhbWUgPSBmYWxzZTtcclxuICAgICAgU2NhbGUudGFyZ2V0ID0gNDtcclxuXHJcbiAgICAgIC8vIElucHV0QmxvY2tcclxuICAgICAgdmFyIFJpbUxpZ2h0Q29sb3IgPSBuZXcgQkFCWUxPTi5JbnB1dEJsb2NrKFwiUmltIExpZ2h0IENvbG9yXCIpO1xyXG4gICAgICBSaW1MaWdodENvbG9yLnZpc2libGVJbkluc3BlY3RvciA9IGZhbHNlO1xyXG4gICAgICBSaW1MaWdodENvbG9yLnZpc2libGVPbkZyYW1lID0gZmFsc2U7XHJcbiAgICAgIFJpbUxpZ2h0Q29sb3IudGFyZ2V0ID0gMTtcclxuICAgICAgUmltTGlnaHRDb2xvci52YWx1ZSA9IG5ldyBCQUJZTE9OLkNvbG9yMygxLCAxLCAxKTtcclxuICAgICAgUmltTGlnaHRDb2xvci5pc0NvbnN0YW50ID0gZmFsc2U7XHJcblxyXG4gICAgICAvLyBBZGRCbG9ja1xyXG4gICAgICB2YXIgQWRkUmltU3BlY0RpZmZ1c2VBbWJpZW50ID0gbmV3IEJBQllMT04uQWRkQmxvY2soXHJcbiAgICAgICAgXCJBZGQgUmltICsgU3BlYyArIERpZmZ1c2UgKyBBbWJpZW50XCJcclxuICAgICAgKTtcclxuICAgICAgQWRkUmltU3BlY0RpZmZ1c2VBbWJpZW50LnZpc2libGVJbkluc3BlY3RvciA9IGZhbHNlO1xyXG4gICAgICBBZGRSaW1TcGVjRGlmZnVzZUFtYmllbnQudmlzaWJsZU9uRnJhbWUgPSBmYWxzZTtcclxuICAgICAgQWRkUmltU3BlY0RpZmZ1c2VBbWJpZW50LnRhcmdldCA9IDQ7XHJcblxyXG4gICAgICAvLyBBZGRCbG9ja1xyXG4gICAgICB2YXIgQWRkU3BlY3VsYXJEaWZmdXNlQW1iaWVudCA9IG5ldyBCQUJZTE9OLkFkZEJsb2NrKFxyXG4gICAgICAgIFwiQWRkIFNwZWN1bGFyICsgRGlmZnVzZSArIEFtYmllbnRcIlxyXG4gICAgICApO1xyXG4gICAgICBBZGRTcGVjdWxhckRpZmZ1c2VBbWJpZW50LnZpc2libGVJbkluc3BlY3RvciA9IGZhbHNlO1xyXG4gICAgICBBZGRTcGVjdWxhckRpZmZ1c2VBbWJpZW50LnZpc2libGVPbkZyYW1lID0gZmFsc2U7XHJcbiAgICAgIEFkZFNwZWN1bGFyRGlmZnVzZUFtYmllbnQudGFyZ2V0ID0gNDtcclxuXHJcbiAgICAgIC8vIEFkZEJsb2NrXHJcbiAgICAgIHZhciBBZGRBbWJpZW50dG9EaWZmdXNlTGlnaHQgPSBuZXcgQkFCWUxPTi5BZGRCbG9jayhcclxuICAgICAgICBcIkFkZCBBbWJpZW50IHRvIERpZmZ1c2UgTGlnaHRcIlxyXG4gICAgICApO1xyXG4gICAgICBBZGRBbWJpZW50dG9EaWZmdXNlTGlnaHQudmlzaWJsZUluSW5zcGVjdG9yID0gZmFsc2U7XHJcbiAgICAgIEFkZEFtYmllbnR0b0RpZmZ1c2VMaWdodC52aXNpYmxlT25GcmFtZSA9IGZhbHNlO1xyXG4gICAgICBBZGRBbWJpZW50dG9EaWZmdXNlTGlnaHQudGFyZ2V0ID0gNDtcclxuXHJcbiAgICAgIC8vIElucHV0QmxvY2tcclxuICAgICAgdmFyIEFtYmllbnRMaWdodENvbG9yID0gbmV3IEJBQllMT04uSW5wdXRCbG9jayhcIkFtYmllbnQgTGlnaHQgQ29sb3JcIik7XHJcbiAgICAgIEFtYmllbnRMaWdodENvbG9yLnZpc2libGVJbkluc3BlY3RvciA9IGZhbHNlO1xyXG4gICAgICBBbWJpZW50TGlnaHRDb2xvci52aXNpYmxlT25GcmFtZSA9IGZhbHNlO1xyXG4gICAgICBBbWJpZW50TGlnaHRDb2xvci50YXJnZXQgPSAxO1xyXG4gICAgICBBbWJpZW50TGlnaHRDb2xvci52YWx1ZSA9IG5ldyBCQUJZTE9OLkNvbG9yMyhcclxuICAgICAgICAwLjE4MDM5MjE1Njg2Mjc0NTEsXHJcbiAgICAgICAgMC4xODAzOTIxNTY4NjI3NDUxLFxyXG4gICAgICAgIDAuMTgwMzkyMTU2ODYyNzQ1MVxyXG4gICAgICApO1xyXG4gICAgICBBbWJpZW50TGlnaHRDb2xvci5pc0NvbnN0YW50ID0gZmFsc2U7XHJcblxyXG4gICAgICAvLyBTY2FsZUJsb2NrXHJcbiAgICAgIHZhciBEaWZmdXNlTGlnaHRDYWxjdWxhdGlvbiA9IG5ldyBCQUJZTE9OLlNjYWxlQmxvY2soXHJcbiAgICAgICAgXCJEaWZmdXNlIExpZ2h0IENhbGN1bGF0aW9uXCJcclxuICAgICAgKTtcclxuICAgICAgRGlmZnVzZUxpZ2h0Q2FsY3VsYXRpb24udmlzaWJsZUluSW5zcGVjdG9yID0gZmFsc2U7XHJcbiAgICAgIERpZmZ1c2VMaWdodENhbGN1bGF0aW9uLnZpc2libGVPbkZyYW1lID0gZmFsc2U7XHJcbiAgICAgIERpZmZ1c2VMaWdodENhbGN1bGF0aW9uLnRhcmdldCA9IDQ7XHJcblxyXG4gICAgICAvLyBJbnB1dEJsb2NrXHJcbiAgICAgIHZhciBEaWZmdXNlTGlnaHRDb2xvciA9IG5ldyBCQUJZTE9OLklucHV0QmxvY2soXCJEaWZmdXNlIExpZ2h0IENvbG9yXCIpO1xyXG4gICAgICBEaWZmdXNlTGlnaHRDb2xvci52aXNpYmxlSW5JbnNwZWN0b3IgPSBmYWxzZTtcclxuICAgICAgRGlmZnVzZUxpZ2h0Q29sb3IudmlzaWJsZU9uRnJhbWUgPSBmYWxzZTtcclxuICAgICAgRGlmZnVzZUxpZ2h0Q29sb3IudGFyZ2V0ID0gMTtcclxuICAgICAgRGlmZnVzZUxpZ2h0Q29sb3IudmFsdWUgPSBuZXcgQkFCWUxPTi5Db2xvcjMoXHJcbiAgICAgICAgMC42OTAxOTYwNzg0MzEzNzI1LFxyXG4gICAgICAgIDAuNjkwMTk2MDc4NDMxMzcyNSxcclxuICAgICAgICAwLjY5MDE5NjA3ODQzMTM3MjVcclxuICAgICAgKTtcclxuICAgICAgRGlmZnVzZUxpZ2h0Q29sb3IuaXNDb25zdGFudCA9IGZhbHNlO1xyXG5cclxuICAgICAgLy8gU3RlcEJsb2NrXHJcbiAgICAgIHZhciBRdWFudGl6ZWREaWZmdXNlTGlnaHRJbnRlbnNpdHkgPSBuZXcgQkFCWUxPTi5TdGVwQmxvY2soXHJcbiAgICAgICAgXCJRdWFudGl6ZWQgRGlmZnVzZSBMaWdodCBJbnRlbnNpdHlcIlxyXG4gICAgICApO1xyXG4gICAgICBRdWFudGl6ZWREaWZmdXNlTGlnaHRJbnRlbnNpdHkudmlzaWJsZUluSW5zcGVjdG9yID0gZmFsc2U7XHJcbiAgICAgIFF1YW50aXplZERpZmZ1c2VMaWdodEludGVuc2l0eS52aXNpYmxlT25GcmFtZSA9IGZhbHNlO1xyXG4gICAgICBRdWFudGl6ZWREaWZmdXNlTGlnaHRJbnRlbnNpdHkudGFyZ2V0ID0gNDtcclxuXHJcbiAgICAgIC8vIElucHV0QmxvY2tcclxuICAgICAgdmFyIERpZmZ1c2VDdXRvZmYgPSBuZXcgQkFCWUxPTi5JbnB1dEJsb2NrKFwiRGlmZnVzZSBDdXRvZmZcIik7XHJcbiAgICAgIERpZmZ1c2VDdXRvZmYudmlzaWJsZUluSW5zcGVjdG9yID0gZmFsc2U7XHJcbiAgICAgIERpZmZ1c2VDdXRvZmYudmlzaWJsZU9uRnJhbWUgPSBmYWxzZTtcclxuICAgICAgRGlmZnVzZUN1dG9mZi50YXJnZXQgPSAxO1xyXG4gICAgICBEaWZmdXNlQ3V0b2ZmLnZhbHVlID0gMDtcclxuICAgICAgRGlmZnVzZUN1dG9mZi5taW4gPSAwO1xyXG4gICAgICBEaWZmdXNlQ3V0b2ZmLm1heCA9IDA7XHJcbiAgICAgIERpZmZ1c2VDdXRvZmYuaXNCb29sZWFuID0gZmFsc2U7XHJcbiAgICAgIERpZmZ1c2VDdXRvZmYubWF0cml4TW9kZSA9IDA7XHJcbiAgICAgIERpZmZ1c2VDdXRvZmYuYW5pbWF0aW9uVHlwZSA9IEJBQllMT04uQW5pbWF0ZWRJbnB1dEJsb2NrVHlwZXMuTm9uZTtcclxuICAgICAgRGlmZnVzZUN1dG9mZi5pc0NvbnN0YW50ID0gZmFsc2U7XHJcblxyXG4gICAgICAvLyBNdWx0aXBseUJsb2NrXHJcbiAgICAgIHZhciBTcGVjdWxhckZhY3RvciA9IG5ldyBCQUJZTE9OLk11bHRpcGx5QmxvY2soXCJTcGVjdWxhciBGYWN0b3JcIik7XHJcbiAgICAgIFNwZWN1bGFyRmFjdG9yLnZpc2libGVJbkluc3BlY3RvciA9IGZhbHNlO1xyXG4gICAgICBTcGVjdWxhckZhY3Rvci52aXNpYmxlT25GcmFtZSA9IGZhbHNlO1xyXG4gICAgICBTcGVjdWxhckZhY3Rvci50YXJnZXQgPSA0O1xyXG5cclxuICAgICAgLy8gRG90QmxvY2tcclxuICAgICAgdmFyIE5Eb3RIID0gbmV3IEJBQllMT04uRG90QmxvY2soXCJOIERvdCBIXCIpO1xyXG4gICAgICBORG90SC52aXNpYmxlSW5JbnNwZWN0b3IgPSBmYWxzZTtcclxuICAgICAgTkRvdEgudmlzaWJsZU9uRnJhbWUgPSBmYWxzZTtcclxuICAgICAgTkRvdEgudGFyZ2V0ID0gNDtcclxuXHJcbiAgICAgIC8vIE5vcm1hbGl6ZUJsb2NrXHJcbiAgICAgIHZhciBITm9ybWFsaXplZCA9IG5ldyBCQUJZTE9OLk5vcm1hbGl6ZUJsb2NrKFwiSCAoTm9ybWFsaXplZClcIik7XHJcbiAgICAgIEhOb3JtYWxpemVkLnZpc2libGVJbkluc3BlY3RvciA9IGZhbHNlO1xyXG4gICAgICBITm9ybWFsaXplZC52aXNpYmxlT25GcmFtZSA9IGZhbHNlO1xyXG4gICAgICBITm9ybWFsaXplZC50YXJnZXQgPSA0O1xyXG5cclxuICAgICAgLy8gUG93QmxvY2tcclxuICAgICAgdmFyIFNwZWN1bGFySW50ZW5zaXR5ID0gbmV3IEJBQllMT04uUG93QmxvY2soXCJTcGVjdWxhciBJbnRlbnNpdHlcIik7XHJcbiAgICAgIFNwZWN1bGFySW50ZW5zaXR5LnZpc2libGVJbkluc3BlY3RvciA9IGZhbHNlO1xyXG4gICAgICBTcGVjdWxhckludGVuc2l0eS52aXNpYmxlT25GcmFtZSA9IGZhbHNlO1xyXG4gICAgICBTcGVjdWxhckludGVuc2l0eS50YXJnZXQgPSA0O1xyXG5cclxuICAgICAgLy8gTXVsdGlwbHlCbG9ja1xyXG4gICAgICB2YXIgR2xvc3NpbmVzcyA9IG5ldyBCQUJZTE9OLk11bHRpcGx5QmxvY2soXCJHbG9zc2luZXNzIF4yXCIpO1xyXG4gICAgICBHbG9zc2luZXNzLnZpc2libGVJbkluc3BlY3RvciA9IGZhbHNlO1xyXG4gICAgICBHbG9zc2luZXNzLnZpc2libGVPbkZyYW1lID0gZmFsc2U7XHJcbiAgICAgIEdsb3NzaW5lc3MudGFyZ2V0ID0gNDtcclxuXHJcbiAgICAgIC8vIElucHV0QmxvY2tcclxuICAgICAgdmFyIEdsb3NzaW5lc3MxID0gbmV3IEJBQllMT04uSW5wdXRCbG9jayhcIkdsb3NzaW5lc3NcIik7XHJcbiAgICAgIEdsb3NzaW5lc3MxLnZpc2libGVJbkluc3BlY3RvciA9IGZhbHNlO1xyXG4gICAgICBHbG9zc2luZXNzMS52aXNpYmxlT25GcmFtZSA9IGZhbHNlO1xyXG4gICAgICBHbG9zc2luZXNzMS50YXJnZXQgPSAxO1xyXG4gICAgICBHbG9zc2luZXNzMS52YWx1ZSA9IDU7XHJcbiAgICAgIEdsb3NzaW5lc3MxLm1pbiA9IDA7XHJcbiAgICAgIEdsb3NzaW5lc3MxLm1heCA9IDA7XHJcbiAgICAgIEdsb3NzaW5lc3MxLmlzQm9vbGVhbiA9IGZhbHNlO1xyXG4gICAgICBHbG9zc2luZXNzMS5tYXRyaXhNb2RlID0gMDtcclxuICAgICAgR2xvc3NpbmVzczEuYW5pbWF0aW9uVHlwZSA9IEJBQllMT04uQW5pbWF0ZWRJbnB1dEJsb2NrVHlwZXMuTm9uZTtcclxuICAgICAgR2xvc3NpbmVzczEuaXNDb25zdGFudCA9IGZhbHNlO1xyXG5cclxuICAgICAgLy8gU3RlcEJsb2NrXHJcbiAgICAgIHZhciBRdWFudGl6ZWRTcGVjdWxhckludGVuc2l0eSA9IG5ldyBCQUJZTE9OLlN0ZXBCbG9jayhcclxuICAgICAgICBcIlF1YW50aXplZCBTcGVjdWxhciBJbnRlbnNpdHlcIlxyXG4gICAgICApO1xyXG4gICAgICBRdWFudGl6ZWRTcGVjdWxhckludGVuc2l0eS52aXNpYmxlSW5JbnNwZWN0b3IgPSBmYWxzZTtcclxuICAgICAgUXVhbnRpemVkU3BlY3VsYXJJbnRlbnNpdHkudmlzaWJsZU9uRnJhbWUgPSBmYWxzZTtcclxuICAgICAgUXVhbnRpemVkU3BlY3VsYXJJbnRlbnNpdHkudGFyZ2V0ID0gNDtcclxuXHJcbiAgICAgIC8vIElucHV0QmxvY2tcclxuICAgICAgdmFyIFNwZWN1bGFyQ3V0b2ZmID0gbmV3IEJBQllMT04uSW5wdXRCbG9jayhcIlNwZWN1bGFyIEN1dG9mZlwiKTtcclxuICAgICAgU3BlY3VsYXJDdXRvZmYudmlzaWJsZUluSW5zcGVjdG9yID0gZmFsc2U7XHJcbiAgICAgIFNwZWN1bGFyQ3V0b2ZmLnZpc2libGVPbkZyYW1lID0gZmFsc2U7XHJcbiAgICAgIFNwZWN1bGFyQ3V0b2ZmLnRhcmdldCA9IDE7XHJcbiAgICAgIFNwZWN1bGFyQ3V0b2ZmLnZhbHVlID0gMC41O1xyXG4gICAgICBTcGVjdWxhckN1dG9mZi5taW4gPSAwO1xyXG4gICAgICBTcGVjdWxhckN1dG9mZi5tYXggPSAwO1xyXG4gICAgICBTcGVjdWxhckN1dG9mZi5pc0Jvb2xlYW4gPSBmYWxzZTtcclxuICAgICAgU3BlY3VsYXJDdXRvZmYubWF0cml4TW9kZSA9IDA7XHJcbiAgICAgIFNwZWN1bGFyQ3V0b2ZmLmFuaW1hdGlvblR5cGUgPSBCQUJZTE9OLkFuaW1hdGVkSW5wdXRCbG9ja1R5cGVzLk5vbmU7XHJcbiAgICAgIFNwZWN1bGFyQ3V0b2ZmLmlzQ29uc3RhbnQgPSBmYWxzZTtcclxuXHJcbiAgICAgIC8vIFNjYWxlQmxvY2tcclxuICAgICAgdmFyIENhbGN1bGF0ZVNwZWN1bGFyTGlnaHQgPSBuZXcgQkFCWUxPTi5TY2FsZUJsb2NrKFxyXG4gICAgICAgIFwiQ2FsY3VsYXRlIFNwZWN1bGFyIExpZ2h0XCJcclxuICAgICAgKTtcclxuICAgICAgQ2FsY3VsYXRlU3BlY3VsYXJMaWdodC52aXNpYmxlSW5JbnNwZWN0b3IgPSBmYWxzZTtcclxuICAgICAgQ2FsY3VsYXRlU3BlY3VsYXJMaWdodC52aXNpYmxlT25GcmFtZSA9IGZhbHNlO1xyXG4gICAgICBDYWxjdWxhdGVTcGVjdWxhckxpZ2h0LnRhcmdldCA9IDQ7XHJcblxyXG4gICAgICAvLyBJbnB1dEJsb2NrXHJcbiAgICAgIHZhciBDb2xvciA9IG5ldyBCQUJZTE9OLklucHV0QmxvY2soXCJDb2xvcjNcIik7XHJcbiAgICAgIENvbG9yLnZpc2libGVJbkluc3BlY3RvciA9IGZhbHNlO1xyXG4gICAgICBDb2xvci52aXNpYmxlT25GcmFtZSA9IGZhbHNlO1xyXG4gICAgICBDb2xvci50YXJnZXQgPSAxO1xyXG4gICAgICBDb2xvci52YWx1ZSA9IG5ldyBCQUJZTE9OLkNvbG9yMygxLCAxLCAxKTtcclxuICAgICAgQ29sb3IuaXNDb25zdGFudCA9IGZhbHNlO1xyXG5cclxuICAgICAgLy8gTXVsdGlwbHlCbG9ja1xyXG4gICAgICB2YXIgTXVsdGlwbHlMaWdodGluZ2J5Q29sb3IgPSBuZXcgQkFCWUxPTi5NdWx0aXBseUJsb2NrKFxyXG4gICAgICAgIFwiTXVsdGlwbHkgTGlnaHRpbmcgYnkgQ29sb3JcIlxyXG4gICAgICApO1xyXG4gICAgICBNdWx0aXBseUxpZ2h0aW5nYnlDb2xvci52aXNpYmxlSW5JbnNwZWN0b3IgPSBmYWxzZTtcclxuICAgICAgTXVsdGlwbHlMaWdodGluZ2J5Q29sb3IudmlzaWJsZU9uRnJhbWUgPSBmYWxzZTtcclxuICAgICAgTXVsdGlwbHlMaWdodGluZ2J5Q29sb3IudGFyZ2V0ID0gNDtcclxuXHJcbiAgICAgIC8vIFRleHR1cmVCbG9jayAoVEVYVFVSRSlcclxuICAgICAgdmFyIFRleHR1cmUgPSBuZXcgQkFCWUxPTi5UZXh0dXJlQmxvY2soXCJUZXh0dXJlXCIpO1xyXG5cclxuICAgICAgLy8gSW5wdXRCbG9jayAoVEVYVFVSRSlcclxuICAgICAgdmFyIHV2ID0gbmV3IEJBQllMT04uSW5wdXRCbG9jayhcInV2XCIpO1xyXG5cclxuICAgICAgLy8gSW1hZ2VTb3VyY2VCbG9jayAoVEVYVFVSRSlcclxuICAgICAgdmFyIFN1cmZhY2VUZXh0dXJlID0gbmV3IEJBQllMT04uSW1hZ2VTb3VyY2VCbG9jayhcIlN1cmZhY2UgVGV4dHVyZVwiKTtcclxuXHJcbiAgICAgIC8vIElucHV0QmxvY2sgKENPTE9SKVxyXG4gICAgICB2YXIgU3VyZmFjZUNvbG9yID0gbmV3IEJBQllMT04uSW5wdXRCbG9jayhcIlN1cmZhY2UgQ29sb3JcIik7XHJcblxyXG4gICAgICBpZiAoaXNUZXh0dXJlKSB7XHJcbiAgICAgICAgLy8gVGV4dHVyZUJsb2NrIChURVhUVVJFKVxyXG4gICAgICAgIFRleHR1cmUudmlzaWJsZUluSW5zcGVjdG9yID0gZmFsc2U7XHJcbiAgICAgICAgVGV4dHVyZS52aXNpYmxlT25GcmFtZSA9IGZhbHNlO1xyXG4gICAgICAgIFRleHR1cmUudGFyZ2V0ID0gMztcclxuICAgICAgICBUZXh0dXJlLmNvbnZlcnRUb0dhbW1hU3BhY2UgPSBmYWxzZTtcclxuICAgICAgICBUZXh0dXJlLmNvbnZlcnRUb0xpbmVhclNwYWNlID0gZmFsc2U7XHJcbiAgICAgICAgVGV4dHVyZS5kaXNhYmxlTGV2ZWxNdWx0aXBsaWNhdGlvbiA9IGZhbHNlO1xyXG4gICAgICAgIFRleHR1cmUudGV4dHVyZSA9IG5ldyBCQUJZTE9OLlRleHR1cmUodGV4dHVyZUxpbmssIHRoaXMuc2NlbmUpO1xyXG4gICAgICAgIFRleHR1cmUudGV4dHVyZS53cmFwVSA9IDE7XHJcbiAgICAgICAgVGV4dHVyZS50ZXh0dXJlLndyYXBWID0gMTtcclxuICAgICAgICBUZXh0dXJlLnRleHR1cmUudUFuZyA9IDA7XHJcbiAgICAgICAgVGV4dHVyZS50ZXh0dXJlLnZBbmcgPSAwO1xyXG4gICAgICAgIFRleHR1cmUudGV4dHVyZS53QW5nID0gMDtcclxuICAgICAgICBUZXh0dXJlLnRleHR1cmUudU9mZnNldCA9IDA7XHJcbiAgICAgICAgVGV4dHVyZS50ZXh0dXJlLnZPZmZzZXQgPSAwO1xyXG4gICAgICAgIFRleHR1cmUudGV4dHVyZS51U2NhbGUgPSAxO1xyXG4gICAgICAgIFRleHR1cmUudGV4dHVyZS52U2NhbGUgPSAxO1xyXG4gICAgICAgIFRleHR1cmUudGV4dHVyZS5jb29yZGluYXRlc01vZGUgPSA3O1xyXG5cclxuICAgICAgICAvLyBJbnB1dEJsb2NrIChURVhUVVJFKVxyXG4gICAgICAgIHV2LnZpc2libGVJbkluc3BlY3RvciA9IGZhbHNlO1xyXG4gICAgICAgIHV2LnZpc2libGVPbkZyYW1lID0gZmFsc2U7XHJcbiAgICAgICAgdXYudGFyZ2V0ID0gMTtcclxuICAgICAgICB1di5zZXRBc0F0dHJpYnV0ZShcInV2XCIpO1xyXG5cclxuICAgICAgICAvLyBJbWFnZVNvdXJjZUJsb2NrIChURVhUVVJFKVxyXG4gICAgICAgIFN1cmZhY2VUZXh0dXJlLnZpc2libGVJbkluc3BlY3RvciA9IGZhbHNlO1xyXG4gICAgICAgIFN1cmZhY2VUZXh0dXJlLnZpc2libGVPbkZyYW1lID0gZmFsc2U7XHJcbiAgICAgICAgU3VyZmFjZVRleHR1cmUudGFyZ2V0ID0gMztcclxuICAgICAgICBTdXJmYWNlVGV4dHVyZS50ZXh0dXJlID0gbmV3IEJBQllMT04uVGV4dHVyZSh0ZXh0dXJlTGluaywgdGhpcy5zY2VuZSk7XHJcbiAgICAgICAgU3VyZmFjZVRleHR1cmUudGV4dHVyZS53cmFwVSA9IDE7XHJcbiAgICAgICAgU3VyZmFjZVRleHR1cmUudGV4dHVyZS53cmFwViA9IDE7XHJcbiAgICAgICAgU3VyZmFjZVRleHR1cmUudGV4dHVyZS51QW5nID0gMDtcclxuICAgICAgICBTdXJmYWNlVGV4dHVyZS50ZXh0dXJlLnZBbmcgPSAwO1xyXG4gICAgICAgIFN1cmZhY2VUZXh0dXJlLnRleHR1cmUud0FuZyA9IDA7XHJcbiAgICAgICAgU3VyZmFjZVRleHR1cmUudGV4dHVyZS51T2Zmc2V0ID0gMDtcclxuICAgICAgICBTdXJmYWNlVGV4dHVyZS50ZXh0dXJlLnZPZmZzZXQgPSAwO1xyXG4gICAgICAgIFN1cmZhY2VUZXh0dXJlLnRleHR1cmUudVNjYWxlID0gMTtcclxuICAgICAgICBTdXJmYWNlVGV4dHVyZS50ZXh0dXJlLnZTY2FsZSA9IDE7XHJcbiAgICAgICAgU3VyZmFjZVRleHR1cmUudGV4dHVyZS5jb29yZGluYXRlc01vZGUgPSA3O1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIC8vIElucHV0QmxvY2sgKENPTE9SKVxyXG4gICAgICAgIFN1cmZhY2VDb2xvci52aXNpYmxlSW5JbnNwZWN0b3IgPSBmYWxzZTtcclxuICAgICAgICBTdXJmYWNlQ29sb3IudmlzaWJsZU9uRnJhbWUgPSBmYWxzZTtcclxuICAgICAgICBTdXJmYWNlQ29sb3IudGFyZ2V0ID0gMTtcclxuICAgICAgICBTdXJmYWNlQ29sb3IudmFsdWUgPSBuZXcgQkFCWUxPTi5Db2xvcjMoY29sb3IuciwgY29sb3IuZywgY29sb3IuYik7XHJcbiAgICAgICAgU3VyZmFjZUNvbG9yLmlzQ29uc3RhbnQgPSBmYWxzZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gRnJhZ21lbnRPdXRwdXRCbG9ja1xyXG4gICAgICB2YXIgZnJhZ21lbnRPdXRwdXQgPSBuZXcgQkFCWUxPTi5GcmFnbWVudE91dHB1dEJsb2NrKFwiZnJhZ21lbnRPdXRwdXRcIik7XHJcbiAgICAgIGZyYWdtZW50T3V0cHV0LnZpc2libGVJbkluc3BlY3RvciA9IGZhbHNlO1xyXG4gICAgICBmcmFnbWVudE91dHB1dC52aXNpYmxlT25GcmFtZSA9IGZhbHNlO1xyXG4gICAgICBmcmFnbWVudE91dHB1dC50YXJnZXQgPSAyO1xyXG4gICAgICBmcmFnbWVudE91dHB1dC5jb252ZXJ0VG9HYW1tYVNwYWNlID0gdW5kZWZpbmVkO1xyXG4gICAgICBmcmFnbWVudE91dHB1dC5jb252ZXJ0VG9MaW5lYXJTcGFjZSA9IHVuZGVmaW5lZDtcclxuICAgICAgZnJhZ21lbnRPdXRwdXQudXNlTG9nYXJpdGhtaWNEZXB0aCA9IGZhbHNlO1xyXG5cclxuICAgICAgLy8gVHJhbnNmb3JtQmxvY2tcclxuICAgICAgdmFyIHdvcmxkUG9zdmlld1Byb2plY3Rpb25UcmFuc2Zvcm0gPSBuZXcgQkFCWUxPTi5UcmFuc2Zvcm1CbG9jayhcclxuICAgICAgICBcIndvcmxkUG9zICogdmlld1Byb2plY3Rpb25UcmFuc2Zvcm1cIlxyXG4gICAgICApO1xyXG4gICAgICB3b3JsZFBvc3ZpZXdQcm9qZWN0aW9uVHJhbnNmb3JtLnZpc2libGVJbkluc3BlY3RvciA9IGZhbHNlO1xyXG4gICAgICB3b3JsZFBvc3ZpZXdQcm9qZWN0aW9uVHJhbnNmb3JtLnZpc2libGVPbkZyYW1lID0gZmFsc2U7XHJcbiAgICAgIHdvcmxkUG9zdmlld1Byb2plY3Rpb25UcmFuc2Zvcm0udGFyZ2V0ID0gMTtcclxuICAgICAgd29ybGRQb3N2aWV3UHJvamVjdGlvblRyYW5zZm9ybS5jb21wbGVtZW50WiA9IDA7XHJcbiAgICAgIHdvcmxkUG9zdmlld1Byb2plY3Rpb25UcmFuc2Zvcm0uY29tcGxlbWVudFcgPSAxO1xyXG5cclxuICAgICAgLy8gSW5wdXRCbG9ja1xyXG4gICAgICB2YXIgdmlld1Byb2plY3Rpb24gPSBuZXcgQkFCWUxPTi5JbnB1dEJsb2NrKFwidmlld1Byb2plY3Rpb25cIik7XHJcbiAgICAgIHZpZXdQcm9qZWN0aW9uLnZpc2libGVJbkluc3BlY3RvciA9IGZhbHNlO1xyXG4gICAgICB2aWV3UHJvamVjdGlvbi52aXNpYmxlT25GcmFtZSA9IGZhbHNlO1xyXG4gICAgICB2aWV3UHJvamVjdGlvbi50YXJnZXQgPSAxO1xyXG4gICAgICB2aWV3UHJvamVjdGlvbi5zZXRBc1N5c3RlbVZhbHVlKFxyXG4gICAgICAgIEJBQllMT04uTm9kZU1hdGVyaWFsU3lzdGVtVmFsdWVzLlZpZXdQcm9qZWN0aW9uXHJcbiAgICAgICk7XHJcblxyXG4gICAgICAvLyBWZXJ0ZXhPdXRwdXRCbG9ja1xyXG4gICAgICB2YXIgdmVydGV4T3V0cHV0ID0gbmV3IEJBQllMT04uVmVydGV4T3V0cHV0QmxvY2soXCJ2ZXJ0ZXhPdXRwdXRcIik7XHJcbiAgICAgIHZlcnRleE91dHB1dC52aXNpYmxlSW5JbnNwZWN0b3IgPSBmYWxzZTtcclxuICAgICAgdmVydGV4T3V0cHV0LnZpc2libGVPbkZyYW1lID0gZmFsc2U7XHJcbiAgICAgIHZlcnRleE91dHB1dC50YXJnZXQgPSAxO1xyXG5cclxuICAgICAgLy8gQ29ubmVjdGlvbnNcclxuICAgICAgcG9zaXRpb24ub3V0cHV0LmNvbm5lY3RUbyh3b3JsZFBvcy52ZWN0b3IpO1xyXG4gICAgICB3b3JsZC5vdXRwdXQuY29ubmVjdFRvKHdvcmxkUG9zLnRyYW5zZm9ybSk7XHJcbiAgICAgIHdvcmxkUG9zLm91dHB1dC5jb25uZWN0VG8od29ybGRQb3N2aWV3UHJvamVjdGlvblRyYW5zZm9ybS52ZWN0b3IpO1xyXG4gICAgICB2aWV3UHJvamVjdGlvbi5vdXRwdXQuY29ubmVjdFRvKFxyXG4gICAgICAgIHdvcmxkUG9zdmlld1Byb2plY3Rpb25UcmFuc2Zvcm0udHJhbnNmb3JtXHJcbiAgICAgICk7XHJcbiAgICAgIHdvcmxkUG9zdmlld1Byb2plY3Rpb25UcmFuc2Zvcm0ub3V0cHV0LmNvbm5lY3RUbyh2ZXJ0ZXhPdXRwdXQudmVjdG9yKTtcclxuICAgICAgQW1iaWVudExpZ2h0Q29sb3Iub3V0cHV0LmNvbm5lY3RUbyhBZGRBbWJpZW50dG9EaWZmdXNlTGlnaHQubGVmdCk7XHJcbiAgICAgIERpZmZ1c2VMaWdodENvbG9yLm91dHB1dC5jb25uZWN0VG8oRGlmZnVzZUxpZ2h0Q2FsY3VsYXRpb24uaW5wdXQpO1xyXG4gICAgICBub3JtYWwub3V0cHV0LmNvbm5lY3RUbyhXb3JsZG5vcm1hbC52ZWN0b3IpO1xyXG4gICAgICB3b3JsZC5vdXRwdXQuY29ubmVjdFRvKFdvcmxkbm9ybWFsLnRyYW5zZm9ybSk7XHJcbiAgICAgIFdvcmxkbm9ybWFsLm91dHB1dC5jb25uZWN0VG8oTi54eXp3KTtcclxuICAgICAgTi54eXpPdXQuY29ubmVjdFRvKE5Ob3JtYWxpemVkLmlucHV0KTtcclxuICAgICAgTk5vcm1hbGl6ZWQub3V0cHV0LmNvbm5lY3RUbyhORG90TERpZmZ1c2VMaWdodEludGVuc2l0eS5sZWZ0KTtcclxuICAgICAgd29ybGRQb3Mub3V0cHV0LmNvbm5lY3RUbyhMaWdodGluZm9ybWF0aW9uLndvcmxkUG9zaXRpb24pO1xyXG4gICAgICBMaWdodGluZm9ybWF0aW9uLmRpcmVjdGlvbi5jb25uZWN0VG8oTE5vcm1hbGl6ZWQuaW5wdXQpO1xyXG4gICAgICBMTm9ybWFsaXplZC5vdXRwdXQuY29ubmVjdFRvKE5Eb3RMRGlmZnVzZUxpZ2h0SW50ZW5zaXR5LnJpZ2h0KTtcclxuICAgICAgTkRvdExEaWZmdXNlTGlnaHRJbnRlbnNpdHkub3V0cHV0LmNvbm5lY3RUbyhcclxuICAgICAgICBRdWFudGl6ZWREaWZmdXNlTGlnaHRJbnRlbnNpdHkudmFsdWVcclxuICAgICAgKTtcclxuICAgICAgRGlmZnVzZUN1dG9mZi5vdXRwdXQuY29ubmVjdFRvKFF1YW50aXplZERpZmZ1c2VMaWdodEludGVuc2l0eS5lZGdlKTtcclxuICAgICAgUXVhbnRpemVkRGlmZnVzZUxpZ2h0SW50ZW5zaXR5Lm91dHB1dC5jb25uZWN0VG8oXHJcbiAgICAgICAgRGlmZnVzZUxpZ2h0Q2FsY3VsYXRpb24uZmFjdG9yXHJcbiAgICAgICk7XHJcbiAgICAgIERpZmZ1c2VMaWdodENhbGN1bGF0aW9uLm91dHB1dC5jb25uZWN0VG8oQWRkQW1iaWVudHRvRGlmZnVzZUxpZ2h0LnJpZ2h0KTtcclxuICAgICAgQWRkQW1iaWVudHRvRGlmZnVzZUxpZ2h0Lm91dHB1dC5jb25uZWN0VG8oQWRkU3BlY3VsYXJEaWZmdXNlQW1iaWVudC5sZWZ0KTtcclxuICAgICAgQ29sb3Iub3V0cHV0LmNvbm5lY3RUbyhDYWxjdWxhdGVTcGVjdWxhckxpZ2h0LmlucHV0KTtcclxuICAgICAgTk5vcm1hbGl6ZWQub3V0cHV0LmNvbm5lY3RUbyhORG90SC5sZWZ0KTtcclxuICAgICAgd29ybGRQb3Mub3V0cHV0LmNvbm5lY3RUbyhWaWV3ZGlyZWN0aW9uLndvcmxkUG9zaXRpb24pO1xyXG4gICAgICBjYW1lcmFQb3NpdGlvbi5vdXRwdXQuY29ubmVjdFRvKFZpZXdkaXJlY3Rpb24uY2FtZXJhUG9zaXRpb24pO1xyXG4gICAgICBWaWV3ZGlyZWN0aW9uLm91dHB1dC5jb25uZWN0VG8oVk5vcm1hbGl6ZWQuaW5wdXQpO1xyXG4gICAgICBWTm9ybWFsaXplZC5vdXRwdXQuY29ubmVjdFRvKEgubGVmdCk7XHJcbiAgICAgIExOb3JtYWxpemVkLm91dHB1dC5jb25uZWN0VG8oSC5yaWdodCk7XHJcbiAgICAgIEgub3V0cHV0LmNvbm5lY3RUbyhITm9ybWFsaXplZC5pbnB1dCk7XHJcbiAgICAgIEhOb3JtYWxpemVkLm91dHB1dC5jb25uZWN0VG8oTkRvdEgucmlnaHQpO1xyXG4gICAgICBORG90SC5vdXRwdXQuY29ubmVjdFRvKFNwZWN1bGFyRmFjdG9yLmxlZnQpO1xyXG4gICAgICBRdWFudGl6ZWREaWZmdXNlTGlnaHRJbnRlbnNpdHkub3V0cHV0LmNvbm5lY3RUbyhTcGVjdWxhckZhY3Rvci5yaWdodCk7XHJcbiAgICAgIFNwZWN1bGFyRmFjdG9yLm91dHB1dC5jb25uZWN0VG8oU3BlY3VsYXJJbnRlbnNpdHkudmFsdWUpO1xyXG4gICAgICBHbG9zc2luZXNzMS5vdXRwdXQuY29ubmVjdFRvKEdsb3NzaW5lc3MubGVmdCk7XHJcbiAgICAgIEdsb3NzaW5lc3MxLm91dHB1dC5jb25uZWN0VG8oR2xvc3NpbmVzcy5yaWdodCk7XHJcbiAgICAgIEdsb3NzaW5lc3Mub3V0cHV0LmNvbm5lY3RUbyhTcGVjdWxhckludGVuc2l0eS5wb3dlcik7XHJcbiAgICAgIFNwZWN1bGFySW50ZW5zaXR5Lm91dHB1dC5jb25uZWN0VG8oUXVhbnRpemVkU3BlY3VsYXJJbnRlbnNpdHkudmFsdWUpO1xyXG4gICAgICBTcGVjdWxhckN1dG9mZi5vdXRwdXQuY29ubmVjdFRvKFF1YW50aXplZFNwZWN1bGFySW50ZW5zaXR5LmVkZ2UpO1xyXG4gICAgICBRdWFudGl6ZWRTcGVjdWxhckludGVuc2l0eS5vdXRwdXQuY29ubmVjdFRvKFxyXG4gICAgICAgIENhbGN1bGF0ZVNwZWN1bGFyTGlnaHQuZmFjdG9yXHJcbiAgICAgICk7XHJcbiAgICAgIENhbGN1bGF0ZVNwZWN1bGFyTGlnaHQub3V0cHV0LmNvbm5lY3RUbyhBZGRTcGVjdWxhckRpZmZ1c2VBbWJpZW50LnJpZ2h0KTtcclxuICAgICAgQWRkU3BlY3VsYXJEaWZmdXNlQW1iaWVudC5vdXRwdXQuY29ubmVjdFRvKEFkZFJpbVNwZWNEaWZmdXNlQW1iaWVudC5sZWZ0KTtcclxuICAgICAgUmltTGlnaHRDb2xvci5vdXRwdXQuY29ubmVjdFRvKFNjYWxlLmlucHV0KTtcclxuICAgICAgTk5vcm1hbGl6ZWQub3V0cHV0LmNvbm5lY3RUbyhORG90Vi5sZWZ0KTtcclxuICAgICAgVk5vcm1hbGl6ZWQub3V0cHV0LmNvbm5lY3RUbyhORG90Vi5yaWdodCk7XHJcbiAgICAgIE5Eb3RWLm91dHB1dC5jb25uZWN0VG8oTkRvdFYxLmlucHV0KTtcclxuICAgICAgTkRvdFYxLm91dHB1dC5jb25uZWN0VG8oUmltSU50ZW5zaXR5LmxlZnQpO1xyXG4gICAgICBORG90TERpZmZ1c2VMaWdodEludGVuc2l0eS5vdXRwdXQuY29ubmVjdFRvKFJpbUZhY3Rvci52YWx1ZSk7XHJcbiAgICAgIFJpbUludGVuc2l0eS5vdXRwdXQuY29ubmVjdFRvKFJpbUZhY3Rvci5wb3dlcik7XHJcbiAgICAgIFJpbUZhY3Rvci5vdXRwdXQuY29ubmVjdFRvKFJpbUlOdGVuc2l0eS5yaWdodCk7XHJcbiAgICAgIFJpbUlOdGVuc2l0eS5vdXRwdXQuY29ubmVjdFRvKFF1YW50aXplZFJpbUxpZ2h0SW50ZW5zaXR5LnZhbHVlKTtcclxuICAgICAgUmltQ3V0b2ZmLm91dHB1dC5jb25uZWN0VG8oUXVhbnRpemVkUmltTGlnaHRJbnRlbnNpdHkuZWRnZSk7XHJcbiAgICAgIFF1YW50aXplZFJpbUxpZ2h0SW50ZW5zaXR5Lm91dHB1dC5jb25uZWN0VG8oU2NhbGUuZmFjdG9yKTtcclxuICAgICAgU2NhbGUub3V0cHV0LmNvbm5lY3RUbyhBZGRSaW1TcGVjRGlmZnVzZUFtYmllbnQucmlnaHQpO1xyXG4gICAgICBBZGRSaW1TcGVjRGlmZnVzZUFtYmllbnQub3V0cHV0LmNvbm5lY3RUbyhNdWx0aXBseUxpZ2h0aW5nYnlDb2xvci5sZWZ0KTtcclxuXHJcbiAgICAgIGlmIChpc1RleHR1cmUpIHtcclxuICAgICAgICAvLyBURVhUVVJFXHJcbiAgICAgICAgdXYub3V0cHV0LmNvbm5lY3RUbyhUZXh0dXJlLnV2KTtcclxuICAgICAgICBTdXJmYWNlVGV4dHVyZS5zb3VyY2UuY29ubmVjdFRvKFRleHR1cmUuc291cmNlKTtcclxuICAgICAgICBUZXh0dXJlLnJnYi5jb25uZWN0VG8oTXVsdGlwbHlMaWdodGluZ2J5Q29sb3IucmlnaHQpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIC8vIENPTE9SXHJcbiAgICAgICAgU3VyZmFjZUNvbG9yLm91dHB1dC5jb25uZWN0VG8oTXVsdGlwbHlMaWdodGluZ2J5Q29sb3IucmlnaHQpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBNdWx0aXBseUxpZ2h0aW5nYnlDb2xvci5vdXRwdXQuY29ubmVjdFRvKGZyYWdtZW50T3V0cHV0LnJnYik7XHJcblxyXG4gICAgICAvLyBPdXRwdXQgbm9kZXNcclxuICAgICAgbm9kZU1hdGVyaWFsLmFkZE91dHB1dE5vZGUodmVydGV4T3V0cHV0KTtcclxuICAgICAgbm9kZU1hdGVyaWFsLmFkZE91dHB1dE5vZGUoZnJhZ21lbnRPdXRwdXQpO1xyXG4gICAgICBub2RlTWF0ZXJpYWwuYnVpbGQoKTtcclxuXHJcbiAgICAgIHJldHVybiBub2RlTWF0ZXJpYWw7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiIsIm1vZHVsZSBQUk9KRUNUIHtcclxuICBleHBvcnQgY2xhc3MgVG9vbk1hdGVyaWFsIHtcclxuICAgIHByaXZhdGUgc3RhdGljIHNoYWRlck5hbWU6IHN0cmluZyA9IFwiVG9vblwiO1xyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgYXBwbHlNYXRlcmlhbChcclxuICAgICAgc2NlbmU6IEJBQllMT04uU2NlbmUsXHJcbiAgICAgIG1lc2hzOiBCQUJZTE9OLkFic3RyYWN0TWVzaFtdXHJcbiAgICApIHtcclxuICAgICAgbGV0IG1hdGVyaWFsID0gVG9vbk1hdGVyaWFsLmdldE5vZGVNYXRlcmlhbChcclxuICAgICAgICB0cnVlLFxyXG4gICAgICAgIHNjZW5lLFxyXG4gICAgICAgIFwiLi9zY2VuZXMvYXNzZXRzL3Byb2NlZHVyYWx3b3JsZHMvZ2FpYS9hc3NldHNhbXBsZXMvc3ludHlzdHVkaW9zL21hdGVyaWFscy9QT0xZR09OX1RleHR1cmVfMDEucG5nXCJcclxuICAgICAgKTtcclxuICAgICAgbWVzaHMuZm9yRWFjaCgobWVzaCkgPT4ge1xyXG4gICAgICAgIG1lc2gubWF0ZXJpYWwgPSBtYXRlcmlhbDtcclxuICAgICAgICBtZXNoLm1hdGVyaWFsLmZyZWV6ZSgpO1xyXG4gICAgICAgIG1lc2gubWFya0FzRGlydHkoKTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBzdGF0aWMgZ2V0Tm9kZU1hdGVyaWFsKFxyXG4gICAgICBpc1RleHR1cmU6IGJvb2xlYW4sXHJcbiAgICAgIHNjZW5lOiBCQUJZTE9OLlNjZW5lLFxyXG4gICAgICB0ZXh0dXJlTGluaz86IHN0cmluZyxcclxuICAgICAgY29sb3I/OiBCQUJZTE9OLklVbml0eUNvbG9yXHJcbiAgICApIHtcclxuICAgICAgaWYgKGlzVGV4dHVyZSAmJiB0ZXh0dXJlTGluayA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJNYXRlcmlhbCB1c2luZyB0ZXh0dXJlIGhhcyBubyB0ZXh0dXJlIGxpbmtcIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBsZXQgbm9kZU1hdGVyaWFsID0gbmV3IEJBQllMT04uTm9kZU1hdGVyaWFsKFRvb25NYXRlcmlhbC5zaGFkZXJOYW1lKTtcclxuXHJcbiAgICAgIC8vIElucHV0QmxvY2tcclxuICAgICAgdmFyIHBvc2l0aW9uID0gbmV3IEJBQllMT04uSW5wdXRCbG9jayhcInBvc2l0aW9uXCIpO1xyXG4gICAgICBwb3NpdGlvbi52aXNpYmxlSW5JbnNwZWN0b3IgPSBmYWxzZTtcclxuICAgICAgcG9zaXRpb24udmlzaWJsZU9uRnJhbWUgPSBmYWxzZTtcclxuICAgICAgcG9zaXRpb24udGFyZ2V0ID0gMTtcclxuICAgICAgcG9zaXRpb24uc2V0QXNBdHRyaWJ1dGUoXCJwb3NpdGlvblwiKTtcclxuXHJcbiAgICAgIC8vIFRyYW5zZm9ybUJsb2NrXHJcbiAgICAgIHZhciB3b3JsZFBvcyA9IG5ldyBCQUJZTE9OLlRyYW5zZm9ybUJsb2NrKFwid29ybGRQb3NcIik7XHJcbiAgICAgIHdvcmxkUG9zLnZpc2libGVJbkluc3BlY3RvciA9IGZhbHNlO1xyXG4gICAgICB3b3JsZFBvcy52aXNpYmxlT25GcmFtZSA9IGZhbHNlO1xyXG4gICAgICB3b3JsZFBvcy50YXJnZXQgPSAxO1xyXG4gICAgICB3b3JsZFBvcy5jb21wbGVtZW50WiA9IDA7XHJcbiAgICAgIHdvcmxkUG9zLmNvbXBsZW1lbnRXID0gMTtcclxuXHJcbiAgICAgIC8vIElucHV0QmxvY2tcclxuICAgICAgdmFyIHdvcmxkID0gbmV3IEJBQllMT04uSW5wdXRCbG9jayhcIndvcmxkXCIpO1xyXG4gICAgICB3b3JsZC52aXNpYmxlSW5JbnNwZWN0b3IgPSBmYWxzZTtcclxuICAgICAgd29ybGQudmlzaWJsZU9uRnJhbWUgPSBmYWxzZTtcclxuICAgICAgd29ybGQudGFyZ2V0ID0gMTtcclxuICAgICAgd29ybGQuc2V0QXNTeXN0ZW1WYWx1ZShCQUJZTE9OLk5vZGVNYXRlcmlhbFN5c3RlbVZhbHVlcy5Xb3JsZCk7XHJcblxyXG4gICAgICAvLyBUcmFuc2Zvcm1CbG9ja1xyXG4gICAgICB2YXIgV29ybGRub3JtYWwgPSBuZXcgQkFCWUxPTi5UcmFuc2Zvcm1CbG9jayhcIldvcmxkIG5vcm1hbFwiKTtcclxuICAgICAgV29ybGRub3JtYWwudmlzaWJsZUluSW5zcGVjdG9yID0gZmFsc2U7XHJcbiAgICAgIFdvcmxkbm9ybWFsLnZpc2libGVPbkZyYW1lID0gZmFsc2U7XHJcbiAgICAgIFdvcmxkbm9ybWFsLnRhcmdldCA9IDE7XHJcbiAgICAgIFdvcmxkbm9ybWFsLmNvbXBsZW1lbnRaID0gMDtcclxuICAgICAgV29ybGRub3JtYWwuY29tcGxlbWVudFcgPSAwO1xyXG5cclxuICAgICAgLy8gSW5wdXRCbG9ja1xyXG4gICAgICB2YXIgbm9ybWFsID0gbmV3IEJBQllMT04uSW5wdXRCbG9jayhcIm5vcm1hbFwiKTtcclxuICAgICAgbm9ybWFsLnZpc2libGVJbkluc3BlY3RvciA9IGZhbHNlO1xyXG4gICAgICBub3JtYWwudmlzaWJsZU9uRnJhbWUgPSBmYWxzZTtcclxuICAgICAgbm9ybWFsLnRhcmdldCA9IDE7XHJcbiAgICAgIG5vcm1hbC5zZXRBc0F0dHJpYnV0ZShcIm5vcm1hbFwiKTtcclxuXHJcbiAgICAgIC8vIFZlY3RvclNwbGl0dGVyQmxvY2tcclxuICAgICAgdmFyIE4gPSBuZXcgQkFCWUxPTi5WZWN0b3JTcGxpdHRlckJsb2NrKFwiTlwiKTtcclxuICAgICAgTi52aXNpYmxlSW5JbnNwZWN0b3IgPSBmYWxzZTtcclxuICAgICAgTi52aXNpYmxlT25GcmFtZSA9IGZhbHNlO1xyXG4gICAgICBOLnRhcmdldCA9IDQ7XHJcblxyXG4gICAgICAvLyBOb3JtYWxpemVCbG9ja1xyXG4gICAgICB2YXIgTk5vcm1hbGl6ZWQgPSBuZXcgQkFCWUxPTi5Ob3JtYWxpemVCbG9jayhcIk4gKE5vcm1hbGl6ZWQpXCIpO1xyXG4gICAgICBOTm9ybWFsaXplZC52aXNpYmxlSW5JbnNwZWN0b3IgPSBmYWxzZTtcclxuICAgICAgTk5vcm1hbGl6ZWQudmlzaWJsZU9uRnJhbWUgPSBmYWxzZTtcclxuICAgICAgTk5vcm1hbGl6ZWQudGFyZ2V0ID0gNDtcclxuXHJcbiAgICAgIC8vIERvdEJsb2NrXHJcbiAgICAgIHZhciBORG90TERpZmZ1c2VMaWdodEludGVuc2l0eSA9IG5ldyBCQUJZTE9OLkRvdEJsb2NrKFxyXG4gICAgICAgIFwiTiBEb3QgTCAoRGlmZnVzZSBMaWdodCBJbnRlbnNpdHkpXCJcclxuICAgICAgKTtcclxuICAgICAgTkRvdExEaWZmdXNlTGlnaHRJbnRlbnNpdHkudmlzaWJsZUluSW5zcGVjdG9yID0gZmFsc2U7XHJcbiAgICAgIE5Eb3RMRGlmZnVzZUxpZ2h0SW50ZW5zaXR5LnZpc2libGVPbkZyYW1lID0gZmFsc2U7XHJcbiAgICAgIE5Eb3RMRGlmZnVzZUxpZ2h0SW50ZW5zaXR5LnRhcmdldCA9IDQ7XHJcblxyXG4gICAgICAvLyBOb3JtYWxpemVCbG9ja1xyXG4gICAgICB2YXIgTE5vcm1hbGl6ZWQgPSBuZXcgQkFCWUxPTi5Ob3JtYWxpemVCbG9jayhcIkwgKE5vcm1hbGl6ZWQpXCIpO1xyXG4gICAgICBMTm9ybWFsaXplZC52aXNpYmxlSW5JbnNwZWN0b3IgPSBmYWxzZTtcclxuICAgICAgTE5vcm1hbGl6ZWQudmlzaWJsZU9uRnJhbWUgPSBmYWxzZTtcclxuICAgICAgTE5vcm1hbGl6ZWQudGFyZ2V0ID0gNDtcclxuXHJcbiAgICAgIC8vIExpZ2h0SW5mb3JtYXRpb25CbG9ja1xyXG4gICAgICB2YXIgTGlnaHRpbmZvcm1hdGlvbiA9IG5ldyBCQUJZTE9OLkxpZ2h0SW5mb3JtYXRpb25CbG9jayhcclxuICAgICAgICBcIkxpZ2h0IGluZm9ybWF0aW9uXCJcclxuICAgICAgKTtcclxuICAgICAgTGlnaHRpbmZvcm1hdGlvbi52aXNpYmxlSW5JbnNwZWN0b3IgPSBmYWxzZTtcclxuICAgICAgTGlnaHRpbmZvcm1hdGlvbi52aXNpYmxlT25GcmFtZSA9IGZhbHNlO1xyXG4gICAgICBMaWdodGluZm9ybWF0aW9uLnRhcmdldCA9IDE7XHJcblxyXG4gICAgICAvLyBBZGRCbG9ja1xyXG4gICAgICB2YXIgSCA9IG5ldyBCQUJZTE9OLkFkZEJsb2NrKFwiSFwiKTtcclxuICAgICAgSC52aXNpYmxlSW5JbnNwZWN0b3IgPSBmYWxzZTtcclxuICAgICAgSC52aXNpYmxlT25GcmFtZSA9IGZhbHNlO1xyXG4gICAgICBILnRhcmdldCA9IDQ7XHJcblxyXG4gICAgICAvLyBOb3JtYWxpemVCbG9ja1xyXG4gICAgICB2YXIgVk5vcm1hbGl6ZWQgPSBuZXcgQkFCWUxPTi5Ob3JtYWxpemVCbG9jayhcIlYgKE5vcm1hbGl6ZWQpXCIpO1xyXG4gICAgICBWTm9ybWFsaXplZC52aXNpYmxlSW5JbnNwZWN0b3IgPSBmYWxzZTtcclxuICAgICAgVk5vcm1hbGl6ZWQudmlzaWJsZU9uRnJhbWUgPSBmYWxzZTtcclxuICAgICAgVk5vcm1hbGl6ZWQudGFyZ2V0ID0gNDtcclxuXHJcbiAgICAgIC8vIFZpZXdEaXJlY3Rpb25CbG9ja1xyXG4gICAgICB2YXIgVmlld2RpcmVjdGlvbiA9IG5ldyBCQUJZTE9OLlZpZXdEaXJlY3Rpb25CbG9jayhcIlZpZXcgZGlyZWN0aW9uXCIpO1xyXG4gICAgICBWaWV3ZGlyZWN0aW9uLnZpc2libGVJbkluc3BlY3RvciA9IGZhbHNlO1xyXG4gICAgICBWaWV3ZGlyZWN0aW9uLnZpc2libGVPbkZyYW1lID0gZmFsc2U7XHJcbiAgICAgIFZpZXdkaXJlY3Rpb24udGFyZ2V0ID0gNDtcclxuXHJcbiAgICAgIC8vIElucHV0QmxvY2tcclxuICAgICAgdmFyIGNhbWVyYVBvc2l0aW9uID0gbmV3IEJBQllMT04uSW5wdXRCbG9jayhcImNhbWVyYVBvc2l0aW9uXCIpO1xyXG4gICAgICBjYW1lcmFQb3NpdGlvbi52aXNpYmxlSW5JbnNwZWN0b3IgPSBmYWxzZTtcclxuICAgICAgY2FtZXJhUG9zaXRpb24udmlzaWJsZU9uRnJhbWUgPSBmYWxzZTtcclxuICAgICAgY2FtZXJhUG9zaXRpb24udGFyZ2V0ID0gMTtcclxuICAgICAgY2FtZXJhUG9zaXRpb24uc2V0QXNTeXN0ZW1WYWx1ZShcclxuICAgICAgICBCQUJZTE9OLk5vZGVNYXRlcmlhbFN5c3RlbVZhbHVlcy5DYW1lcmFQb3NpdGlvblxyXG4gICAgICApO1xyXG5cclxuICAgICAgLy8gRG90QmxvY2tcclxuICAgICAgdmFyIE5Eb3RWID0gbmV3IEJBQllMT04uRG90QmxvY2soXCJOIERvdCBWXCIpO1xyXG4gICAgICBORG90Vi52aXNpYmxlSW5JbnNwZWN0b3IgPSBmYWxzZTtcclxuICAgICAgTkRvdFYudmlzaWJsZU9uRnJhbWUgPSBmYWxzZTtcclxuICAgICAgTkRvdFYudGFyZ2V0ID0gNDtcclxuXHJcbiAgICAgIC8vIE9uZU1pbnVzQmxvY2tcclxuICAgICAgdmFyIE5Eb3RWMSA9IG5ldyBCQUJZTE9OLk9uZU1pbnVzQmxvY2soXCIxIC0gTiBEb3QgVlwiKTtcclxuICAgICAgTkRvdFYxLnZpc2libGVJbkluc3BlY3RvciA9IGZhbHNlO1xyXG4gICAgICBORG90VjEudmlzaWJsZU9uRnJhbWUgPSBmYWxzZTtcclxuICAgICAgTkRvdFYxLnRhcmdldCA9IDQ7XHJcblxyXG4gICAgICAvLyBNdWx0aXBseUJsb2NrXHJcbiAgICAgIHZhciBSaW1JTnRlbnNpdHkgPSBuZXcgQkFCWUxPTi5NdWx0aXBseUJsb2NrKFwiUmltIElOdGVuc2l0eVwiKTtcclxuICAgICAgUmltSU50ZW5zaXR5LnZpc2libGVJbkluc3BlY3RvciA9IGZhbHNlO1xyXG4gICAgICBSaW1JTnRlbnNpdHkudmlzaWJsZU9uRnJhbWUgPSBmYWxzZTtcclxuICAgICAgUmltSU50ZW5zaXR5LnRhcmdldCA9IDQ7XHJcblxyXG4gICAgICAvLyBQb3dCbG9ja1xyXG4gICAgICB2YXIgUmltRmFjdG9yID0gbmV3IEJBQllMT04uUG93QmxvY2soXCJSaW0gRmFjdG9yXCIpO1xyXG4gICAgICBSaW1GYWN0b3IudmlzaWJsZUluSW5zcGVjdG9yID0gZmFsc2U7XHJcbiAgICAgIFJpbUZhY3Rvci52aXNpYmxlT25GcmFtZSA9IGZhbHNlO1xyXG4gICAgICBSaW1GYWN0b3IudGFyZ2V0ID0gNDtcclxuXHJcbiAgICAgIC8vIElucHV0QmxvY2tcclxuICAgICAgdmFyIFJpbUludGVuc2l0eSA9IG5ldyBCQUJZTE9OLklucHV0QmxvY2soXCJSaW0gSW50ZW5zaXR5XCIpO1xyXG4gICAgICBSaW1JbnRlbnNpdHkudmlzaWJsZUluSW5zcGVjdG9yID0gZmFsc2U7XHJcbiAgICAgIFJpbUludGVuc2l0eS52aXNpYmxlT25GcmFtZSA9IGZhbHNlO1xyXG4gICAgICBSaW1JbnRlbnNpdHkudGFyZ2V0ID0gMTtcclxuICAgICAgUmltSW50ZW5zaXR5LnZhbHVlID0gMC40O1xyXG4gICAgICBSaW1JbnRlbnNpdHkubWluID0gMDtcclxuICAgICAgUmltSW50ZW5zaXR5Lm1heCA9IDA7XHJcbiAgICAgIFJpbUludGVuc2l0eS5pc0Jvb2xlYW4gPSBmYWxzZTtcclxuICAgICAgUmltSW50ZW5zaXR5Lm1hdHJpeE1vZGUgPSAwO1xyXG4gICAgICBSaW1JbnRlbnNpdHkuYW5pbWF0aW9uVHlwZSA9IEJBQllMT04uQW5pbWF0ZWRJbnB1dEJsb2NrVHlwZXMuTm9uZTtcclxuICAgICAgUmltSW50ZW5zaXR5LmlzQ29uc3RhbnQgPSBmYWxzZTtcclxuXHJcbiAgICAgIC8vIFN0ZXBCbG9ja1xyXG4gICAgICB2YXIgUXVhbnRpemVkUmltTGlnaHRJbnRlbnNpdHkgPSBuZXcgQkFCWUxPTi5TdGVwQmxvY2soXHJcbiAgICAgICAgXCJRdWFudGl6ZWQgUmltIExpZ2h0IEludGVuc2l0eVwiXHJcbiAgICAgICk7XHJcbiAgICAgIFF1YW50aXplZFJpbUxpZ2h0SW50ZW5zaXR5LnZpc2libGVJbkluc3BlY3RvciA9IGZhbHNlO1xyXG4gICAgICBRdWFudGl6ZWRSaW1MaWdodEludGVuc2l0eS52aXNpYmxlT25GcmFtZSA9IGZhbHNlO1xyXG4gICAgICBRdWFudGl6ZWRSaW1MaWdodEludGVuc2l0eS50YXJnZXQgPSA0O1xyXG5cclxuICAgICAgLy8gSW5wdXRCbG9ja1xyXG4gICAgICB2YXIgUmltQ3V0b2ZmID0gbmV3IEJBQllMT04uSW5wdXRCbG9jayhcIlJpbSBDdXRvZmZcIik7XHJcbiAgICAgIFJpbUN1dG9mZi52aXNpYmxlSW5JbnNwZWN0b3IgPSBmYWxzZTtcclxuICAgICAgUmltQ3V0b2ZmLnZpc2libGVPbkZyYW1lID0gZmFsc2U7XHJcbiAgICAgIFJpbUN1dG9mZi50YXJnZXQgPSAxO1xyXG4gICAgICBSaW1DdXRvZmYudmFsdWUgPSAwLjY7XHJcbiAgICAgIFJpbUN1dG9mZi5taW4gPSAwO1xyXG4gICAgICBSaW1DdXRvZmYubWF4ID0gMDtcclxuICAgICAgUmltQ3V0b2ZmLmlzQm9vbGVhbiA9IGZhbHNlO1xyXG4gICAgICBSaW1DdXRvZmYubWF0cml4TW9kZSA9IDA7XHJcbiAgICAgIFJpbUN1dG9mZi5hbmltYXRpb25UeXBlID0gQkFCWUxPTi5BbmltYXRlZElucHV0QmxvY2tUeXBlcy5Ob25lO1xyXG4gICAgICBSaW1DdXRvZmYuaXNDb25zdGFudCA9IGZhbHNlO1xyXG5cclxuICAgICAgLy8gU2NhbGVCbG9ja1xyXG4gICAgICB2YXIgU2NhbGUgPSBuZXcgQkFCWUxPTi5TY2FsZUJsb2NrKFwiU2NhbGVcIik7XHJcbiAgICAgIFNjYWxlLnZpc2libGVJbkluc3BlY3RvciA9IGZhbHNlO1xyXG4gICAgICBTY2FsZS52aXNpYmxlT25GcmFtZSA9IGZhbHNlO1xyXG4gICAgICBTY2FsZS50YXJnZXQgPSA0O1xyXG5cclxuICAgICAgLy8gSW5wdXRCbG9ja1xyXG4gICAgICB2YXIgUmltTGlnaHRDb2xvciA9IG5ldyBCQUJZTE9OLklucHV0QmxvY2soXCJSaW0gTGlnaHQgQ29sb3JcIik7XHJcbiAgICAgIFJpbUxpZ2h0Q29sb3IudmlzaWJsZUluSW5zcGVjdG9yID0gZmFsc2U7XHJcbiAgICAgIFJpbUxpZ2h0Q29sb3IudmlzaWJsZU9uRnJhbWUgPSBmYWxzZTtcclxuICAgICAgUmltTGlnaHRDb2xvci50YXJnZXQgPSAxO1xyXG4gICAgICBSaW1MaWdodENvbG9yLnZhbHVlID0gbmV3IEJBQllMT04uQ29sb3IzKDEsIDEsIDEpO1xyXG4gICAgICBSaW1MaWdodENvbG9yLmlzQ29uc3RhbnQgPSBmYWxzZTtcclxuXHJcbiAgICAgIC8vIEFkZEJsb2NrXHJcbiAgICAgIHZhciBBZGRSaW1TcGVjRGlmZnVzZUFtYmllbnQgPSBuZXcgQkFCWUxPTi5BZGRCbG9jayhcclxuICAgICAgICBcIkFkZCBSaW0gKyBTcGVjICsgRGlmZnVzZSArIEFtYmllbnRcIlxyXG4gICAgICApO1xyXG4gICAgICBBZGRSaW1TcGVjRGlmZnVzZUFtYmllbnQudmlzaWJsZUluSW5zcGVjdG9yID0gZmFsc2U7XHJcbiAgICAgIEFkZFJpbVNwZWNEaWZmdXNlQW1iaWVudC52aXNpYmxlT25GcmFtZSA9IGZhbHNlO1xyXG4gICAgICBBZGRSaW1TcGVjRGlmZnVzZUFtYmllbnQudGFyZ2V0ID0gNDtcclxuXHJcbiAgICAgIC8vIEFkZEJsb2NrXHJcbiAgICAgIHZhciBBZGRTcGVjdWxhckRpZmZ1c2VBbWJpZW50ID0gbmV3IEJBQllMT04uQWRkQmxvY2soXHJcbiAgICAgICAgXCJBZGQgU3BlY3VsYXIgKyBEaWZmdXNlICsgQW1iaWVudFwiXHJcbiAgICAgICk7XHJcbiAgICAgIEFkZFNwZWN1bGFyRGlmZnVzZUFtYmllbnQudmlzaWJsZUluSW5zcGVjdG9yID0gZmFsc2U7XHJcbiAgICAgIEFkZFNwZWN1bGFyRGlmZnVzZUFtYmllbnQudmlzaWJsZU9uRnJhbWUgPSBmYWxzZTtcclxuICAgICAgQWRkU3BlY3VsYXJEaWZmdXNlQW1iaWVudC50YXJnZXQgPSA0O1xyXG5cclxuICAgICAgLy8gQWRkQmxvY2tcclxuICAgICAgdmFyIEFkZEFtYmllbnR0b0RpZmZ1c2VMaWdodCA9IG5ldyBCQUJZTE9OLkFkZEJsb2NrKFxyXG4gICAgICAgIFwiQWRkIEFtYmllbnQgdG8gRGlmZnVzZSBMaWdodFwiXHJcbiAgICAgICk7XHJcbiAgICAgIEFkZEFtYmllbnR0b0RpZmZ1c2VMaWdodC52aXNpYmxlSW5JbnNwZWN0b3IgPSBmYWxzZTtcclxuICAgICAgQWRkQW1iaWVudHRvRGlmZnVzZUxpZ2h0LnZpc2libGVPbkZyYW1lID0gZmFsc2U7XHJcbiAgICAgIEFkZEFtYmllbnR0b0RpZmZ1c2VMaWdodC50YXJnZXQgPSA0O1xyXG5cclxuICAgICAgLy8gSW5wdXRCbG9ja1xyXG4gICAgICB2YXIgQW1iaWVudExpZ2h0Q29sb3IgPSBuZXcgQkFCWUxPTi5JbnB1dEJsb2NrKFwiQW1iaWVudCBMaWdodCBDb2xvclwiKTtcclxuICAgICAgQW1iaWVudExpZ2h0Q29sb3IudmlzaWJsZUluSW5zcGVjdG9yID0gZmFsc2U7XHJcbiAgICAgIEFtYmllbnRMaWdodENvbG9yLnZpc2libGVPbkZyYW1lID0gZmFsc2U7XHJcbiAgICAgIEFtYmllbnRMaWdodENvbG9yLnRhcmdldCA9IDE7XHJcbiAgICAgIEFtYmllbnRMaWdodENvbG9yLnZhbHVlID0gbmV3IEJBQllMT04uQ29sb3IzKFxyXG4gICAgICAgIDAuMTgwMzkyMTU2ODYyNzQ1MSxcclxuICAgICAgICAwLjE4MDM5MjE1Njg2Mjc0NTEsXHJcbiAgICAgICAgMC4xODAzOTIxNTY4NjI3NDUxXHJcbiAgICAgICk7XHJcbiAgICAgIEFtYmllbnRMaWdodENvbG9yLmlzQ29uc3RhbnQgPSBmYWxzZTtcclxuXHJcbiAgICAgIC8vIFNjYWxlQmxvY2tcclxuICAgICAgdmFyIERpZmZ1c2VMaWdodENhbGN1bGF0aW9uID0gbmV3IEJBQllMT04uU2NhbGVCbG9jayhcclxuICAgICAgICBcIkRpZmZ1c2UgTGlnaHQgQ2FsY3VsYXRpb25cIlxyXG4gICAgICApO1xyXG4gICAgICBEaWZmdXNlTGlnaHRDYWxjdWxhdGlvbi52aXNpYmxlSW5JbnNwZWN0b3IgPSBmYWxzZTtcclxuICAgICAgRGlmZnVzZUxpZ2h0Q2FsY3VsYXRpb24udmlzaWJsZU9uRnJhbWUgPSBmYWxzZTtcclxuICAgICAgRGlmZnVzZUxpZ2h0Q2FsY3VsYXRpb24udGFyZ2V0ID0gNDtcclxuXHJcbiAgICAgIC8vIElucHV0QmxvY2tcclxuICAgICAgdmFyIERpZmZ1c2VMaWdodENvbG9yID0gbmV3IEJBQllMT04uSW5wdXRCbG9jayhcIkRpZmZ1c2UgTGlnaHQgQ29sb3JcIik7XHJcbiAgICAgIERpZmZ1c2VMaWdodENvbG9yLnZpc2libGVJbkluc3BlY3RvciA9IGZhbHNlO1xyXG4gICAgICBEaWZmdXNlTGlnaHRDb2xvci52aXNpYmxlT25GcmFtZSA9IGZhbHNlO1xyXG4gICAgICBEaWZmdXNlTGlnaHRDb2xvci50YXJnZXQgPSAxO1xyXG4gICAgICBEaWZmdXNlTGlnaHRDb2xvci52YWx1ZSA9IG5ldyBCQUJZTE9OLkNvbG9yMyhcclxuICAgICAgICAwLjY5MDE5NjA3ODQzMTM3MjUsXHJcbiAgICAgICAgMC42OTAxOTYwNzg0MzEzNzI1LFxyXG4gICAgICAgIDAuNjkwMTk2MDc4NDMxMzcyNVxyXG4gICAgICApO1xyXG4gICAgICBEaWZmdXNlTGlnaHRDb2xvci5pc0NvbnN0YW50ID0gZmFsc2U7XHJcblxyXG4gICAgICAvLyBTdGVwQmxvY2tcclxuICAgICAgdmFyIFF1YW50aXplZERpZmZ1c2VMaWdodEludGVuc2l0eSA9IG5ldyBCQUJZTE9OLlN0ZXBCbG9jayhcclxuICAgICAgICBcIlF1YW50aXplZCBEaWZmdXNlIExpZ2h0IEludGVuc2l0eVwiXHJcbiAgICAgICk7XHJcbiAgICAgIFF1YW50aXplZERpZmZ1c2VMaWdodEludGVuc2l0eS52aXNpYmxlSW5JbnNwZWN0b3IgPSBmYWxzZTtcclxuICAgICAgUXVhbnRpemVkRGlmZnVzZUxpZ2h0SW50ZW5zaXR5LnZpc2libGVPbkZyYW1lID0gZmFsc2U7XHJcbiAgICAgIFF1YW50aXplZERpZmZ1c2VMaWdodEludGVuc2l0eS50YXJnZXQgPSA0O1xyXG5cclxuICAgICAgLy8gSW5wdXRCbG9ja1xyXG4gICAgICB2YXIgRGlmZnVzZUN1dG9mZiA9IG5ldyBCQUJZTE9OLklucHV0QmxvY2soXCJEaWZmdXNlIEN1dG9mZlwiKTtcclxuICAgICAgRGlmZnVzZUN1dG9mZi52aXNpYmxlSW5JbnNwZWN0b3IgPSBmYWxzZTtcclxuICAgICAgRGlmZnVzZUN1dG9mZi52aXNpYmxlT25GcmFtZSA9IGZhbHNlO1xyXG4gICAgICBEaWZmdXNlQ3V0b2ZmLnRhcmdldCA9IDE7XHJcbiAgICAgIERpZmZ1c2VDdXRvZmYudmFsdWUgPSAwO1xyXG4gICAgICBEaWZmdXNlQ3V0b2ZmLm1pbiA9IDA7XHJcbiAgICAgIERpZmZ1c2VDdXRvZmYubWF4ID0gMDtcclxuICAgICAgRGlmZnVzZUN1dG9mZi5pc0Jvb2xlYW4gPSBmYWxzZTtcclxuICAgICAgRGlmZnVzZUN1dG9mZi5tYXRyaXhNb2RlID0gMDtcclxuICAgICAgRGlmZnVzZUN1dG9mZi5hbmltYXRpb25UeXBlID0gQkFCWUxPTi5BbmltYXRlZElucHV0QmxvY2tUeXBlcy5Ob25lO1xyXG4gICAgICBEaWZmdXNlQ3V0b2ZmLmlzQ29uc3RhbnQgPSBmYWxzZTtcclxuXHJcbiAgICAgIC8vIE11bHRpcGx5QmxvY2tcclxuICAgICAgdmFyIFNwZWN1bGFyRmFjdG9yID0gbmV3IEJBQllMT04uTXVsdGlwbHlCbG9jayhcIlNwZWN1bGFyIEZhY3RvclwiKTtcclxuICAgICAgU3BlY3VsYXJGYWN0b3IudmlzaWJsZUluSW5zcGVjdG9yID0gZmFsc2U7XHJcbiAgICAgIFNwZWN1bGFyRmFjdG9yLnZpc2libGVPbkZyYW1lID0gZmFsc2U7XHJcbiAgICAgIFNwZWN1bGFyRmFjdG9yLnRhcmdldCA9IDQ7XHJcblxyXG4gICAgICAvLyBEb3RCbG9ja1xyXG4gICAgICB2YXIgTkRvdEggPSBuZXcgQkFCWUxPTi5Eb3RCbG9jayhcIk4gRG90IEhcIik7XHJcbiAgICAgIE5Eb3RILnZpc2libGVJbkluc3BlY3RvciA9IGZhbHNlO1xyXG4gICAgICBORG90SC52aXNpYmxlT25GcmFtZSA9IGZhbHNlO1xyXG4gICAgICBORG90SC50YXJnZXQgPSA0O1xyXG5cclxuICAgICAgLy8gTm9ybWFsaXplQmxvY2tcclxuICAgICAgdmFyIEhOb3JtYWxpemVkID0gbmV3IEJBQllMT04uTm9ybWFsaXplQmxvY2soXCJIIChOb3JtYWxpemVkKVwiKTtcclxuICAgICAgSE5vcm1hbGl6ZWQudmlzaWJsZUluSW5zcGVjdG9yID0gZmFsc2U7XHJcbiAgICAgIEhOb3JtYWxpemVkLnZpc2libGVPbkZyYW1lID0gZmFsc2U7XHJcbiAgICAgIEhOb3JtYWxpemVkLnRhcmdldCA9IDQ7XHJcblxyXG4gICAgICAvLyBQb3dCbG9ja1xyXG4gICAgICB2YXIgU3BlY3VsYXJJbnRlbnNpdHkgPSBuZXcgQkFCWUxPTi5Qb3dCbG9jayhcIlNwZWN1bGFyIEludGVuc2l0eVwiKTtcclxuICAgICAgU3BlY3VsYXJJbnRlbnNpdHkudmlzaWJsZUluSW5zcGVjdG9yID0gZmFsc2U7XHJcbiAgICAgIFNwZWN1bGFySW50ZW5zaXR5LnZpc2libGVPbkZyYW1lID0gZmFsc2U7XHJcbiAgICAgIFNwZWN1bGFySW50ZW5zaXR5LnRhcmdldCA9IDQ7XHJcblxyXG4gICAgICAvLyBNdWx0aXBseUJsb2NrXHJcbiAgICAgIHZhciBHbG9zc2luZXNzID0gbmV3IEJBQllMT04uTXVsdGlwbHlCbG9jayhcIkdsb3NzaW5lc3MgXjJcIik7XHJcbiAgICAgIEdsb3NzaW5lc3MudmlzaWJsZUluSW5zcGVjdG9yID0gZmFsc2U7XHJcbiAgICAgIEdsb3NzaW5lc3MudmlzaWJsZU9uRnJhbWUgPSBmYWxzZTtcclxuICAgICAgR2xvc3NpbmVzcy50YXJnZXQgPSA0O1xyXG5cclxuICAgICAgLy8gSW5wdXRCbG9ja1xyXG4gICAgICB2YXIgR2xvc3NpbmVzczEgPSBuZXcgQkFCWUxPTi5JbnB1dEJsb2NrKFwiR2xvc3NpbmVzc1wiKTtcclxuICAgICAgR2xvc3NpbmVzczEudmlzaWJsZUluSW5zcGVjdG9yID0gZmFsc2U7XHJcbiAgICAgIEdsb3NzaW5lc3MxLnZpc2libGVPbkZyYW1lID0gZmFsc2U7XHJcbiAgICAgIEdsb3NzaW5lc3MxLnRhcmdldCA9IDE7XHJcbiAgICAgIEdsb3NzaW5lc3MxLnZhbHVlID0gNTtcclxuICAgICAgR2xvc3NpbmVzczEubWluID0gMDtcclxuICAgICAgR2xvc3NpbmVzczEubWF4ID0gMDtcclxuICAgICAgR2xvc3NpbmVzczEuaXNCb29sZWFuID0gZmFsc2U7XHJcbiAgICAgIEdsb3NzaW5lc3MxLm1hdHJpeE1vZGUgPSAwO1xyXG4gICAgICBHbG9zc2luZXNzMS5hbmltYXRpb25UeXBlID0gQkFCWUxPTi5BbmltYXRlZElucHV0QmxvY2tUeXBlcy5Ob25lO1xyXG4gICAgICBHbG9zc2luZXNzMS5pc0NvbnN0YW50ID0gZmFsc2U7XHJcblxyXG4gICAgICAvLyBTdGVwQmxvY2tcclxuICAgICAgdmFyIFF1YW50aXplZFNwZWN1bGFySW50ZW5zaXR5ID0gbmV3IEJBQllMT04uU3RlcEJsb2NrKFxyXG4gICAgICAgIFwiUXVhbnRpemVkIFNwZWN1bGFyIEludGVuc2l0eVwiXHJcbiAgICAgICk7XHJcbiAgICAgIFF1YW50aXplZFNwZWN1bGFySW50ZW5zaXR5LnZpc2libGVJbkluc3BlY3RvciA9IGZhbHNlO1xyXG4gICAgICBRdWFudGl6ZWRTcGVjdWxhckludGVuc2l0eS52aXNpYmxlT25GcmFtZSA9IGZhbHNlO1xyXG4gICAgICBRdWFudGl6ZWRTcGVjdWxhckludGVuc2l0eS50YXJnZXQgPSA0O1xyXG5cclxuICAgICAgLy8gSW5wdXRCbG9ja1xyXG4gICAgICB2YXIgU3BlY3VsYXJDdXRvZmYgPSBuZXcgQkFCWUxPTi5JbnB1dEJsb2NrKFwiU3BlY3VsYXIgQ3V0b2ZmXCIpO1xyXG4gICAgICBTcGVjdWxhckN1dG9mZi52aXNpYmxlSW5JbnNwZWN0b3IgPSBmYWxzZTtcclxuICAgICAgU3BlY3VsYXJDdXRvZmYudmlzaWJsZU9uRnJhbWUgPSBmYWxzZTtcclxuICAgICAgU3BlY3VsYXJDdXRvZmYudGFyZ2V0ID0gMTtcclxuICAgICAgU3BlY3VsYXJDdXRvZmYudmFsdWUgPSAwLjU7XHJcbiAgICAgIFNwZWN1bGFyQ3V0b2ZmLm1pbiA9IDA7XHJcbiAgICAgIFNwZWN1bGFyQ3V0b2ZmLm1heCA9IDA7XHJcbiAgICAgIFNwZWN1bGFyQ3V0b2ZmLmlzQm9vbGVhbiA9IGZhbHNlO1xyXG4gICAgICBTcGVjdWxhckN1dG9mZi5tYXRyaXhNb2RlID0gMDtcclxuICAgICAgU3BlY3VsYXJDdXRvZmYuYW5pbWF0aW9uVHlwZSA9IEJBQllMT04uQW5pbWF0ZWRJbnB1dEJsb2NrVHlwZXMuTm9uZTtcclxuICAgICAgU3BlY3VsYXJDdXRvZmYuaXNDb25zdGFudCA9IGZhbHNlO1xyXG5cclxuICAgICAgLy8gU2NhbGVCbG9ja1xyXG4gICAgICB2YXIgQ2FsY3VsYXRlU3BlY3VsYXJMaWdodCA9IG5ldyBCQUJZTE9OLlNjYWxlQmxvY2soXHJcbiAgICAgICAgXCJDYWxjdWxhdGUgU3BlY3VsYXIgTGlnaHRcIlxyXG4gICAgICApO1xyXG4gICAgICBDYWxjdWxhdGVTcGVjdWxhckxpZ2h0LnZpc2libGVJbkluc3BlY3RvciA9IGZhbHNlO1xyXG4gICAgICBDYWxjdWxhdGVTcGVjdWxhckxpZ2h0LnZpc2libGVPbkZyYW1lID0gZmFsc2U7XHJcbiAgICAgIENhbGN1bGF0ZVNwZWN1bGFyTGlnaHQudGFyZ2V0ID0gNDtcclxuXHJcbiAgICAgIC8vIElucHV0QmxvY2tcclxuICAgICAgdmFyIENvbG9yID0gbmV3IEJBQllMT04uSW5wdXRCbG9jayhcIkNvbG9yM1wiKTtcclxuICAgICAgQ29sb3IudmlzaWJsZUluSW5zcGVjdG9yID0gZmFsc2U7XHJcbiAgICAgIENvbG9yLnZpc2libGVPbkZyYW1lID0gZmFsc2U7XHJcbiAgICAgIENvbG9yLnRhcmdldCA9IDE7XHJcbiAgICAgIENvbG9yLnZhbHVlID0gbmV3IEJBQllMT04uQ29sb3IzKDEsIDEsIDEpO1xyXG4gICAgICBDb2xvci5pc0NvbnN0YW50ID0gZmFsc2U7XHJcblxyXG4gICAgICAvLyBNdWx0aXBseUJsb2NrXHJcbiAgICAgIHZhciBNdWx0aXBseUxpZ2h0aW5nYnlDb2xvciA9IG5ldyBCQUJZTE9OLk11bHRpcGx5QmxvY2soXHJcbiAgICAgICAgXCJNdWx0aXBseSBMaWdodGluZyBieSBDb2xvclwiXHJcbiAgICAgICk7XHJcbiAgICAgIE11bHRpcGx5TGlnaHRpbmdieUNvbG9yLnZpc2libGVJbkluc3BlY3RvciA9IGZhbHNlO1xyXG4gICAgICBNdWx0aXBseUxpZ2h0aW5nYnlDb2xvci52aXNpYmxlT25GcmFtZSA9IGZhbHNlO1xyXG4gICAgICBNdWx0aXBseUxpZ2h0aW5nYnlDb2xvci50YXJnZXQgPSA0O1xyXG5cclxuICAgICAgLy8gVGV4dHVyZUJsb2NrIChURVhUVVJFKVxyXG4gICAgICB2YXIgVGV4dHVyZSA9IG5ldyBCQUJZTE9OLlRleHR1cmVCbG9jayhcIlRleHR1cmVcIik7XHJcblxyXG4gICAgICAvLyBJbnB1dEJsb2NrIChURVhUVVJFKVxyXG4gICAgICB2YXIgdXYgPSBuZXcgQkFCWUxPTi5JbnB1dEJsb2NrKFwidXZcIik7XHJcblxyXG4gICAgICAvLyBJbWFnZVNvdXJjZUJsb2NrIChURVhUVVJFKVxyXG4gICAgICB2YXIgU3VyZmFjZVRleHR1cmUgPSBuZXcgQkFCWUxPTi5JbWFnZVNvdXJjZUJsb2NrKFwiU3VyZmFjZSBUZXh0dXJlXCIpO1xyXG5cclxuICAgICAgLy8gSW5wdXRCbG9jayAoQ09MT1IpXHJcbiAgICAgIHZhciBTdXJmYWNlQ29sb3IgPSBuZXcgQkFCWUxPTi5JbnB1dEJsb2NrKFwiU3VyZmFjZSBDb2xvclwiKTtcclxuXHJcbiAgICAgIGlmIChpc1RleHR1cmUpIHtcclxuICAgICAgICAvLyBUZXh0dXJlQmxvY2sgKFRFWFRVUkUpXHJcbiAgICAgICAgVGV4dHVyZS52aXNpYmxlSW5JbnNwZWN0b3IgPSBmYWxzZTtcclxuICAgICAgICBUZXh0dXJlLnZpc2libGVPbkZyYW1lID0gZmFsc2U7XHJcbiAgICAgICAgVGV4dHVyZS50YXJnZXQgPSAzO1xyXG4gICAgICAgIFRleHR1cmUuY29udmVydFRvR2FtbWFTcGFjZSA9IGZhbHNlO1xyXG4gICAgICAgIFRleHR1cmUuY29udmVydFRvTGluZWFyU3BhY2UgPSBmYWxzZTtcclxuICAgICAgICBUZXh0dXJlLmRpc2FibGVMZXZlbE11bHRpcGxpY2F0aW9uID0gZmFsc2U7XHJcbiAgICAgICAgVGV4dHVyZS50ZXh0dXJlID0gbmV3IEJBQllMT04uVGV4dHVyZSh0ZXh0dXJlTGluaywgc2NlbmUpO1xyXG4gICAgICAgIFRleHR1cmUudGV4dHVyZS53cmFwVSA9IDE7XHJcbiAgICAgICAgVGV4dHVyZS50ZXh0dXJlLndyYXBWID0gMTtcclxuICAgICAgICBUZXh0dXJlLnRleHR1cmUudUFuZyA9IDA7XHJcbiAgICAgICAgVGV4dHVyZS50ZXh0dXJlLnZBbmcgPSAwO1xyXG4gICAgICAgIFRleHR1cmUudGV4dHVyZS53QW5nID0gMDtcclxuICAgICAgICBUZXh0dXJlLnRleHR1cmUudU9mZnNldCA9IDA7XHJcbiAgICAgICAgVGV4dHVyZS50ZXh0dXJlLnZPZmZzZXQgPSAwO1xyXG4gICAgICAgIFRleHR1cmUudGV4dHVyZS51U2NhbGUgPSAxO1xyXG4gICAgICAgIFRleHR1cmUudGV4dHVyZS52U2NhbGUgPSAxO1xyXG4gICAgICAgIFRleHR1cmUudGV4dHVyZS5jb29yZGluYXRlc01vZGUgPSA3O1xyXG5cclxuICAgICAgICAvLyBJbnB1dEJsb2NrIChURVhUVVJFKVxyXG4gICAgICAgIHV2LnZpc2libGVJbkluc3BlY3RvciA9IGZhbHNlO1xyXG4gICAgICAgIHV2LnZpc2libGVPbkZyYW1lID0gZmFsc2U7XHJcbiAgICAgICAgdXYudGFyZ2V0ID0gMTtcclxuICAgICAgICB1di5zZXRBc0F0dHJpYnV0ZShcInV2XCIpO1xyXG5cclxuICAgICAgICAvLyBJbWFnZVNvdXJjZUJsb2NrIChURVhUVVJFKVxyXG4gICAgICAgIFN1cmZhY2VUZXh0dXJlLnZpc2libGVJbkluc3BlY3RvciA9IGZhbHNlO1xyXG4gICAgICAgIFN1cmZhY2VUZXh0dXJlLnZpc2libGVPbkZyYW1lID0gZmFsc2U7XHJcbiAgICAgICAgU3VyZmFjZVRleHR1cmUudGFyZ2V0ID0gMztcclxuICAgICAgICBTdXJmYWNlVGV4dHVyZS50ZXh0dXJlID0gbmV3IEJBQllMT04uVGV4dHVyZSh0ZXh0dXJlTGluaywgc2NlbmUpO1xyXG4gICAgICAgIFN1cmZhY2VUZXh0dXJlLnRleHR1cmUud3JhcFUgPSAxO1xyXG4gICAgICAgIFN1cmZhY2VUZXh0dXJlLnRleHR1cmUud3JhcFYgPSAxO1xyXG4gICAgICAgIFN1cmZhY2VUZXh0dXJlLnRleHR1cmUudUFuZyA9IDA7XHJcbiAgICAgICAgU3VyZmFjZVRleHR1cmUudGV4dHVyZS52QW5nID0gMDtcclxuICAgICAgICBTdXJmYWNlVGV4dHVyZS50ZXh0dXJlLndBbmcgPSAwO1xyXG4gICAgICAgIFN1cmZhY2VUZXh0dXJlLnRleHR1cmUudU9mZnNldCA9IDA7XHJcbiAgICAgICAgU3VyZmFjZVRleHR1cmUudGV4dHVyZS52T2Zmc2V0ID0gMDtcclxuICAgICAgICBTdXJmYWNlVGV4dHVyZS50ZXh0dXJlLnVTY2FsZSA9IDE7XHJcbiAgICAgICAgU3VyZmFjZVRleHR1cmUudGV4dHVyZS52U2NhbGUgPSAxO1xyXG4gICAgICAgIFN1cmZhY2VUZXh0dXJlLnRleHR1cmUuY29vcmRpbmF0ZXNNb2RlID0gNztcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICAvLyBJbnB1dEJsb2NrIChDT0xPUilcclxuICAgICAgICBTdXJmYWNlQ29sb3IudmlzaWJsZUluSW5zcGVjdG9yID0gZmFsc2U7XHJcbiAgICAgICAgU3VyZmFjZUNvbG9yLnZpc2libGVPbkZyYW1lID0gZmFsc2U7XHJcbiAgICAgICAgU3VyZmFjZUNvbG9yLnRhcmdldCA9IDE7XHJcbiAgICAgICAgU3VyZmFjZUNvbG9yLnZhbHVlID0gbmV3IEJBQllMT04uQ29sb3IzKGNvbG9yLnIsIGNvbG9yLmcsIGNvbG9yLmIpO1xyXG4gICAgICAgIFN1cmZhY2VDb2xvci5pc0NvbnN0YW50ID0gZmFsc2U7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIEZyYWdtZW50T3V0cHV0QmxvY2tcclxuICAgICAgdmFyIGZyYWdtZW50T3V0cHV0ID0gbmV3IEJBQllMT04uRnJhZ21lbnRPdXRwdXRCbG9jayhcImZyYWdtZW50T3V0cHV0XCIpO1xyXG4gICAgICBmcmFnbWVudE91dHB1dC52aXNpYmxlSW5JbnNwZWN0b3IgPSBmYWxzZTtcclxuICAgICAgZnJhZ21lbnRPdXRwdXQudmlzaWJsZU9uRnJhbWUgPSBmYWxzZTtcclxuICAgICAgZnJhZ21lbnRPdXRwdXQudGFyZ2V0ID0gMjtcclxuICAgICAgZnJhZ21lbnRPdXRwdXQuY29udmVydFRvR2FtbWFTcGFjZSA9IHVuZGVmaW5lZDtcclxuICAgICAgZnJhZ21lbnRPdXRwdXQuY29udmVydFRvTGluZWFyU3BhY2UgPSB1bmRlZmluZWQ7XHJcbiAgICAgIGZyYWdtZW50T3V0cHV0LnVzZUxvZ2FyaXRobWljRGVwdGggPSBmYWxzZTtcclxuXHJcbiAgICAgIC8vIFRyYW5zZm9ybUJsb2NrXHJcbiAgICAgIHZhciB3b3JsZFBvc3ZpZXdQcm9qZWN0aW9uVHJhbnNmb3JtID0gbmV3IEJBQllMT04uVHJhbnNmb3JtQmxvY2soXHJcbiAgICAgICAgXCJ3b3JsZFBvcyAqIHZpZXdQcm9qZWN0aW9uVHJhbnNmb3JtXCJcclxuICAgICAgKTtcclxuICAgICAgd29ybGRQb3N2aWV3UHJvamVjdGlvblRyYW5zZm9ybS52aXNpYmxlSW5JbnNwZWN0b3IgPSBmYWxzZTtcclxuICAgICAgd29ybGRQb3N2aWV3UHJvamVjdGlvblRyYW5zZm9ybS52aXNpYmxlT25GcmFtZSA9IGZhbHNlO1xyXG4gICAgICB3b3JsZFBvc3ZpZXdQcm9qZWN0aW9uVHJhbnNmb3JtLnRhcmdldCA9IDE7XHJcbiAgICAgIHdvcmxkUG9zdmlld1Byb2plY3Rpb25UcmFuc2Zvcm0uY29tcGxlbWVudFogPSAwO1xyXG4gICAgICB3b3JsZFBvc3ZpZXdQcm9qZWN0aW9uVHJhbnNmb3JtLmNvbXBsZW1lbnRXID0gMTtcclxuXHJcbiAgICAgIC8vIElucHV0QmxvY2tcclxuICAgICAgdmFyIHZpZXdQcm9qZWN0aW9uID0gbmV3IEJBQllMT04uSW5wdXRCbG9jayhcInZpZXdQcm9qZWN0aW9uXCIpO1xyXG4gICAgICB2aWV3UHJvamVjdGlvbi52aXNpYmxlSW5JbnNwZWN0b3IgPSBmYWxzZTtcclxuICAgICAgdmlld1Byb2plY3Rpb24udmlzaWJsZU9uRnJhbWUgPSBmYWxzZTtcclxuICAgICAgdmlld1Byb2plY3Rpb24udGFyZ2V0ID0gMTtcclxuICAgICAgdmlld1Byb2plY3Rpb24uc2V0QXNTeXN0ZW1WYWx1ZShcclxuICAgICAgICBCQUJZTE9OLk5vZGVNYXRlcmlhbFN5c3RlbVZhbHVlcy5WaWV3UHJvamVjdGlvblxyXG4gICAgICApO1xyXG5cclxuICAgICAgLy8gVmVydGV4T3V0cHV0QmxvY2tcclxuICAgICAgdmFyIHZlcnRleE91dHB1dCA9IG5ldyBCQUJZTE9OLlZlcnRleE91dHB1dEJsb2NrKFwidmVydGV4T3V0cHV0XCIpO1xyXG4gICAgICB2ZXJ0ZXhPdXRwdXQudmlzaWJsZUluSW5zcGVjdG9yID0gZmFsc2U7XHJcbiAgICAgIHZlcnRleE91dHB1dC52aXNpYmxlT25GcmFtZSA9IGZhbHNlO1xyXG4gICAgICB2ZXJ0ZXhPdXRwdXQudGFyZ2V0ID0gMTtcclxuXHJcbiAgICAgIC8vIENvbm5lY3Rpb25zXHJcbiAgICAgIHBvc2l0aW9uLm91dHB1dC5jb25uZWN0VG8od29ybGRQb3MudmVjdG9yKTtcclxuICAgICAgd29ybGQub3V0cHV0LmNvbm5lY3RUbyh3b3JsZFBvcy50cmFuc2Zvcm0pO1xyXG4gICAgICB3b3JsZFBvcy5vdXRwdXQuY29ubmVjdFRvKHdvcmxkUG9zdmlld1Byb2plY3Rpb25UcmFuc2Zvcm0udmVjdG9yKTtcclxuICAgICAgdmlld1Byb2plY3Rpb24ub3V0cHV0LmNvbm5lY3RUbyhcclxuICAgICAgICB3b3JsZFBvc3ZpZXdQcm9qZWN0aW9uVHJhbnNmb3JtLnRyYW5zZm9ybVxyXG4gICAgICApO1xyXG4gICAgICB3b3JsZFBvc3ZpZXdQcm9qZWN0aW9uVHJhbnNmb3JtLm91dHB1dC5jb25uZWN0VG8odmVydGV4T3V0cHV0LnZlY3Rvcik7XHJcbiAgICAgIEFtYmllbnRMaWdodENvbG9yLm91dHB1dC5jb25uZWN0VG8oQWRkQW1iaWVudHRvRGlmZnVzZUxpZ2h0LmxlZnQpO1xyXG4gICAgICBEaWZmdXNlTGlnaHRDb2xvci5vdXRwdXQuY29ubmVjdFRvKERpZmZ1c2VMaWdodENhbGN1bGF0aW9uLmlucHV0KTtcclxuICAgICAgbm9ybWFsLm91dHB1dC5jb25uZWN0VG8oV29ybGRub3JtYWwudmVjdG9yKTtcclxuICAgICAgd29ybGQub3V0cHV0LmNvbm5lY3RUbyhXb3JsZG5vcm1hbC50cmFuc2Zvcm0pO1xyXG4gICAgICBXb3JsZG5vcm1hbC5vdXRwdXQuY29ubmVjdFRvKE4ueHl6dyk7XHJcbiAgICAgIE4ueHl6T3V0LmNvbm5lY3RUbyhOTm9ybWFsaXplZC5pbnB1dCk7XHJcbiAgICAgIE5Ob3JtYWxpemVkLm91dHB1dC5jb25uZWN0VG8oTkRvdExEaWZmdXNlTGlnaHRJbnRlbnNpdHkubGVmdCk7XHJcbiAgICAgIHdvcmxkUG9zLm91dHB1dC5jb25uZWN0VG8oTGlnaHRpbmZvcm1hdGlvbi53b3JsZFBvc2l0aW9uKTtcclxuICAgICAgTGlnaHRpbmZvcm1hdGlvbi5kaXJlY3Rpb24uY29ubmVjdFRvKExOb3JtYWxpemVkLmlucHV0KTtcclxuICAgICAgTE5vcm1hbGl6ZWQub3V0cHV0LmNvbm5lY3RUbyhORG90TERpZmZ1c2VMaWdodEludGVuc2l0eS5yaWdodCk7XHJcbiAgICAgIE5Eb3RMRGlmZnVzZUxpZ2h0SW50ZW5zaXR5Lm91dHB1dC5jb25uZWN0VG8oXHJcbiAgICAgICAgUXVhbnRpemVkRGlmZnVzZUxpZ2h0SW50ZW5zaXR5LnZhbHVlXHJcbiAgICAgICk7XHJcbiAgICAgIERpZmZ1c2VDdXRvZmYub3V0cHV0LmNvbm5lY3RUbyhRdWFudGl6ZWREaWZmdXNlTGlnaHRJbnRlbnNpdHkuZWRnZSk7XHJcbiAgICAgIFF1YW50aXplZERpZmZ1c2VMaWdodEludGVuc2l0eS5vdXRwdXQuY29ubmVjdFRvKFxyXG4gICAgICAgIERpZmZ1c2VMaWdodENhbGN1bGF0aW9uLmZhY3RvclxyXG4gICAgICApO1xyXG4gICAgICBEaWZmdXNlTGlnaHRDYWxjdWxhdGlvbi5vdXRwdXQuY29ubmVjdFRvKEFkZEFtYmllbnR0b0RpZmZ1c2VMaWdodC5yaWdodCk7XHJcbiAgICAgIEFkZEFtYmllbnR0b0RpZmZ1c2VMaWdodC5vdXRwdXQuY29ubmVjdFRvKEFkZFNwZWN1bGFyRGlmZnVzZUFtYmllbnQubGVmdCk7XHJcbiAgICAgIENvbG9yLm91dHB1dC5jb25uZWN0VG8oQ2FsY3VsYXRlU3BlY3VsYXJMaWdodC5pbnB1dCk7XHJcbiAgICAgIE5Ob3JtYWxpemVkLm91dHB1dC5jb25uZWN0VG8oTkRvdEgubGVmdCk7XHJcbiAgICAgIHdvcmxkUG9zLm91dHB1dC5jb25uZWN0VG8oVmlld2RpcmVjdGlvbi53b3JsZFBvc2l0aW9uKTtcclxuICAgICAgY2FtZXJhUG9zaXRpb24ub3V0cHV0LmNvbm5lY3RUbyhWaWV3ZGlyZWN0aW9uLmNhbWVyYVBvc2l0aW9uKTtcclxuICAgICAgVmlld2RpcmVjdGlvbi5vdXRwdXQuY29ubmVjdFRvKFZOb3JtYWxpemVkLmlucHV0KTtcclxuICAgICAgVk5vcm1hbGl6ZWQub3V0cHV0LmNvbm5lY3RUbyhILmxlZnQpO1xyXG4gICAgICBMTm9ybWFsaXplZC5vdXRwdXQuY29ubmVjdFRvKEgucmlnaHQpO1xyXG4gICAgICBILm91dHB1dC5jb25uZWN0VG8oSE5vcm1hbGl6ZWQuaW5wdXQpO1xyXG4gICAgICBITm9ybWFsaXplZC5vdXRwdXQuY29ubmVjdFRvKE5Eb3RILnJpZ2h0KTtcclxuICAgICAgTkRvdEgub3V0cHV0LmNvbm5lY3RUbyhTcGVjdWxhckZhY3Rvci5sZWZ0KTtcclxuICAgICAgUXVhbnRpemVkRGlmZnVzZUxpZ2h0SW50ZW5zaXR5Lm91dHB1dC5jb25uZWN0VG8oU3BlY3VsYXJGYWN0b3IucmlnaHQpO1xyXG4gICAgICBTcGVjdWxhckZhY3Rvci5vdXRwdXQuY29ubmVjdFRvKFNwZWN1bGFySW50ZW5zaXR5LnZhbHVlKTtcclxuICAgICAgR2xvc3NpbmVzczEub3V0cHV0LmNvbm5lY3RUbyhHbG9zc2luZXNzLmxlZnQpO1xyXG4gICAgICBHbG9zc2luZXNzMS5vdXRwdXQuY29ubmVjdFRvKEdsb3NzaW5lc3MucmlnaHQpO1xyXG4gICAgICBHbG9zc2luZXNzLm91dHB1dC5jb25uZWN0VG8oU3BlY3VsYXJJbnRlbnNpdHkucG93ZXIpO1xyXG4gICAgICBTcGVjdWxhckludGVuc2l0eS5vdXRwdXQuY29ubmVjdFRvKFF1YW50aXplZFNwZWN1bGFySW50ZW5zaXR5LnZhbHVlKTtcclxuICAgICAgU3BlY3VsYXJDdXRvZmYub3V0cHV0LmNvbm5lY3RUbyhRdWFudGl6ZWRTcGVjdWxhckludGVuc2l0eS5lZGdlKTtcclxuICAgICAgUXVhbnRpemVkU3BlY3VsYXJJbnRlbnNpdHkub3V0cHV0LmNvbm5lY3RUbyhcclxuICAgICAgICBDYWxjdWxhdGVTcGVjdWxhckxpZ2h0LmZhY3RvclxyXG4gICAgICApO1xyXG4gICAgICBDYWxjdWxhdGVTcGVjdWxhckxpZ2h0Lm91dHB1dC5jb25uZWN0VG8oQWRkU3BlY3VsYXJEaWZmdXNlQW1iaWVudC5yaWdodCk7XHJcbiAgICAgIEFkZFNwZWN1bGFyRGlmZnVzZUFtYmllbnQub3V0cHV0LmNvbm5lY3RUbyhBZGRSaW1TcGVjRGlmZnVzZUFtYmllbnQubGVmdCk7XHJcbiAgICAgIFJpbUxpZ2h0Q29sb3Iub3V0cHV0LmNvbm5lY3RUbyhTY2FsZS5pbnB1dCk7XHJcbiAgICAgIE5Ob3JtYWxpemVkLm91dHB1dC5jb25uZWN0VG8oTkRvdFYubGVmdCk7XHJcbiAgICAgIFZOb3JtYWxpemVkLm91dHB1dC5jb25uZWN0VG8oTkRvdFYucmlnaHQpO1xyXG4gICAgICBORG90Vi5vdXRwdXQuY29ubmVjdFRvKE5Eb3RWMS5pbnB1dCk7XHJcbiAgICAgIE5Eb3RWMS5vdXRwdXQuY29ubmVjdFRvKFJpbUlOdGVuc2l0eS5sZWZ0KTtcclxuICAgICAgTkRvdExEaWZmdXNlTGlnaHRJbnRlbnNpdHkub3V0cHV0LmNvbm5lY3RUbyhSaW1GYWN0b3IudmFsdWUpO1xyXG4gICAgICBSaW1JbnRlbnNpdHkub3V0cHV0LmNvbm5lY3RUbyhSaW1GYWN0b3IucG93ZXIpO1xyXG4gICAgICBSaW1GYWN0b3Iub3V0cHV0LmNvbm5lY3RUbyhSaW1JTnRlbnNpdHkucmlnaHQpO1xyXG4gICAgICBSaW1JTnRlbnNpdHkub3V0cHV0LmNvbm5lY3RUbyhRdWFudGl6ZWRSaW1MaWdodEludGVuc2l0eS52YWx1ZSk7XHJcbiAgICAgIFJpbUN1dG9mZi5vdXRwdXQuY29ubmVjdFRvKFF1YW50aXplZFJpbUxpZ2h0SW50ZW5zaXR5LmVkZ2UpO1xyXG4gICAgICBRdWFudGl6ZWRSaW1MaWdodEludGVuc2l0eS5vdXRwdXQuY29ubmVjdFRvKFNjYWxlLmZhY3Rvcik7XHJcbiAgICAgIFNjYWxlLm91dHB1dC5jb25uZWN0VG8oQWRkUmltU3BlY0RpZmZ1c2VBbWJpZW50LnJpZ2h0KTtcclxuICAgICAgQWRkUmltU3BlY0RpZmZ1c2VBbWJpZW50Lm91dHB1dC5jb25uZWN0VG8oTXVsdGlwbHlMaWdodGluZ2J5Q29sb3IubGVmdCk7XHJcblxyXG4gICAgICBpZiAoaXNUZXh0dXJlKSB7XHJcbiAgICAgICAgLy8gVEVYVFVSRVxyXG4gICAgICAgIHV2Lm91dHB1dC5jb25uZWN0VG8oVGV4dHVyZS51dik7XHJcbiAgICAgICAgU3VyZmFjZVRleHR1cmUuc291cmNlLmNvbm5lY3RUbyhUZXh0dXJlLnNvdXJjZSk7XHJcbiAgICAgICAgVGV4dHVyZS5yZ2IuY29ubmVjdFRvKE11bHRpcGx5TGlnaHRpbmdieUNvbG9yLnJpZ2h0KTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICAvLyBDT0xPUlxyXG4gICAgICAgIFN1cmZhY2VDb2xvci5vdXRwdXQuY29ubmVjdFRvKE11bHRpcGx5TGlnaHRpbmdieUNvbG9yLnJpZ2h0KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgTXVsdGlwbHlMaWdodGluZ2J5Q29sb3Iub3V0cHV0LmNvbm5lY3RUbyhmcmFnbWVudE91dHB1dC5yZ2IpO1xyXG5cclxuICAgICAgLy8gT3V0cHV0IG5vZGVzXHJcbiAgICAgIG5vZGVNYXRlcmlhbC5hZGRPdXRwdXROb2RlKHZlcnRleE91dHB1dCk7XHJcbiAgICAgIG5vZGVNYXRlcmlhbC5hZGRPdXRwdXROb2RlKGZyYWdtZW50T3V0cHV0KTtcclxuICAgICAgbm9kZU1hdGVyaWFsLmJ1aWxkKCk7XHJcblxyXG4gICAgICByZXR1cm4gbm9kZU1hdGVyaWFsO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iLCIvKlxyXG4gICAgQXV0by1nZW5lcmF0ZWRcclxuKi9cclxubW9kdWxlIFBST0pFQ1Qge1xyXG4gICAgZXhwb3J0IGNsYXNzIEFkdmFuY2VkVGV4dHVyZVVpIHtcclxuXHRcdHByaXZhdGUgYWR2YW5jZWRUZXh0dXJlIDogQkFCWUxPTi5HVUkuQWR2YW5jZWREeW5hbWljVGV4dHVyZTtcclxuXHRcdHByaXZhdGUgR0VKZUVKSWJHRUFHRUZEZWFESmJiRkNjSElIRkhhQ2QgOiBCQUJZTE9OLkdVSS5Db250YWluZXI7XHJcblx0XHRwcml2YXRlIGZDSENiZWFjYUJkREVJRmZiY0ZJSURlQUVkRUVHSGNmIDogQkFCWUxPTi5HVUkuQnV0dG9uO1xyXG5cdFx0cHJpdmF0ZSBGR0hIYURkRUlJQ2JFY0ZJSWVFQWVhSEJmREpDY0ZCZCA6IEJBQllMT04uR1VJLkJ1dHRvbjtcclxuXHRcdHByaXZhdGUgQ2ZiZWZhSkNBQmFCRUZCQ0pBYmJFQUhFQkNGQ2FCQUMgOiBCQUJZTE9OLkdVSS5CdXR0b247XHJcblx0XHRwcml2YXRlIEJmY0hkRUZjQ0lEYkVDY2JhYUhBZkpEQkFKRWVlZkRKIDogQkFCWUxPTi5HVUkuQnV0dG9uO1xyXG5cdFx0cHJpdmF0ZSBhQ0VmRkpKZGRHYklFRWRCYUFiY0ZER0RIQ0JiZGJmRiA6IEJBQllMT04uR1VJLkJ1dHRvbjtcclxuXHRcdHByaXZhdGUgY0pESklkQ2JDRmRiRWRiZmJhRmJGQ0FEYmRhYWFiQ0kgOiBCQUJZTE9OLkdVSS5CdXR0b247XHJcblx0XHRwcml2YXRlIEhCQUVFZUlHYUplYUVESUFJQUplRUpjREpKRmJiYUNEIDogQkFCWUxPTi5HVUkuQnV0dG9uO1xyXG5cdFx0cHJpdmF0ZSBiQ0RBZEpBRklJQWRFSUVHSWFmZUhKZUlmSGFmY0RIYiA6IEJBQllMT04uR1VJLkJ1dHRvbjtcclxuXHRcdHByaXZhdGUgSWNFR0RkSWNhREFCRUJhY0lBYWNJZEJGR2NCZUJDY0EgOiBCQUJZTE9OLkdVSS5CdXR0b247XHJcblx0XHRwcml2YXRlIElGZmZmR2FHY0pISkVDR0NhSEJlYmFISmVCZkJERUdCIDogQkFCWUxPTi5HVUkuQ29udGFpbmVyO1xyXG5cdFx0cHJpdmF0ZSBDQWNlQklEQ0lIZGVFREZlYkdKZUNCSGFiREJKSklBQiA6IEJBQllMT04uR1VJLkJ1dHRvbjtcclxuXHRcdHByaXZhdGUgSkdlRUlFQ0JBZUViRUdIQmJEQ0FCQkpjQkFlQmVhZmUgOiBCQUJZTE9OLkdVSS5CdXR0b247XHJcblx0XHRwcml2YXRlIGJBYUZKZmRCYUJEYUVJQkNJQ0NGZERiSUJDSUZlQUhEIDogQkFCWUxPTi5HVUkuQnV0dG9uO1xyXG5cdFx0cHJpdmF0ZSBIRUJkYWJiSkplRUZFRWFBYkhKQ2NKZGJIRGZGZmNiRyA6IEJBQllMT04uR1VJLkJ1dHRvbjtcclxuXHRcdHByaXZhdGUgY0dESkFhY0JBZmRKRWNKYklCZEhkZUZEYUFlYWRlSUYgOiBCQUJZTE9OLkdVSS5CdXR0b247XHJcblx0XHRwcml2YXRlIGFHQ0piSmZJR0VmY0VEQmZiQUViQUlBQ0RKSmRjQmFkIDogQkFCWUxPTi5HVUkuQnV0dG9uO1xyXG5cdFx0cHJpdmF0ZSBhYklBSkdISmNHQ2FFREZJYmNkSGNiSENjR0pKZUphRiA6IEJBQllMT04uR1VJLkJ1dHRvbjtcclxuXHRcdHByaXZhdGUgSEZDYkNFZGVhR0JJRUJKRmJmZWRCZENEYmFlZWNDZEkgOiBCQUJZTE9OLkdVSS5CdXR0b247XHJcblxyXG5cdFx0Y29uc3RydWN0b3IoKSB7XHJcblx0XHRcdHRoaXMuYWR2YW5jZWRUZXh0dXJlID0gQkFCWUxPTi5HVUkuQWR2YW5jZWREeW5hbWljVGV4dHVyZS5DcmVhdGVGdWxsc2NyZWVuVUkoXCJhZHZhbmNlZFRleHR1cmVcIik7XHJcblx0XHRcdHRoaXMuR0VKZUVKSWJHRUFHRUZEZWFESmJiRkNjSElIRkhhQ2QgPSBuZXcgQkFCWUxPTi5HVUkuQ29udGFpbmVyKFwiQnV0dG9uXCIpO1xyXG5cdFx0XHR0aGlzLmZDSENiZWFjYUJkREVJRmZiY0ZJSURlQUVkRUVHSGNmID0gQkFCWUxPTi5HVUkuQnV0dG9uLkNyZWF0ZVNpbXBsZUJ1dHRvbihcIkJhYnlsb25CdXR0b25cIiwgXCJCdXR0b25cIik7XHJcblx0XHRcdHRoaXMuRkdISGFEZEVJSUNiRWNGSUllRUFlYUhCZkRKQ2NGQmQgPSBCQUJZTE9OLkdVSS5CdXR0b24uQ3JlYXRlU2ltcGxlQnV0dG9uKFwiQmFieWxvbkJ1dHRvbiAoNClcIiwgXCJCdXR0b25cIik7XHJcblx0XHRcdHRoaXMuQ2ZiZWZhSkNBQmFCRUZCQ0pBYmJFQUhFQkNGQ2FCQUMgPSBCQUJZTE9OLkdVSS5CdXR0b24uQ3JlYXRlU2ltcGxlQnV0dG9uKFwiQmFieWxvbkJ1dHRvblwiLCBcIkJ1dHRvblwiKTtcclxuXHRcdFx0dGhpcy5CZmNIZEVGY0NJRGJFQ2NiYWFIQWZKREJBSkVlZWZESiA9IEJBQllMT04uR1VJLkJ1dHRvbi5DcmVhdGVTaW1wbGVCdXR0b24oXCJCYWJ5bG9uQnV0dG9uXCIsIFwiQnV0dG9uXCIpO1xyXG5cdFx0XHR0aGlzLmFDRWZGSkpkZEdiSUVFZEJhQWJjRkRHREhDQmJkYmZGID0gQkFCWUxPTi5HVUkuQnV0dG9uLkNyZWF0ZVNpbXBsZUJ1dHRvbihcIkJhYnlsb25CdXR0b24gKDMpXCIsIFwiQnV0dG9uXCIpO1xyXG5cdFx0XHR0aGlzLmNKREpJZENiQ0ZkYkVkYmZiYUZiRkNBRGJkYWFhYkNJID0gQkFCWUxPTi5HVUkuQnV0dG9uLkNyZWF0ZVNpbXBsZUJ1dHRvbihcIkJhYnlsb25CdXR0b25cIiwgXCJCdXR0b25cIik7XHJcblx0XHRcdHRoaXMuSEJBRUVlSUdhSmVhRURJQUlBSmVFSmNESkpGYmJhQ0QgPSBCQUJZTE9OLkdVSS5CdXR0b24uQ3JlYXRlU2ltcGxlQnV0dG9uKFwiQmFieWxvbkJ1dHRvblwiLCBcIkJ1dHRvblwiKTtcclxuXHRcdFx0dGhpcy5iQ0RBZEpBRklJQWRFSUVHSWFmZUhKZUlmSGFmY0RIYiA9IEJBQllMT04uR1VJLkJ1dHRvbi5DcmVhdGVTaW1wbGVCdXR0b24oXCJCYWJ5bG9uQnV0dG9uICg1KVwiLCBcIkJ1dHRvblwiKTtcclxuXHRcdFx0dGhpcy5JY0VHRGRJY2FEQUJFQmFjSUFhY0lkQkZHY0JlQkNjQSA9IEJBQllMT04uR1VJLkJ1dHRvbi5DcmVhdGVTaW1wbGVCdXR0b24oXCJCYWJ5bG9uQnV0dG9uICgxKVwiLCBcIkJ1dHRvblwiKTtcclxuXHRcdFx0dGhpcy5JRmZmZkdhR2NKSEpFQ0dDYUhCZWJhSEplQmZCREVHQiA9IG5ldyBCQUJZTE9OLkdVSS5Db250YWluZXIoXCJCYWJ5bG9uQ29udGFpbmVyICgzKVwiKTtcclxuXHRcdFx0dGhpcy5DQWNlQklEQ0lIZGVFREZlYkdKZUNCSGFiREJKSklBQiA9IEJBQllMT04uR1VJLkJ1dHRvbi5DcmVhdGVTaW1wbGVCdXR0b24oXCJCYWJ5bG9uQnV0dG9uXCIsIFwiQnV0dG9uXCIpO1xyXG5cdFx0XHR0aGlzLkpHZUVJRUNCQWVFYkVHSEJiRENBQkJKY0JBZUJlYWZlID0gQkFCWUxPTi5HVUkuQnV0dG9uLkNyZWF0ZUltYWdlQnV0dG9uKFwiQmFieWxvbkJ1dHRvbiAoMilcIixcIlBsYXkgIVwiLCBcImh0dHBzOi8vaS5pbWd1ci5jb20vUGlESGNLWC5qcGVnXCIpO1xyXG5cdFx0XHR0aGlzLmJBYUZKZmRCYUJEYUVJQkNJQ0NGZERiSUJDSUZlQUhEID0gQkFCWUxPTi5HVUkuQnV0dG9uLkNyZWF0ZUltYWdlV2l0aENlbnRlclRleHRCdXR0b24oXCJCYWJ5bG9uQnV0dG9uXCIsXCJCdXR0b25cIiwgXCJodHRwczovL2kuaW1ndXIuY29tL1BpREhjS1guanBlZ1wiKTtcclxuXHRcdFx0dGhpcy5IRUJkYWJiSkplRUZFRWFBYkhKQ2NKZGJIRGZGZmNiRyA9IEJBQllMT04uR1VJLkJ1dHRvbi5DcmVhdGVTaW1wbGVCdXR0b24oXCJCYWJ5bG9uQnV0dG9uICgyKVwiLCBcIkNyZWRpdFwiKTtcclxuXHRcdFx0dGhpcy5jR0RKQWFjQkFmZEpFY0piSUJkSGRlRkRhQWVhZGVJRiA9IEJBQllMT04uR1VJLkJ1dHRvbi5DcmVhdGVTaW1wbGVCdXR0b24oXCJCYWJ5bG9uQnV0dG9uICgxKVwiLCBcIk1hbnVlbFwiKTtcclxuXHRcdFx0dGhpcy5hR0NKYkpmSUdFZmNFREJmYkFFYkFJQUNESkpkY0JhZCA9IEJBQllMT04uR1VJLkJ1dHRvbi5DcmVhdGVTaW1wbGVCdXR0b24oXCJCYWJ5bG9uQnV0dG9uXCIsIFwiQ2hhbmdlbG9nXCIpO1xyXG5cdFx0XHR0aGlzLmFiSUFKR0hKY0dDYUVERkliY2RIY2JIQ2NHSkplSmFGID0gQkFCWUxPTi5HVUkuQnV0dG9uLkNyZWF0ZVNpbXBsZUJ1dHRvbihcIkJhYnlsb25CdXR0b24gKDMpXCIsIFwiUXVpdHRlclwiKTtcclxuXHRcdFx0dGhpcy5IRkNiQ0VkZWFHQklFQkpGYmZlZEJkQ0RiYWVlY0NkSSA9IEJBQllMT04uR1VJLkJ1dHRvbi5DcmVhdGVTaW1wbGVCdXR0b24oXCJCYWJ5bG9uQnV0dG9uICg0KVwiLCBcIkpvdWVyXCIpO1xyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBjcmVhdGUoKTogdm9pZCB7XHJcblx0XHRcdHRoaXMuYWR2YW5jZWRUZXh0dXJlLmlkZWFsV2lkdGggPSAxOTIwO1xyXG5cclxuXHRcdFx0dGhpcy5HRUplRUpJYkdFQUdFRkRlYURKYmJGQ2NISUhGSGFDZC5pc1Zpc2libGUgPSB0cnVlO1xyXG5cdFx0XHR0aGlzLkdFSmVFSkliR0VBR0VGRGVhREpiYkZDY0hJSEZIYUNkLndpZHRoID0gXCIxMDAlXCI7XHJcblx0XHRcdHRoaXMuR0VKZUVKSWJHRUFHRUZEZWFESmJiRkNjSElIRkhhQ2QuaGVpZ2h0ID0gXCIxMDAlXCI7XHJcblx0XHRcdHRoaXMuR0VKZUVKSWJHRUFHRUZEZWFESmJiRkNjSElIRkhhQ2QudG9wID0gXCIwJVwiO1xyXG5cdFx0XHR0aGlzLkdFSmVFSkliR0VBR0VGRGVhREpiYkZDY0hJSEZIYUNkLnZlcnRpY2FsQWxpZ25tZW50ID0gQkFCWUxPTi5HVUkuQ29udHJvbC5WRVJUSUNBTF9BTElHTk1FTlRfQ0VOVEVSO1xyXG5cdFx0XHR0aGlzLkdFSmVFSkliR0VBR0VGRGVhREpiYkZDY0hJSEZIYUNkLmxlZnQgPSBcIjAlXCI7XHJcblx0XHRcdHRoaXMuR0VKZUVKSWJHRUFHRUZEZWFESmJiRkNjSElIRkhhQ2QuaG9yaXpvbnRhbEFsaWdubWVudCA9IEJBQllMT04uR1VJLkNvbnRyb2wuSE9SSVpPTlRBTF9BTElHTk1FTlRfQ0VOVEVSO1xyXG5cdFx0XHR0aGlzLkdFSmVFSkliR0VBR0VGRGVhREpiYkZDY0hJSEZIYUNkLnJvdGF0aW9uID0gMDtcclxuXHRcdFx0dGhpcy5HRUplRUpJYkdFQUdFRkRlYURKYmJGQ2NISUhGSGFDZC5zY2FsZVggPSAxO1xyXG5cdFx0XHR0aGlzLkdFSmVFSkliR0VBR0VGRGVhREpiYkZDY0hJSEZIYUNkLnNjYWxlWSA9IDE7XHJcblx0XHRcdHRoaXMuR0VKZUVKSWJHRUFHRUZEZWFESmJiRkNjSElIRkhhQ2QuaXNGb2N1c0ludmlzaWJsZSA9IGZhbHNlO1xyXG5cdFx0XHR0aGlzLkdFSmVFSkliR0VBR0VGRGVhREpiYkZDY0hJSEZIYUNkLmFscGhhID0gMTtcclxuXHRcdFx0dGhpcy5HRUplRUpJYkdFQUdFRkRlYURKYmJGQ2NISUhGSGFDZC5jb2xvciA9IFwiI0ZGRkZGRlwiO1xyXG5cdFx0XHR0aGlzLkdFSmVFSkliR0VBR0VGRGVhREpiYkZDY0hJSEZIYUNkLmRpc2FibGVkQ29sb3IgPSBcIiNGRkZGRkZcIjtcclxuXHRcdFx0dGhpcy5HRUplRUpJYkdFQUdFRkRlYURKYmJGQ2NISUhGSGFDZC5kaXNhYmxlZENvbG9ySXRlbSA9IFwiI0ZGRkZGRlwiO1xyXG5cdFx0XHR0aGlzLkdFSmVFSkliR0VBR0VGRGVhREpiYkZDY0hJSEZIYUNkLmhpZ2hsaWdodENvbG9yID0gXCIjRkZGRkZGXCI7XHJcblx0XHRcdHRoaXMuR0VKZUVKSWJHRUFHRUZEZWFESmJiRkNjSElIRkhhQ2QuaGlnaGxpZ2h0TGluZVdpZHRoID0gMDtcclxuXHRcdFx0dGhpcy5HRUplRUpJYkdFQUdFRkRlYURKYmJGQ2NISUhGSGFDZC5pc0hpZ2hsaWdodGVkID0gZmFsc2U7XHJcblx0XHRcdHRoaXMuR0VKZUVKSWJHRUFHRUZEZWFESmJiRkNjSElIRkhhQ2QubGlua09mZnNldFggPSAwO1xyXG5cdFx0XHR0aGlzLkdFSmVFSkliR0VBR0VGRGVhREpiYkZDY0hJSEZIYUNkLmxpbmtPZmZzZXRZID0gMDtcclxuXHRcdFx0dGhpcy5HRUplRUpJYkdFQUdFRkRlYURKYmJGQ2NISUhGSGFDZC5wYWRkaW5nQm90dG9tID0gMDtcclxuXHRcdFx0dGhpcy5HRUplRUpJYkdFQUdFRkRlYURKYmJGQ2NISUhGSGFDZC5wYWRkaW5nTGVmdCA9IDA7XHJcblx0XHRcdHRoaXMuR0VKZUVKSWJHRUFHRUZEZWFESmJiRkNjSElIRkhhQ2QucGFkZGluZ1JpZ2h0ID0gMDtcclxuXHRcdFx0dGhpcy5HRUplRUpJYkdFQUdFRkRlYURKYmJGQ2NISUhGSGFDZC5wYWRkaW5nVG9wID0gMDtcclxuXHRcdFx0dGhpcy5HRUplRUpJYkdFQUdFRkRlYURKYmJGQ2NISUhGSGFDZC56SW5kZXggPSAwO1xyXG5cdFx0XHR0aGlzLkdFSmVFSkliR0VBR0VGRGVhREpiYkZDY0hJSEZIYUNkLnNoYWRvd0JsdXIgPSAwO1xyXG5cdFx0XHR0aGlzLkdFSmVFSkliR0VBR0VGRGVhREpiYkZDY0hJSEZIYUNkLnNoYWRvd0NvbG9yID0gXCIjRkZGRkZGXCI7XHJcblx0XHRcdHRoaXMuR0VKZUVKSWJHRUFHRUZEZWFESmJiRkNjSElIRkhhQ2Quc2hhZG93T2Zmc2V0WCA9IDA7XHJcblx0XHRcdHRoaXMuR0VKZUVKSWJHRUFHRUZEZWFESmJiRkNjSElIRkhhQ2Quc2hhZG93T2Zmc2V0WSA9IDA7XHJcblx0XHRcdHRoaXMuR0VKZUVKSWJHRUFHRUZEZWFESmJiRkNjSElIRkhhQ2QuaG92ZXJDdXJzb3IgPSBcImF1dG9cIjtcclxuXHRcdFx0dGhpcy5HRUplRUpJYkdFQUdFRkRlYURKYmJGQ2NISUhGSGFDZC5hZGFwdFdpZHRoVG9DaGlsZHJlbiA9IGZhbHNlO1xyXG5cdFx0XHR0aGlzLkdFSmVFSkliR0VBR0VGRGVhREpiYkZDY0hJSEZIYUNkLmFkYXB0SGVpZ2h0VG9DaGlsZHJlbiA9IGZhbHNlO1xyXG5cdFx0XHR0aGlzLkdFSmVFSkliR0VBR0VGRGVhREpiYkZDY0hJSEZIYUNkLmJhY2tncm91bmQgPSBcIiMxOTE5MTlcIjtcclxuXHRcdFx0dGhpcy5HRUplRUpJYkdFQUdFRkRlYURKYmJGQ2NISUhGSGFDZC5hbHBoYSA9IDE7XHJcblx0XHRcdHRoaXMuYWR2YW5jZWRUZXh0dXJlLmFkZENvbnRyb2wodGhpcy5HRUplRUpJYkdFQUdFRkRlYURKYmJGQ2NISUhGSGFDZCk7XHJcblxyXG5cdFx0XHR0aGlzLmZDSENiZWFjYUJkREVJRmZiY0ZJSURlQUVkRUVHSGNmLmlzVmlzaWJsZSA9IHRydWU7XHJcblx0XHRcdHRoaXMuZkNIQ2JlYWNhQmRERUlGZmJjRklJRGVBRWRFRUdIY2Yud2lkdGggPSBcIjguMzMlXCI7XHJcblx0XHRcdHRoaXMuZkNIQ2JlYWNhQmRERUlGZmJjRklJRGVBRWRFRUdIY2YuaGVpZ2h0ID0gXCIyLjc4JVwiO1xyXG5cdFx0XHR0aGlzLmZDSENiZWFjYUJkREVJRmZiY0ZJSURlQUVkRUVHSGNmLnRvcCA9IFwiMzcuNSVcIjtcclxuXHRcdFx0dGhpcy5mQ0hDYmVhY2FCZERFSUZmYmNGSUlEZUFFZEVFR0hjZi52ZXJ0aWNhbEFsaWdubWVudCA9IEJBQllMT04uR1VJLkNvbnRyb2wuVkVSVElDQUxfQUxJR05NRU5UX0NFTlRFUjtcclxuXHRcdFx0dGhpcy5mQ0hDYmVhY2FCZERFSUZmYmNGSUlEZUFFZEVFR0hjZi5sZWZ0ID0gXCItMzcuNSVcIjtcclxuXHRcdFx0dGhpcy5mQ0hDYmVhY2FCZERFSUZmYmNGSUlEZUFFZEVFR0hjZi5ob3Jpem9udGFsQWxpZ25tZW50ID0gQkFCWUxPTi5HVUkuQ29udHJvbC5IT1JJWk9OVEFMX0FMSUdOTUVOVF9DRU5URVI7XHJcblx0XHRcdHRoaXMuZkNIQ2JlYWNhQmRERUlGZmJjRklJRGVBRWRFRUdIY2Yucm90YXRpb24gPSAwO1xyXG5cdFx0XHR0aGlzLmZDSENiZWFjYUJkREVJRmZiY0ZJSURlQUVkRUVHSGNmLnNjYWxlWCA9IDE7XHJcblx0XHRcdHRoaXMuZkNIQ2JlYWNhQmRERUlGZmJjRklJRGVBRWRFRUdIY2Yuc2NhbGVZID0gMTtcclxuXHRcdFx0dGhpcy5mQ0hDYmVhY2FCZERFSUZmYmNGSUlEZUFFZEVFR0hjZi5pc0ZvY3VzSW52aXNpYmxlID0gZmFsc2U7XHJcblx0XHRcdHRoaXMuZkNIQ2JlYWNhQmRERUlGZmJjRklJRGVBRWRFRUdIY2YuYWxwaGEgPSAuMjU7XHJcblx0XHRcdHRoaXMuZkNIQ2JlYWNhQmRERUlGZmJjRklJRGVBRWRFRUdIY2YuY29sb3IgPSBcIiMzMjMyMzJcIjtcclxuXHRcdFx0dGhpcy5mQ0hDYmVhY2FCZERFSUZmYmNGSUlEZUFFZEVFR0hjZi5kaXNhYmxlZENvbG9yID0gXCIjRkZGRkZGXCI7XHJcblx0XHRcdHRoaXMuZkNIQ2JlYWNhQmRERUlGZmJjRklJRGVBRWRFRUdIY2YuZGlzYWJsZWRDb2xvckl0ZW0gPSBcIiNGRkZGRkZcIjtcclxuXHRcdFx0dGhpcy5mQ0hDYmVhY2FCZERFSUZmYmNGSUlEZUFFZEVFR0hjZi5oaWdobGlnaHRDb2xvciA9IFwiI0Y1RjVGNVwiO1xyXG5cdFx0XHR0aGlzLmZDSENiZWFjYUJkREVJRmZiY0ZJSURlQUVkRUVHSGNmLmhpZ2hsaWdodExpbmVXaWR0aCA9IDA7XHJcblx0XHRcdHRoaXMuZkNIQ2JlYWNhQmRERUlGZmJjRklJRGVBRWRFRUdIY2YuaXNIaWdobGlnaHRlZCA9IGZhbHNlO1xyXG5cdFx0XHR0aGlzLmZDSENiZWFjYUJkREVJRmZiY0ZJSURlQUVkRUVHSGNmLmxpbmtPZmZzZXRYID0gMDtcclxuXHRcdFx0dGhpcy5mQ0hDYmVhY2FCZERFSUZmYmNGSUlEZUFFZEVFR0hjZi5saW5rT2Zmc2V0WSA9IDA7XHJcblx0XHRcdHRoaXMuZkNIQ2JlYWNhQmRERUlGZmJjRklJRGVBRWRFRUdIY2YucGFkZGluZ0JvdHRvbSA9IDA7XHJcblx0XHRcdHRoaXMuZkNIQ2JlYWNhQmRERUlGZmJjRklJRGVBRWRFRUdIY2YucGFkZGluZ0xlZnQgPSAwO1xyXG5cdFx0XHR0aGlzLmZDSENiZWFjYUJkREVJRmZiY0ZJSURlQUVkRUVHSGNmLnBhZGRpbmdSaWdodCA9IDA7XHJcblx0XHRcdHRoaXMuZkNIQ2JlYWNhQmRERUlGZmJjRklJRGVBRWRFRUdIY2YucGFkZGluZ1RvcCA9IDA7XHJcblx0XHRcdHRoaXMuZkNIQ2JlYWNhQmRERUlGZmJjRklJRGVBRWRFRUdIY2YuekluZGV4ID0gMTE7XHJcblx0XHRcdHRoaXMuZkNIQ2JlYWNhQmRERUlGZmJjRklJRGVBRWRFRUdIY2Yuc2hhZG93Qmx1ciA9IDA7XHJcblx0XHRcdHRoaXMuZkNIQ2JlYWNhQmRERUlGZmJjRklJRGVBRWRFRUdIY2Yuc2hhZG93Q29sb3IgPSBcIiNGRkZGRkZcIjtcclxuXHRcdFx0dGhpcy5mQ0hDYmVhY2FCZERFSUZmYmNGSUlEZUFFZEVFR0hjZi5zaGFkb3dPZmZzZXRYID0gMDtcclxuXHRcdFx0dGhpcy5mQ0hDYmVhY2FCZERFSUZmYmNGSUlEZUFFZEVFR0hjZi5zaGFkb3dPZmZzZXRZID0gMDtcclxuXHRcdFx0dGhpcy5mQ0hDYmVhY2FCZERFSUZmYmNGSUlEZUFFZEVFR0hjZi5ob3ZlckN1cnNvciA9IFwiYXV0b1wiO1xyXG5cdFx0XHR0aGlzLmZDSENiZWFjYUJkREVJRmZiY0ZJSURlQUVkRUVHSGNmLmFkYXB0V2lkdGhUb0NoaWxkcmVuID0gZmFsc2U7XHJcblx0XHRcdHRoaXMuZkNIQ2JlYWNhQmRERUlGZmJjRklJRGVBRWRFRUdIY2YuYWRhcHRIZWlnaHRUb0NoaWxkcmVuID0gZmFsc2U7XHJcblx0XHRcdHRoaXMuZkNIQ2JlYWNhQmRERUlGZmJjRklJRGVBRWRFRUdIY2YuYmFja2dyb3VuZCA9IFwiI0ZGMDAwMFwiO1xyXG5cdFx0XHR0aGlzLmZDSENiZWFjYUJkREVJRmZiY0ZJSURlQUVkRUVHSGNmLmFscGhhID0gLjI1O1xyXG5cdFx0XHR0aGlzLmZDSENiZWFjYUJkREVJRmZiY0ZJSURlQUVkRUVHSGNmLmNvcm5lclJhZGl1cyA9IDA7XHJcblx0XHRcdHRoaXMuZkNIQ2JlYWNhQmRERUlGZmJjRklJRGVBRWRFRUdIY2YudGhpY2tuZXNzID0gMDtcclxuXHRcdFx0dGhpcy5HRUplRUpJYkdFQUdFRkRlYURKYmJGQ2NISUhGSGFDZC5hZGRDb250cm9sKHRoaXMuZkNIQ2JlYWNhQmRERUlGZmJjRklJRGVBRWRFRUdIY2YpO1xyXG5cclxuXHRcdFx0dGhpcy5GR0hIYURkRUlJQ2JFY0ZJSWVFQWVhSEJmREpDY0ZCZC5pc1Zpc2libGUgPSB0cnVlO1xyXG5cdFx0XHR0aGlzLkZHSEhhRGRFSUlDYkVjRklJZUVBZWFIQmZESkNjRkJkLndpZHRoID0gXCIzNzEuOTVweFwiO1xyXG5cdFx0XHR0aGlzLkZHSEhhRGRFSUlDYkVjRklJZUVBZWFIQmZESkNjRkJkLmhlaWdodCA9IFwiNjkuNzRweFwiO1xyXG5cdFx0XHR0aGlzLkZHSEhhRGRFSUlDYkVjRklJZUVBZWFIQmZESkNjRkJkLnRvcCA9IFwiMTM1cHhcIjtcclxuXHRcdFx0dGhpcy5GR0hIYURkRUlJQ2JFY0ZJSWVFQWVhSEJmREpDY0ZCZC52ZXJ0aWNhbEFsaWdubWVudCA9IEJBQllMT04uR1VJLkNvbnRyb2wuVkVSVElDQUxfQUxJR05NRU5UX0NFTlRFUjtcclxuXHRcdFx0dGhpcy5GR0hIYURkRUlJQ2JFY0ZJSWVFQWVhSEJmREpDY0ZCZC5sZWZ0ID0gXCIyNDBweFwiO1xyXG5cdFx0XHR0aGlzLkZHSEhhRGRFSUlDYkVjRklJZUVBZWFIQmZESkNjRkJkLmhvcml6b250YWxBbGlnbm1lbnQgPSBCQUJZTE9OLkdVSS5Db250cm9sLkhPUklaT05UQUxfQUxJR05NRU5UX0NFTlRFUjtcclxuXHRcdFx0dGhpcy5GR0hIYURkRUlJQ2JFY0ZJSWVFQWVhSEJmREpDY0ZCZC5yb3RhdGlvbiA9IDA7XHJcblx0XHRcdHRoaXMuRkdISGFEZEVJSUNiRWNGSUllRUFlYUhCZkRKQ2NGQmQuc2NhbGVYID0gMTtcclxuXHRcdFx0dGhpcy5GR0hIYURkRUlJQ2JFY0ZJSWVFQWVhSEJmREpDY0ZCZC5zY2FsZVkgPSAxO1xyXG5cdFx0XHR0aGlzLkZHSEhhRGRFSUlDYkVjRklJZUVBZWFIQmZESkNjRkJkLmlzRm9jdXNJbnZpc2libGUgPSBmYWxzZTtcclxuXHRcdFx0dGhpcy5GR0hIYURkRUlJQ2JFY0ZJSWVFQWVhSEJmREpDY0ZCZC5hbHBoYSA9IDE7XHJcblx0XHRcdHRoaXMuRkdISGFEZEVJSUNiRWNGSUllRUFlYUhCZkRKQ2NGQmQuY29sb3IgPSBcIiMzMjMyMzJcIjtcclxuXHRcdFx0dGhpcy5GR0hIYURkRUlJQ2JFY0ZJSWVFQWVhSEJmREpDY0ZCZC5kaXNhYmxlZENvbG9yID0gXCIjRkZGRkZGXCI7XHJcblx0XHRcdHRoaXMuRkdISGFEZEVJSUNiRWNGSUllRUFlYUhCZkRKQ2NGQmQuZGlzYWJsZWRDb2xvckl0ZW0gPSBcIiNGRkZGRkZcIjtcclxuXHRcdFx0dGhpcy5GR0hIYURkRUlJQ2JFY0ZJSWVFQWVhSEJmREpDY0ZCZC5oaWdobGlnaHRDb2xvciA9IFwiI0Y1RjVGNVwiO1xyXG5cdFx0XHR0aGlzLkZHSEhhRGRFSUlDYkVjRklJZUVBZWFIQmZESkNjRkJkLmhpZ2hsaWdodExpbmVXaWR0aCA9IDA7XHJcblx0XHRcdHRoaXMuRkdISGFEZEVJSUNiRWNGSUllRUFlYUhCZkRKQ2NGQmQuaXNIaWdobGlnaHRlZCA9IGZhbHNlO1xyXG5cdFx0XHR0aGlzLkZHSEhhRGRFSUlDYkVjRklJZUVBZWFIQmZESkNjRkJkLmxpbmtPZmZzZXRYID0gMDtcclxuXHRcdFx0dGhpcy5GR0hIYURkRUlJQ2JFY0ZJSWVFQWVhSEJmREpDY0ZCZC5saW5rT2Zmc2V0WSA9IDA7XHJcblx0XHRcdHRoaXMuRkdISGFEZEVJSUNiRWNGSUllRUFlYUhCZkRKQ2NGQmQucGFkZGluZ0JvdHRvbSA9IDA7XHJcblx0XHRcdHRoaXMuRkdISGFEZEVJSUNiRWNGSUllRUFlYUhCZkRKQ2NGQmQucGFkZGluZ0xlZnQgPSAwO1xyXG5cdFx0XHR0aGlzLkZHSEhhRGRFSUlDYkVjRklJZUVBZWFIQmZESkNjRkJkLnBhZGRpbmdSaWdodCA9IDA7XHJcblx0XHRcdHRoaXMuRkdISGFEZEVJSUNiRWNGSUllRUFlYUhCZkRKQ2NGQmQucGFkZGluZ1RvcCA9IDA7XHJcblx0XHRcdHRoaXMuRkdISGFEZEVJSUNiRWNGSUllRUFlYUhCZkRKQ2NGQmQuekluZGV4ID0gMTA7XHJcblx0XHRcdHRoaXMuRkdISGFEZEVJSUNiRWNGSUllRUFlYUhCZkRKQ2NGQmQuc2hhZG93Qmx1ciA9IDA7XHJcblx0XHRcdHRoaXMuRkdISGFEZEVJSUNiRWNGSUllRUFlYUhCZkRKQ2NGQmQuc2hhZG93Q29sb3IgPSBcIiNGRkZGRkZcIjtcclxuXHRcdFx0dGhpcy5GR0hIYURkRUlJQ2JFY0ZJSWVFQWVhSEJmREpDY0ZCZC5zaGFkb3dPZmZzZXRYID0gMDtcclxuXHRcdFx0dGhpcy5GR0hIYURkRUlJQ2JFY0ZJSWVFQWVhSEJmREpDY0ZCZC5zaGFkb3dPZmZzZXRZID0gMDtcclxuXHRcdFx0dGhpcy5GR0hIYURkRUlJQ2JFY0ZJSWVFQWVhSEJmREpDY0ZCZC5ob3ZlckN1cnNvciA9IFwiYXV0b1wiO1xyXG5cdFx0XHR0aGlzLkZHSEhhRGRFSUlDYkVjRklJZUVBZWFIQmZESkNjRkJkLmFkYXB0V2lkdGhUb0NoaWxkcmVuID0gZmFsc2U7XHJcblx0XHRcdHRoaXMuRkdISGFEZEVJSUNiRWNGSUllRUFlYUhCZkRKQ2NGQmQuYWRhcHRIZWlnaHRUb0NoaWxkcmVuID0gZmFsc2U7XHJcblx0XHRcdHRoaXMuRkdISGFEZEVJSUNiRWNGSUllRUFlYUhCZkRKQ2NGQmQuYmFja2dyb3VuZCA9IFwiIzUxQzAxRFwiO1xyXG5cdFx0XHR0aGlzLkZHSEhhRGRFSUlDYkVjRklJZUVBZWFIQmZESkNjRkJkLmFscGhhID0gMTtcclxuXHRcdFx0dGhpcy5GR0hIYURkRUlJQ2JFY0ZJSWVFQWVhSEJmREpDY0ZCZC5jb3JuZXJSYWRpdXMgPSAxMDtcclxuXHRcdFx0dGhpcy5GR0hIYURkRUlJQ2JFY0ZJSWVFQWVhSEJmREpDY0ZCZC50aGlja25lc3MgPSAxMDtcclxuXHRcdFx0dGhpcy5HRUplRUpJYkdFQUdFRkRlYURKYmJGQ2NISUhGSGFDZC5hZGRDb250cm9sKHRoaXMuRkdISGFEZEVJSUNiRWNGSUllRUFlYUhCZkRKQ2NGQmQpO1xyXG5cclxuXHRcdFx0dGhpcy5DZmJlZmFKQ0FCYUJFRkJDSkFiYkVBSEVCQ0ZDYUJBQy5pc1Zpc2libGUgPSB0cnVlO1xyXG5cdFx0XHR0aGlzLkNmYmVmYUpDQUJhQkVGQkNKQWJiRUFIRUJDRkNhQkFDLndpZHRoID0gXCIxOS4zNyVcIjtcclxuXHRcdFx0dGhpcy5DZmJlZmFKQ0FCYUJFRkJDSkFiYkVBSEVCQ0ZDYUJBQy5oZWlnaHQgPSBcIjYuNDYlXCI7XHJcblx0XHRcdHRoaXMuQ2ZiZWZhSkNBQmFCRUZCQ0pBYmJFQUhFQkNGQ2FCQUMudG9wID0gXCIxMi41JVwiO1xyXG5cdFx0XHR0aGlzLkNmYmVmYUpDQUJhQkVGQkNKQWJiRUFIRUJDRkNhQkFDLnZlcnRpY2FsQWxpZ25tZW50ID0gQkFCWUxPTi5HVUkuQ29udHJvbC5WRVJUSUNBTF9BTElHTk1FTlRfQ0VOVEVSO1xyXG5cdFx0XHR0aGlzLkNmYmVmYUpDQUJhQkVGQkNKQWJiRUFIRUJDRkNhQkFDLmxlZnQgPSBcIi0xMi41JVwiO1xyXG5cdFx0XHR0aGlzLkNmYmVmYUpDQUJhQkVGQkNKQWJiRUFIRUJDRkNhQkFDLmhvcml6b250YWxBbGlnbm1lbnQgPSBCQUJZTE9OLkdVSS5Db250cm9sLkhPUklaT05UQUxfQUxJR05NRU5UX0NFTlRFUjtcclxuXHRcdFx0dGhpcy5DZmJlZmFKQ0FCYUJFRkJDSkFiYkVBSEVCQ0ZDYUJBQy5yb3RhdGlvbiA9IDA7XHJcblx0XHRcdHRoaXMuQ2ZiZWZhSkNBQmFCRUZCQ0pBYmJFQUhFQkNGQ2FCQUMuc2NhbGVYID0gMTtcclxuXHRcdFx0dGhpcy5DZmJlZmFKQ0FCYUJFRkJDSkFiYkVBSEVCQ0ZDYUJBQy5zY2FsZVkgPSAxO1xyXG5cdFx0XHR0aGlzLkNmYmVmYUpDQUJhQkVGQkNKQWJiRUFIRUJDRkNhQkFDLmlzRm9jdXNJbnZpc2libGUgPSBmYWxzZTtcclxuXHRcdFx0dGhpcy5DZmJlZmFKQ0FCYUJFRkJDSkFiYkVBSEVCQ0ZDYUJBQy5hbHBoYSA9IDE7XHJcblx0XHRcdHRoaXMuQ2ZiZWZhSkNBQmFCRUZCQ0pBYmJFQUhFQkNGQ2FCQUMuY29sb3IgPSBcIiMyMjAwRkZcIjtcclxuXHRcdFx0dGhpcy5DZmJlZmFKQ0FCYUJFRkJDSkFiYkVBSEVCQ0ZDYUJBQy5kaXNhYmxlZENvbG9yID0gXCIjRkZGRkZGXCI7XHJcblx0XHRcdHRoaXMuQ2ZiZWZhSkNBQmFCRUZCQ0pBYmJFQUhFQkNGQ2FCQUMuZGlzYWJsZWRDb2xvckl0ZW0gPSBcIiNGRkZGRkZcIjtcclxuXHRcdFx0dGhpcy5DZmJlZmFKQ0FCYUJFRkJDSkFiYkVBSEVCQ0ZDYUJBQy5oaWdobGlnaHRDb2xvciA9IFwiI0Y1RjVGNVwiO1xyXG5cdFx0XHR0aGlzLkNmYmVmYUpDQUJhQkVGQkNKQWJiRUFIRUJDRkNhQkFDLmhpZ2hsaWdodExpbmVXaWR0aCA9IDA7XHJcblx0XHRcdHRoaXMuQ2ZiZWZhSkNBQmFCRUZCQ0pBYmJFQUhFQkNGQ2FCQUMuaXNIaWdobGlnaHRlZCA9IGZhbHNlO1xyXG5cdFx0XHR0aGlzLkNmYmVmYUpDQUJhQkVGQkNKQWJiRUFIRUJDRkNhQkFDLmxpbmtPZmZzZXRYID0gMDtcclxuXHRcdFx0dGhpcy5DZmJlZmFKQ0FCYUJFRkJDSkFiYkVBSEVCQ0ZDYUJBQy5saW5rT2Zmc2V0WSA9IDA7XHJcblx0XHRcdHRoaXMuQ2ZiZWZhSkNBQmFCRUZCQ0pBYmJFQUhFQkNGQ2FCQUMucGFkZGluZ0JvdHRvbSA9IDA7XHJcblx0XHRcdHRoaXMuQ2ZiZWZhSkNBQmFCRUZCQ0pBYmJFQUhFQkNGQ2FCQUMucGFkZGluZ0xlZnQgPSAwO1xyXG5cdFx0XHR0aGlzLkNmYmVmYUpDQUJhQkVGQkNKQWJiRUFIRUJDRkNhQkFDLnBhZGRpbmdSaWdodCA9IDA7XHJcblx0XHRcdHRoaXMuQ2ZiZWZhSkNBQmFCRUZCQ0pBYmJFQUhFQkNGQ2FCQUMucGFkZGluZ1RvcCA9IDA7XHJcblx0XHRcdHRoaXMuQ2ZiZWZhSkNBQmFCRUZCQ0pBYmJFQUhFQkNGQ2FCQUMuekluZGV4ID0gOTtcclxuXHRcdFx0dGhpcy5DZmJlZmFKQ0FCYUJFRkJDSkFiYkVBSEVCQ0ZDYUJBQy5zaGFkb3dCbHVyID0gMDtcclxuXHRcdFx0dGhpcy5DZmJlZmFKQ0FCYUJFRkJDSkFiYkVBSEVCQ0ZDYUJBQy5zaGFkb3dDb2xvciA9IFwiI0ZGRkZGRlwiO1xyXG5cdFx0XHR0aGlzLkNmYmVmYUpDQUJhQkVGQkNKQWJiRUFIRUJDRkNhQkFDLnNoYWRvd09mZnNldFggPSAwO1xyXG5cdFx0XHR0aGlzLkNmYmVmYUpDQUJhQkVGQkNKQWJiRUFIRUJDRkNhQkFDLnNoYWRvd09mZnNldFkgPSAwO1xyXG5cdFx0XHR0aGlzLkNmYmVmYUpDQUJhQkVGQkNKQWJiRUFIRUJDRkNhQkFDLmhvdmVyQ3Vyc29yID0gXCJhdXRvXCI7XHJcblx0XHRcdHRoaXMuQ2ZiZWZhSkNBQmFCRUZCQ0pBYmJFQUhFQkNGQ2FCQUMuYWRhcHRXaWR0aFRvQ2hpbGRyZW4gPSBmYWxzZTtcclxuXHRcdFx0dGhpcy5DZmJlZmFKQ0FCYUJFRkJDSkFiYkVBSEVCQ0ZDYUJBQy5hZGFwdEhlaWdodFRvQ2hpbGRyZW4gPSBmYWxzZTtcclxuXHRcdFx0dGhpcy5DZmJlZmFKQ0FCYUJFRkJDSkFiYkVBSEVCQ0ZDYUJBQy5iYWNrZ3JvdW5kID0gXCIjNTFCQUNBXCI7XHJcblx0XHRcdHRoaXMuQ2ZiZWZhSkNBQmFCRUZCQ0pBYmJFQUhFQkNGQ2FCQUMuYWxwaGEgPSAxO1xyXG5cdFx0XHR0aGlzLkNmYmVmYUpDQUJhQkVGQkNKQWJiRUFIRUJDRkNhQkFDLmNvcm5lclJhZGl1cyA9IDA7XHJcblx0XHRcdHRoaXMuQ2ZiZWZhSkNBQmFCRUZCQ0pBYmJFQUhFQkNGQ2FCQUMudGhpY2tuZXNzID0gMDtcclxuXHRcdFx0dGhpcy5HRUplRUpJYkdFQUdFRkRlYURKYmJGQ2NISUhGSGFDZC5hZGRDb250cm9sKHRoaXMuQ2ZiZWZhSkNBQmFCRUZCQ0pBYmJFQUhFQkNGQ2FCQUMpO1xyXG5cclxuXHRcdFx0dGhpcy5CZmNIZEVGY0NJRGJFQ2NiYWFIQWZKREJBSkVlZWZESi5pc1Zpc2libGUgPSB0cnVlO1xyXG5cdFx0XHR0aGlzLkJmY0hkRUZjQ0lEYkVDY2JhYUhBZkpEQkFKRWVlZkRKLndpZHRoID0gXCI4LjMzJVwiO1xyXG5cdFx0XHR0aGlzLkJmY0hkRUZjQ0lEYkVDY2JhYUhBZkpEQkFKRWVlZkRKLmhlaWdodCA9IFwiMi43OCVcIjtcclxuXHRcdFx0dGhpcy5CZmNIZEVGY0NJRGJFQ2NiYWFIQWZKREJBSkVlZWZESi50b3AgPSBcIjEyLjUlXCI7XHJcblx0XHRcdHRoaXMuQmZjSGRFRmNDSURiRUNjYmFhSEFmSkRCQUpFZWVmREoudmVydGljYWxBbGlnbm1lbnQgPSBCQUJZTE9OLkdVSS5Db250cm9sLlZFUlRJQ0FMX0FMSUdOTUVOVF9DRU5URVI7XHJcblx0XHRcdHRoaXMuQmZjSGRFRmNDSURiRUNjYmFhSEFmSkRCQUpFZWVmREoubGVmdCA9IFwiLTM3LjUlXCI7XHJcblx0XHRcdHRoaXMuQmZjSGRFRmNDSURiRUNjYmFhSEFmSkRCQUpFZWVmREouaG9yaXpvbnRhbEFsaWdubWVudCA9IEJBQllMT04uR1VJLkNvbnRyb2wuSE9SSVpPTlRBTF9BTElHTk1FTlRfQ0VOVEVSO1xyXG5cdFx0XHR0aGlzLkJmY0hkRUZjQ0lEYkVDY2JhYUhBZkpEQkFKRWVlZkRKLnJvdGF0aW9uID0gMDtcclxuXHRcdFx0dGhpcy5CZmNIZEVGY0NJRGJFQ2NiYWFIQWZKREJBSkVlZWZESi5zY2FsZVggPSAxO1xyXG5cdFx0XHR0aGlzLkJmY0hkRUZjQ0lEYkVDY2JhYUhBZkpEQkFKRWVlZkRKLnNjYWxlWSA9IDE7XHJcblx0XHRcdHRoaXMuQmZjSGRFRmNDSURiRUNjYmFhSEFmSkRCQUpFZWVmREouaXNGb2N1c0ludmlzaWJsZSA9IGZhbHNlO1xyXG5cdFx0XHR0aGlzLkJmY0hkRUZjQ0lEYkVDY2JhYUhBZkpEQkFKRWVlZkRKLmFscGhhID0gLjU7XHJcblx0XHRcdHRoaXMuQmZjSGRFRmNDSURiRUNjYmFhSEFmSkRCQUpFZWVmREouY29sb3IgPSBcIiMzMjMyMzJcIjtcclxuXHRcdFx0dGhpcy5CZmNIZEVGY0NJRGJFQ2NiYWFIQWZKREJBSkVlZWZESi5kaXNhYmxlZENvbG9yID0gXCIjRkZGRkZGXCI7XHJcblx0XHRcdHRoaXMuQmZjSGRFRmNDSURiRUNjYmFhSEFmSkRCQUpFZWVmREouZGlzYWJsZWRDb2xvckl0ZW0gPSBcIiNGRkZGRkZcIjtcclxuXHRcdFx0dGhpcy5CZmNIZEVGY0NJRGJFQ2NiYWFIQWZKREJBSkVlZWZESi5oaWdobGlnaHRDb2xvciA9IFwiI0Y1RjVGNVwiO1xyXG5cdFx0XHR0aGlzLkJmY0hkRUZjQ0lEYkVDY2JhYUhBZkpEQkFKRWVlZkRKLmhpZ2hsaWdodExpbmVXaWR0aCA9IDA7XHJcblx0XHRcdHRoaXMuQmZjSGRFRmNDSURiRUNjYmFhSEFmSkRCQUpFZWVmREouaXNIaWdobGlnaHRlZCA9IGZhbHNlO1xyXG5cdFx0XHR0aGlzLkJmY0hkRUZjQ0lEYkVDY2JhYUhBZkpEQkFKRWVlZkRKLmxpbmtPZmZzZXRYID0gMDtcclxuXHRcdFx0dGhpcy5CZmNIZEVGY0NJRGJFQ2NiYWFIQWZKREJBSkVlZWZESi5saW5rT2Zmc2V0WSA9IDA7XHJcblx0XHRcdHRoaXMuQmZjSGRFRmNDSURiRUNjYmFhSEFmSkRCQUpFZWVmREoucGFkZGluZ0JvdHRvbSA9IDA7XHJcblx0XHRcdHRoaXMuQmZjSGRFRmNDSURiRUNjYmFhSEFmSkRCQUpFZWVmREoucGFkZGluZ0xlZnQgPSAwO1xyXG5cdFx0XHR0aGlzLkJmY0hkRUZjQ0lEYkVDY2JhYUhBZkpEQkFKRWVlZkRKLnBhZGRpbmdSaWdodCA9IDA7XHJcblx0XHRcdHRoaXMuQmZjSGRFRmNDSURiRUNjYmFhSEFmSkRCQUpFZWVmREoucGFkZGluZ1RvcCA9IDA7XHJcblx0XHRcdHRoaXMuQmZjSGRFRmNDSURiRUNjYmFhSEFmSkRCQUpFZWVmREouekluZGV4ID0gODtcclxuXHRcdFx0dGhpcy5CZmNIZEVGY0NJRGJFQ2NiYWFIQWZKREJBSkVlZWZESi5zaGFkb3dCbHVyID0gMDtcclxuXHRcdFx0dGhpcy5CZmNIZEVGY0NJRGJFQ2NiYWFIQWZKREJBSkVlZWZESi5zaGFkb3dDb2xvciA9IFwiI0ZGRkZGRlwiO1xyXG5cdFx0XHR0aGlzLkJmY0hkRUZjQ0lEYkVDY2JhYUhBZkpEQkFKRWVlZkRKLnNoYWRvd09mZnNldFggPSAwO1xyXG5cdFx0XHR0aGlzLkJmY0hkRUZjQ0lEYkVDY2JhYUhBZkpEQkFKRWVlZkRKLnNoYWRvd09mZnNldFkgPSAwO1xyXG5cdFx0XHR0aGlzLkJmY0hkRUZjQ0lEYkVDY2JhYUhBZkpEQkFKRWVlZkRKLmhvdmVyQ3Vyc29yID0gXCJhdXRvXCI7XHJcblx0XHRcdHRoaXMuQmZjSGRFRmNDSURiRUNjYmFhSEFmSkRCQUpFZWVmREouYWRhcHRXaWR0aFRvQ2hpbGRyZW4gPSBmYWxzZTtcclxuXHRcdFx0dGhpcy5CZmNIZEVGY0NJRGJFQ2NiYWFIQWZKREJBSkVlZWZESi5hZGFwdEhlaWdodFRvQ2hpbGRyZW4gPSBmYWxzZTtcclxuXHRcdFx0dGhpcy5CZmNIZEVGY0NJRGJFQ2NiYWFIQWZKREJBSkVlZWZESi5iYWNrZ3JvdW5kID0gXCIjRkYwMDAwXCI7XHJcblx0XHRcdHRoaXMuQmZjSGRFRmNDSURiRUNjYmFhSEFmSkRCQUpFZWVmREouYWxwaGEgPSAuNTtcclxuXHRcdFx0dGhpcy5CZmNIZEVGY0NJRGJFQ2NiYWFIQWZKREJBSkVlZWZESi5jb3JuZXJSYWRpdXMgPSAwO1xyXG5cdFx0XHR0aGlzLkJmY0hkRUZjQ0lEYkVDY2JhYUhBZkpEQkFKRWVlZkRKLnRoaWNrbmVzcyA9IDA7XHJcblx0XHRcdHRoaXMuR0VKZUVKSWJHRUFHRUZEZWFESmJiRkNjSElIRkhhQ2QuYWRkQ29udHJvbCh0aGlzLkJmY0hkRUZjQ0lEYkVDY2JhYUhBZkpEQkFKRWVlZkRKKTtcclxuXHJcblx0XHRcdHRoaXMuYUNFZkZKSmRkR2JJRUVkQmFBYmNGREdESENCYmRiZkYuaXNWaXNpYmxlID0gdHJ1ZTtcclxuXHRcdFx0dGhpcy5hQ0VmRkpKZGRHYklFRWRCYUFiY0ZER0RIQ0JiZGJmRi53aWR0aCA9IFwiMzcxLjk1cHhcIjtcclxuXHRcdFx0dGhpcy5hQ0VmRkpKZGRHYklFRWRCYUFiY0ZER0RIQ0JiZGJmRi5oZWlnaHQgPSBcIjY5Ljc0cHhcIjtcclxuXHRcdFx0dGhpcy5hQ0VmRkpKZGRHYklFRWRCYUFiY0ZER0RIQ0JiZGJmRi50b3AgPSBcIi0xMzVweFwiO1xyXG5cdFx0XHR0aGlzLmFDRWZGSkpkZEdiSUVFZEJhQWJjRkRHREhDQmJkYmZGLnZlcnRpY2FsQWxpZ25tZW50ID0gQkFCWUxPTi5HVUkuQ29udHJvbC5WRVJUSUNBTF9BTElHTk1FTlRfQ0VOVEVSO1xyXG5cdFx0XHR0aGlzLmFDRWZGSkpkZEdiSUVFZEJhQWJjRkRHREhDQmJkYmZGLmxlZnQgPSBcIjI0MHB4XCI7XHJcblx0XHRcdHRoaXMuYUNFZkZKSmRkR2JJRUVkQmFBYmNGREdESENCYmRiZkYuaG9yaXpvbnRhbEFsaWdubWVudCA9IEJBQllMT04uR1VJLkNvbnRyb2wuSE9SSVpPTlRBTF9BTElHTk1FTlRfQ0VOVEVSO1xyXG5cdFx0XHR0aGlzLmFDRWZGSkpkZEdiSUVFZEJhQWJjRkRHREhDQmJkYmZGLnJvdGF0aW9uID0gMDtcclxuXHRcdFx0dGhpcy5hQ0VmRkpKZGRHYklFRWRCYUFiY0ZER0RIQ0JiZGJmRi5zY2FsZVggPSAxO1xyXG5cdFx0XHR0aGlzLmFDRWZGSkpkZEdiSUVFZEJhQWJjRkRHREhDQmJkYmZGLnNjYWxlWSA9IDE7XHJcblx0XHRcdHRoaXMuYUNFZkZKSmRkR2JJRUVkQmFBYmNGREdESENCYmRiZkYuaXNGb2N1c0ludmlzaWJsZSA9IGZhbHNlO1xyXG5cdFx0XHR0aGlzLmFDRWZGSkpkZEdiSUVFZEJhQWJjRkRHREhDQmJkYmZGLmFscGhhID0gMTtcclxuXHRcdFx0dGhpcy5hQ0VmRkpKZGRHYklFRWRCYUFiY0ZER0RIQ0JiZGJmRi5jb2xvciA9IFwiIzMyMzIzMlwiO1xyXG5cdFx0XHR0aGlzLmFDRWZGSkpkZEdiSUVFZEJhQWJjRkRHREhDQmJkYmZGLmRpc2FibGVkQ29sb3IgPSBcIiNGRkZGRkZcIjtcclxuXHRcdFx0dGhpcy5hQ0VmRkpKZGRHYklFRWRCYUFiY0ZER0RIQ0JiZGJmRi5kaXNhYmxlZENvbG9ySXRlbSA9IFwiI0ZGRkZGRlwiO1xyXG5cdFx0XHR0aGlzLmFDRWZGSkpkZEdiSUVFZEJhQWJjRkRHREhDQmJkYmZGLmhpZ2hsaWdodENvbG9yID0gXCIjRjVGNUY1XCI7XHJcblx0XHRcdHRoaXMuYUNFZkZKSmRkR2JJRUVkQmFBYmNGREdESENCYmRiZkYuaGlnaGxpZ2h0TGluZVdpZHRoID0gMDtcclxuXHRcdFx0dGhpcy5hQ0VmRkpKZGRHYklFRWRCYUFiY0ZER0RIQ0JiZGJmRi5pc0hpZ2hsaWdodGVkID0gZmFsc2U7XHJcblx0XHRcdHRoaXMuYUNFZkZKSmRkR2JJRUVkQmFBYmNGREdESENCYmRiZkYubGlua09mZnNldFggPSAwO1xyXG5cdFx0XHR0aGlzLmFDRWZGSkpkZEdiSUVFZEJhQWJjRkRHREhDQmJkYmZGLmxpbmtPZmZzZXRZID0gMDtcclxuXHRcdFx0dGhpcy5hQ0VmRkpKZGRHYklFRWRCYUFiY0ZER0RIQ0JiZGJmRi5wYWRkaW5nQm90dG9tID0gMDtcclxuXHRcdFx0dGhpcy5hQ0VmRkpKZGRHYklFRWRCYUFiY0ZER0RIQ0JiZGJmRi5wYWRkaW5nTGVmdCA9IDA7XHJcblx0XHRcdHRoaXMuYUNFZkZKSmRkR2JJRUVkQmFBYmNGREdESENCYmRiZkYucGFkZGluZ1JpZ2h0ID0gMDtcclxuXHRcdFx0dGhpcy5hQ0VmRkpKZGRHYklFRWRCYUFiY0ZER0RIQ0JiZGJmRi5wYWRkaW5nVG9wID0gMDtcclxuXHRcdFx0dGhpcy5hQ0VmRkpKZGRHYklFRWRCYUFiY0ZER0RIQ0JiZGJmRi56SW5kZXggPSA3O1xyXG5cdFx0XHR0aGlzLmFDRWZGSkpkZEdiSUVFZEJhQWJjRkRHREhDQmJkYmZGLnNoYWRvd0JsdXIgPSAxMDtcclxuXHRcdFx0dGhpcy5hQ0VmRkpKZGRHYklFRWRCYUFiY0ZER0RIQ0JiZGJmRi5zaGFkb3dDb2xvciA9IFwiI0ZGMDAwMFwiO1xyXG5cdFx0XHR0aGlzLmFDRWZGSkpkZEdiSUVFZEJhQWJjRkRHREhDQmJkYmZGLnNoYWRvd09mZnNldFggPSAtMTA7XHJcblx0XHRcdHRoaXMuYUNFZkZKSmRkR2JJRUVkQmFBYmNGREdESENCYmRiZkYuc2hhZG93T2Zmc2V0WSA9IDEwO1xyXG5cdFx0XHR0aGlzLmFDRWZGSkpkZEdiSUVFZEJhQWJjRkRHREhDQmJkYmZGLmhvdmVyQ3Vyc29yID0gXCJhdXRvXCI7XHJcblx0XHRcdHRoaXMuYUNFZkZKSmRkR2JJRUVkQmFBYmNGREdESENCYmRiZkYuYWRhcHRXaWR0aFRvQ2hpbGRyZW4gPSBmYWxzZTtcclxuXHRcdFx0dGhpcy5hQ0VmRkpKZGRHYklFRWRCYUFiY0ZER0RIQ0JiZGJmRi5hZGFwdEhlaWdodFRvQ2hpbGRyZW4gPSBmYWxzZTtcclxuXHRcdFx0dGhpcy5hQ0VmRkpKZGRHYklFRWRCYUFiY0ZER0RIQ0JiZGJmRi5iYWNrZ3JvdW5kID0gXCIjQjk1QjFCXCI7XHJcblx0XHRcdHRoaXMuYUNFZkZKSmRkR2JJRUVkQmFBYmNGREdESENCYmRiZkYuYWxwaGEgPSAxO1xyXG5cdFx0XHR0aGlzLmFDRWZGSkpkZEdiSUVFZEJhQWJjRkRHREhDQmJkYmZGLmNvcm5lclJhZGl1cyA9IDA7XHJcblx0XHRcdHRoaXMuYUNFZkZKSmRkR2JJRUVkQmFBYmNGREdESENCYmRiZkYudGhpY2tuZXNzID0gMDtcclxuXHRcdFx0dGhpcy5HRUplRUpJYkdFQUdFRkRlYURKYmJGQ2NISUhGSGFDZC5hZGRDb250cm9sKHRoaXMuYUNFZkZKSmRkR2JJRUVkQmFBYmNGREdESENCYmRiZkYpO1xyXG5cclxuXHRcdFx0dGhpcy5jSkRKSWRDYkNGZGJFZGJmYmFGYkZDQURiZGFhYWJDSS5pc1Zpc2libGUgPSB0cnVlO1xyXG5cdFx0XHR0aGlzLmNKREpJZENiQ0ZkYkVkYmZiYUZiRkNBRGJkYWFhYkNJLndpZHRoID0gXCIxOS4zNyVcIjtcclxuXHRcdFx0dGhpcy5jSkRKSWRDYkNGZGJFZGJmYmFGYkZDQURiZGFhYWJDSS5oZWlnaHQgPSBcIjYuNDYlXCI7XHJcblx0XHRcdHRoaXMuY0pESklkQ2JDRmRiRWRiZmJhRmJGQ0FEYmRhYWFiQ0kudG9wID0gXCItMTIuNSVcIjtcclxuXHRcdFx0dGhpcy5jSkRKSWRDYkNGZGJFZGJmYmFGYkZDQURiZGFhYWJDSS52ZXJ0aWNhbEFsaWdubWVudCA9IEJBQllMT04uR1VJLkNvbnRyb2wuVkVSVElDQUxfQUxJR05NRU5UX0NFTlRFUjtcclxuXHRcdFx0dGhpcy5jSkRKSWRDYkNGZGJFZGJmYmFGYkZDQURiZGFhYWJDSS5sZWZ0ID0gXCItMTIuNSVcIjtcclxuXHRcdFx0dGhpcy5jSkRKSWRDYkNGZGJFZGJmYmFGYkZDQURiZGFhYWJDSS5ob3Jpem9udGFsQWxpZ25tZW50ID0gQkFCWUxPTi5HVUkuQ29udHJvbC5IT1JJWk9OVEFMX0FMSUdOTUVOVF9DRU5URVI7XHJcblx0XHRcdHRoaXMuY0pESklkQ2JDRmRiRWRiZmJhRmJGQ0FEYmRhYWFiQ0kucm90YXRpb24gPSAwO1xyXG5cdFx0XHR0aGlzLmNKREpJZENiQ0ZkYkVkYmZiYUZiRkNBRGJkYWFhYkNJLnNjYWxlWCA9IDE7XHJcblx0XHRcdHRoaXMuY0pESklkQ2JDRmRiRWRiZmJhRmJGQ0FEYmRhYWFiQ0kuc2NhbGVZID0gMTtcclxuXHRcdFx0dGhpcy5jSkRKSWRDYkNGZGJFZGJmYmFGYkZDQURiZGFhYWJDSS5pc0ZvY3VzSW52aXNpYmxlID0gZmFsc2U7XHJcblx0XHRcdHRoaXMuY0pESklkQ2JDRmRiRWRiZmJhRmJGQ0FEYmRhYWFiQ0kuYWxwaGEgPSAxO1xyXG5cdFx0XHR0aGlzLmNKREpJZENiQ0ZkYkVkYmZiYUZiRkNBRGJkYWFhYkNJLmNvbG9yID0gXCIjMzIzMjMyXCI7XHJcblx0XHRcdHRoaXMuY0pESklkQ2JDRmRiRWRiZmJhRmJGQ0FEYmRhYWFiQ0kuZGlzYWJsZWRDb2xvciA9IFwiI0ZGRkZGRlwiO1xyXG5cdFx0XHR0aGlzLmNKREpJZENiQ0ZkYkVkYmZiYUZiRkNBRGJkYWFhYkNJLmRpc2FibGVkQ29sb3JJdGVtID0gXCIjRkZGRkZGXCI7XHJcblx0XHRcdHRoaXMuY0pESklkQ2JDRmRiRWRiZmJhRmJGQ0FEYmRhYWFiQ0kuaGlnaGxpZ2h0Q29sb3IgPSBcIiNGNUY1RjVcIjtcclxuXHRcdFx0dGhpcy5jSkRKSWRDYkNGZGJFZGJmYmFGYkZDQURiZGFhYWJDSS5oaWdobGlnaHRMaW5lV2lkdGggPSAwO1xyXG5cdFx0XHR0aGlzLmNKREpJZENiQ0ZkYkVkYmZiYUZiRkNBRGJkYWFhYkNJLmlzSGlnaGxpZ2h0ZWQgPSBmYWxzZTtcclxuXHRcdFx0dGhpcy5jSkRKSWRDYkNGZGJFZGJmYmFGYkZDQURiZGFhYWJDSS5saW5rT2Zmc2V0WCA9IDA7XHJcblx0XHRcdHRoaXMuY0pESklkQ2JDRmRiRWRiZmJhRmJGQ0FEYmRhYWFiQ0kubGlua09mZnNldFkgPSAwO1xyXG5cdFx0XHR0aGlzLmNKREpJZENiQ0ZkYkVkYmZiYUZiRkNBRGJkYWFhYkNJLnBhZGRpbmdCb3R0b20gPSAwO1xyXG5cdFx0XHR0aGlzLmNKREpJZENiQ0ZkYkVkYmZiYUZiRkNBRGJkYWFhYkNJLnBhZGRpbmdMZWZ0ID0gMDtcclxuXHRcdFx0dGhpcy5jSkRKSWRDYkNGZGJFZGJmYmFGYkZDQURiZGFhYWJDSS5wYWRkaW5nUmlnaHQgPSAwO1xyXG5cdFx0XHR0aGlzLmNKREpJZENiQ0ZkYkVkYmZiYUZiRkNBRGJkYWFhYkNJLnBhZGRpbmdUb3AgPSAwO1xyXG5cdFx0XHR0aGlzLmNKREpJZENiQ0ZkYkVkYmZiYUZiRkNBRGJkYWFhYkNJLnpJbmRleCA9IDY7XHJcblx0XHRcdHRoaXMuY0pESklkQ2JDRmRiRWRiZmJhRmJGQ0FEYmRhYWFiQ0kuc2hhZG93Qmx1ciA9IDA7XHJcblx0XHRcdHRoaXMuY0pESklkQ2JDRmRiRWRiZmJhRmJGQ0FEYmRhYWFiQ0kuc2hhZG93Q29sb3IgPSBcIiNGRkZGRkZcIjtcclxuXHRcdFx0dGhpcy5jSkRKSWRDYkNGZGJFZGJmYmFGYkZDQURiZGFhYWJDSS5zaGFkb3dPZmZzZXRYID0gMDtcclxuXHRcdFx0dGhpcy5jSkRKSWRDYkNGZGJFZGJmYmFGYkZDQURiZGFhYWJDSS5zaGFkb3dPZmZzZXRZID0gMDtcclxuXHRcdFx0dGhpcy5jSkRKSWRDYkNGZGJFZGJmYmFGYkZDQURiZGFhYWJDSS5ob3ZlckN1cnNvciA9IFwiYXV0b1wiO1xyXG5cdFx0XHR0aGlzLmNKREpJZENiQ0ZkYkVkYmZiYUZiRkNBRGJkYWFhYkNJLmFkYXB0V2lkdGhUb0NoaWxkcmVuID0gZmFsc2U7XHJcblx0XHRcdHRoaXMuY0pESklkQ2JDRmRiRWRiZmJhRmJGQ0FEYmRhYWFiQ0kuYWRhcHRIZWlnaHRUb0NoaWxkcmVuID0gZmFsc2U7XHJcblx0XHRcdHRoaXMuY0pESklkQ2JDRmRiRWRiZmJhRmJGQ0FEYmRhYWFiQ0kuYmFja2dyb3VuZCA9IFwiIzg1NEVBQlwiO1xyXG5cdFx0XHR0aGlzLmNKREpJZENiQ0ZkYkVkYmZiYUZiRkNBRGJkYWFhYkNJLmFscGhhID0gMTtcclxuXHRcdFx0dGhpcy5jSkRKSWRDYkNGZGJFZGJmYmFGYkZDQURiZGFhYWJDSS5jb3JuZXJSYWRpdXMgPSAwO1xyXG5cdFx0XHR0aGlzLmNKREpJZENiQ0ZkYkVkYmZiYUZiRkNBRGJkYWFhYkNJLnRoaWNrbmVzcyA9IDA7XHJcblx0XHRcdHRoaXMuR0VKZUVKSWJHRUFHRUZEZWFESmJiRkNjSElIRkhhQ2QuYWRkQ29udHJvbCh0aGlzLmNKREpJZENiQ0ZkYkVkYmZiYUZiRkNBRGJkYWFhYkNJKTtcclxuXHJcblx0XHRcdHRoaXMuSEJBRUVlSUdhSmVhRURJQUlBSmVFSmNESkpGYmJhQ0QuaXNWaXNpYmxlID0gdHJ1ZTtcclxuXHRcdFx0dGhpcy5IQkFFRWVJR2FKZWFFRElBSUFKZUVKY0RKSkZiYmFDRC53aWR0aCA9IFwiOC4zMyVcIjtcclxuXHRcdFx0dGhpcy5IQkFFRWVJR2FKZWFFRElBSUFKZUVKY0RKSkZiYmFDRC5oZWlnaHQgPSBcIjIuNzglXCI7XHJcblx0XHRcdHRoaXMuSEJBRUVlSUdhSmVhRURJQUlBSmVFSmNESkpGYmJhQ0QudG9wID0gXCItMTIuNSVcIjtcclxuXHRcdFx0dGhpcy5IQkFFRWVJR2FKZWFFRElBSUFKZUVKY0RKSkZiYmFDRC52ZXJ0aWNhbEFsaWdubWVudCA9IEJBQllMT04uR1VJLkNvbnRyb2wuVkVSVElDQUxfQUxJR05NRU5UX0NFTlRFUjtcclxuXHRcdFx0dGhpcy5IQkFFRWVJR2FKZWFFRElBSUFKZUVKY0RKSkZiYmFDRC5sZWZ0ID0gXCItMzcuNSVcIjtcclxuXHRcdFx0dGhpcy5IQkFFRWVJR2FKZWFFRElBSUFKZUVKY0RKSkZiYmFDRC5ob3Jpem9udGFsQWxpZ25tZW50ID0gQkFCWUxPTi5HVUkuQ29udHJvbC5IT1JJWk9OVEFMX0FMSUdOTUVOVF9DRU5URVI7XHJcblx0XHRcdHRoaXMuSEJBRUVlSUdhSmVhRURJQUlBSmVFSmNESkpGYmJhQ0Qucm90YXRpb24gPSAwO1xyXG5cdFx0XHR0aGlzLkhCQUVFZUlHYUplYUVESUFJQUplRUpjREpKRmJiYUNELnNjYWxlWCA9IDE7XHJcblx0XHRcdHRoaXMuSEJBRUVlSUdhSmVhRURJQUlBSmVFSmNESkpGYmJhQ0Quc2NhbGVZID0gMTtcclxuXHRcdFx0dGhpcy5IQkFFRWVJR2FKZWFFRElBSUFKZUVKY0RKSkZiYmFDRC5pc0ZvY3VzSW52aXNpYmxlID0gZmFsc2U7XHJcblx0XHRcdHRoaXMuSEJBRUVlSUdhSmVhRURJQUlBSmVFSmNESkpGYmJhQ0QuYWxwaGEgPSAxO1xyXG5cdFx0XHR0aGlzLkhCQUVFZUlHYUplYUVESUFJQUplRUpjREpKRmJiYUNELmNvbG9yID0gXCIjMzIzMjMyXCI7XHJcblx0XHRcdHRoaXMuSEJBRUVlSUdhSmVhRURJQUlBSmVFSmNESkpGYmJhQ0QuZGlzYWJsZWRDb2xvciA9IFwiI0ZGRkZGRlwiO1xyXG5cdFx0XHR0aGlzLkhCQUVFZUlHYUplYUVESUFJQUplRUpjREpKRmJiYUNELmRpc2FibGVkQ29sb3JJdGVtID0gXCIjRkZGRkZGXCI7XHJcblx0XHRcdHRoaXMuSEJBRUVlSUdhSmVhRURJQUlBSmVFSmNESkpGYmJhQ0QuaGlnaGxpZ2h0Q29sb3IgPSBcIiNGNUY1RjVcIjtcclxuXHRcdFx0dGhpcy5IQkFFRWVJR2FKZWFFRElBSUFKZUVKY0RKSkZiYmFDRC5oaWdobGlnaHRMaW5lV2lkdGggPSAwO1xyXG5cdFx0XHR0aGlzLkhCQUVFZUlHYUplYUVESUFJQUplRUpjREpKRmJiYUNELmlzSGlnaGxpZ2h0ZWQgPSBmYWxzZTtcclxuXHRcdFx0dGhpcy5IQkFFRWVJR2FKZWFFRElBSUFKZUVKY0RKSkZiYmFDRC5saW5rT2Zmc2V0WCA9IDA7XHJcblx0XHRcdHRoaXMuSEJBRUVlSUdhSmVhRURJQUlBSmVFSmNESkpGYmJhQ0QubGlua09mZnNldFkgPSAwO1xyXG5cdFx0XHR0aGlzLkhCQUVFZUlHYUplYUVESUFJQUplRUpjREpKRmJiYUNELnBhZGRpbmdCb3R0b20gPSAwO1xyXG5cdFx0XHR0aGlzLkhCQUVFZUlHYUplYUVESUFJQUplRUpjREpKRmJiYUNELnBhZGRpbmdMZWZ0ID0gMDtcclxuXHRcdFx0dGhpcy5IQkFFRWVJR2FKZWFFRElBSUFKZUVKY0RKSkZiYmFDRC5wYWRkaW5nUmlnaHQgPSAwO1xyXG5cdFx0XHR0aGlzLkhCQUVFZUlHYUplYUVESUFJQUplRUpjREpKRmJiYUNELnBhZGRpbmdUb3AgPSAwO1xyXG5cdFx0XHR0aGlzLkhCQUVFZUlHYUplYUVESUFJQUplRUpjREpKRmJiYUNELnpJbmRleCA9IDU7XHJcblx0XHRcdHRoaXMuSEJBRUVlSUdhSmVhRURJQUlBSmVFSmNESkpGYmJhQ0Quc2hhZG93Qmx1ciA9IDA7XHJcblx0XHRcdHRoaXMuSEJBRUVlSUdhSmVhRURJQUlBSmVFSmNESkpGYmJhQ0Quc2hhZG93Q29sb3IgPSBcIiNGRkZGRkZcIjtcclxuXHRcdFx0dGhpcy5IQkFFRWVJR2FKZWFFRElBSUFKZUVKY0RKSkZiYmFDRC5zaGFkb3dPZmZzZXRYID0gMDtcclxuXHRcdFx0dGhpcy5IQkFFRWVJR2FKZWFFRElBSUFKZUVKY0RKSkZiYmFDRC5zaGFkb3dPZmZzZXRZID0gMDtcclxuXHRcdFx0dGhpcy5IQkFFRWVJR2FKZWFFRElBSUFKZUVKY0RKSkZiYmFDRC5ob3ZlckN1cnNvciA9IFwiYXV0b1wiO1xyXG5cdFx0XHR0aGlzLkhCQUVFZUlHYUplYUVESUFJQUplRUpjREpKRmJiYUNELmFkYXB0V2lkdGhUb0NoaWxkcmVuID0gZmFsc2U7XHJcblx0XHRcdHRoaXMuSEJBRUVlSUdhSmVhRURJQUlBSmVFSmNESkpGYmJhQ0QuYWRhcHRIZWlnaHRUb0NoaWxkcmVuID0gZmFsc2U7XHJcblx0XHRcdHRoaXMuSEJBRUVlSUdhSmVhRURJQUlBSmVFSmNESkpGYmJhQ0QuYmFja2dyb3VuZCA9IFwiI0ZGMDAwMFwiO1xyXG5cdFx0XHR0aGlzLkhCQUVFZUlHYUplYUVESUFJQUplRUpjREpKRmJiYUNELmFscGhhID0gMTtcclxuXHRcdFx0dGhpcy5IQkFFRWVJR2FKZWFFRElBSUFKZUVKY0RKSkZiYmFDRC5jb3JuZXJSYWRpdXMgPSAwO1xyXG5cdFx0XHR0aGlzLkhCQUVFZUlHYUplYUVESUFJQUplRUpjREpKRmJiYUNELnRoaWNrbmVzcyA9IDA7XHJcblx0XHRcdHRoaXMuR0VKZUVKSWJHRUFHRUZEZWFESmJiRkNjSElIRkhhQ2QuYWRkQ29udHJvbCh0aGlzLkhCQUVFZUlHYUplYUVESUFJQUplRUpjREpKRmJiYUNEKTtcclxuXHJcblx0XHRcdHRoaXMuYkNEQWRKQUZJSUFkRUlFR0lhZmVISmVJZkhhZmNESGIuaXNWaXNpYmxlID0gdHJ1ZTtcclxuXHRcdFx0dGhpcy5iQ0RBZEpBRklJQWRFSUVHSWFmZUhKZUlmSGFmY0RIYi53aWR0aCA9IFwiMzcxLjk1cHhcIjtcclxuXHRcdFx0dGhpcy5iQ0RBZEpBRklJQWRFSUVHSWFmZUhKZUlmSGFmY0RIYi5oZWlnaHQgPSBcIjY5Ljc0cHhcIjtcclxuXHRcdFx0dGhpcy5iQ0RBZEpBRklJQWRFSUVHSWFmZUhKZUlmSGFmY0RIYi50b3AgPSBcIjQwNXB4XCI7XHJcblx0XHRcdHRoaXMuYkNEQWRKQUZJSUFkRUlFR0lhZmVISmVJZkhhZmNESGIudmVydGljYWxBbGlnbm1lbnQgPSBCQUJZTE9OLkdVSS5Db250cm9sLlZFUlRJQ0FMX0FMSUdOTUVOVF9DRU5URVI7XHJcblx0XHRcdHRoaXMuYkNEQWRKQUZJSUFkRUlFR0lhZmVISmVJZkhhZmNESGIubGVmdCA9IFwiMjQwcHhcIjtcclxuXHRcdFx0dGhpcy5iQ0RBZEpBRklJQWRFSUVHSWFmZUhKZUlmSGFmY0RIYi5ob3Jpem9udGFsQWxpZ25tZW50ID0gQkFCWUxPTi5HVUkuQ29udHJvbC5IT1JJWk9OVEFMX0FMSUdOTUVOVF9DRU5URVI7XHJcblx0XHRcdHRoaXMuYkNEQWRKQUZJSUFkRUlFR0lhZmVISmVJZkhhZmNESGIucm90YXRpb24gPSAwO1xyXG5cdFx0XHR0aGlzLmJDREFkSkFGSUlBZEVJRUdJYWZlSEplSWZIYWZjREhiLnNjYWxlWCA9IDE7XHJcblx0XHRcdHRoaXMuYkNEQWRKQUZJSUFkRUlFR0lhZmVISmVJZkhhZmNESGIuc2NhbGVZID0gMTtcclxuXHRcdFx0dGhpcy5iQ0RBZEpBRklJQWRFSUVHSWFmZUhKZUlmSGFmY0RIYi5pc0ZvY3VzSW52aXNpYmxlID0gZmFsc2U7XHJcblx0XHRcdHRoaXMuYkNEQWRKQUZJSUFkRUlFR0lhZmVISmVJZkhhZmNESGIuYWxwaGEgPSAxO1xyXG5cdFx0XHR0aGlzLmJDREFkSkFGSUlBZEVJRUdJYWZlSEplSWZIYWZjREhiLmNvbG9yID0gXCIjMzIzMjMyXCI7XHJcblx0XHRcdHRoaXMuYkNEQWRKQUZJSUFkRUlFR0lhZmVISmVJZkhhZmNESGIuZGlzYWJsZWRDb2xvciA9IFwiI0ZGRkZGRlwiO1xyXG5cdFx0XHR0aGlzLmJDREFkSkFGSUlBZEVJRUdJYWZlSEplSWZIYWZjREhiLmRpc2FibGVkQ29sb3JJdGVtID0gXCIjRkZGRkZGXCI7XHJcblx0XHRcdHRoaXMuYkNEQWRKQUZJSUFkRUlFR0lhZmVISmVJZkhhZmNESGIuaGlnaGxpZ2h0Q29sb3IgPSBcIiNGNUY1RjVcIjtcclxuXHRcdFx0dGhpcy5iQ0RBZEpBRklJQWRFSUVHSWFmZUhKZUlmSGFmY0RIYi5oaWdobGlnaHRMaW5lV2lkdGggPSAxMDtcclxuXHRcdFx0dGhpcy5iQ0RBZEpBRklJQWRFSUVHSWFmZUhKZUlmSGFmY0RIYi5pc0hpZ2hsaWdodGVkID0gdHJ1ZTtcclxuXHRcdFx0dGhpcy5iQ0RBZEpBRklJQWRFSUVHSWFmZUhKZUlmSGFmY0RIYi5saW5rT2Zmc2V0WCA9IDA7XHJcblx0XHRcdHRoaXMuYkNEQWRKQUZJSUFkRUlFR0lhZmVISmVJZkhhZmNESGIubGlua09mZnNldFkgPSAwO1xyXG5cdFx0XHR0aGlzLmJDREFkSkFGSUlBZEVJRUdJYWZlSEplSWZIYWZjREhiLnBhZGRpbmdCb3R0b20gPSAwO1xyXG5cdFx0XHR0aGlzLmJDREFkSkFGSUlBZEVJRUdJYWZlSEplSWZIYWZjREhiLnBhZGRpbmdMZWZ0ID0gMDtcclxuXHRcdFx0dGhpcy5iQ0RBZEpBRklJQWRFSUVHSWFmZUhKZUlmSGFmY0RIYi5wYWRkaW5nUmlnaHQgPSAwO1xyXG5cdFx0XHR0aGlzLmJDREFkSkFGSUlBZEVJRUdJYWZlSEplSWZIYWZjREhiLnBhZGRpbmdUb3AgPSAwO1xyXG5cdFx0XHR0aGlzLmJDREFkSkFGSUlBZEVJRUdJYWZlSEplSWZIYWZjREhiLnpJbmRleCA9IDEyO1xyXG5cdFx0XHR0aGlzLmJDREFkSkFGSUlBZEVJRUdJYWZlSEplSWZIYWZjREhiLnNoYWRvd0JsdXIgPSAwO1xyXG5cdFx0XHR0aGlzLmJDREFkSkFGSUlBZEVJRUdJYWZlSEplSWZIYWZjREhiLnNoYWRvd0NvbG9yID0gXCIjRkZGRkZGXCI7XHJcblx0XHRcdHRoaXMuYkNEQWRKQUZJSUFkRUlFR0lhZmVISmVJZkhhZmNESGIuc2hhZG93T2Zmc2V0WCA9IDA7XHJcblx0XHRcdHRoaXMuYkNEQWRKQUZJSUFkRUlFR0lhZmVISmVJZkhhZmNESGIuc2hhZG93T2Zmc2V0WSA9IDA7XHJcblx0XHRcdHRoaXMuYkNEQWRKQUZJSUFkRUlFR0lhZmVISmVJZkhhZmNESGIuaG92ZXJDdXJzb3IgPSBcImF1dG9cIjtcclxuXHRcdFx0dGhpcy5iQ0RBZEpBRklJQWRFSUVHSWFmZUhKZUlmSGFmY0RIYi5hZGFwdFdpZHRoVG9DaGlsZHJlbiA9IGZhbHNlO1xyXG5cdFx0XHR0aGlzLmJDREFkSkFGSUlBZEVJRUdJYWZlSEplSWZIYWZjREhiLmFkYXB0SGVpZ2h0VG9DaGlsZHJlbiA9IGZhbHNlO1xyXG5cdFx0XHR0aGlzLmJDREFkSkFGSUlBZEVJRUdJYWZlSEplSWZIYWZjREhiLmJhY2tncm91bmQgPSBcIiNBQTFGQ0FcIjtcclxuXHRcdFx0dGhpcy5iQ0RBZEpBRklJQWRFSUVHSWFmZUhKZUlmSGFmY0RIYi5hbHBoYSA9IDE7XHJcblx0XHRcdHRoaXMuYkNEQWRKQUZJSUFkRUlFR0lhZmVISmVJZkhhZmNESGIuY29ybmVyUmFkaXVzID0gMTA7XHJcblx0XHRcdHRoaXMuYkNEQWRKQUZJSUFkRUlFR0lhZmVISmVJZkhhZmNESGIudGhpY2tuZXNzID0gMTA7XHJcblx0XHRcdHRoaXMuR0VKZUVKSWJHRUFHRUZEZWFESmJiRkNjSElIRkhhQ2QuYWRkQ29udHJvbCh0aGlzLmJDREFkSkFGSUlBZEVJRUdJYWZlSEplSWZIYWZjREhiKTtcclxuXHJcblx0XHRcdHRoaXMuSWNFR0RkSWNhREFCRUJhY0lBYWNJZEJGR2NCZUJDY0EuaXNWaXNpYmxlID0gdHJ1ZTtcclxuXHRcdFx0dGhpcy5JY0VHRGRJY2FEQUJFQmFjSUFhY0lkQkZHY0JlQkNjQS53aWR0aCA9IFwiMTkuMzclXCI7XHJcblx0XHRcdHRoaXMuSWNFR0RkSWNhREFCRUJhY0lBYWNJZEJGR2NCZUJDY0EuaGVpZ2h0ID0gXCI2LjQ2JVwiO1xyXG5cdFx0XHR0aGlzLkljRUdEZEljYURBQkVCYWNJQWFjSWRCRkdjQmVCQ2NBLnRvcCA9IFwiMzcuNSVcIjtcclxuXHRcdFx0dGhpcy5JY0VHRGRJY2FEQUJFQmFjSUFhY0lkQkZHY0JlQkNjQS52ZXJ0aWNhbEFsaWdubWVudCA9IEJBQllMT04uR1VJLkNvbnRyb2wuVkVSVElDQUxfQUxJR05NRU5UX0NFTlRFUjtcclxuXHRcdFx0dGhpcy5JY0VHRGRJY2FEQUJFQmFjSUFhY0lkQkZHY0JlQkNjQS5sZWZ0ID0gXCItMTIuNSVcIjtcclxuXHRcdFx0dGhpcy5JY0VHRGRJY2FEQUJFQmFjSUFhY0lkQkZHY0JlQkNjQS5ob3Jpem9udGFsQWxpZ25tZW50ID0gQkFCWUxPTi5HVUkuQ29udHJvbC5IT1JJWk9OVEFMX0FMSUdOTUVOVF9DRU5URVI7XHJcblx0XHRcdHRoaXMuSWNFR0RkSWNhREFCRUJhY0lBYWNJZEJGR2NCZUJDY0Eucm90YXRpb24gPSAwO1xyXG5cdFx0XHR0aGlzLkljRUdEZEljYURBQkVCYWNJQWFjSWRCRkdjQmVCQ2NBLnNjYWxlWCA9IDE7XHJcblx0XHRcdHRoaXMuSWNFR0RkSWNhREFCRUJhY0lBYWNJZEJGR2NCZUJDY0Euc2NhbGVZID0gMTtcclxuXHRcdFx0dGhpcy5JY0VHRGRJY2FEQUJFQmFjSUFhY0lkQkZHY0JlQkNjQS5pc0ZvY3VzSW52aXNpYmxlID0gZmFsc2U7XHJcblx0XHRcdHRoaXMuSWNFR0RkSWNhREFCRUJhY0lBYWNJZEJGR2NCZUJDY0EuYWxwaGEgPSAxO1xyXG5cdFx0XHR0aGlzLkljRUdEZEljYURBQkVCYWNJQWFjSWRCRkdjQmVCQ2NBLmNvbG9yID0gXCIjMDAwMDAwXCI7XHJcblx0XHRcdHRoaXMuSWNFR0RkSWNhREFCRUJhY0lBYWNJZEJGR2NCZUJDY0EuZGlzYWJsZWRDb2xvciA9IFwiI0ZGRkZGRlwiO1xyXG5cdFx0XHR0aGlzLkljRUdEZEljYURBQkVCYWNJQWFjSWRCRkdjQmVCQ2NBLmRpc2FibGVkQ29sb3JJdGVtID0gXCIjRkZGRkZGXCI7XHJcblx0XHRcdHRoaXMuSWNFR0RkSWNhREFCRUJhY0lBYWNJZEJGR2NCZUJDY0EuaGlnaGxpZ2h0Q29sb3IgPSBcIiNGNUY1RjVcIjtcclxuXHRcdFx0dGhpcy5JY0VHRGRJY2FEQUJFQmFjSUFhY0lkQkZHY0JlQkNjQS5oaWdobGlnaHRMaW5lV2lkdGggPSAwO1xyXG5cdFx0XHR0aGlzLkljRUdEZEljYURBQkVCYWNJQWFjSWRCRkdjQmVCQ2NBLmlzSGlnaGxpZ2h0ZWQgPSBmYWxzZTtcclxuXHRcdFx0dGhpcy5JY0VHRGRJY2FEQUJFQmFjSUFhY0lkQkZHY0JlQkNjQS5saW5rT2Zmc2V0WCA9IDA7XHJcblx0XHRcdHRoaXMuSWNFR0RkSWNhREFCRUJhY0lBYWNJZEJGR2NCZUJDY0EubGlua09mZnNldFkgPSAwO1xyXG5cdFx0XHR0aGlzLkljRUdEZEljYURBQkVCYWNJQWFjSWRCRkdjQmVCQ2NBLnBhZGRpbmdCb3R0b20gPSAwO1xyXG5cdFx0XHR0aGlzLkljRUdEZEljYURBQkVCYWNJQWFjSWRCRkdjQmVCQ2NBLnBhZGRpbmdMZWZ0ID0gMDtcclxuXHRcdFx0dGhpcy5JY0VHRGRJY2FEQUJFQmFjSUFhY0lkQkZHY0JlQkNjQS5wYWRkaW5nUmlnaHQgPSAwO1xyXG5cdFx0XHR0aGlzLkljRUdEZEljYURBQkVCYWNJQWFjSWRCRkdjQmVCQ2NBLnBhZGRpbmdUb3AgPSAwO1xyXG5cdFx0XHR0aGlzLkljRUdEZEljYURBQkVCYWNJQWFjSWRCRkdjQmVCQ2NBLnpJbmRleCA9IDEzO1xyXG5cdFx0XHR0aGlzLkljRUdEZEljYURBQkVCYWNJQWFjSWRCRkdjQmVCQ2NBLnNoYWRvd0JsdXIgPSAwO1xyXG5cdFx0XHR0aGlzLkljRUdEZEljYURBQkVCYWNJQWFjSWRCRkdjQmVCQ2NBLnNoYWRvd0NvbG9yID0gXCIjRkZGRkZGXCI7XHJcblx0XHRcdHRoaXMuSWNFR0RkSWNhREFCRUJhY0lBYWNJZEJGR2NCZUJDY0Euc2hhZG93T2Zmc2V0WCA9IDA7XHJcblx0XHRcdHRoaXMuSWNFR0RkSWNhREFCRUJhY0lBYWNJZEJGR2NCZUJDY0Euc2hhZG93T2Zmc2V0WSA9IDA7XHJcblx0XHRcdHRoaXMuSWNFR0RkSWNhREFCRUJhY0lBYWNJZEJGR2NCZUJDY0EuaG92ZXJDdXJzb3IgPSBcImF1dG9cIjtcclxuXHRcdFx0dGhpcy5JY0VHRGRJY2FEQUJFQmFjSUFhY0lkQkZHY0JlQkNjQS5hZGFwdFdpZHRoVG9DaGlsZHJlbiA9IGZhbHNlO1xyXG5cdFx0XHR0aGlzLkljRUdEZEljYURBQkVCYWNJQWFjSWRCRkdjQmVCQ2NBLmFkYXB0SGVpZ2h0VG9DaGlsZHJlbiA9IGZhbHNlO1xyXG5cdFx0XHR0aGlzLkljRUdEZEljYURBQkVCYWNJQWFjSWRCRkdjQmVCQ2NBLmJhY2tncm91bmQgPSBcIiNGRkU5MDBcIjtcclxuXHRcdFx0dGhpcy5JY0VHRGRJY2FEQUJFQmFjSUFhY0lkQkZHY0JlQkNjQS5hbHBoYSA9IDE7XHJcblx0XHRcdHRoaXMuSWNFR0RkSWNhREFCRUJhY0lBYWNJZEJGR2NCZUJDY0EuY29ybmVyUmFkaXVzID0gMDtcclxuXHRcdFx0dGhpcy5JY0VHRGRJY2FEQUJFQmFjSUFhY0lkQkZHY0JlQkNjQS50aGlja25lc3MgPSAwO1xyXG5cdFx0XHR0aGlzLkdFSmVFSkliR0VBR0VGRGVhREpiYkZDY0hJSEZIYUNkLmFkZENvbnRyb2wodGhpcy5JY0VHRGRJY2FEQUJFQmFjSUFhY0lkQkZHY0JlQkNjQSk7XHJcblxyXG5cdFx0XHR0aGlzLklGZmZmR2FHY0pISkVDR0NhSEJlYmFISmVCZkJERUdCLmlzVmlzaWJsZSA9IHRydWU7XHJcblx0XHRcdHRoaXMuSUZmZmZHYUdjSkhKRUNHQ2FIQmViYUhKZUJmQkRFR0Iud2lkdGggPSBcIjQ4MHB4XCI7XHJcblx0XHRcdHRoaXMuSUZmZmZHYUdjSkhKRUNHQ2FIQmViYUhKZUJmQkRFR0IuaGVpZ2h0ID0gXCIxMDAlXCI7XHJcblx0XHRcdHRoaXMuSUZmZmZHYUdjSkhKRUNHQ2FIQmViYUhKZUJmQkRFR0IudG9wID0gXCIwJVwiO1xyXG5cdFx0XHR0aGlzLklGZmZmR2FHY0pISkVDR0NhSEJlYmFISmVCZkJERUdCLnZlcnRpY2FsQWxpZ25tZW50ID0gQkFCWUxPTi5HVUkuQ29udHJvbC5WRVJUSUNBTF9BTElHTk1FTlRfQ0VOVEVSO1xyXG5cdFx0XHR0aGlzLklGZmZmR2FHY0pISkVDR0NhSEJlYmFISmVCZkJERUdCLmxlZnQgPSBcIjBweFwiO1xyXG5cdFx0XHR0aGlzLklGZmZmR2FHY0pISkVDR0NhSEJlYmFISmVCZkJERUdCLmhvcml6b250YWxBbGlnbm1lbnQgPSBCQUJZTE9OLkdVSS5Db250cm9sLkhPUklaT05UQUxfQUxJR05NRU5UX1JJR0hUO1xyXG5cdFx0XHR0aGlzLklGZmZmR2FHY0pISkVDR0NhSEJlYmFISmVCZkJERUdCLnJvdGF0aW9uID0gMDtcclxuXHRcdFx0dGhpcy5JRmZmZkdhR2NKSEpFQ0dDYUhCZWJhSEplQmZCREVHQi5zY2FsZVggPSAxO1xyXG5cdFx0XHR0aGlzLklGZmZmR2FHY0pISkVDR0NhSEJlYmFISmVCZkJERUdCLnNjYWxlWSA9IDE7XHJcblx0XHRcdHRoaXMuSUZmZmZHYUdjSkhKRUNHQ2FIQmViYUhKZUJmQkRFR0IuaXNGb2N1c0ludmlzaWJsZSA9IGZhbHNlO1xyXG5cdFx0XHR0aGlzLklGZmZmR2FHY0pISkVDR0NhSEJlYmFISmVCZkJERUdCLmFscGhhID0gMDtcclxuXHRcdFx0dGhpcy5JRmZmZkdhR2NKSEpFQ0dDYUhCZWJhSEplQmZCREVHQi5jb2xvciA9IFwiI0ZGRkZGRlwiO1xyXG5cdFx0XHR0aGlzLklGZmZmR2FHY0pISkVDR0NhSEJlYmFISmVCZkJERUdCLmRpc2FibGVkQ29sb3IgPSBcIiNGRkZGRkZcIjtcclxuXHRcdFx0dGhpcy5JRmZmZkdhR2NKSEpFQ0dDYUhCZWJhSEplQmZCREVHQi5kaXNhYmxlZENvbG9ySXRlbSA9IFwiI0ZGRkZGRlwiO1xyXG5cdFx0XHR0aGlzLklGZmZmR2FHY0pISkVDR0NhSEJlYmFISmVCZkJERUdCLmhpZ2hsaWdodENvbG9yID0gXCIjRkZGRkZGXCI7XHJcblx0XHRcdHRoaXMuSUZmZmZHYUdjSkhKRUNHQ2FIQmViYUhKZUJmQkRFR0IuaGlnaGxpZ2h0TGluZVdpZHRoID0gMDtcclxuXHRcdFx0dGhpcy5JRmZmZkdhR2NKSEpFQ0dDYUhCZWJhSEplQmZCREVHQi5pc0hpZ2hsaWdodGVkID0gZmFsc2U7XHJcblx0XHRcdHRoaXMuSUZmZmZHYUdjSkhKRUNHQ2FIQmViYUhKZUJmQkRFR0IubGlua09mZnNldFggPSAwO1xyXG5cdFx0XHR0aGlzLklGZmZmR2FHY0pISkVDR0NhSEJlYmFISmVCZkJERUdCLmxpbmtPZmZzZXRZID0gMDtcclxuXHRcdFx0dGhpcy5JRmZmZkdhR2NKSEpFQ0dDYUhCZWJhSEplQmZCREVHQi5wYWRkaW5nQm90dG9tID0gMDtcclxuXHRcdFx0dGhpcy5JRmZmZkdhR2NKSEpFQ0dDYUhCZWJhSEplQmZCREVHQi5wYWRkaW5nTGVmdCA9IDA7XHJcblx0XHRcdHRoaXMuSUZmZmZHYUdjSkhKRUNHQ2FIQmViYUhKZUJmQkRFR0IucGFkZGluZ1JpZ2h0ID0gMDtcclxuXHRcdFx0dGhpcy5JRmZmZkdhR2NKSEpFQ0dDYUhCZWJhSEplQmZCREVHQi5wYWRkaW5nVG9wID0gMDtcclxuXHRcdFx0dGhpcy5JRmZmZkdhR2NKSEpFQ0dDYUhCZWJhSEplQmZCREVHQi56SW5kZXggPSA0O1xyXG5cdFx0XHR0aGlzLklGZmZmR2FHY0pISkVDR0NhSEJlYmFISmVCZkJERUdCLnNoYWRvd0JsdXIgPSAwO1xyXG5cdFx0XHR0aGlzLklGZmZmR2FHY0pISkVDR0NhSEJlYmFISmVCZkJERUdCLnNoYWRvd0NvbG9yID0gXCIjRkZGRkZGXCI7XHJcblx0XHRcdHRoaXMuSUZmZmZHYUdjSkhKRUNHQ2FIQmViYUhKZUJmQkRFR0Iuc2hhZG93T2Zmc2V0WCA9IDA7XHJcblx0XHRcdHRoaXMuSUZmZmZHYUdjSkhKRUNHQ2FIQmViYUhKZUJmQkRFR0Iuc2hhZG93T2Zmc2V0WSA9IDA7XHJcblx0XHRcdHRoaXMuSUZmZmZHYUdjSkhKRUNHQ2FIQmViYUhKZUJmQkRFR0IuaG92ZXJDdXJzb3IgPSBcImF1dG9cIjtcclxuXHRcdFx0dGhpcy5JRmZmZkdhR2NKSEpFQ0dDYUhCZWJhSEplQmZCREVHQi5hZGFwdFdpZHRoVG9DaGlsZHJlbiA9IGZhbHNlO1xyXG5cdFx0XHR0aGlzLklGZmZmR2FHY0pISkVDR0NhSEJlYmFISmVCZkJERUdCLmFkYXB0SGVpZ2h0VG9DaGlsZHJlbiA9IGZhbHNlO1xyXG5cdFx0XHR0aGlzLklGZmZmR2FHY0pISkVDR0NhSEJlYmFISmVCZkJERUdCLmJhY2tncm91bmQgPSBcIiNGRkZGRkZcIjtcclxuXHRcdFx0dGhpcy5JRmZmZkdhR2NKSEpFQ0dDYUhCZWJhSEplQmZCREVHQi5hbHBoYSA9IDA7XHJcblx0XHRcdHRoaXMuR0VKZUVKSWJHRUFHRUZEZWFESmJiRkNjSElIRkhhQ2QuYWRkQ29udHJvbCh0aGlzLklGZmZmR2FHY0pISkVDR0NhSEJlYmFISmVCZkJERUdCKTtcclxuXHJcblx0XHRcdHRoaXMuQ0FjZUJJRENJSGRlRURGZWJHSmVDQkhhYkRCSkpJQUIuaXNWaXNpYmxlID0gdHJ1ZTtcclxuXHRcdFx0dGhpcy5DQWNlQklEQ0lIZGVFREZlYkdKZUNCSGFiREJKSklBQi53aWR0aCA9IFwiOC4zMyVcIjtcclxuXHRcdFx0dGhpcy5DQWNlQklEQ0lIZGVFREZlYkdKZUNCSGFiREJKSklBQi5oZWlnaHQgPSBcIjIuNzglXCI7XHJcblx0XHRcdHRoaXMuQ0FjZUJJRENJSGRlRURGZWJHSmVDQkhhYkRCSkpJQUIudG9wID0gXCItMzcuNSVcIjtcclxuXHRcdFx0dGhpcy5DQWNlQklEQ0lIZGVFREZlYkdKZUNCSGFiREJKSklBQi52ZXJ0aWNhbEFsaWdubWVudCA9IEJBQllMT04uR1VJLkNvbnRyb2wuVkVSVElDQUxfQUxJR05NRU5UX0NFTlRFUjtcclxuXHRcdFx0dGhpcy5DQWNlQklEQ0lIZGVFREZlYkdKZUNCSGFiREJKSklBQi5sZWZ0ID0gXCItMzcuNSVcIjtcclxuXHRcdFx0dGhpcy5DQWNlQklEQ0lIZGVFREZlYkdKZUNCSGFiREJKSklBQi5ob3Jpem9udGFsQWxpZ25tZW50ID0gQkFCWUxPTi5HVUkuQ29udHJvbC5IT1JJWk9OVEFMX0FMSUdOTUVOVF9DRU5URVI7XHJcblx0XHRcdHRoaXMuQ0FjZUJJRENJSGRlRURGZWJHSmVDQkhhYkRCSkpJQUIucm90YXRpb24gPSAwO1xyXG5cdFx0XHR0aGlzLkNBY2VCSURDSUhkZUVERmViR0plQ0JIYWJEQkpKSUFCLnNjYWxlWCA9IDE7XHJcblx0XHRcdHRoaXMuQ0FjZUJJRENJSGRlRURGZWJHSmVDQkhhYkRCSkpJQUIuc2NhbGVZID0gMTtcclxuXHRcdFx0dGhpcy5DQWNlQklEQ0lIZGVFREZlYkdKZUNCSGFiREJKSklBQi5pc0ZvY3VzSW52aXNpYmxlID0gZmFsc2U7XHJcblx0XHRcdHRoaXMuQ0FjZUJJRENJSGRlRURGZWJHSmVDQkhhYkRCSkpJQUIuYWxwaGEgPSAxO1xyXG5cdFx0XHR0aGlzLkNBY2VCSURDSUhkZUVERmViR0plQ0JIYWJEQkpKSUFCLmNvbG9yID0gXCIjMzIzMjMyXCI7XHJcblx0XHRcdHRoaXMuQ0FjZUJJRENJSGRlRURGZWJHSmVDQkhhYkRCSkpJQUIuZGlzYWJsZWRDb2xvciA9IFwiI0ZGRkZGRlwiO1xyXG5cdFx0XHR0aGlzLkNBY2VCSURDSUhkZUVERmViR0plQ0JIYWJEQkpKSUFCLmRpc2FibGVkQ29sb3JJdGVtID0gXCIjRkZGRkZGXCI7XHJcblx0XHRcdHRoaXMuQ0FjZUJJRENJSGRlRURGZWJHSmVDQkhhYkRCSkpJQUIuaGlnaGxpZ2h0Q29sb3IgPSBcIiNGNUY1RjVcIjtcclxuXHRcdFx0dGhpcy5DQWNlQklEQ0lIZGVFREZlYkdKZUNCSGFiREJKSklBQi5oaWdobGlnaHRMaW5lV2lkdGggPSAwO1xyXG5cdFx0XHR0aGlzLkNBY2VCSURDSUhkZUVERmViR0plQ0JIYWJEQkpKSUFCLmlzSGlnaGxpZ2h0ZWQgPSBmYWxzZTtcclxuXHRcdFx0dGhpcy5DQWNlQklEQ0lIZGVFREZlYkdKZUNCSGFiREJKSklBQi5saW5rT2Zmc2V0WCA9IDA7XHJcblx0XHRcdHRoaXMuQ0FjZUJJRENJSGRlRURGZWJHSmVDQkhhYkRCSkpJQUIubGlua09mZnNldFkgPSAwO1xyXG5cdFx0XHR0aGlzLkNBY2VCSURDSUhkZUVERmViR0plQ0JIYWJEQkpKSUFCLnBhZGRpbmdCb3R0b20gPSAwO1xyXG5cdFx0XHR0aGlzLkNBY2VCSURDSUhkZUVERmViR0plQ0JIYWJEQkpKSUFCLnBhZGRpbmdMZWZ0ID0gMDtcclxuXHRcdFx0dGhpcy5DQWNlQklEQ0lIZGVFREZlYkdKZUNCSGFiREJKSklBQi5wYWRkaW5nUmlnaHQgPSAwO1xyXG5cdFx0XHR0aGlzLkNBY2VCSURDSUhkZUVERmViR0plQ0JIYWJEQkpKSUFCLnBhZGRpbmdUb3AgPSAwO1xyXG5cdFx0XHR0aGlzLkNBY2VCSURDSUhkZUVERmViR0plQ0JIYWJEQkpKSUFCLnpJbmRleCA9IDM7XHJcblx0XHRcdHRoaXMuQ0FjZUJJRENJSGRlRURGZWJHSmVDQkhhYkRCSkpJQUIuc2hhZG93Qmx1ciA9IDA7XHJcblx0XHRcdHRoaXMuQ0FjZUJJRENJSGRlRURGZWJHSmVDQkhhYkRCSkpJQUIuc2hhZG93Q29sb3IgPSBcIiNGRkZGRkZcIjtcclxuXHRcdFx0dGhpcy5DQWNlQklEQ0lIZGVFREZlYkdKZUNCSGFiREJKSklBQi5zaGFkb3dPZmZzZXRYID0gMDtcclxuXHRcdFx0dGhpcy5DQWNlQklEQ0lIZGVFREZlYkdKZUNCSGFiREJKSklBQi5zaGFkb3dPZmZzZXRZID0gMDtcclxuXHRcdFx0dGhpcy5DQWNlQklEQ0lIZGVFREZlYkdKZUNCSGFiREJKSklBQi5ob3ZlckN1cnNvciA9IFwiYXV0b1wiO1xyXG5cdFx0XHR0aGlzLkNBY2VCSURDSUhkZUVERmViR0plQ0JIYWJEQkpKSUFCLmFkYXB0V2lkdGhUb0NoaWxkcmVuID0gZmFsc2U7XHJcblx0XHRcdHRoaXMuQ0FjZUJJRENJSGRlRURGZWJHSmVDQkhhYkRCSkpJQUIuYWRhcHRIZWlnaHRUb0NoaWxkcmVuID0gZmFsc2U7XHJcblx0XHRcdHRoaXMuQ0FjZUJJRENJSGRlRURGZWJHSmVDQkhhYkRCSkpJQUIuYmFja2dyb3VuZCA9IFwiI0ZGRkZGRlwiO1xyXG5cdFx0XHR0aGlzLkNBY2VCSURDSUhkZUVERmViR0plQ0JIYWJEQkpKSUFCLmFscGhhID0gMTtcclxuXHRcdFx0dGhpcy5DQWNlQklEQ0lIZGVFREZlYkdKZUNCSGFiREJKSklBQi5jb3JuZXJSYWRpdXMgPSAwO1xyXG5cdFx0XHR0aGlzLkNBY2VCSURDSUhkZUVERmViR0plQ0JIYWJEQkpKSUFCLnRoaWNrbmVzcyA9IDA7XHJcblx0XHRcdHRoaXMuR0VKZUVKSWJHRUFHRUZEZWFESmJiRkNjSElIRkhhQ2QuYWRkQ29udHJvbCh0aGlzLkNBY2VCSURDSUhkZUVERmViR0plQ0JIYWJEQkpKSUFCKTtcclxuXHJcblx0XHRcdHRoaXMuSkdlRUlFQ0JBZUViRUdIQmJEQ0FCQkpjQkFlQmVhZmUuaXNWaXNpYmxlID0gdHJ1ZTtcclxuXHRcdFx0dGhpcy5KR2VFSUVDQkFlRWJFR0hCYkRDQUJCSmNCQWVCZWFmZS53aWR0aCA9IFwiMTkuMzclXCI7XHJcblx0XHRcdHRoaXMuSkdlRUlFQ0JBZUViRUdIQmJEQ0FCQkpjQkFlQmVhZmUuaGVpZ2h0ID0gXCI2LjQ2JVwiO1xyXG5cdFx0XHR0aGlzLkpHZUVJRUNCQWVFYkVHSEJiRENBQkJKY0JBZUJlYWZlLnRvcCA9IFwiLTM3LjUlXCI7XHJcblx0XHRcdHRoaXMuSkdlRUlFQ0JBZUViRUdIQmJEQ0FCQkpjQkFlQmVhZmUudmVydGljYWxBbGlnbm1lbnQgPSBCQUJZTE9OLkdVSS5Db250cm9sLlZFUlRJQ0FMX0FMSUdOTUVOVF9DRU5URVI7XHJcblx0XHRcdHRoaXMuSkdlRUlFQ0JBZUViRUdIQmJEQ0FCQkpjQkFlQmVhZmUubGVmdCA9IFwiMTIuNSVcIjtcclxuXHRcdFx0dGhpcy5KR2VFSUVDQkFlRWJFR0hCYkRDQUJCSmNCQWVCZWFmZS5ob3Jpem9udGFsQWxpZ25tZW50ID0gQkFCWUxPTi5HVUkuQ29udHJvbC5IT1JJWk9OVEFMX0FMSUdOTUVOVF9DRU5URVI7XHJcblx0XHRcdHRoaXMuSkdlRUlFQ0JBZUViRUdIQmJEQ0FCQkpjQkFlQmVhZmUucm90YXRpb24gPSAwO1xyXG5cdFx0XHR0aGlzLkpHZUVJRUNCQWVFYkVHSEJiRENBQkJKY0JBZUJlYWZlLnNjYWxlWCA9IDE7XHJcblx0XHRcdHRoaXMuSkdlRUlFQ0JBZUViRUdIQmJEQ0FCQkpjQkFlQmVhZmUuc2NhbGVZID0gMTtcclxuXHRcdFx0dGhpcy5KR2VFSUVDQkFlRWJFR0hCYkRDQUJCSmNCQWVCZWFmZS5pc0ZvY3VzSW52aXNpYmxlID0gdHJ1ZTtcclxuXHRcdFx0dGhpcy5KR2VFSUVDQkFlRWJFR0hCYkRDQUJCSmNCQWVCZWFmZS5hbHBoYSA9IDE7XHJcblx0XHRcdHRoaXMuSkdlRUlFQ0JBZUViRUdIQmJEQ0FCQkpjQkFlQmVhZmUuY29sb3IgPSBcIiNGRkZGRkZcIjtcclxuXHRcdFx0dGhpcy5KR2VFSUVDQkFlRWJFR0hCYkRDQUJCSmNCQWVCZWFmZS5kaXNhYmxlZENvbG9yID0gXCIjRkZGRkZGXCI7XHJcblx0XHRcdHRoaXMuSkdlRUlFQ0JBZUViRUdIQmJEQ0FCQkpjQkFlQmVhZmUuZGlzYWJsZWRDb2xvckl0ZW0gPSBcIiNGRkZGRkZcIjtcclxuXHRcdFx0dGhpcy5KR2VFSUVDQkFlRWJFR0hCYkRDQUJCSmNCQWVCZWFmZS5oaWdobGlnaHRDb2xvciA9IFwiI0Y1RjVGNVwiO1xyXG5cdFx0XHR0aGlzLkpHZUVJRUNCQWVFYkVHSEJiRENBQkJKY0JBZUJlYWZlLmhpZ2hsaWdodExpbmVXaWR0aCA9IDA7XHJcblx0XHRcdHRoaXMuSkdlRUlFQ0JBZUViRUdIQmJEQ0FCQkpjQkFlQmVhZmUuaXNIaWdobGlnaHRlZCA9IGZhbHNlO1xyXG5cdFx0XHR0aGlzLkpHZUVJRUNCQWVFYkVHSEJiRENBQkJKY0JBZUJlYWZlLmxpbmtPZmZzZXRYID0gMDtcclxuXHRcdFx0dGhpcy5KR2VFSUVDQkFlRWJFR0hCYkRDQUJCSmNCQWVCZWFmZS5saW5rT2Zmc2V0WSA9IDA7XHJcblx0XHRcdHRoaXMuSkdlRUlFQ0JBZUViRUdIQmJEQ0FCQkpjQkFlQmVhZmUucGFkZGluZ0JvdHRvbSA9IDA7XHJcblx0XHRcdHRoaXMuSkdlRUlFQ0JBZUViRUdIQmJEQ0FCQkpjQkFlQmVhZmUucGFkZGluZ0xlZnQgPSAwO1xyXG5cdFx0XHR0aGlzLkpHZUVJRUNCQWVFYkVHSEJiRENBQkJKY0JBZUJlYWZlLnBhZGRpbmdSaWdodCA9IDA7XHJcblx0XHRcdHRoaXMuSkdlRUlFQ0JBZUViRUdIQmJEQ0FCQkpjQkFlQmVhZmUucGFkZGluZ1RvcCA9IDA7XHJcblx0XHRcdHRoaXMuSkdlRUlFQ0JBZUViRUdIQmJEQ0FCQkpjQkFlQmVhZmUuekluZGV4ID0gMjtcclxuXHRcdFx0dGhpcy5KR2VFSUVDQkFlRWJFR0hCYkRDQUJCSmNCQWVCZWFmZS5zaGFkb3dCbHVyID0gMDtcclxuXHRcdFx0dGhpcy5KR2VFSUVDQkFlRWJFR0hCYkRDQUJCSmNCQWVCZWFmZS5zaGFkb3dDb2xvciA9IFwiI0ZGRkZGRlwiO1xyXG5cdFx0XHR0aGlzLkpHZUVJRUNCQWVFYkVHSEJiRENBQkJKY0JBZUJlYWZlLnNoYWRvd09mZnNldFggPSAwO1xyXG5cdFx0XHR0aGlzLkpHZUVJRUNCQWVFYkVHSEJiRENBQkJKY0JBZUJlYWZlLnNoYWRvd09mZnNldFkgPSAwO1xyXG5cdFx0XHR0aGlzLkpHZUVJRUNCQWVFYkVHSEJiRENBQkJKY0JBZUJlYWZlLmhvdmVyQ3Vyc29yID0gXCJhdXRvXCI7XHJcblx0XHRcdHRoaXMuSkdlRUlFQ0JBZUViRUdIQmJEQ0FCQkpjQkFlQmVhZmUuYWRhcHRXaWR0aFRvQ2hpbGRyZW4gPSBmYWxzZTtcclxuXHRcdFx0dGhpcy5KR2VFSUVDQkFlRWJFR0hCYkRDQUJCSmNCQWVCZWFmZS5hZGFwdEhlaWdodFRvQ2hpbGRyZW4gPSBmYWxzZTtcclxuXHRcdFx0dGhpcy5KR2VFSUVDQkFlRWJFR0hCYkRDQUJCSmNCQWVCZWFmZS5iYWNrZ3JvdW5kID0gXCIjRkYwMDI3XCI7XHJcblx0XHRcdHRoaXMuSkdlRUlFQ0JBZUViRUdIQmJEQ0FCQkpjQkFlQmVhZmUuYWxwaGEgPSAxO1xyXG5cdFx0XHR0aGlzLkpHZUVJRUNCQWVFYkVHSEJiRENBQkJKY0JBZUJlYWZlLmNvcm5lclJhZGl1cyA9IDI7XHJcblx0XHRcdHRoaXMuSkdlRUlFQ0JBZUViRUdIQmJEQ0FCQkpjQkFlQmVhZmUudGhpY2tuZXNzID0gMjtcclxuXHRcdFx0dGhpcy5HRUplRUpJYkdFQUdFRkRlYURKYmJGQ2NISUhGSGFDZC5hZGRDb250cm9sKHRoaXMuSkdlRUlFQ0JBZUViRUdIQmJEQ0FCQkpjQkFlQmVhZmUpO1xyXG5cclxuXHRcdFx0dGhpcy5iQWFGSmZkQmFCRGFFSUJDSUNDRmREYklCQ0lGZUFIRC5pc1Zpc2libGUgPSB0cnVlO1xyXG5cdFx0XHR0aGlzLmJBYUZKZmRCYUJEYUVJQkNJQ0NGZERiSUJDSUZlQUhELndpZHRoID0gXCIxOS4zNyVcIjtcclxuXHRcdFx0dGhpcy5iQWFGSmZkQmFCRGFFSUJDSUNDRmREYklCQ0lGZUFIRC5oZWlnaHQgPSBcIjYuNDYlXCI7XHJcblx0XHRcdHRoaXMuYkFhRkpmZEJhQkRhRUlCQ0lDQ0ZkRGJJQkNJRmVBSEQudG9wID0gXCItMzcuNSVcIjtcclxuXHRcdFx0dGhpcy5iQWFGSmZkQmFCRGFFSUJDSUNDRmREYklCQ0lGZUFIRC52ZXJ0aWNhbEFsaWdubWVudCA9IEJBQllMT04uR1VJLkNvbnRyb2wuVkVSVElDQUxfQUxJR05NRU5UX0NFTlRFUjtcclxuXHRcdFx0dGhpcy5iQWFGSmZkQmFCRGFFSUJDSUNDRmREYklCQ0lGZUFIRC5sZWZ0ID0gXCItMTIuNSVcIjtcclxuXHRcdFx0dGhpcy5iQWFGSmZkQmFCRGFFSUJDSUNDRmREYklCQ0lGZUFIRC5ob3Jpem9udGFsQWxpZ25tZW50ID0gQkFCWUxPTi5HVUkuQ29udHJvbC5IT1JJWk9OVEFMX0FMSUdOTUVOVF9DRU5URVI7XHJcblx0XHRcdHRoaXMuYkFhRkpmZEJhQkRhRUlCQ0lDQ0ZkRGJJQkNJRmVBSEQucm90YXRpb24gPSAwO1xyXG5cdFx0XHR0aGlzLmJBYUZKZmRCYUJEYUVJQkNJQ0NGZERiSUJDSUZlQUhELnNjYWxlWCA9IDE7XHJcblx0XHRcdHRoaXMuYkFhRkpmZEJhQkRhRUlCQ0lDQ0ZkRGJJQkNJRmVBSEQuc2NhbGVZID0gMTtcclxuXHRcdFx0dGhpcy5iQWFGSmZkQmFCRGFFSUJDSUNDRmREYklCQ0lGZUFIRC5pc0ZvY3VzSW52aXNpYmxlID0gZmFsc2U7XHJcblx0XHRcdHRoaXMuYkFhRkpmZEJhQkRhRUlCQ0lDQ0ZkRGJJQkNJRmVBSEQuYWxwaGEgPSAxO1xyXG5cdFx0XHR0aGlzLmJBYUZKZmRCYUJEYUVJQkNJQ0NGZERiSUJDSUZlQUhELmNvbG9yID0gXCIjMzIzMjMyXCI7XHJcblx0XHRcdHRoaXMuYkFhRkpmZEJhQkRhRUlCQ0lDQ0ZkRGJJQkNJRmVBSEQuZGlzYWJsZWRDb2xvciA9IFwiI0ZGRkZGRlwiO1xyXG5cdFx0XHR0aGlzLmJBYUZKZmRCYUJEYUVJQkNJQ0NGZERiSUJDSUZlQUhELmRpc2FibGVkQ29sb3JJdGVtID0gXCIjRkZGRkZGXCI7XHJcblx0XHRcdHRoaXMuYkFhRkpmZEJhQkRhRUlCQ0lDQ0ZkRGJJQkNJRmVBSEQuaGlnaGxpZ2h0Q29sb3IgPSBcIiNGNUY1RjVcIjtcclxuXHRcdFx0dGhpcy5iQWFGSmZkQmFCRGFFSUJDSUNDRmREYklCQ0lGZUFIRC5oaWdobGlnaHRMaW5lV2lkdGggPSAwO1xyXG5cdFx0XHR0aGlzLmJBYUZKZmRCYUJEYUVJQkNJQ0NGZERiSUJDSUZlQUhELmlzSGlnaGxpZ2h0ZWQgPSBmYWxzZTtcclxuXHRcdFx0dGhpcy5iQWFGSmZkQmFCRGFFSUJDSUNDRmREYklCQ0lGZUFIRC5saW5rT2Zmc2V0WCA9IDA7XHJcblx0XHRcdHRoaXMuYkFhRkpmZEJhQkRhRUlCQ0lDQ0ZkRGJJQkNJRmVBSEQubGlua09mZnNldFkgPSAwO1xyXG5cdFx0XHR0aGlzLmJBYUZKZmRCYUJEYUVJQkNJQ0NGZERiSUJDSUZlQUhELnBhZGRpbmdCb3R0b20gPSAwO1xyXG5cdFx0XHR0aGlzLmJBYUZKZmRCYUJEYUVJQkNJQ0NGZERiSUJDSUZlQUhELnBhZGRpbmdMZWZ0ID0gMDtcclxuXHRcdFx0dGhpcy5iQWFGSmZkQmFCRGFFSUJDSUNDRmREYklCQ0lGZUFIRC5wYWRkaW5nUmlnaHQgPSAwO1xyXG5cdFx0XHR0aGlzLmJBYUZKZmRCYUJEYUVJQkNJQ0NGZERiSUJDSUZlQUhELnBhZGRpbmdUb3AgPSAwO1xyXG5cdFx0XHR0aGlzLmJBYUZKZmRCYUJEYUVJQkNJQ0NGZERiSUJDSUZlQUhELnpJbmRleCA9IDE7XHJcblx0XHRcdHRoaXMuYkFhRkpmZEJhQkRhRUlCQ0lDQ0ZkRGJJQkNJRmVBSEQuc2hhZG93Qmx1ciA9IDA7XHJcblx0XHRcdHRoaXMuYkFhRkpmZEJhQkRhRUlCQ0lDQ0ZkRGJJQkNJRmVBSEQuc2hhZG93Q29sb3IgPSBcIiNGRkZGRkZcIjtcclxuXHRcdFx0dGhpcy5iQWFGSmZkQmFCRGFFSUJDSUNDRmREYklCQ0lGZUFIRC5zaGFkb3dPZmZzZXRYID0gMDtcclxuXHRcdFx0dGhpcy5iQWFGSmZkQmFCRGFFSUJDSUNDRmREYklCQ0lGZUFIRC5zaGFkb3dPZmZzZXRZID0gMDtcclxuXHRcdFx0dGhpcy5iQWFGSmZkQmFCRGFFSUJDSUNDRmREYklCQ0lGZUFIRC5ob3ZlckN1cnNvciA9IFwiYXV0b1wiO1xyXG5cdFx0XHR0aGlzLmJBYUZKZmRCYUJEYUVJQkNJQ0NGZERiSUJDSUZlQUhELmFkYXB0V2lkdGhUb0NoaWxkcmVuID0gZmFsc2U7XHJcblx0XHRcdHRoaXMuYkFhRkpmZEJhQkRhRUlCQ0lDQ0ZkRGJJQkNJRmVBSEQuYWRhcHRIZWlnaHRUb0NoaWxkcmVuID0gZmFsc2U7XHJcblx0XHRcdHRoaXMuYkFhRkpmZEJhQkRhRUlCQ0lDQ0ZkRGJJQkNJRmVBSEQuYmFja2dyb3VuZCA9IFwiI0FBOTg0RVwiO1xyXG5cdFx0XHR0aGlzLmJBYUZKZmRCYUJEYUVJQkNJQ0NGZERiSUJDSUZlQUhELmFscGhhID0gMTtcclxuXHRcdFx0dGhpcy5iQWFGSmZkQmFCRGFFSUJDSUNDRmREYklCQ0lGZUFIRC5jb3JuZXJSYWRpdXMgPSAwO1xyXG5cdFx0XHR0aGlzLmJBYUZKZmRCYUJEYUVJQkNJQ0NGZERiSUJDSUZlQUhELnRoaWNrbmVzcyA9IDA7XHJcblx0XHRcdHRoaXMuR0VKZUVKSWJHRUFHRUZEZWFESmJiRkNjSElIRkhhQ2QuYWRkQ29udHJvbCh0aGlzLmJBYUZKZmRCYUJEYUVJQkNJQ0NGZERiSUJDSUZlQUhEKTtcclxuXHJcblx0XHRcdHRoaXMuSEVCZGFiYkpKZUVGRUVhQWJISkNjSmRiSERmRmZjYkcuaXNWaXNpYmxlID0gdHJ1ZTtcclxuXHRcdFx0dGhpcy5IRUJkYWJiSkplRUZFRWFBYkhKQ2NKZGJIRGZGZmNiRy53aWR0aCA9IFwiNDgwcHhcIjtcclxuXHRcdFx0dGhpcy5IRUJkYWJiSkplRUZFRWFBYkhKQ2NKZGJIRGZGZmNiRy5oZWlnaHQgPSBcIjMwcHhcIjtcclxuXHRcdFx0dGhpcy5IRUJkYWJiSkplRUZFRWFBYkhKQ2NKZGJIRGZGZmNiRy50b3AgPSBcIjYwcHhcIjtcclxuXHRcdFx0dGhpcy5IRUJkYWJiSkplRUZFRWFBYkhKQ2NKZGJIRGZGZmNiRy52ZXJ0aWNhbEFsaWdubWVudCA9IEJBQllMT04uR1VJLkNvbnRyb2wuVkVSVElDQUxfQUxJR05NRU5UX0NFTlRFUjtcclxuXHRcdFx0dGhpcy5IRUJkYWJiSkplRUZFRWFBYkhKQ2NKZGJIRGZGZmNiRy5sZWZ0ID0gXCIwcHhcIjtcclxuXHRcdFx0dGhpcy5IRUJkYWJiSkplRUZFRWFBYkhKQ2NKZGJIRGZGZmNiRy5ob3Jpem9udGFsQWxpZ25tZW50ID0gQkFCWUxPTi5HVUkuQ29udHJvbC5IT1JJWk9OVEFMX0FMSUdOTUVOVF9DRU5URVI7XHJcblx0XHRcdHRoaXMuSEVCZGFiYkpKZUVGRUVhQWJISkNjSmRiSERmRmZjYkcucm90YXRpb24gPSAwO1xyXG5cdFx0XHR0aGlzLkhFQmRhYmJKSmVFRkVFYUFiSEpDY0pkYkhEZkZmY2JHLnNjYWxlWCA9IDE7XHJcblx0XHRcdHRoaXMuSEVCZGFiYkpKZUVGRUVhQWJISkNjSmRiSERmRmZjYkcuc2NhbGVZID0gMTtcclxuXHRcdFx0dGhpcy5IRUJkYWJiSkplRUZFRWFBYkhKQ2NKZGJIRGZGZmNiRy5pc0ZvY3VzSW52aXNpYmxlID0gZmFsc2U7XHJcblx0XHRcdHRoaXMuSEVCZGFiYkpKZUVGRUVhQWJISkNjSmRiSERmRmZjYkcuYWxwaGEgPSAxO1xyXG5cdFx0XHR0aGlzLkhFQmRhYmJKSmVFRkVFYUFiSEpDY0pkYkhEZkZmY2JHLmNvbG9yID0gXCIjRkZGRkZGXCI7XHJcblx0XHRcdHRoaXMuSEVCZGFiYkpKZUVGRUVhQWJISkNjSmRiSERmRmZjYkcuZGlzYWJsZWRDb2xvciA9IFwiI0ZGRkZGRlwiO1xyXG5cdFx0XHR0aGlzLkhFQmRhYmJKSmVFRkVFYUFiSEpDY0pkYkhEZkZmY2JHLmRpc2FibGVkQ29sb3JJdGVtID0gXCIjRkZGRkZGXCI7XHJcblx0XHRcdHRoaXMuSEVCZGFiYkpKZUVGRUVhQWJISkNjSmRiSERmRmZjYkcuaGlnaGxpZ2h0Q29sb3IgPSBcIiNGNUY1RjVcIjtcclxuXHRcdFx0dGhpcy5IRUJkYWJiSkplRUZFRWFBYkhKQ2NKZGJIRGZGZmNiRy5oaWdobGlnaHRMaW5lV2lkdGggPSAwO1xyXG5cdFx0XHR0aGlzLkhFQmRhYmJKSmVFRkVFYUFiSEpDY0pkYkhEZkZmY2JHLmlzSGlnaGxpZ2h0ZWQgPSBmYWxzZTtcclxuXHRcdFx0dGhpcy5IRUJkYWJiSkplRUZFRWFBYkhKQ2NKZGJIRGZGZmNiRy5saW5rT2Zmc2V0WCA9IDA7XHJcblx0XHRcdHRoaXMuSEVCZGFiYkpKZUVGRUVhQWJISkNjSmRiSERmRmZjYkcubGlua09mZnNldFkgPSAwO1xyXG5cdFx0XHR0aGlzLkhFQmRhYmJKSmVFRkVFYUFiSEpDY0pkYkhEZkZmY2JHLnBhZGRpbmdCb3R0b20gPSAwO1xyXG5cdFx0XHR0aGlzLkhFQmRhYmJKSmVFRkVFYUFiSEpDY0pkYkhEZkZmY2JHLnBhZGRpbmdMZWZ0ID0gMDtcclxuXHRcdFx0dGhpcy5IRUJkYWJiSkplRUZFRWFBYkhKQ2NKZGJIRGZGZmNiRy5wYWRkaW5nUmlnaHQgPSAwO1xyXG5cdFx0XHR0aGlzLkhFQmRhYmJKSmVFRkVFYUFiSEpDY0pkYkhEZkZmY2JHLnBhZGRpbmdUb3AgPSAwO1xyXG5cdFx0XHR0aGlzLkhFQmRhYmJKSmVFRkVFYUFiSEpDY0pkYkhEZkZmY2JHLnpJbmRleCA9IDE5O1xyXG5cdFx0XHR0aGlzLkhFQmRhYmJKSmVFRkVFYUFiSEpDY0pkYkhEZkZmY2JHLnNoYWRvd0JsdXIgPSAwO1xyXG5cdFx0XHR0aGlzLkhFQmRhYmJKSmVFRkVFYUFiSEpDY0pkYkhEZkZmY2JHLnNoYWRvd0NvbG9yID0gXCIjRkZGRkZGXCI7XHJcblx0XHRcdHRoaXMuSEVCZGFiYkpKZUVGRUVhQWJISkNjSmRiSERmRmZjYkcuc2hhZG93T2Zmc2V0WCA9IDA7XHJcblx0XHRcdHRoaXMuSEVCZGFiYkpKZUVGRUVhQWJISkNjSmRiSERmRmZjYkcuc2hhZG93T2Zmc2V0WSA9IDA7XHJcblx0XHRcdHRoaXMuSEVCZGFiYkpKZUVGRUVhQWJISkNjSmRiSERmRmZjYkcuaG92ZXJDdXJzb3IgPSBcImF1dG9cIjtcclxuXHRcdFx0dGhpcy5IRUJkYWJiSkplRUZFRWFBYkhKQ2NKZGJIRGZGZmNiRy5hZGFwdFdpZHRoVG9DaGlsZHJlbiA9IGZhbHNlO1xyXG5cdFx0XHR0aGlzLkhFQmRhYmJKSmVFRkVFYUFiSEpDY0pkYkhEZkZmY2JHLmFkYXB0SGVpZ2h0VG9DaGlsZHJlbiA9IGZhbHNlO1xyXG5cdFx0XHR0aGlzLkhFQmRhYmJKSmVFRkVFYUFiSEpDY0pkYkhEZkZmY2JHLmJhY2tncm91bmQgPSBcIiMzODM4MzhcIjtcclxuXHRcdFx0dGhpcy5IRUJkYWJiSkplRUZFRWFBYkhKQ2NKZGJIRGZGZmNiRy5hbHBoYSA9IDE7XHJcblx0XHRcdHRoaXMuSEVCZGFiYkpKZUVGRUVhQWJISkNjSmRiSERmRmZjYkcuY29ybmVyUmFkaXVzID0gMDtcclxuXHRcdFx0dGhpcy5IRUJkYWJiSkplRUZFRWFBYkhKQ2NKZGJIRGZGZmNiRy50aGlja25lc3MgPSAyO1xyXG5cdFx0XHR0aGlzLklGZmZmR2FHY0pISkVDR0NhSEJlYmFISmVCZkJERUdCLmFkZENvbnRyb2wodGhpcy5IRUJkYWJiSkplRUZFRWFBYkhKQ2NKZGJIRGZGZmNiRyk7XHJcblxyXG5cdFx0XHR0aGlzLmNHREpBYWNCQWZkSkVjSmJJQmRIZGVGRGFBZWFkZUlGLmlzVmlzaWJsZSA9IHRydWU7XHJcblx0XHRcdHRoaXMuY0dESkFhY0JBZmRKRWNKYklCZEhkZUZEYUFlYWRlSUYud2lkdGggPSBcIjQ4MHB4XCI7XHJcblx0XHRcdHRoaXMuY0dESkFhY0JBZmRKRWNKYklCZEhkZUZEYUFlYWRlSUYuaGVpZ2h0ID0gXCIzMHB4XCI7XHJcblx0XHRcdHRoaXMuY0dESkFhY0JBZmRKRWNKYklCZEhkZUZEYUFlYWRlSUYudG9wID0gXCItNjBweFwiO1xyXG5cdFx0XHR0aGlzLmNHREpBYWNCQWZkSkVjSmJJQmRIZGVGRGFBZWFkZUlGLnZlcnRpY2FsQWxpZ25tZW50ID0gQkFCWUxPTi5HVUkuQ29udHJvbC5WRVJUSUNBTF9BTElHTk1FTlRfQ0VOVEVSO1xyXG5cdFx0XHR0aGlzLmNHREpBYWNCQWZkSkVjSmJJQmRIZGVGRGFBZWFkZUlGLmxlZnQgPSBcIjBweFwiO1xyXG5cdFx0XHR0aGlzLmNHREpBYWNCQWZkSkVjSmJJQmRIZGVGRGFBZWFkZUlGLmhvcml6b250YWxBbGlnbm1lbnQgPSBCQUJZTE9OLkdVSS5Db250cm9sLkhPUklaT05UQUxfQUxJR05NRU5UX0NFTlRFUjtcclxuXHRcdFx0dGhpcy5jR0RKQWFjQkFmZEpFY0piSUJkSGRlRkRhQWVhZGVJRi5yb3RhdGlvbiA9IDA7XHJcblx0XHRcdHRoaXMuY0dESkFhY0JBZmRKRWNKYklCZEhkZUZEYUFlYWRlSUYuc2NhbGVYID0gMTtcclxuXHRcdFx0dGhpcy5jR0RKQWFjQkFmZEpFY0piSUJkSGRlRkRhQWVhZGVJRi5zY2FsZVkgPSAxO1xyXG5cdFx0XHR0aGlzLmNHREpBYWNCQWZkSkVjSmJJQmRIZGVGRGFBZWFkZUlGLmlzRm9jdXNJbnZpc2libGUgPSBmYWxzZTtcclxuXHRcdFx0dGhpcy5jR0RKQWFjQkFmZEpFY0piSUJkSGRlRkRhQWVhZGVJRi5hbHBoYSA9IDE7XHJcblx0XHRcdHRoaXMuY0dESkFhY0JBZmRKRWNKYklCZEhkZUZEYUFlYWRlSUYuY29sb3IgPSBcIiNGRkZGRkZcIjtcclxuXHRcdFx0dGhpcy5jR0RKQWFjQkFmZEpFY0piSUJkSGRlRkRhQWVhZGVJRi5kaXNhYmxlZENvbG9yID0gXCIjRkZGRkZGXCI7XHJcblx0XHRcdHRoaXMuY0dESkFhY0JBZmRKRWNKYklCZEhkZUZEYUFlYWRlSUYuZGlzYWJsZWRDb2xvckl0ZW0gPSBcIiNGRkZGRkZcIjtcclxuXHRcdFx0dGhpcy5jR0RKQWFjQkFmZEpFY0piSUJkSGRlRkRhQWVhZGVJRi5oaWdobGlnaHRDb2xvciA9IFwiI0Y1RjVGNVwiO1xyXG5cdFx0XHR0aGlzLmNHREpBYWNCQWZkSkVjSmJJQmRIZGVGRGFBZWFkZUlGLmhpZ2hsaWdodExpbmVXaWR0aCA9IDA7XHJcblx0XHRcdHRoaXMuY0dESkFhY0JBZmRKRWNKYklCZEhkZUZEYUFlYWRlSUYuaXNIaWdobGlnaHRlZCA9IGZhbHNlO1xyXG5cdFx0XHR0aGlzLmNHREpBYWNCQWZkSkVjSmJJQmRIZGVGRGFBZWFkZUlGLmxpbmtPZmZzZXRYID0gMDtcclxuXHRcdFx0dGhpcy5jR0RKQWFjQkFmZEpFY0piSUJkSGRlRkRhQWVhZGVJRi5saW5rT2Zmc2V0WSA9IDA7XHJcblx0XHRcdHRoaXMuY0dESkFhY0JBZmRKRWNKYklCZEhkZUZEYUFlYWRlSUYucGFkZGluZ0JvdHRvbSA9IDA7XHJcblx0XHRcdHRoaXMuY0dESkFhY0JBZmRKRWNKYklCZEhkZUZEYUFlYWRlSUYucGFkZGluZ0xlZnQgPSAwO1xyXG5cdFx0XHR0aGlzLmNHREpBYWNCQWZkSkVjSmJJQmRIZGVGRGFBZWFkZUlGLnBhZGRpbmdSaWdodCA9IDA7XHJcblx0XHRcdHRoaXMuY0dESkFhY0JBZmRKRWNKYklCZEhkZUZEYUFlYWRlSUYucGFkZGluZ1RvcCA9IDA7XHJcblx0XHRcdHRoaXMuY0dESkFhY0JBZmRKRWNKYklCZEhkZUZEYUFlYWRlSUYuekluZGV4ID0gMTg7XHJcblx0XHRcdHRoaXMuY0dESkFhY0JBZmRKRWNKYklCZEhkZUZEYUFlYWRlSUYuc2hhZG93Qmx1ciA9IDA7XHJcblx0XHRcdHRoaXMuY0dESkFhY0JBZmRKRWNKYklCZEhkZUZEYUFlYWRlSUYuc2hhZG93Q29sb3IgPSBcIiNGRkZGRkZcIjtcclxuXHRcdFx0dGhpcy5jR0RKQWFjQkFmZEpFY0piSUJkSGRlRkRhQWVhZGVJRi5zaGFkb3dPZmZzZXRYID0gMDtcclxuXHRcdFx0dGhpcy5jR0RKQWFjQkFmZEpFY0piSUJkSGRlRkRhQWVhZGVJRi5zaGFkb3dPZmZzZXRZID0gMDtcclxuXHRcdFx0dGhpcy5jR0RKQWFjQkFmZEpFY0piSUJkSGRlRkRhQWVhZGVJRi5ob3ZlckN1cnNvciA9IFwiYXV0b1wiO1xyXG5cdFx0XHR0aGlzLmNHREpBYWNCQWZkSkVjSmJJQmRIZGVGRGFBZWFkZUlGLmFkYXB0V2lkdGhUb0NoaWxkcmVuID0gZmFsc2U7XHJcblx0XHRcdHRoaXMuY0dESkFhY0JBZmRKRWNKYklCZEhkZUZEYUFlYWRlSUYuYWRhcHRIZWlnaHRUb0NoaWxkcmVuID0gZmFsc2U7XHJcblx0XHRcdHRoaXMuY0dESkFhY0JBZmRKRWNKYklCZEhkZUZEYUFlYWRlSUYuYmFja2dyb3VuZCA9IFwiIzM4MzgzOFwiO1xyXG5cdFx0XHR0aGlzLmNHREpBYWNCQWZkSkVjSmJJQmRIZGVGRGFBZWFkZUlGLmFscGhhID0gMTtcclxuXHRcdFx0dGhpcy5jR0RKQWFjQkFmZEpFY0piSUJkSGRlRkRhQWVhZGVJRi5jb3JuZXJSYWRpdXMgPSAwO1xyXG5cdFx0XHR0aGlzLmNHREpBYWNCQWZkSkVjSmJJQmRIZGVGRGFBZWFkZUlGLnRoaWNrbmVzcyA9IDI7XHJcblx0XHRcdHRoaXMuSUZmZmZHYUdjSkhKRUNHQ2FIQmViYUhKZUJmQkRFR0IuYWRkQ29udHJvbCh0aGlzLmNHREpBYWNCQWZkSkVjSmJJQmRIZGVGRGFBZWFkZUlGKTtcclxuXHJcblx0XHRcdHRoaXMuYUdDSmJKZklHRWZjRURCZmJBRWJBSUFDREpKZGNCYWQuaXNWaXNpYmxlID0gdHJ1ZTtcclxuXHRcdFx0dGhpcy5hR0NKYkpmSUdFZmNFREJmYkFFYkFJQUNESkpkY0JhZC53aWR0aCA9IFwiNDgwcHhcIjtcclxuXHRcdFx0dGhpcy5hR0NKYkpmSUdFZmNFREJmYkFFYkFJQUNESkpkY0JhZC5oZWlnaHQgPSBcIjMwcHhcIjtcclxuXHRcdFx0dGhpcy5hR0NKYkpmSUdFZmNFREJmYkFFYkFJQUNESkpkY0JhZC50b3AgPSBcIjBweFwiO1xyXG5cdFx0XHR0aGlzLmFHQ0piSmZJR0VmY0VEQmZiQUViQUlBQ0RKSmRjQmFkLnZlcnRpY2FsQWxpZ25tZW50ID0gQkFCWUxPTi5HVUkuQ29udHJvbC5WRVJUSUNBTF9BTElHTk1FTlRfQ0VOVEVSO1xyXG5cdFx0XHR0aGlzLmFHQ0piSmZJR0VmY0VEQmZiQUViQUlBQ0RKSmRjQmFkLmxlZnQgPSBcIjBweFwiO1xyXG5cdFx0XHR0aGlzLmFHQ0piSmZJR0VmY0VEQmZiQUViQUlBQ0RKSmRjQmFkLmhvcml6b250YWxBbGlnbm1lbnQgPSBCQUJZTE9OLkdVSS5Db250cm9sLkhPUklaT05UQUxfQUxJR05NRU5UX0NFTlRFUjtcclxuXHRcdFx0dGhpcy5hR0NKYkpmSUdFZmNFREJmYkFFYkFJQUNESkpkY0JhZC5yb3RhdGlvbiA9IDA7XHJcblx0XHRcdHRoaXMuYUdDSmJKZklHRWZjRURCZmJBRWJBSUFDREpKZGNCYWQuc2NhbGVYID0gMTtcclxuXHRcdFx0dGhpcy5hR0NKYkpmSUdFZmNFREJmYkFFYkFJQUNESkpkY0JhZC5zY2FsZVkgPSAxO1xyXG5cdFx0XHR0aGlzLmFHQ0piSmZJR0VmY0VEQmZiQUViQUlBQ0RKSmRjQmFkLmlzRm9jdXNJbnZpc2libGUgPSBmYWxzZTtcclxuXHRcdFx0dGhpcy5hR0NKYkpmSUdFZmNFREJmYkFFYkFJQUNESkpkY0JhZC5hbHBoYSA9IDE7XHJcblx0XHRcdHRoaXMuYUdDSmJKZklHRWZjRURCZmJBRWJBSUFDREpKZGNCYWQuY29sb3IgPSBcIiNGRkZGRkZcIjtcclxuXHRcdFx0dGhpcy5hR0NKYkpmSUdFZmNFREJmYkFFYkFJQUNESkpkY0JhZC5kaXNhYmxlZENvbG9yID0gXCIjRkZGRkZGXCI7XHJcblx0XHRcdHRoaXMuYUdDSmJKZklHRWZjRURCZmJBRWJBSUFDREpKZGNCYWQuZGlzYWJsZWRDb2xvckl0ZW0gPSBcIiNGRkZGRkZcIjtcclxuXHRcdFx0dGhpcy5hR0NKYkpmSUdFZmNFREJmYkFFYkFJQUNESkpkY0JhZC5oaWdobGlnaHRDb2xvciA9IFwiI0Y1RjVGNVwiO1xyXG5cdFx0XHR0aGlzLmFHQ0piSmZJR0VmY0VEQmZiQUViQUlBQ0RKSmRjQmFkLmhpZ2hsaWdodExpbmVXaWR0aCA9IDA7XHJcblx0XHRcdHRoaXMuYUdDSmJKZklHRWZjRURCZmJBRWJBSUFDREpKZGNCYWQuaXNIaWdobGlnaHRlZCA9IGZhbHNlO1xyXG5cdFx0XHR0aGlzLmFHQ0piSmZJR0VmY0VEQmZiQUViQUlBQ0RKSmRjQmFkLmxpbmtPZmZzZXRYID0gMDtcclxuXHRcdFx0dGhpcy5hR0NKYkpmSUdFZmNFREJmYkFFYkFJQUNESkpkY0JhZC5saW5rT2Zmc2V0WSA9IDA7XHJcblx0XHRcdHRoaXMuYUdDSmJKZklHRWZjRURCZmJBRWJBSUFDREpKZGNCYWQucGFkZGluZ0JvdHRvbSA9IDA7XHJcblx0XHRcdHRoaXMuYUdDSmJKZklHRWZjRURCZmJBRWJBSUFDREpKZGNCYWQucGFkZGluZ0xlZnQgPSAwO1xyXG5cdFx0XHR0aGlzLmFHQ0piSmZJR0VmY0VEQmZiQUViQUlBQ0RKSmRjQmFkLnBhZGRpbmdSaWdodCA9IDA7XHJcblx0XHRcdHRoaXMuYUdDSmJKZklHRWZjRURCZmJBRWJBSUFDREpKZGNCYWQucGFkZGluZ1RvcCA9IDA7XHJcblx0XHRcdHRoaXMuYUdDSmJKZklHRWZjRURCZmJBRWJBSUFDREpKZGNCYWQuekluZGV4ID0gMTc7XHJcblx0XHRcdHRoaXMuYUdDSmJKZklHRWZjRURCZmJBRWJBSUFDREpKZGNCYWQuc2hhZG93Qmx1ciA9IDA7XHJcblx0XHRcdHRoaXMuYUdDSmJKZklHRWZjRURCZmJBRWJBSUFDREpKZGNCYWQuc2hhZG93Q29sb3IgPSBcIiNGRkZGRkZcIjtcclxuXHRcdFx0dGhpcy5hR0NKYkpmSUdFZmNFREJmYkFFYkFJQUNESkpkY0JhZC5zaGFkb3dPZmZzZXRYID0gMDtcclxuXHRcdFx0dGhpcy5hR0NKYkpmSUdFZmNFREJmYkFFYkFJQUNESkpkY0JhZC5zaGFkb3dPZmZzZXRZID0gMDtcclxuXHRcdFx0dGhpcy5hR0NKYkpmSUdFZmNFREJmYkFFYkFJQUNESkpkY0JhZC5ob3ZlckN1cnNvciA9IFwiYXV0b1wiO1xyXG5cdFx0XHR0aGlzLmFHQ0piSmZJR0VmY0VEQmZiQUViQUlBQ0RKSmRjQmFkLmFkYXB0V2lkdGhUb0NoaWxkcmVuID0gZmFsc2U7XHJcblx0XHRcdHRoaXMuYUdDSmJKZklHRWZjRURCZmJBRWJBSUFDREpKZGNCYWQuYWRhcHRIZWlnaHRUb0NoaWxkcmVuID0gZmFsc2U7XHJcblx0XHRcdHRoaXMuYUdDSmJKZklHRWZjRURCZmJBRWJBSUFDREpKZGNCYWQuYmFja2dyb3VuZCA9IFwiIzM4MzgzOFwiO1xyXG5cdFx0XHR0aGlzLmFHQ0piSmZJR0VmY0VEQmZiQUViQUlBQ0RKSmRjQmFkLmFscGhhID0gMTtcclxuXHRcdFx0dGhpcy5hR0NKYkpmSUdFZmNFREJmYkFFYkFJQUNESkpkY0JhZC5jb3JuZXJSYWRpdXMgPSAwO1xyXG5cdFx0XHR0aGlzLmFHQ0piSmZJR0VmY0VEQmZiQUViQUlBQ0RKSmRjQmFkLnRoaWNrbmVzcyA9IDI7XHJcblx0XHRcdHRoaXMuSUZmZmZHYUdjSkhKRUNHQ2FIQmViYUhKZUJmQkRFR0IuYWRkQ29udHJvbCh0aGlzLmFHQ0piSmZJR0VmY0VEQmZiQUViQUlBQ0RKSmRjQmFkKTtcclxuXHJcblx0XHRcdHRoaXMuYWJJQUpHSEpjR0NhRURGSWJjZEhjYkhDY0dKSmVKYUYuaXNWaXNpYmxlID0gdHJ1ZTtcclxuXHRcdFx0dGhpcy5hYklBSkdISmNHQ2FFREZJYmNkSGNiSENjR0pKZUphRi53aWR0aCA9IFwiNDgwcHhcIjtcclxuXHRcdFx0dGhpcy5hYklBSkdISmNHQ2FFREZJYmNkSGNiSENjR0pKZUphRi5oZWlnaHQgPSBcIjMwcHhcIjtcclxuXHRcdFx0dGhpcy5hYklBSkdISmNHQ2FFREZJYmNkSGNiSENjR0pKZUphRi50b3AgPSBcIjEyMHB4XCI7XHJcblx0XHRcdHRoaXMuYWJJQUpHSEpjR0NhRURGSWJjZEhjYkhDY0dKSmVKYUYudmVydGljYWxBbGlnbm1lbnQgPSBCQUJZTE9OLkdVSS5Db250cm9sLlZFUlRJQ0FMX0FMSUdOTUVOVF9DRU5URVI7XHJcblx0XHRcdHRoaXMuYWJJQUpHSEpjR0NhRURGSWJjZEhjYkhDY0dKSmVKYUYubGVmdCA9IFwiMHB4XCI7XHJcblx0XHRcdHRoaXMuYWJJQUpHSEpjR0NhRURGSWJjZEhjYkhDY0dKSmVKYUYuaG9yaXpvbnRhbEFsaWdubWVudCA9IEJBQllMT04uR1VJLkNvbnRyb2wuSE9SSVpPTlRBTF9BTElHTk1FTlRfQ0VOVEVSO1xyXG5cdFx0XHR0aGlzLmFiSUFKR0hKY0dDYUVERkliY2RIY2JIQ2NHSkplSmFGLnJvdGF0aW9uID0gMDtcclxuXHRcdFx0dGhpcy5hYklBSkdISmNHQ2FFREZJYmNkSGNiSENjR0pKZUphRi5zY2FsZVggPSAxO1xyXG5cdFx0XHR0aGlzLmFiSUFKR0hKY0dDYUVERkliY2RIY2JIQ2NHSkplSmFGLnNjYWxlWSA9IDE7XHJcblx0XHRcdHRoaXMuYWJJQUpHSEpjR0NhRURGSWJjZEhjYkhDY0dKSmVKYUYuaXNGb2N1c0ludmlzaWJsZSA9IGZhbHNlO1xyXG5cdFx0XHR0aGlzLmFiSUFKR0hKY0dDYUVERkliY2RIY2JIQ2NHSkplSmFGLmFscGhhID0gMTtcclxuXHRcdFx0dGhpcy5hYklBSkdISmNHQ2FFREZJYmNkSGNiSENjR0pKZUphRi5jb2xvciA9IFwiI0ZGRkZGRlwiO1xyXG5cdFx0XHR0aGlzLmFiSUFKR0hKY0dDYUVERkliY2RIY2JIQ2NHSkplSmFGLmRpc2FibGVkQ29sb3IgPSBcIiNGRkZGRkZcIjtcclxuXHRcdFx0dGhpcy5hYklBSkdISmNHQ2FFREZJYmNkSGNiSENjR0pKZUphRi5kaXNhYmxlZENvbG9ySXRlbSA9IFwiI0ZGRkZGRlwiO1xyXG5cdFx0XHR0aGlzLmFiSUFKR0hKY0dDYUVERkliY2RIY2JIQ2NHSkplSmFGLmhpZ2hsaWdodENvbG9yID0gXCIjRjVGNUY1XCI7XHJcblx0XHRcdHRoaXMuYWJJQUpHSEpjR0NhRURGSWJjZEhjYkhDY0dKSmVKYUYuaGlnaGxpZ2h0TGluZVdpZHRoID0gMDtcclxuXHRcdFx0dGhpcy5hYklBSkdISmNHQ2FFREZJYmNkSGNiSENjR0pKZUphRi5pc0hpZ2hsaWdodGVkID0gZmFsc2U7XHJcblx0XHRcdHRoaXMuYWJJQUpHSEpjR0NhRURGSWJjZEhjYkhDY0dKSmVKYUYubGlua09mZnNldFggPSAwO1xyXG5cdFx0XHR0aGlzLmFiSUFKR0hKY0dDYUVERkliY2RIY2JIQ2NHSkplSmFGLmxpbmtPZmZzZXRZID0gMDtcclxuXHRcdFx0dGhpcy5hYklBSkdISmNHQ2FFREZJYmNkSGNiSENjR0pKZUphRi5wYWRkaW5nQm90dG9tID0gMDtcclxuXHRcdFx0dGhpcy5hYklBSkdISmNHQ2FFREZJYmNkSGNiSENjR0pKZUphRi5wYWRkaW5nTGVmdCA9IDA7XHJcblx0XHRcdHRoaXMuYWJJQUpHSEpjR0NhRURGSWJjZEhjYkhDY0dKSmVKYUYucGFkZGluZ1JpZ2h0ID0gMDtcclxuXHRcdFx0dGhpcy5hYklBSkdISmNHQ2FFREZJYmNkSGNiSENjR0pKZUphRi5wYWRkaW5nVG9wID0gMDtcclxuXHRcdFx0dGhpcy5hYklBSkdISmNHQ2FFREZJYmNkSGNiSENjR0pKZUphRi56SW5kZXggPSAyMDtcclxuXHRcdFx0dGhpcy5hYklBSkdISmNHQ2FFREZJYmNkSGNiSENjR0pKZUphRi5zaGFkb3dCbHVyID0gMDtcclxuXHRcdFx0dGhpcy5hYklBSkdISmNHQ2FFREZJYmNkSGNiSENjR0pKZUphRi5zaGFkb3dDb2xvciA9IFwiI0ZGRkZGRlwiO1xyXG5cdFx0XHR0aGlzLmFiSUFKR0hKY0dDYUVERkliY2RIY2JIQ2NHSkplSmFGLnNoYWRvd09mZnNldFggPSAwO1xyXG5cdFx0XHR0aGlzLmFiSUFKR0hKY0dDYUVERkliY2RIY2JIQ2NHSkplSmFGLnNoYWRvd09mZnNldFkgPSAwO1xyXG5cdFx0XHR0aGlzLmFiSUFKR0hKY0dDYUVERkliY2RIY2JIQ2NHSkplSmFGLmhvdmVyQ3Vyc29yID0gXCJhdXRvXCI7XHJcblx0XHRcdHRoaXMuYWJJQUpHSEpjR0NhRURGSWJjZEhjYkhDY0dKSmVKYUYuYWRhcHRXaWR0aFRvQ2hpbGRyZW4gPSBmYWxzZTtcclxuXHRcdFx0dGhpcy5hYklBSkdISmNHQ2FFREZJYmNkSGNiSENjR0pKZUphRi5hZGFwdEhlaWdodFRvQ2hpbGRyZW4gPSBmYWxzZTtcclxuXHRcdFx0dGhpcy5hYklBSkdISmNHQ2FFREZJYmNkSGNiSENjR0pKZUphRi5iYWNrZ3JvdW5kID0gXCIjMzgzODM4XCI7XHJcblx0XHRcdHRoaXMuYWJJQUpHSEpjR0NhRURGSWJjZEhjYkhDY0dKSmVKYUYuYWxwaGEgPSAxO1xyXG5cdFx0XHR0aGlzLmFiSUFKR0hKY0dDYUVERkliY2RIY2JIQ2NHSkplSmFGLmNvcm5lclJhZGl1cyA9IDA7XHJcblx0XHRcdHRoaXMuYWJJQUpHSEpjR0NhRURGSWJjZEhjYkhDY0dKSmVKYUYudGhpY2tuZXNzID0gMjtcclxuXHRcdFx0dGhpcy5JRmZmZkdhR2NKSEpFQ0dDYUhCZWJhSEplQmZCREVHQi5hZGRDb250cm9sKHRoaXMuYWJJQUpHSEpjR0NhRURGSWJjZEhjYkhDY0dKSmVKYUYpO1xyXG5cclxuXHRcdFx0dGhpcy5IRkNiQ0VkZWFHQklFQkpGYmZlZEJkQ0RiYWVlY0NkSS5pc1Zpc2libGUgPSB0cnVlO1xyXG5cdFx0XHR0aGlzLkhGQ2JDRWRlYUdCSUVCSkZiZmVkQmRDRGJhZWVjQ2RJLndpZHRoID0gXCI0ODBweFwiO1xyXG5cdFx0XHR0aGlzLkhGQ2JDRWRlYUdCSUVCSkZiZmVkQmRDRGJhZWVjQ2RJLmhlaWdodCA9IFwiMzBweFwiO1xyXG5cdFx0XHR0aGlzLkhGQ2JDRWRlYUdCSUVCSkZiZmVkQmRDRGJhZWVjQ2RJLnRvcCA9IFwiLTEyMHB4XCI7XHJcblx0XHRcdHRoaXMuSEZDYkNFZGVhR0JJRUJKRmJmZWRCZENEYmFlZWNDZEkudmVydGljYWxBbGlnbm1lbnQgPSBCQUJZTE9OLkdVSS5Db250cm9sLlZFUlRJQ0FMX0FMSUdOTUVOVF9DRU5URVI7XHJcblx0XHRcdHRoaXMuSEZDYkNFZGVhR0JJRUJKRmJmZWRCZENEYmFlZWNDZEkubGVmdCA9IFwiMHB4XCI7XHJcblx0XHRcdHRoaXMuSEZDYkNFZGVhR0JJRUJKRmJmZWRCZENEYmFlZWNDZEkuaG9yaXpvbnRhbEFsaWdubWVudCA9IEJBQllMT04uR1VJLkNvbnRyb2wuSE9SSVpPTlRBTF9BTElHTk1FTlRfQ0VOVEVSO1xyXG5cdFx0XHR0aGlzLkhGQ2JDRWRlYUdCSUVCSkZiZmVkQmRDRGJhZWVjQ2RJLnJvdGF0aW9uID0gMDtcclxuXHRcdFx0dGhpcy5IRkNiQ0VkZWFHQklFQkpGYmZlZEJkQ0RiYWVlY0NkSS5zY2FsZVggPSAxO1xyXG5cdFx0XHR0aGlzLkhGQ2JDRWRlYUdCSUVCSkZiZmVkQmRDRGJhZWVjQ2RJLnNjYWxlWSA9IDE7XHJcblx0XHRcdHRoaXMuSEZDYkNFZGVhR0JJRUJKRmJmZWRCZENEYmFlZWNDZEkuaXNGb2N1c0ludmlzaWJsZSA9IGZhbHNlO1xyXG5cdFx0XHR0aGlzLkhGQ2JDRWRlYUdCSUVCSkZiZmVkQmRDRGJhZWVjQ2RJLmFscGhhID0gMTtcclxuXHRcdFx0dGhpcy5IRkNiQ0VkZWFHQklFQkpGYmZlZEJkQ0RiYWVlY0NkSS5jb2xvciA9IFwiI0ZGRkZGRlwiO1xyXG5cdFx0XHR0aGlzLkhGQ2JDRWRlYUdCSUVCSkZiZmVkQmRDRGJhZWVjQ2RJLmRpc2FibGVkQ29sb3IgPSBcIiNGRkZGRkZcIjtcclxuXHRcdFx0dGhpcy5IRkNiQ0VkZWFHQklFQkpGYmZlZEJkQ0RiYWVlY0NkSS5kaXNhYmxlZENvbG9ySXRlbSA9IFwiI0ZGRkZGRlwiO1xyXG5cdFx0XHR0aGlzLkhGQ2JDRWRlYUdCSUVCSkZiZmVkQmRDRGJhZWVjQ2RJLmhpZ2hsaWdodENvbG9yID0gXCIjRjVGNUY1XCI7XHJcblx0XHRcdHRoaXMuSEZDYkNFZGVhR0JJRUJKRmJmZWRCZENEYmFlZWNDZEkuaGlnaGxpZ2h0TGluZVdpZHRoID0gMDtcclxuXHRcdFx0dGhpcy5IRkNiQ0VkZWFHQklFQkpGYmZlZEJkQ0RiYWVlY0NkSS5pc0hpZ2hsaWdodGVkID0gZmFsc2U7XHJcblx0XHRcdHRoaXMuSEZDYkNFZGVhR0JJRUJKRmJmZWRCZENEYmFlZWNDZEkubGlua09mZnNldFggPSAwO1xyXG5cdFx0XHR0aGlzLkhGQ2JDRWRlYUdCSUVCSkZiZmVkQmRDRGJhZWVjQ2RJLmxpbmtPZmZzZXRZID0gMDtcclxuXHRcdFx0dGhpcy5IRkNiQ0VkZWFHQklFQkpGYmZlZEJkQ0RiYWVlY0NkSS5wYWRkaW5nQm90dG9tID0gMDtcclxuXHRcdFx0dGhpcy5IRkNiQ0VkZWFHQklFQkpGYmZlZEJkQ0RiYWVlY0NkSS5wYWRkaW5nTGVmdCA9IDA7XHJcblx0XHRcdHRoaXMuSEZDYkNFZGVhR0JJRUJKRmJmZWRCZENEYmFlZWNDZEkucGFkZGluZ1JpZ2h0ID0gMDtcclxuXHRcdFx0dGhpcy5IRkNiQ0VkZWFHQklFQkpGYmZlZEJkQ0RiYWVlY0NkSS5wYWRkaW5nVG9wID0gMDtcclxuXHRcdFx0dGhpcy5IRkNiQ0VkZWFHQklFQkpGYmZlZEJkQ0RiYWVlY0NkSS56SW5kZXggPSAyMTtcclxuXHRcdFx0dGhpcy5IRkNiQ0VkZWFHQklFQkpGYmZlZEJkQ0RiYWVlY0NkSS5zaGFkb3dCbHVyID0gMDtcclxuXHRcdFx0dGhpcy5IRkNiQ0VkZWFHQklFQkpGYmZlZEJkQ0RiYWVlY0NkSS5zaGFkb3dDb2xvciA9IFwiI0ZGRkZGRlwiO1xyXG5cdFx0XHR0aGlzLkhGQ2JDRWRlYUdCSUVCSkZiZmVkQmRDRGJhZWVjQ2RJLnNoYWRvd09mZnNldFggPSAwO1xyXG5cdFx0XHR0aGlzLkhGQ2JDRWRlYUdCSUVCSkZiZmVkQmRDRGJhZWVjQ2RJLnNoYWRvd09mZnNldFkgPSAwO1xyXG5cdFx0XHR0aGlzLkhGQ2JDRWRlYUdCSUVCSkZiZmVkQmRDRGJhZWVjQ2RJLmhvdmVyQ3Vyc29yID0gXCJhdXRvXCI7XHJcblx0XHRcdHRoaXMuSEZDYkNFZGVhR0JJRUJKRmJmZWRCZENEYmFlZWNDZEkuYWRhcHRXaWR0aFRvQ2hpbGRyZW4gPSBmYWxzZTtcclxuXHRcdFx0dGhpcy5IRkNiQ0VkZWFHQklFQkpGYmZlZEJkQ0RiYWVlY0NkSS5hZGFwdEhlaWdodFRvQ2hpbGRyZW4gPSBmYWxzZTtcclxuXHRcdFx0dGhpcy5IRkNiQ0VkZWFHQklFQkpGYmZlZEJkQ0RiYWVlY0NkSS5iYWNrZ3JvdW5kID0gXCIjMzgzODM4XCI7XHJcblx0XHRcdHRoaXMuSEZDYkNFZGVhR0JJRUJKRmJmZWRCZENEYmFlZWNDZEkuYWxwaGEgPSAxO1xyXG5cdFx0XHR0aGlzLkhGQ2JDRWRlYUdCSUVCSkZiZmVkQmRDRGJhZWVjQ2RJLmNvcm5lclJhZGl1cyA9IDA7XHJcblx0XHRcdHRoaXMuSEZDYkNFZGVhR0JJRUJKRmJmZWRCZENEYmFlZWNDZEkudGhpY2tuZXNzID0gMjtcclxuXHRcdFx0dGhpcy5JRmZmZkdhR2NKSEpFQ0dDYUhCZWJhSEplQmZCREVHQi5hZGRDb250cm9sKHRoaXMuSEZDYkNFZGVhR0JJRUJKRmJmZWRCZENEYmFlZWNDZEkpO1xyXG5cclxuXHRcdFx0bGV0IGZDSENiZWFjYUJkREVJRmZiY0ZJSURlQUVkRUVHSGNmX3N0eWxlID0gdGhpcy5hZHZhbmNlZFRleHR1cmUuY3JlYXRlU3R5bGUoKTtcclxuXHRcdFx0ZkNIQ2JlYWNhQmRERUlGZmJjRklJRGVBRWRFRUdIY2Zfc3R5bGUuZm9udFNpemUgPSAyNDtcclxuXHRcdFx0ZkNIQ2JlYWNhQmRERUlGZmJjRklJRGVBRWRFRUdIY2Zfc3R5bGUuZm9udFN0eWxlID0gXCJub3JtYWxcIjtcclxuXHRcdFx0ZkNIQ2JlYWNhQmRERUlGZmJjRklJRGVBRWRFRUdIY2Zfc3R5bGUuZm9udEZhbWlseSA9IFwiYXJpYWxcIjtcclxuXHRcdFx0ZkNIQ2JlYWNhQmRERUlGZmJjRklJRGVBRWRFRUdIY2Zfc3R5bGUuZm9udFdlaWdodCA9IFwibm9ybWFsXCI7XHJcblx0XHRcdHRoaXMuZkNIQ2JlYWNhQmRERUlGZmJjRklJRGVBRWRFRUdIY2Yuc3R5bGUgPSBmQ0hDYmVhY2FCZERFSUZmYmNGSUlEZUFFZEVFR0hjZl9zdHlsZTtcclxuXHJcblx0XHRcdGxldCBGR0hIYURkRUlJQ2JFY0ZJSWVFQWVhSEJmREpDY0ZCZF9zdHlsZSA9IHRoaXMuYWR2YW5jZWRUZXh0dXJlLmNyZWF0ZVN0eWxlKCk7XHJcblx0XHRcdEZHSEhhRGRFSUlDYkVjRklJZUVBZWFIQmZESkNjRkJkX3N0eWxlLmZvbnRTaXplID0gMjQ7XHJcblx0XHRcdEZHSEhhRGRFSUlDYkVjRklJZUVBZWFIQmZESkNjRkJkX3N0eWxlLmZvbnRTdHlsZSA9IFwibm9ybWFsXCI7XHJcblx0XHRcdEZHSEhhRGRFSUlDYkVjRklJZUVBZWFIQmZESkNjRkJkX3N0eWxlLmZvbnRGYW1pbHkgPSBcImFyaWFsXCI7XHJcblx0XHRcdEZHSEhhRGRFSUlDYkVjRklJZUVBZWFIQmZESkNjRkJkX3N0eWxlLmZvbnRXZWlnaHQgPSBcIm5vcm1hbFwiO1xyXG5cdFx0XHR0aGlzLkZHSEhhRGRFSUlDYkVjRklJZUVBZWFIQmZESkNjRkJkLnN0eWxlID0gRkdISGFEZEVJSUNiRWNGSUllRUFlYUhCZkRKQ2NGQmRfc3R5bGU7XHJcblxyXG5cdFx0XHRsZXQgQ2ZiZWZhSkNBQmFCRUZCQ0pBYmJFQUhFQkNGQ2FCQUNfc3R5bGUgPSB0aGlzLmFkdmFuY2VkVGV4dHVyZS5jcmVhdGVTdHlsZSgpO1xyXG5cdFx0XHRDZmJlZmFKQ0FCYUJFRkJDSkFiYkVBSEVCQ0ZDYUJBQ19zdHlsZS5mb250U2l6ZSA9IDYyLjQ7XHJcblx0XHRcdENmYmVmYUpDQUJhQkVGQkNKQWJiRUFIRUJDRkNhQkFDX3N0eWxlLmZvbnRTdHlsZSA9IFwibm9ybWFsXCI7XHJcblx0XHRcdENmYmVmYUpDQUJhQkVGQkNKQWJiRUFIRUJDRkNhQkFDX3N0eWxlLmZvbnRGYW1pbHkgPSBcImFyaWFsXCI7XHJcblx0XHRcdENmYmVmYUpDQUJhQkVGQkNKQWJiRUFIRUJDRkNhQkFDX3N0eWxlLmZvbnRXZWlnaHQgPSBcIm5vcm1hbFwiO1xyXG5cdFx0XHR0aGlzLkNmYmVmYUpDQUJhQkVGQkNKQWJiRUFIRUJDRkNhQkFDLnN0eWxlID0gQ2ZiZWZhSkNBQmFCRUZCQ0pBYmJFQUhFQkNGQ2FCQUNfc3R5bGU7XHJcblxyXG5cdFx0XHRsZXQgQmZjSGRFRmNDSURiRUNjYmFhSEFmSkRCQUpFZWVmREpfc3R5bGUgPSB0aGlzLmFkdmFuY2VkVGV4dHVyZS5jcmVhdGVTdHlsZSgpO1xyXG5cdFx0XHRCZmNIZEVGY0NJRGJFQ2NiYWFIQWZKREJBSkVlZWZESl9zdHlsZS5mb250U2l6ZSA9IDI0O1xyXG5cdFx0XHRCZmNIZEVGY0NJRGJFQ2NiYWFIQWZKREJBSkVlZWZESl9zdHlsZS5mb250U3R5bGUgPSBcIm5vcm1hbFwiO1xyXG5cdFx0XHRCZmNIZEVGY0NJRGJFQ2NiYWFIQWZKREJBSkVlZWZESl9zdHlsZS5mb250RmFtaWx5ID0gXCJhcmlhbFwiO1xyXG5cdFx0XHRCZmNIZEVGY0NJRGJFQ2NiYWFIQWZKREJBSkVlZWZESl9zdHlsZS5mb250V2VpZ2h0ID0gXCJub3JtYWxcIjtcclxuXHRcdFx0dGhpcy5CZmNIZEVGY0NJRGJFQ2NiYWFIQWZKREJBSkVlZWZESi5zdHlsZSA9IEJmY0hkRUZjQ0lEYkVDY2JhYUhBZkpEQkFKRWVlZkRKX3N0eWxlO1xyXG5cclxuXHRcdFx0bGV0IGFDRWZGSkpkZEdiSUVFZEJhQWJjRkRHREhDQmJkYmZGX3N0eWxlID0gdGhpcy5hZHZhbmNlZFRleHR1cmUuY3JlYXRlU3R5bGUoKTtcclxuXHRcdFx0YUNFZkZKSmRkR2JJRUVkQmFBYmNGREdESENCYmRiZkZfc3R5bGUuZm9udFNpemUgPSAyNDtcclxuXHRcdFx0YUNFZkZKSmRkR2JJRUVkQmFBYmNGREdESENCYmRiZkZfc3R5bGUuZm9udFN0eWxlID0gXCJub3JtYWxcIjtcclxuXHRcdFx0YUNFZkZKSmRkR2JJRUVkQmFBYmNGREdESENCYmRiZkZfc3R5bGUuZm9udEZhbWlseSA9IFwiYXJpYWxcIjtcclxuXHRcdFx0YUNFZkZKSmRkR2JJRUVkQmFBYmNGREdESENCYmRiZkZfc3R5bGUuZm9udFdlaWdodCA9IFwibm9ybWFsXCI7XHJcblx0XHRcdHRoaXMuYUNFZkZKSmRkR2JJRUVkQmFBYmNGREdESENCYmRiZkYuc3R5bGUgPSBhQ0VmRkpKZGRHYklFRWRCYUFiY0ZER0RIQ0JiZGJmRl9zdHlsZTtcclxuXHJcblx0XHRcdGxldCBjSkRKSWRDYkNGZGJFZGJmYmFGYkZDQURiZGFhYWJDSV9zdHlsZSA9IHRoaXMuYWR2YW5jZWRUZXh0dXJlLmNyZWF0ZVN0eWxlKCk7XHJcblx0XHRcdGNKREpJZENiQ0ZkYkVkYmZiYUZiRkNBRGJkYWFhYkNJX3N0eWxlLmZvbnRTaXplID0gMjQ7XHJcblx0XHRcdGNKREpJZENiQ0ZkYkVkYmZiYUZiRkNBRGJkYWFhYkNJX3N0eWxlLmZvbnRTdHlsZSA9IFwibm9ybWFsXCI7XHJcblx0XHRcdGNKREpJZENiQ0ZkYkVkYmZiYUZiRkNBRGJkYWFhYkNJX3N0eWxlLmZvbnRGYW1pbHkgPSBcImFyaWFsXCI7XHJcblx0XHRcdGNKREpJZENiQ0ZkYkVkYmZiYUZiRkNBRGJkYWFhYkNJX3N0eWxlLmZvbnRXZWlnaHQgPSBcIm5vcm1hbFwiO1xyXG5cdFx0XHR0aGlzLmNKREpJZENiQ0ZkYkVkYmZiYUZiRkNBRGJkYWFhYkNJLnN0eWxlID0gY0pESklkQ2JDRmRiRWRiZmJhRmJGQ0FEYmRhYWFiQ0lfc3R5bGU7XHJcblxyXG5cdFx0XHRsZXQgSEJBRUVlSUdhSmVhRURJQUlBSmVFSmNESkpGYmJhQ0Rfc3R5bGUgPSB0aGlzLmFkdmFuY2VkVGV4dHVyZS5jcmVhdGVTdHlsZSgpO1xyXG5cdFx0XHRIQkFFRWVJR2FKZWFFRElBSUFKZUVKY0RKSkZiYmFDRF9zdHlsZS5mb250U2l6ZSA9IDI0O1xyXG5cdFx0XHRIQkFFRWVJR2FKZWFFRElBSUFKZUVKY0RKSkZiYmFDRF9zdHlsZS5mb250U3R5bGUgPSBcIm5vcm1hbFwiO1xyXG5cdFx0XHRIQkFFRWVJR2FKZWFFRElBSUFKZUVKY0RKSkZiYmFDRF9zdHlsZS5mb250RmFtaWx5ID0gXCJhcmlhbFwiO1xyXG5cdFx0XHRIQkFFRWVJR2FKZWFFRElBSUFKZUVKY0RKSkZiYmFDRF9zdHlsZS5mb250V2VpZ2h0ID0gXCJub3JtYWxcIjtcclxuXHRcdFx0dGhpcy5IQkFFRWVJR2FKZWFFRElBSUFKZUVKY0RKSkZiYmFDRC5zdHlsZSA9IEhCQUVFZUlHYUplYUVESUFJQUplRUpjREpKRmJiYUNEX3N0eWxlO1xyXG5cclxuXHRcdFx0bGV0IGJDREFkSkFGSUlBZEVJRUdJYWZlSEplSWZIYWZjREhiX3N0eWxlID0gdGhpcy5hZHZhbmNlZFRleHR1cmUuY3JlYXRlU3R5bGUoKTtcclxuXHRcdFx0YkNEQWRKQUZJSUFkRUlFR0lhZmVISmVJZkhhZmNESGJfc3R5bGUuZm9udFNpemUgPSAyNDtcclxuXHRcdFx0YkNEQWRKQUZJSUFkRUlFR0lhZmVISmVJZkhhZmNESGJfc3R5bGUuZm9udFN0eWxlID0gXCJub3JtYWxcIjtcclxuXHRcdFx0YkNEQWRKQUZJSUFkRUlFR0lhZmVISmVJZkhhZmNESGJfc3R5bGUuZm9udEZhbWlseSA9IFwiYXJpYWxcIjtcclxuXHRcdFx0YkNEQWRKQUZJSUFkRUlFR0lhZmVISmVJZkhhZmNESGJfc3R5bGUuZm9udFdlaWdodCA9IFwibm9ybWFsXCI7XHJcblx0XHRcdHRoaXMuYkNEQWRKQUZJSUFkRUlFR0lhZmVISmVJZkhhZmNESGIuc3R5bGUgPSBiQ0RBZEpBRklJQWRFSUVHSWFmZUhKZUlmSGFmY0RIYl9zdHlsZTtcclxuXHJcblx0XHRcdGxldCBJY0VHRGRJY2FEQUJFQmFjSUFhY0lkQkZHY0JlQkNjQV9zdHlsZSA9IHRoaXMuYWR2YW5jZWRUZXh0dXJlLmNyZWF0ZVN0eWxlKCk7XHJcblx0XHRcdEljRUdEZEljYURBQkVCYWNJQWFjSWRCRkdjQmVCQ2NBX3N0eWxlLmZvbnRTaXplID0gNjIuNDtcclxuXHRcdFx0SWNFR0RkSWNhREFCRUJhY0lBYWNJZEJGR2NCZUJDY0Ffc3R5bGUuZm9udFN0eWxlID0gXCJpdGFsaWNcIjtcclxuXHRcdFx0SWNFR0RkSWNhREFCRUJhY0lBYWNJZEJGR2NCZUJDY0Ffc3R5bGUuZm9udEZhbWlseSA9IFwiYXJpYWxcIjtcclxuXHRcdFx0SWNFR0RkSWNhREFCRUJhY0lBYWNJZEJGR2NCZUJDY0Ffc3R5bGUuZm9udFdlaWdodCA9IFwiYm9sZFwiO1xyXG5cdFx0XHR0aGlzLkljRUdEZEljYURBQkVCYWNJQWFjSWRCRkdjQmVCQ2NBLnN0eWxlID0gSWNFR0RkSWNhREFCRUJhY0lBYWNJZEJGR2NCZUJDY0Ffc3R5bGU7XHJcblxyXG5cdFx0XHRsZXQgQ0FjZUJJRENJSGRlRURGZWJHSmVDQkhhYkRCSkpJQUJfc3R5bGUgPSB0aGlzLmFkdmFuY2VkVGV4dHVyZS5jcmVhdGVTdHlsZSgpO1xyXG5cdFx0XHRDQWNlQklEQ0lIZGVFREZlYkdKZUNCSGFiREJKSklBQl9zdHlsZS5mb250U2l6ZSA9IDI0O1xyXG5cdFx0XHRDQWNlQklEQ0lIZGVFREZlYkdKZUNCSGFiREJKSklBQl9zdHlsZS5mb250U3R5bGUgPSBcIm5vcm1hbFwiO1xyXG5cdFx0XHRDQWNlQklEQ0lIZGVFREZlYkdKZUNCSGFiREJKSklBQl9zdHlsZS5mb250RmFtaWx5ID0gXCJhcmlhbFwiO1xyXG5cdFx0XHRDQWNlQklEQ0lIZGVFREZlYkdKZUNCSGFiREJKSklBQl9zdHlsZS5mb250V2VpZ2h0ID0gXCJub3JtYWxcIjtcclxuXHRcdFx0dGhpcy5DQWNlQklEQ0lIZGVFREZlYkdKZUNCSGFiREJKSklBQi5zdHlsZSA9IENBY2VCSURDSUhkZUVERmViR0plQ0JIYWJEQkpKSUFCX3N0eWxlO1xyXG5cclxuXHRcdFx0bGV0IEpHZUVJRUNCQWVFYkVHSEJiRENBQkJKY0JBZUJlYWZlX3N0eWxlID0gdGhpcy5hZHZhbmNlZFRleHR1cmUuY3JlYXRlU3R5bGUoKTtcclxuXHRcdFx0SkdlRUlFQ0JBZUViRUdIQmJEQ0FCQkpjQkFlQmVhZmVfc3R5bGUuZm9udFNpemUgPSA2Mi40O1xyXG5cdFx0XHRKR2VFSUVDQkFlRWJFR0hCYkRDQUJCSmNCQWVCZWFmZV9zdHlsZS5mb250U3R5bGUgPSBcIm5vcm1hbFwiO1xyXG5cdFx0XHRKR2VFSUVDQkFlRWJFR0hCYkRDQUJCSmNCQWVCZWFmZV9zdHlsZS5mb250RmFtaWx5ID0gXCJhcmlhbFwiO1xyXG5cdFx0XHRKR2VFSUVDQkFlRWJFR0hCYkRDQUJCSmNCQWVCZWFmZV9zdHlsZS5mb250V2VpZ2h0ID0gXCJib2xkXCI7XHJcblx0XHRcdHRoaXMuSkdlRUlFQ0JBZUViRUdIQmJEQ0FCQkpjQkFlQmVhZmUuc3R5bGUgPSBKR2VFSUVDQkFlRWJFR0hCYkRDQUJCSmNCQWVCZWFmZV9zdHlsZTtcclxuXHJcblx0XHRcdGxldCBiQWFGSmZkQmFCRGFFSUJDSUNDRmREYklCQ0lGZUFIRF9zdHlsZSA9IHRoaXMuYWR2YW5jZWRUZXh0dXJlLmNyZWF0ZVN0eWxlKCk7XHJcblx0XHRcdGJBYUZKZmRCYUJEYUVJQkNJQ0NGZERiSUJDSUZlQUhEX3N0eWxlLmZvbnRTaXplID0gMjQ7XHJcblx0XHRcdGJBYUZKZmRCYUJEYUVJQkNJQ0NGZERiSUJDSUZlQUhEX3N0eWxlLmZvbnRTdHlsZSA9IFwibm9ybWFsXCI7XHJcblx0XHRcdGJBYUZKZmRCYUJEYUVJQkNJQ0NGZERiSUJDSUZlQUhEX3N0eWxlLmZvbnRGYW1pbHkgPSBcImFyaWFsXCI7XHJcblx0XHRcdGJBYUZKZmRCYUJEYUVJQkNJQ0NGZERiSUJDSUZlQUhEX3N0eWxlLmZvbnRXZWlnaHQgPSBcIm5vcm1hbFwiO1xyXG5cdFx0XHR0aGlzLmJBYUZKZmRCYUJEYUVJQkNJQ0NGZERiSUJDSUZlQUhELnN0eWxlID0gYkFhRkpmZEJhQkRhRUlCQ0lDQ0ZkRGJJQkNJRmVBSERfc3R5bGU7XHJcblxyXG5cdFx0XHRsZXQgSEVCZGFiYkpKZUVGRUVhQWJISkNjSmRiSERmRmZjYkdfc3R5bGUgPSB0aGlzLmFkdmFuY2VkVGV4dHVyZS5jcmVhdGVTdHlsZSgpO1xyXG5cdFx0XHRIRUJkYWJiSkplRUZFRWFBYkhKQ2NKZGJIRGZGZmNiR19zdHlsZS5mb250U2l6ZSA9IDI0O1xyXG5cdFx0XHRIRUJkYWJiSkplRUZFRWFBYkhKQ2NKZGJIRGZGZmNiR19zdHlsZS5mb250U3R5bGUgPSBcIm5vcm1hbFwiO1xyXG5cdFx0XHRIRUJkYWJiSkplRUZFRWFBYkhKQ2NKZGJIRGZGZmNiR19zdHlsZS5mb250RmFtaWx5ID0gXCJhcmlhbFwiO1xyXG5cdFx0XHRIRUJkYWJiSkplRUZFRWFBYkhKQ2NKZGJIRGZGZmNiR19zdHlsZS5mb250V2VpZ2h0ID0gXCJib2xkXCI7XHJcblx0XHRcdHRoaXMuSEVCZGFiYkpKZUVGRUVhQWJISkNjSmRiSERmRmZjYkcuc3R5bGUgPSBIRUJkYWJiSkplRUZFRWFBYkhKQ2NKZGJIRGZGZmNiR19zdHlsZTtcclxuXHJcblx0XHRcdGxldCBjR0RKQWFjQkFmZEpFY0piSUJkSGRlRkRhQWVhZGVJRl9zdHlsZSA9IHRoaXMuYWR2YW5jZWRUZXh0dXJlLmNyZWF0ZVN0eWxlKCk7XHJcblx0XHRcdGNHREpBYWNCQWZkSkVjSmJJQmRIZGVGRGFBZWFkZUlGX3N0eWxlLmZvbnRTaXplID0gMjQ7XHJcblx0XHRcdGNHREpBYWNCQWZkSkVjSmJJQmRIZGVGRGFBZWFkZUlGX3N0eWxlLmZvbnRTdHlsZSA9IFwibm9ybWFsXCI7XHJcblx0XHRcdGNHREpBYWNCQWZkSkVjSmJJQmRIZGVGRGFBZWFkZUlGX3N0eWxlLmZvbnRGYW1pbHkgPSBcImFyaWFsXCI7XHJcblx0XHRcdGNHREpBYWNCQWZkSkVjSmJJQmRIZGVGRGFBZWFkZUlGX3N0eWxlLmZvbnRXZWlnaHQgPSBcImJvbGRcIjtcclxuXHRcdFx0dGhpcy5jR0RKQWFjQkFmZEpFY0piSUJkSGRlRkRhQWVhZGVJRi5zdHlsZSA9IGNHREpBYWNCQWZkSkVjSmJJQmRIZGVGRGFBZWFkZUlGX3N0eWxlO1xyXG5cclxuXHRcdFx0bGV0IGFHQ0piSmZJR0VmY0VEQmZiQUViQUlBQ0RKSmRjQmFkX3N0eWxlID0gdGhpcy5hZHZhbmNlZFRleHR1cmUuY3JlYXRlU3R5bGUoKTtcclxuXHRcdFx0YUdDSmJKZklHRWZjRURCZmJBRWJBSUFDREpKZGNCYWRfc3R5bGUuZm9udFNpemUgPSAyNDtcclxuXHRcdFx0YUdDSmJKZklHRWZjRURCZmJBRWJBSUFDREpKZGNCYWRfc3R5bGUuZm9udFN0eWxlID0gXCJub3JtYWxcIjtcclxuXHRcdFx0YUdDSmJKZklHRWZjRURCZmJBRWJBSUFDREpKZGNCYWRfc3R5bGUuZm9udEZhbWlseSA9IFwiYXJpYWxcIjtcclxuXHRcdFx0YUdDSmJKZklHRWZjRURCZmJBRWJBSUFDREpKZGNCYWRfc3R5bGUuZm9udFdlaWdodCA9IFwiYm9sZFwiO1xyXG5cdFx0XHR0aGlzLmFHQ0piSmZJR0VmY0VEQmZiQUViQUlBQ0RKSmRjQmFkLnN0eWxlID0gYUdDSmJKZklHRWZjRURCZmJBRWJBSUFDREpKZGNCYWRfc3R5bGU7XHJcblxyXG5cdFx0XHRsZXQgYWJJQUpHSEpjR0NhRURGSWJjZEhjYkhDY0dKSmVKYUZfc3R5bGUgPSB0aGlzLmFkdmFuY2VkVGV4dHVyZS5jcmVhdGVTdHlsZSgpO1xyXG5cdFx0XHRhYklBSkdISmNHQ2FFREZJYmNkSGNiSENjR0pKZUphRl9zdHlsZS5mb250U2l6ZSA9IDI0O1xyXG5cdFx0XHRhYklBSkdISmNHQ2FFREZJYmNkSGNiSENjR0pKZUphRl9zdHlsZS5mb250U3R5bGUgPSBcIm5vcm1hbFwiO1xyXG5cdFx0XHRhYklBSkdISmNHQ2FFREZJYmNkSGNiSENjR0pKZUphRl9zdHlsZS5mb250RmFtaWx5ID0gXCJhcmlhbFwiO1xyXG5cdFx0XHRhYklBSkdISmNHQ2FFREZJYmNkSGNiSENjR0pKZUphRl9zdHlsZS5mb250V2VpZ2h0ID0gXCJib2xkXCI7XHJcblx0XHRcdHRoaXMuYWJJQUpHSEpjR0NhRURGSWJjZEhjYkhDY0dKSmVKYUYuc3R5bGUgPSBhYklBSkdISmNHQ2FFREZJYmNkSGNiSENjR0pKZUphRl9zdHlsZTtcclxuXHJcblx0XHRcdGxldCBIRkNiQ0VkZWFHQklFQkpGYmZlZEJkQ0RiYWVlY0NkSV9zdHlsZSA9IHRoaXMuYWR2YW5jZWRUZXh0dXJlLmNyZWF0ZVN0eWxlKCk7XHJcblx0XHRcdEhGQ2JDRWRlYUdCSUVCSkZiZmVkQmRDRGJhZWVjQ2RJX3N0eWxlLmZvbnRTaXplID0gMjQ7XHJcblx0XHRcdEhGQ2JDRWRlYUdCSUVCSkZiZmVkQmRDRGJhZWVjQ2RJX3N0eWxlLmZvbnRTdHlsZSA9IFwibm9ybWFsXCI7XHJcblx0XHRcdEhGQ2JDRWRlYUdCSUVCSkZiZmVkQmRDRGJhZWVjQ2RJX3N0eWxlLmZvbnRGYW1pbHkgPSBcImFyaWFsXCI7XHJcblx0XHRcdEhGQ2JDRWRlYUdCSUVCSkZiZmVkQmRDRGJhZWVjQ2RJX3N0eWxlLmZvbnRXZWlnaHQgPSBcImJvbGRcIjtcclxuXHRcdFx0dGhpcy5IRkNiQ0VkZWFHQklFQkpGYmZlZEJkQ0RiYWVlY0NkSS5zdHlsZSA9IEhGQ2JDRWRlYUdCSUVCSkZiZmVkQmRDRGJhZWVjQ2RJX3N0eWxlO1xyXG5cclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgZ2V0QWR2YW5jZWRUZXh0dXJlKCkgOiBCQUJZTE9OLkdVSS5BZHZhbmNlZER5bmFtaWNUZXh0dXJlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYWR2YW5jZWRUZXh0dXJlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIGdldEdFSmVFSkliR0VBR0VGRGVhREpiYkZDY0hJSEZIYUNkKCkgOiBCQUJZTE9OLkdVSS5Db250YWluZXIge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5HRUplRUpJYkdFQUdFRkRlYURKYmJGQ2NISUhGSGFDZDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBnZXRGQ0hDYmVhY2FCZERFSUZmYmNGSUlEZUFFZEVFR0hjZigpIDogQkFCWUxPTi5HVUkuQnV0dG9uIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZkNIQ2JlYWNhQmRERUlGZmJjRklJRGVBRWRFRUdIY2Y7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgZ2V0RkdISGFEZEVJSUNiRWNGSUllRUFlYUhCZkRKQ2NGQmQoKSA6IEJBQllMT04uR1VJLkJ1dHRvbiB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLkZHSEhhRGRFSUlDYkVjRklJZUVBZWFIQmZESkNjRkJkO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIGdldENmYmVmYUpDQUJhQkVGQkNKQWJiRUFIRUJDRkNhQkFDKCkgOiBCQUJZTE9OLkdVSS5CdXR0b24ge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5DZmJlZmFKQ0FCYUJFRkJDSkFiYkVBSEVCQ0ZDYUJBQztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBnZXRCZmNIZEVGY0NJRGJFQ2NiYWFIQWZKREJBSkVlZWZESigpIDogQkFCWUxPTi5HVUkuQnV0dG9uIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuQmZjSGRFRmNDSURiRUNjYmFhSEFmSkRCQUpFZWVmREo7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgZ2V0QUNFZkZKSmRkR2JJRUVkQmFBYmNGREdESENCYmRiZkYoKSA6IEJBQllMT04uR1VJLkJ1dHRvbiB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmFDRWZGSkpkZEdiSUVFZEJhQWJjRkRHREhDQmJkYmZGO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIGdldENKREpJZENiQ0ZkYkVkYmZiYUZiRkNBRGJkYWFhYkNJKCkgOiBCQUJZTE9OLkdVSS5CdXR0b24ge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jSkRKSWRDYkNGZGJFZGJmYmFGYkZDQURiZGFhYWJDSTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBnZXRIQkFFRWVJR2FKZWFFRElBSUFKZUVKY0RKSkZiYmFDRCgpIDogQkFCWUxPTi5HVUkuQnV0dG9uIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuSEJBRUVlSUdhSmVhRURJQUlBSmVFSmNESkpGYmJhQ0Q7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgZ2V0QkNEQWRKQUZJSUFkRUlFR0lhZmVISmVJZkhhZmNESGIoKSA6IEJBQllMT04uR1VJLkJ1dHRvbiB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmJDREFkSkFGSUlBZEVJRUdJYWZlSEplSWZIYWZjREhiO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIGdldEljRUdEZEljYURBQkVCYWNJQWFjSWRCRkdjQmVCQ2NBKCkgOiBCQUJZTE9OLkdVSS5CdXR0b24ge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5JY0VHRGRJY2FEQUJFQmFjSUFhY0lkQkZHY0JlQkNjQTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBnZXRJRmZmZkdhR2NKSEpFQ0dDYUhCZWJhSEplQmZCREVHQigpIDogQkFCWUxPTi5HVUkuQ29udGFpbmVyIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuSUZmZmZHYUdjSkhKRUNHQ2FIQmViYUhKZUJmQkRFR0I7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgZ2V0Q0FjZUJJRENJSGRlRURGZWJHSmVDQkhhYkRCSkpJQUIoKSA6IEJBQllMT04uR1VJLkJ1dHRvbiB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLkNBY2VCSURDSUhkZUVERmViR0plQ0JIYWJEQkpKSUFCO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIGdldEpHZUVJRUNCQWVFYkVHSEJiRENBQkJKY0JBZUJlYWZlKCkgOiBCQUJZTE9OLkdVSS5CdXR0b24ge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5KR2VFSUVDQkFlRWJFR0hCYkRDQUJCSmNCQWVCZWFmZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBnZXRCQWFGSmZkQmFCRGFFSUJDSUNDRmREYklCQ0lGZUFIRCgpIDogQkFCWUxPTi5HVUkuQnV0dG9uIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYkFhRkpmZEJhQkRhRUlCQ0lDQ0ZkRGJJQkNJRmVBSEQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgZ2V0SEVCZGFiYkpKZUVGRUVhQWJISkNjSmRiSERmRmZjYkcoKSA6IEJBQllMT04uR1VJLkJ1dHRvbiB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLkhFQmRhYmJKSmVFRkVFYUFiSEpDY0pkYkhEZkZmY2JHO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIGdldENHREpBYWNCQWZkSkVjSmJJQmRIZGVGRGFBZWFkZUlGKCkgOiBCQUJZTE9OLkdVSS5CdXR0b24ge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jR0RKQWFjQkFmZEpFY0piSUJkSGRlRkRhQWVhZGVJRjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBnZXRBR0NKYkpmSUdFZmNFREJmYkFFYkFJQUNESkpkY0JhZCgpIDogQkFCWUxPTi5HVUkuQnV0dG9uIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYUdDSmJKZklHRWZjRURCZmJBRWJBSUFDREpKZGNCYWQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgZ2V0QWJJQUpHSEpjR0NhRURGSWJjZEhjYkhDY0dKSmVKYUYoKSA6IEJBQllMT04uR1VJLkJ1dHRvbiB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmFiSUFKR0hKY0dDYUVERkliY2RIY2JIQ2NHSkplSmFGO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIGdldEhGQ2JDRWRlYUdCSUVCSkZiZmVkQmRDRGJhZWVjQ2RJKCkgOiBCQUJZTE9OLkdVSS5CdXR0b24ge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5IRkNiQ0VkZWFHQklFQkpGYmZlZEJkQ0RiYWVlY0NkSTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgIH1cclxufSIsIm1vZHVsZSBQUk9KRUNUIHtcclxuICAgIC8qKlxyXG4gICAgKiBCYWJ5bG9uIFNjcmlwdCBDb21wb25lbnRcclxuICAgICogQGNsYXNzIExpZ2h0UHJvamVjdGlvblxyXG4gICAgKi9cclxuICAgIGV4cG9ydCBjbGFzcyBMaWdodFByb2plY3Rpb24gZXh0ZW5kcyBCQUJZTE9OLlNjcmlwdENvbXBvbmVudCB7XHJcbiAgICAgICAgcHJpdmF0ZSBzdGF0aWMgU2hhZGVyRnJhZ21lbnRVcGRhdGVkOmJvb2xlYW4gPSBmYWxzZTtcclxuICAgICAgICBwcml2YXRlIHByb2plY3Rpb25UZXh0dXJlOkJBQllMT04uVGV4dHVyZSA9IG51bGw7XHJcbiAgICAgICAgcHJpdmF0ZSBzcG90TGlnaHRFeHBvbmVudDpudW1iZXIgPSAxNi4wO1xyXG4gICAgICAgIHByaXZhdGUgc3BvdExpZ2h0QW5nbGU6bnVtYmVyID0gMTUwO1xyXG4gICAgICAgIHByaXZhdGUgbmVhckNsaXBQbGFuZTpudW1iZXIgPSAwLjE7XHJcbiAgICAgICAgcHJpdmF0ZSBmYXJDbGlwUGxhbmU6bnVtYmVyID0gMi4wO1xyXG4gICAgICAgIHByaXZhdGUgZXhjbHVkZUNoaWxkcmVuOmJvb2xlYW4gPSB0cnVlO1xyXG4gICAgICAgIHByaXZhdGUgaW5jbHVkZVRhZ3M6c3RyaW5nW10gPSBudWxsO1xyXG5cclxuICAgICAgICBwdWJsaWMgZW5hYmxlUm90YXRpb246Ym9vbGVhbiA9IHRydWU7XHJcbiAgICAgICAgcHVibGljIHByb2plY3Rpb25Sb3RhdGlvbjpudW1iZXIgPSAwO1xyXG4gICAgICAgIHB1YmxpYyBwcm9qZWN0aW9uUG9zaXRpb246QkFCWUxPTi5WZWN0b3IzID0gbmV3IEJBQllMT04uVmVjdG9yMygwLDEsMCk7XHJcbiAgICAgICAgcHVibGljIGdldExpZ2h0UHJvamVjdG9yKCk6QkFCWUxPTi5TcG90TGlnaHQgeyByZXR1cm4gdGhpcy5tX3Nwb3RMaWdodDsgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIHByb3RlY3RlZCBtX3Nwb3RMaWdodDpCQUJZTE9OLlNwb3RMaWdodCA9IG51bGw7XHJcbiAgICAgICAgcHJvdGVjdGVkIG1fcHJvamVjdG9yRGlydHk6Ym9vbGVhbiA9IGZhbHNlO1xyXG4gICAgICAgIHByb3RlY3RlZCBtX3Byb2plY3RvclBvc2l0aW9uOkJBQllMT04uVmVjdG9yMyA9IG5ldyBCQUJZTE9OLlZlY3RvcjMoMCwwLDApO1xyXG4gICAgICAgIHByb3RlY3RlZCBtX3Byb2plY3RvclJvdGF0aW9uOkJBQllMT04uVmVjdG9yMyA9IG5ldyBCQUJZTE9OLlZlY3RvcjMoMCwwLDApO1xyXG4gICAgICAgIHByb3RlY3RlZCBtX2xhc3RQb3NpdGlvbjpCQUJZTE9OLlZlY3RvcjMgPSBuZXcgQkFCWUxPTi5WZWN0b3IzKDAsMCwwKTtcclxuICAgICAgICBwcm90ZWN0ZWQgbV9sYXN0Um90YXRpb246QkFCWUxPTi5WZWN0b3IzID0gbmV3IEJBQllMT04uVmVjdG9yMygwLDAsMCk7XHJcbiAgICAgICAgcHJvdGVjdGVkIGF3YWtlKCk6IHZvaWQge1xyXG4gICAgICAgICAgICBQUk9KRUNULkxpZ2h0UHJvamVjdGlvbi5VcGRhdGVTaGFkZXJTdG9yZSgpO1xyXG4gICAgICAgICAgICAvLyAuLlxyXG4gICAgICAgICAgICAvLyBTZXR1cCBQcm9qZWN0aW9uIFRleHR1cmUgV2l0aG91dCBNaXBtYXBwaW5nXHJcbiAgICAgICAgICAgIC8vIC4uXHJcbiAgICAgICAgICAgIGNvbnN0IHByb2plY3Rpb25UZXh0dXJlRGF0YTpCQUJZTE9OLklVbml0eVRleHR1cmUgPSB0aGlzLmdldFByb3BlcnR5KFwicHJvamVjdGlvblRleHR1cmVcIik7XHJcbiAgICAgICAgICAgIGlmIChwcm9qZWN0aW9uVGV4dHVyZURhdGEgIT0gbnVsbCkgdGhpcy5wcm9qZWN0aW9uVGV4dHVyZSA9IFVUSUwuUGFyc2VUZXh0dXJlKHByb2plY3Rpb25UZXh0dXJlRGF0YSwgdGhpcy5zY2VuZSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgIC8vIC4uXHJcbiAgICAgICAgICAgIC8vIC4uIFNldHVwIFNwb3QgTGlnaHQgQXMgVGV4dHVyZSBQcm9qZWN0b3JcclxuICAgICAgICAgICAgLy8gLi5cclxuICAgICAgICAgICAgdGhpcy5tX3Nwb3RMaWdodCA9IG5ldyBCQUJZTE9OLlNwb3RMaWdodCgodGhpcy50cmFuc2Zvcm0ubmFtZSArIFwiLlByb2plY3RvclwiKSwgbmV3IEJBQllMT04uVmVjdG9yMygwLCAwLCAwKSwgbmV3IEJBQllMT04uVmVjdG9yMygwLCAtMSwgMCksIEJBQllMT04uVG9vbHMuVG9SYWRpYW5zKHRoaXMuc3BvdExpZ2h0QW5nbGUpLCB0aGlzLnNwb3RMaWdodEV4cG9uZW50LCB0aGlzLnNjZW5lKTtcclxuICAgICAgICAgICAgdGhpcy5tX3Nwb3RMaWdodC5zaGFkb3dFbmFibGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMubV9zcG90TGlnaHQuaW50ZW5zaXR5ID0gMDtcclxuICAgICAgICAgICAgdGhpcy5tX3Nwb3RMaWdodC5yYW5nZSA9IDA7XHJcbiAgICAgICAgICAgIHRoaXMubV9zcG90TGlnaHQucHJvamVjdGlvblRleHR1cmVMaWdodE5lYXIgPSB0aGlzLm5lYXJDbGlwUGxhbmU7XHJcbiAgICAgICAgICAgIHRoaXMubV9zcG90TGlnaHQucHJvamVjdGlvblRleHR1cmVMaWdodEZhciA9IHRoaXMuZmFyQ2xpcFBsYW5lO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5wcm9qZWN0aW9uVGV4dHVyZSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1fc3BvdExpZ2h0LnByb2plY3Rpb25UZXh0dXJlID0gdGhpcy5wcm9qZWN0aW9uVGV4dHVyZTtcclxuICAgICAgICAgICAgICAgIHRoaXMubV9zcG90TGlnaHQucHJvamVjdGlvblRleHR1cmUud3JhcFUgPSBCQUJZTE9OLkNvbnN0YW50cy5URVhUVVJFX0NMQU1QX0FERFJFU1NNT0RFO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tX3Nwb3RMaWdodC5wcm9qZWN0aW9uVGV4dHVyZS53cmFwViA9IEJBQllMT04uQ29uc3RhbnRzLlRFWFRVUkVfQ0xBTVBfQUREUkVTU01PREU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMuaW5jbHVkZVRhZ3MgIT0gbnVsbCAmJiB0aGlzLmluY2x1ZGVUYWdzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIGxldCB0YWdRdWVyeTpzdHJpbmcgPSB0aGlzLmluY2x1ZGVUYWdzLmpvaW4oXCIgfHwgXCIpO1xyXG4gICAgICAgICAgICAgICAgbGV0IGluY2x1ZGVNZXNoZXM6QkFCWUxPTi5BYnN0cmFjdE1lc2hbXSA9IHRoaXMuc2NlbmUuZ2V0TWVzaGVzQnlUYWdzKHRhZ1F1ZXJ5KTtcclxuICAgICAgICAgICAgICAgIGxldCBpbmNsdWRlVHJhbnNmb3JtczpCQUJZTE9OLlRyYW5zZm9ybU5vZGVbXSA9IHRoaXMuc2NlbmUuZ2V0VHJhbnNmb3JtTm9kZXNCeVRhZ3ModGFnUXVlcnkpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGluY2x1ZGVNZXNoZXMgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpbmNsdWRlVHJhbnNmb3JtcyA9PSBudWxsKSBpbmNsdWRlVHJhbnNmb3JtcyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgIGluY2x1ZGVUcmFuc2Zvcm1zLnB1c2goLi4uaW5jbHVkZU1lc2hlcyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoaW5jbHVkZVRyYW5zZm9ybXMgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGluY2x1ZGVUcmFuc2Zvcm1zLmZvckVhY2goKGVsZW1lbnQ6QkFCWUxPTi5UcmFuc2Zvcm1Ob2RlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNoaWxkRGV0YWlsTWVzaDpCQUJZTE9OLkFic3RyYWN0TWVzaCA9IFNNLkdldFRyYW5zZm9ybURldGFpbE1lc2goZWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaGlsZERldGFpbE1lc2ggIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubV9zcG90TGlnaHQuaW5jbHVkZWRPbmx5TWVzaGVzID09IG51bGwpIHRoaXMubV9zcG90TGlnaHQuaW5jbHVkZWRPbmx5TWVzaGVzID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1fc3BvdExpZ2h0LmluY2x1ZGVkT25seU1lc2hlcy5wdXNoKGNoaWxkRGV0YWlsTWVzaCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZWxlbWVudCBpbnN0YW5jZW9mIEJBQllMT04uQWJzdHJhY3RNZXNoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubV9zcG90TGlnaHQuaW5jbHVkZWRPbmx5TWVzaGVzID09IG51bGwpIHRoaXMubV9zcG90TGlnaHQuaW5jbHVkZWRPbmx5TWVzaGVzID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tX3Nwb3RMaWdodC5pbmNsdWRlZE9ubHlNZXNoZXMucHVzaChlbGVtZW50KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMubV9zcG90TGlnaHQuaW5jbHVkZWRPbmx5TWVzaGVzID09IG51bGwpIHRoaXMubV9zcG90TGlnaHQuaW5jbHVkZWRPbmx5TWVzaGVzID0gW107XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5tX3Nwb3RMaWdodC5pbmNsdWRlZE9ubHlNZXNoZXMubGVuZ3RoIDw9IDApIHRoaXMubV9zcG90TGlnaHQuaW5jbHVkZWRPbmx5TWVzaGVzLnB1c2gobmV3IEJBQllMT04uTWVzaCh0aGlzLnRyYW5zZm9ybS5uYW1lICsgXCIuUHJvamVjdG9yTWVzaFwiLCB0aGlzLnNjZW5lKSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5leGNsdWRlQ2hpbGRyZW4gPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGFic3RyYWN0TWVzaDpCQUJZTE9OLkFic3RyYWN0TWVzaCA9IHRoaXMuZ2V0QWJzdHJhY3RNZXNoKCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoYWJzdHJhY3RNZXNoICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5tX3Nwb3RMaWdodC5leGNsdWRlZE1lc2hlcyA9PSBudWxsKSB0aGlzLm1fc3BvdExpZ2h0LmV4Y2x1ZGVkTWVzaGVzID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tX3Nwb3RMaWdodC5leGNsdWRlZE1lc2hlcy5wdXNoKGFic3RyYWN0TWVzaCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjaGlsZE1lc2hlczpCQUJZTE9OLkFic3RyYWN0TWVzaFtdID0gdGhpcy50cmFuc2Zvcm0uZ2V0Q2hpbGRNZXNoZXMoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNoaWxkTWVzaGVzICE9IG51bGwgJiYgY2hpbGRNZXNoZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm1fc3BvdExpZ2h0LmV4Y2x1ZGVkTWVzaGVzID09IG51bGwpIHRoaXMubV9zcG90TGlnaHQuZXhjbHVkZWRNZXNoZXMgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1fc3BvdExpZ2h0LmV4Y2x1ZGVkTWVzaGVzLnB1c2goLi4uY2hpbGRNZXNoZXMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlUHJvamVjdG9yUG9zaXRpb24oKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByb3RlY3RlZCBzdGFydCgpOiB2b2lkIHtcclxuICAgICAgICAgICAgdGhpcy51cGRhdGVQcm9qZWN0b3JQb3NpdGlvbigpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJvdGVjdGVkIHVwZGF0ZSgpOiB2b2lkIHtcclxuICAgICAgICAgICAgdGhpcy51cGRhdGVQcm9qZWN0b3JQb3NpdGlvbigpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJvdGVjdGVkIGRlc3Ryb3koKTogdm9pZCB7XHJcbiAgICAgICAgICAgIHRoaXMucHJvamVjdGlvblBvc2l0aW9uID0gbnVsbDtcclxuICAgICAgICAgICAgaWYgKHRoaXMucHJvamVjdGlvblRleHR1cmUgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wcm9qZWN0aW9uVGV4dHVyZS5kaXNwb3NlKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnByb2plY3Rpb25UZXh0dXJlID0gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLm1fcHJvamVjdG9yUG9zaXRpb24gPSBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLm1fcHJvamVjdG9yUm90YXRpb24gPSBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLm1fbGFzdFBvc2l0aW9uID0gbnVsbDtcclxuICAgICAgICAgICAgdGhpcy5tX2xhc3RSb3RhdGlvbiA9IG51bGw7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm1fc3BvdExpZ2h0ICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubV9zcG90TGlnaHQuZGlzcG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tX3Nwb3RMaWdodCA9IG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgdXBkYXRlUHJvamVjdG9yUG9zaXRpb24oKTp2b2lkIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMubV9zcG90TGlnaHQgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tX3Byb2plY3RvckRpcnR5ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBVVElMLkdldEFic29sdXRlUG9zaXRpb25Ub1JlZih0aGlzLnRyYW5zZm9ybSwgdGhpcy5tX3Byb2plY3RvclBvc2l0aW9uLCB0aGlzLnByb2plY3Rpb25Qb3NpdGlvbik7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy50cmFuc2Zvcm0ucm90YXRpb25RdWF0ZXJuaW9uICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnRyYW5zZm9ybS5yb3RhdGlvblF1YXRlcm5pb24udG9FdWxlckFuZ2xlc1RvUmVmKHRoaXMubV9wcm9qZWN0b3JSb3RhdGlvbik7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMudHJhbnNmb3JtLnJvdGF0aW9uICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1fcHJvamVjdG9yUm90YXRpb24uY29weUZyb20odGhpcy50cmFuc2Zvcm0ucm90YXRpb24pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMubV9sYXN0UG9zaXRpb24ueCAhPT0gdGhpcy5tX3Byb2plY3RvclBvc2l0aW9uLnggfHwgdGhpcy5tX2xhc3RQb3NpdGlvbi55ICE9PSB0aGlzLm1fcHJvamVjdG9yUG9zaXRpb24ueSB8fCB0aGlzLm1fbGFzdFBvc2l0aW9uLnogIT09IHRoaXMubV9wcm9qZWN0b3JQb3NpdGlvbi56KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tX3Nwb3RMaWdodC5wb3NpdGlvbi5jb3B5RnJvbSh0aGlzLm1fcHJvamVjdG9yUG9zaXRpb24pO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubV9wcm9qZWN0b3JEaXJ0eSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5lbmFibGVSb3RhdGlvbiA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm1fbGFzdFJvdGF0aW9uLnggIT09IHRoaXMubV9wcm9qZWN0b3JSb3RhdGlvbi54IHx8IHRoaXMubV9sYXN0Um90YXRpb24ueSAhPT0gdGhpcy5tX3Byb2plY3RvclJvdGF0aW9uLnkgfHwgdGhpcy5tX2xhc3RSb3RhdGlvbi56ICE9PSB0aGlzLm1fcHJvamVjdG9yUm90YXRpb24ueikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcm90YXRpb25BbmdsZTpudW1iZXIgPSAtdGhpcy5tX3Byb2plY3RvclJvdGF0aW9uLnk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnByb2plY3Rpb25Sb3RhdGlvbiAhPT0gMCkgcm90YXRpb25BbmdsZSArPSBCQUJZTE9OLlRvb2xzLlRvUmFkaWFucyh0aGlzLnByb2plY3Rpb25Sb3RhdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubV9zcG90TGlnaHQucHJvamVjdGlvblRleHR1cmVVcERpcmVjdGlvbi5zZXQoTWF0aC5jb3Mocm90YXRpb25BbmdsZSksIDAsIE1hdGguc2luKHJvdGF0aW9uQW5nbGUpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tX3Byb2plY3RvckRpcnR5ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5tX3Byb2plY3RvckRpcnR5ID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tX3Nwb3RMaWdodC5wb3NpdGlvbiA9IHRoaXMubV9zcG90TGlnaHQucG9zaXRpb247IC8vIE5vdGU6IEZvcmNlIFByb2plY3Rpb24gVGV4dHVyZSBJcyBEaXJ0eVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5tX2xhc3RQb3NpdGlvbi5jb3B5RnJvbSh0aGlzLm1fcHJvamVjdG9yUG9zaXRpb24pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tX2xhc3RSb3RhdGlvbi5jb3B5RnJvbSh0aGlzLm1fcHJvamVjdG9yUm90YXRpb24pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuICAgICAgICAvLyBTdGF0aWMgSGVscGVyIEZ1bmN0aW9uc1xyXG4gICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG5cclxuICAgICAgICBwcml2YXRlIHN0YXRpYyBVcGRhdGVTaGFkZXJTdG9yZSgpOnZvaWQge1xyXG4gICAgICAgICAgICBpZiAoUFJPSkVDVC5MaWdodFByb2plY3Rpb24uU2hhZGVyRnJhZ21lbnRVcGRhdGVkID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgQkFCWUxPTi5FZmZlY3QuSW5jbHVkZXNTaGFkZXJzU3RvcmVbXCJsaWdodEZyYWdtZW50XCJdID0gQkFCWUxPTi5FZmZlY3QuSW5jbHVkZXNTaGFkZXJzU3RvcmVbXCJsaWdodEZyYWdtZW50XCJdLnJlcGxhY2UoXHJcbiAgICAgICAgICAgICAgICAgICAgXCJpbmZvLmRpZmZ1c2UqPWNvbXB1dGVQcm9qZWN0aW9uVGV4dHVyZURpZmZ1c2VMaWdodGluZyhwcm9qZWN0aW9uTGlnaHRTYW1wbGVye1h9LHRleHR1cmVQcm9qZWN0aW9uTWF0cml4e1h9KTtcIixcclxuICAgICAgICAgICAgICAgICAgICBgc3VyZmFjZUFsYmVkby5yZ2IqPWNvbXB1dGVQcm9qZWN0aW9uVGV4dHVyZURpZmZ1c2VMaWdodGluZyhwcm9qZWN0aW9uTGlnaHRTYW1wbGVye1h9LHRleHR1cmVQcm9qZWN0aW9uTWF0cml4e1h9KTtcclxuICAgICAgICAgICAgICAgICAgICBpbmZvLmRpZmZ1c2U9dmVjMygwLik7XHJcbiAgICAgICAgICAgICAgICAgICAgaW5mby5zcGVjdWxhcj12ZWMzKDAuKTtcclxuICAgICAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgUFJPSkVDVC5MaWdodFByb2plY3Rpb24uU2hhZGVyRnJhZ21lbnRVcGRhdGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsIm1vZHVsZSBQUk9KRUNUIHtcclxuICAgIC8qKlxyXG4gICAgKiBCYWJ5bG9uIFNjcmlwdCBDb21wb25lbnRcclxuICAgICogQGNsYXNzIE5vZGVNYXRlcmlhbEluc3RhbmNlXHJcbiAgICAqL1xyXG4gICAgZXhwb3J0IGNsYXNzIE5vZGVNYXRlcmlhbEluc3RhbmNlIGV4dGVuZHMgQkFCWUxPTi5TY3JpcHRDb21wb25lbnQge1xyXG4gICAgICAgIHByaXZhdGUgbm9kZU1hdGVyaWFsRGF0YTphbnkgPSBudWxsO1xyXG4gICAgICAgIHByaXZhdGUgc2V0Q3VzdG9tUm9vdFVybDpzdHJpbmcgPSBudWxsO1xyXG5cclxuICAgICAgICBwdWJsaWMgZ2V0TWF0ZXJpYWxJbnN0YW5jZSgpOkJBQllMT04uTm9kZU1hdGVyaWFsIHsgcmV0dXJuIHRoaXMubV9ub2RlTWF0ZXJpYWw7IH1cclxuICAgICAgICBcclxuICAgICAgICBwcm90ZWN0ZWQgbV9ub2RlTWF0ZXJpYWw6QkFCWUxPTi5Ob2RlTWF0ZXJpYWwgPSBudWxsO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHByb3RlY3RlZCBhd2FrZSgpOiB2b2lkIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMubm9kZU1hdGVyaWFsRGF0YSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCByb290VXJsOnN0cmluZyA9ICh0aGlzLnNldEN1c3RvbVJvb3RVcmwgIT0gbnVsbCAmJiB0aGlzLnNldEN1c3RvbVJvb3RVcmwgIT09IFwiXCIpID8gdGhpcy5zZXRDdXN0b21Sb290VXJsLnRyaW0oKSA6IFwiXCI7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1fbm9kZU1hdGVyaWFsID0gQkFCWUxPTi5Ob2RlTWF0ZXJpYWwuUGFyc2UodGhpcy5ub2RlTWF0ZXJpYWxEYXRhLCB0aGlzLnNjZW5lLCByb290VXJsKTtcclxuICAgICAgICAgICAgICAgIHRoaXMubV9ub2RlTWF0ZXJpYWwubmFtZSA9IHRoaXMudHJhbnNmb3JtLm5hbWUgKyBcIi5Ob2RlTWF0ZXJpYWxcIjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJvdGVjdGVkIGRlc3Ryb3koKTogdm9pZCB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm1fbm9kZU1hdGVyaWFsICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubV9ub2RlTWF0ZXJpYWwuZGlzcG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tX25vZGVNYXRlcmlhbCA9IG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJtb2R1bGUgUFJPSkVDVCB7XHJcbiAgICAvKipcclxuICAgICogQmFieWxvbiBTY3JpcHQgQ29tcG9uZW50XHJcbiAgICAqIEBjbGFzcyBOb2RlTWF0ZXJpYWxQYXJ0aWNsZVxyXG4gICAgKi9cclxuICAgIGV4cG9ydCBjbGFzcyBOb2RlTWF0ZXJpYWxQYXJ0aWNsZSBleHRlbmRzIEJBQllMT04uU2NyaXB0Q29tcG9uZW50IHtcclxuICAgICAgICBwcml2YXRlIG5vZGVNYXRlcmlhbEVkaXRvcjpCQUJZTE9OLlRyYW5zZm9ybU5vZGUgPSBudWxsO1xyXG5cclxuICAgICAgICBwcm90ZWN0ZWQgYXdha2UoKTogdm9pZCB7XHJcbiAgICAgICAgICAgIC8qIEluaXQgY29tcG9uZW50IGZ1bmN0aW9uICovXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcm90ZWN0ZWQgc3RhcnQoKTogdm9pZCB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm5vZGVNYXRlcmlhbEVkaXRvciAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBubWU6UFJPSkVDVC5Ob2RlTWF0ZXJpYWxJbnN0YW5jZSA9IFNNLkZpbmRTY3JpcHRDb21wb25lbnQodGhpcy5ub2RlTWF0ZXJpYWxFZGl0b3IsIFwiUFJPSkVDVC5Ob2RlTWF0ZXJpYWxJbnN0YW5jZVwiKTtcclxuICAgICAgICAgICAgICAgIGlmIChubWUgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG1hdGVyaWFsSW5zdGFuY2U6QkFCWUxPTi5Ob2RlTWF0ZXJpYWwgPSBubWUuZ2V0TWF0ZXJpYWxJbnN0YW5jZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChtYXRlcmlhbEluc3RhbmNlICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXR1cE5vZGVNYXRlcmlhbChtYXRlcmlhbEluc3RhbmNlKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXCJOdWxsIG5vZGUgbWF0ZXJpYWwgaW5zdGFuY2Ugb246IFwiICsgdGhpcy5ub2RlTWF0ZXJpYWxFZGl0b3IubmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXCJGYWlsZWQgdG8gbG9jYXRlIG5vZGUgbWF0ZXJpYWwgZWRpdG9yIG9uOiBcIiArIHRoaXMubm9kZU1hdGVyaWFsRWRpdG9yLm5hbWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcm90ZWN0ZWQgc2V0dXBOb2RlTWF0ZXJpYWwobWF0ZXJpYWxJbnN0YW5jZTpCQUJZTE9OLk5vZGVNYXRlcmlhbCk6dm9pZCB7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJvdGVjdGVkIHVwZGF0ZSgpOiB2b2lkIHtcclxuICAgICAgICAgICAgLyogVXBkYXRlIHJlbmRlciBsb29wIGZ1bmN0aW9uICovXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcm90ZWN0ZWQgbGF0ZSgpOiB2b2lkIHtcclxuICAgICAgICAgICAgLyogTGF0ZSB1cGRhdGUgcmVuZGVyIGxvb3AgZnVuY3Rpb24gKi9cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByb3RlY3RlZCBhZnRlcigpOiB2b2lkIHtcclxuICAgICAgICAgICAgLyogQWZ0ZXIgdXBkYXRlIHJlbmRlciBsb29wIGZ1bmN0aW9uICovXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcm90ZWN0ZWQgZml4ZWQoKTogdm9pZCB7XHJcbiAgICAgICAgICAgIC8qIEZpeGVkIHVwZGF0ZSBwaHlzaWNzIHN0ZXAgZnVuY3Rpb24gKi9cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByb3RlY3RlZCByZWFkeSgpOiB2b2lkIHtcclxuICAgICAgICAgICAgLyogRXhlY3V0ZSB3aGVuIHNjZW5lIGlzIHJlYWR5IGZ1bmN0aW9uICovXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcm90ZWN0ZWQgZGVzdHJveSgpOiB2b2lkIHtcclxuICAgICAgICAgICAgdGhpcy5ub2RlTWF0ZXJpYWxFZGl0b3IgPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsIm1vZHVsZSBQUk9KRUNUIHtcclxuICAgIC8qKlxyXG4gICAgKiBCYWJ5bG9uIFNjcmlwdCBDb21wb25lbnRcclxuICAgICogQGNsYXNzIE5vZGVNYXRlcmlhbFByb2Nlc3NcclxuICAgICovXHJcbiAgICBleHBvcnQgY2xhc3MgTm9kZU1hdGVyaWFsUHJvY2VzcyBleHRlbmRzIEJBQllMT04uU2NyaXB0Q29tcG9uZW50IHtcclxuICAgICAgICBwcml2YXRlIG5vZGVNYXRlcmlhbEVkaXRvcjpCQUJZTE9OLlRyYW5zZm9ybU5vZGUgPSBudWxsO1xyXG4gICAgICAgIHByaXZhdGUgbnVtYmVyT2ZTYW1wbGVzOm51bWJlciA9IDE7XHJcbiAgICAgICAgcHJpdmF0ZSBzYW1wbGluZ01vZGU6bnVtYmVyID0gMDtcclxuICAgICAgICBwcml2YXRlIHRleHR1cmVUeXBlOm51bWJlciA9IDA7XHJcbiAgICAgICAgcHJpdmF0ZSB0ZXh0dXJlRm9ybWF0Om51bWJlciA9IEJBQllMT04uQ29uc3RhbnRzLlRFWFRVUkVGT1JNQVRfUkdCQTtcclxuICAgICAgICBwcml2YXRlIHNpemVSYXRpbzpudW1iZXIgPSAxLjA7XHJcbiAgICAgICAgcHJpdmF0ZSByZXN1YWJsZTpib29sZWFuID0gZmFsc2U7XHJcblxyXG4gICAgICAgIHB1YmxpYyBnZXRQb3N0UHJvY2VzcygpOkJBQllMT04uUG9zdFByb2Nlc3MgeyByZXR1cm4gdGhpcy5tX3Bvc3RQcm9jZXNzOyB9XHJcblxyXG4gICAgICAgIHByb3RlY3RlZCBtX3Bvc3RQcm9jZXNzOkJBQllMT04uUG9zdFByb2Nlc3MgPSBudWxsO1xyXG5cclxuICAgICAgICBwcm90ZWN0ZWQgc3RhcnQoKTogdm9pZCB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm5vZGVNYXRlcmlhbEVkaXRvciAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBubWU6UFJPSkVDVC5Ob2RlTWF0ZXJpYWxJbnN0YW5jZSA9IFNNLkZpbmRTY3JpcHRDb21wb25lbnQodGhpcy5ub2RlTWF0ZXJpYWxFZGl0b3IsIFwiUFJPSkVDVC5Ob2RlTWF0ZXJpYWxJbnN0YW5jZVwiKTtcclxuICAgICAgICAgICAgICAgIGlmIChubWUgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG1hdGVyaWFsSW5zdGFuY2U6QkFCWUxPTi5Ob2RlTWF0ZXJpYWwgPSBubWUuZ2V0TWF0ZXJpYWxJbnN0YW5jZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChtYXRlcmlhbEluc3RhbmNlICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXR1cE5vZGVNYXRlcmlhbChtYXRlcmlhbEluc3RhbmNlKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXCJOdWxsIG5vZGUgbWF0ZXJpYWwgaW5zdGFuY2Ugb246IFwiICsgdGhpcy5ub2RlTWF0ZXJpYWxFZGl0b3IubmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXCJGYWlsZWQgdG8gbG9jYXRlIG5vZGUgbWF0ZXJpYWwgZWRpdG9yIG9uOiBcIiArIHRoaXMubm9kZU1hdGVyaWFsRWRpdG9yLm5hbWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcm90ZWN0ZWQgc2V0dXBOb2RlTWF0ZXJpYWwobWF0ZXJpYWxJbnN0YW5jZTpCQUJZTE9OLk5vZGVNYXRlcmlhbCk6dm9pZCB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNhbWVyYTpCQUJZTE9OLkZyZWVDYW1lcmEgPSB0aGlzLmdldENhbWVyYVJpZygpO1xyXG4gICAgICAgICAgICBpZiAoY2FtZXJhICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubV9wb3N0UHJvY2VzcyA9IG1hdGVyaWFsSW5zdGFuY2UuY3JlYXRlUG9zdFByb2Nlc3MoY2FtZXJhLCB0aGlzLnNpemVSYXRpbywgdGhpcy5zYW1wbGluZ01vZGUsIHRoaXMuc2NlbmUuZ2V0RW5naW5lKCksIHRoaXMucmVzdWFibGUsIHRoaXMudGV4dHVyZVR5cGUsIHRoaXMudGV4dHVyZUZvcm1hdCk7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5tX3Bvc3RQcm9jZXNzICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1fcG9zdFByb2Nlc3MubmFtZSA9ICh0aGlzLnRyYW5zZm9ybS5uYW1lICsgXCIuUHJvY2Vzc1wiKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1fcG9zdFByb2Nlc3Muc2FtcGxlcyA9IHRoaXMubnVtYmVyT2ZTYW1wbGVzO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXCJGYWlsZWQgdG8gY3JlYXRlIHBvc3QgcHJvY2VzcyBmb3I6IFwiICsgdGhpcy50cmFuc2Zvcm0ubmFtZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXCJOdWxsIGNhbWVyYSByaWcgZm9yOiBcIiArIHRoaXMudHJhbnNmb3JtLm5hbWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcm90ZWN0ZWQgZGVzdHJveSgpOiB2b2lkIHtcclxuICAgICAgICAgICAgdGhpcy5ub2RlTWF0ZXJpYWxFZGl0b3IgPSBudWxsO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5tX3Bvc3RQcm9jZXNzICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubV9wb3N0UHJvY2Vzcy5kaXNwb3NlKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1fcG9zdFByb2Nlc3MgPSBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwibW9kdWxlIFBST0pFQ1Qge1xyXG4gICAgLyoqXHJcbiAgICAqIEJhYnlsb24gU2NyaXB0IENvbXBvbmVudFxyXG4gICAgKiBAY2xhc3MgTm9kZU1hdGVyaWFsVGV4dHVyZVxyXG4gICAgKi9cclxuICAgIGV4cG9ydCBjbGFzcyBOb2RlTWF0ZXJpYWxUZXh0dXJlIGV4dGVuZHMgQkFCWUxPTi5TY3JpcHRDb21wb25lbnQge1xyXG4gICAgICAgIHByaXZhdGUgbm9kZU1hdGVyaWFsRWRpdG9yOkJBQllMT04uVHJhbnNmb3JtTm9kZSA9IG51bGw7XHJcbiAgICAgICAgcHJpdmF0ZSB0ZXh0dXJlU2l6ZTpudW1iZXIgPSAyNTY7XHJcblxyXG4gICAgICAgIHB1YmxpYyBnZXRQcm9jZWR1cmFsVGV4dHVyZSgpOiBCQUJZTE9OLlByb2NlZHVyYWxUZXh0dXJlIHsgcmV0dXJuIHRoaXMubV9wcm9jZWR1cmFsVGV4dHVyZTsgfVxyXG5cclxuICAgICAgICBwcm90ZWN0ZWQgbV9wcm9jZWR1cmFsVGV4dHVyZTpCQUJZTE9OLlByb2NlZHVyYWxUZXh0dXJlID0gbnVsbDtcclxuXHJcbiAgICAgICAgcHJvdGVjdGVkIHN0YXJ0KCk6IHZvaWQge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5ub2RlTWF0ZXJpYWxFZGl0b3IgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgbm1lOlBST0pFQ1QuTm9kZU1hdGVyaWFsSW5zdGFuY2UgPSBTTS5GaW5kU2NyaXB0Q29tcG9uZW50KHRoaXMubm9kZU1hdGVyaWFsRWRpdG9yLCBcIlBST0pFQ1QuTm9kZU1hdGVyaWFsSW5zdGFuY2VcIik7XHJcbiAgICAgICAgICAgICAgICBpZiAobm1lICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBtYXRlcmlhbEluc3RhbmNlOkJBQllMT04uTm9kZU1hdGVyaWFsID0gbm1lLmdldE1hdGVyaWFsSW5zdGFuY2UoKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobWF0ZXJpYWxJbnN0YW5jZSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0dXBOb2RlTWF0ZXJpYWwobWF0ZXJpYWxJbnN0YW5jZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwiTnVsbCBub2RlIG1hdGVyaWFsIGluc3RhbmNlIG9uOiBcIiArIHRoaXMubm9kZU1hdGVyaWFsRWRpdG9yLm5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwiRmFpbGVkIHRvIGxvY2F0ZSBub2RlIG1hdGVyaWFsIGVkaXRvciBvbjogXCIgKyB0aGlzLm5vZGVNYXRlcmlhbEVkaXRvci5uYW1lKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJvdGVjdGVkIHNldHVwTm9kZU1hdGVyaWFsKG1hdGVyaWFsSW5zdGFuY2U6QkFCWUxPTi5Ob2RlTWF0ZXJpYWwpOnZvaWQge1xyXG4gICAgICAgICAgICB0aGlzLm1fcHJvY2VkdXJhbFRleHR1cmUgPSBtYXRlcmlhbEluc3RhbmNlLmNyZWF0ZVByb2NlZHVyYWxUZXh0dXJlKHRoaXMudGV4dHVyZVNpemUsIHRoaXMuc2NlbmUpO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5tX3Byb2NlZHVyYWxUZXh0dXJlICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubV9wcm9jZWR1cmFsVGV4dHVyZS5uYW1lID0gKHRoaXMudHJhbnNmb3JtLm5hbWUgKyBcIi5UZXh0dXJlXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcm90ZWN0ZWQgZGVzdHJveSgpOiB2b2lkIHtcclxuICAgICAgICAgICAgdGhpcy5ub2RlTWF0ZXJpYWxFZGl0b3IgPSBudWxsO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5tX3Byb2NlZHVyYWxUZXh0dXJlICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubV9wcm9jZWR1cmFsVGV4dHVyZS5kaXNwb3NlKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1fcHJvY2VkdXJhbFRleHR1cmUgPSBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwibW9kdWxlIFBST0pFQ1Qge1xyXG4gICAgLyoqXHJcbiAgICAgKiBCYWJ5bG9uIFR5cGVTY3JpcHQgRmlsZSAoREVQUkVDSUFURUQpXHJcbiAgICAgKiBAc2NyaXB0IFBvc3RSb2JvdCBNZXNzYWdlIExpYnJhcnlcclxuICAgICAqIFxyXG4gICAgICogVG9wIFBhcmVudCBXaW5kb3cgSGFuZHNoYWtlIChIb3N0IExpc3RlbmVyKVxyXG4gICAgICogXHJcbiAgICAgaWYgKHdpbmRvdy5wb3N0Um9ib3QgIT0gbnVsbCkge1xyXG4gICAgICB3aW5kb3cucG9zdFJvYm90Lm9uKFwiaGFuZHNoYWtlXCIsIChldmVudCkgPT4ge1xyXG4gICAgICAgIHdpbmRvdy5wb3N0Um9ib3Quc2VuZChldmVudC5zb3VyY2UsICdoYW5kc2hha2UnLCB7IGlkOiAwIH0pLnRoZW4oZnVuY3Rpb24oZXZlbnQpIHtcclxuICAgICAgICAgICAgd2luZG93W1wiYnJpZGdlXCJdID0gZXZlbnQuZGF0YTtcclxuICAgICAgICB9KS5jYXRjaChmdW5jdGlvbihlcnIpIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGlkOiAgIDAsXHJcbiAgICAgICAgICAgIG5hbWU6ICdQYXJlbnQgV2luZG93IEJyaWRnZScsXHJcbiAgICAgICAgICAgIC8vIC4uXHJcbiAgICAgICAgICAgIC8vIEJyaWRnZSBQcm9wZXJ0aWVzIEFuZCBBc3luYyBGdW5jdGlvbnNcclxuICAgICAgICAgICAgLy8gLi5cclxuICAgICAgICAgICAgaGVsbG9Xb3JsZEFzeW5jOiAoZmlyc3QsIGxhc3QpID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBcIkhlbGxvIFwiICsgbGFzdCArIFwiLCBcIiArIGZpcnN0O1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH07XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgZXhwb3J0IGNsYXNzIFBvc3RSb2JvdCB7XHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBDcmVhdGVQb3N0TWVzc2FnZUJyaWRnZShob3N0V2luZG93OldpbmRvdywgbG9jYWxCcmlkZU9iamVjdDphbnksIG9uU3VjY2VzczooKT0+dm9pZCA9IG51bGwsIG9uRXJyb3I6KG1lc3NhZ2U6c3RyaW5nKT0+dm9pZCA9IG51bGwpOnZvaWQge1xyXG4gICAgICAgICAgICBpZiAoaG9zdFdpbmRvdyAhPSB3aW5kb3cpIHtcclxuICAgICAgICAgICAgICAgIGlmICgoPGFueT53aW5kb3cpLnBvc3RSb2JvdCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgKDxhbnk+d2luZG93KS5wb3N0Um9ib3Qub24oXCJoYW5kc2hha2VcIiwgKCkgPT4geyByZXR1cm4gbG9jYWxCcmlkZU9iamVjdDsgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgKDxhbnk+d2luZG93KS5wb3N0Um9ib3Quc2VuZChob3N0V2luZG93LCBcImhhbmRzaGFrZVwiLCB7IGlkOiAxIH0pLnRoZW4oZnVuY3Rpb24oZXZlbnQ6YW55KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChldmVudC5kYXRhICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvd1tcImJyaWRnZVwiXSA9IGV2ZW50LmRhdGE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob25TdWNjZXNzICE9IG51bGwpIG9uU3VjY2VzcygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbXNnMDpzdHJpbmcgPSBcIk51bGwgYnJpZGdlIGludGVyZmFjZSByZXR1cm4gZnJvbSBob3N0XCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob25FcnJvciAhPSBudWxsKSBvbkVycm9yKG1zZzApOyBlbHNlIGNvbnNvbGUuZXJyb3IobXNnMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbihlcnI6RXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbXNnMTpzdHJpbmcgPSBlcnIubWVzc2FnZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9uRXJyb3IgIT0gbnVsbCkgb25FcnJvcihtc2cxKTsgZWxzZSBjb25zb2xlLmVycm9yKG1zZzEpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBtc2cyOnN0cmluZyA9IFwiUG9zdCByb2JvdCBtZXNzYWdlIGxpYnJhcnkgbm90IGF2YWlsYWJsZVwiO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvbkVycm9yICE9IG51bGwpIG9uRXJyb3IobXNnMik7IGVsc2UgY29uc29sZS5lcnJvcihtc2cyKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1zZzM6c3RyaW5nID0gXCJDYW5ub3QgY3JlYXRlIHBvc3QgbWVzc2FnZSBicmlkZ2UgdG8gbG9jYWwgd2luZG93XCI7XHJcbiAgICAgICAgICAgICAgICBpZiAob25FcnJvciAhPSBudWxsKSBvbkVycm9yKG1zZzMpOyBlbHNlIGNvbnNvbGUuZXJyb3IobXNnMyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAqL1xyXG59XHJcbiIsIm1vZHVsZSBQUk9KRUNUIHtcclxuICAgIC8qKlxyXG4gICAgKiBCYWJ5bG9uIFNjcmlwdCBDb21wb25lbnRcclxuICAgICogQGNsYXNzIE1vYmlsZUlucHV0Q29udHJvbGxlclxyXG4gICAgKi9cclxuICAgIGV4cG9ydCBjbGFzcyBNb2JpbGVJbnB1dENvbnRyb2xsZXIgZXh0ZW5kcyBCQUJZTE9OLlNjcmlwdENvbXBvbmVudCB7XHJcbiAgICAgICAgcHJpdmF0ZSBjb250cm9sVHlwZTpudW1iZXIgPSAwO1xyXG4gICAgICAgIHByaXZhdGUgc2lkZU1hcmdpbnM6bnVtYmVyID0gMTY7XHJcbiAgICAgICAgcHJpdmF0ZSBib3R0b21NYXJnaW5zOm51bWJlciA9IDE2O1xyXG4gICAgICAgIHByaXZhdGUgcmVhZHlUaW1lb3V0Om51bWJlciA9IDIwMDtcclxuICAgICAgICBwcml2YXRlIGludmVydExlZnRTdGlja1k6Ym9vbGVhbiA9IHRydWU7XHJcbiAgICAgICAgcHJpdmF0ZSBpbnZlcnRSaWdodFN0aWNrWTpib29sZWFuID0gdHJ1ZTtcclxuICAgICAgICBwcml2YXRlIGVuYWJsZUxlZnRKb3lzdGljazpib29sZWFuID0gdHJ1ZTtcclxuICAgICAgICBwcml2YXRlIGVuYWJsZVJpZ2h0Sm95c3RpY2s6Ym9vbGVhbiA9IHRydWU7XHJcbiAgICAgICAgcHJpdmF0ZSBkaXNhYmxlTW91c2VSb3RhdGlvbjpib29sZWFuID0gdHJ1ZTtcclxuICAgICAgICBwcml2YXRlIHVwZGF0ZUNhbWVyYUlucHV0OmJvb2xlYW4gPSBmYWxzZTtcclxuXHJcbiAgICAgICAgcHVibGljIGdldExlZnRTdGljaygpOkJBQllMT04uVG91Y2hKb3lzdGlja0hhbmRsZXIgeyByZXR1cm4gdGhpcy5tX2xlZnRTdGljazsgfVxyXG4gICAgICAgIHB1YmxpYyBnZXRSaWdodFN0aWNrKCk6QkFCWUxPTi5Ub3VjaEpveXN0aWNrSGFuZGxlciB7IHJldHVybiB0aGlzLm1fcmlnaHRTdGljazsgfVxyXG5cclxuICAgICAgICBwdWJsaWMgZ2V0TGVmdFN0aWNrRW5hYmxlZCgpOmJvb2xlYW4geyByZXR1cm4gdGhpcy5lbmFibGVMZWZ0Sm95c3RpY2s7IH1cclxuICAgICAgICBwdWJsaWMgZ2V0UmlnaHRTdGlja0VuYWJsZWQoKTpib29sZWFuIHsgcmV0dXJuIHRoaXMuZW5hYmxlUmlnaHRKb3lzdGljazsgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIHByb3RlY3RlZCBtX2xlZnRTdGljazpCQUJZTE9OLlRvdWNoSm95c3RpY2tIYW5kbGVyID0gbnVsbDtcclxuICAgICAgICBwcm90ZWN0ZWQgbV9yaWdodFN0aWNrOkJBQllMT04uVG91Y2hKb3lzdGlja0hhbmRsZXIgPSBudWxsO1xyXG5cclxuICAgICAgICBwcm90ZWN0ZWQgc3RhcnQoKTogdm9pZCB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnVwZGF0ZUNhbWVyYUlucHV0ID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjYW1lcmE6QkFCWUxPTi5GcmVlQ2FtZXJhID0gUFJPSkVDVC5Vbml2ZXJzYWxDYW1lcmFTeXN0ZW0uR2V0TWFpbkNhbWVyYSh0aGlzLnNjZW5lKTtcclxuICAgICAgICAgICAgICAgIGlmIChjYW1lcmEgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGlucHV0ID0gbmV3IFBST0pFQ1QuRnJlZUNhbWVyYVRvdWNoSm95c3RpY2tJbnB1dCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlucHV0LmNvbnRyb2xsZXIgPSB0aGlzO1xyXG4gICAgICAgICAgICAgICAgICAgIGlucHV0LmludmVydFlBeGlzID0gIXRoaXMuaW52ZXJ0UmlnaHRTdGlja1k7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FtZXJhLmlucHV0cy5hZGQoaW5wdXQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcm90ZWN0ZWQgcmVhZHkoKTogdm9pZCB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmNvbnRyb2xUeXBlID09PSAxIHx8IEJBQllMT04uU2NlbmVNYW5hZ2VyLklzTW9iaWxlKCkpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmRpc2FibGVNb3VzZVJvdGF0aW9uID09PSB0cnVlKSBCQUJZTE9OLlNjZW5lTWFuYWdlci5WaXJ0dWFsSm95c3RpY2tFbmFibGVkID0gdHJ1ZTsgLy8gTm90ZTogSWYgVXNpbmcgSm95c3RpY2sgUm90YXRpb24gVGhlbiBEaXNhYmxlIE1vdXNlIElucHV0XHJcbiAgICAgICAgICAgICAgICBjb25zdCBkaXNwbGF5VGltZW91dDpudW1iZXIgPSAodGhpcy5yZWFkeVRpbWVvdXQgPj0gMTApID8gdGhpcy5yZWFkeVRpbWVvdXQgOiAxMDtcclxuICAgICAgICAgICAgICAgIEJBQllMT04uU2NlbmVNYW5hZ2VyLlNldFRpbWVvdXQoZGlzcGxheVRpbWVvdXQsICgpPT57XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jcmVhdGVIdG1sRWxlbWVudHMoKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5lbmFibGVMZWZ0Sm95c3RpY2sgPT09IHRydWUpIHRoaXMubV9sZWZ0U3RpY2sgPSBuZXcgQkFCWUxPTi5Ub3VjaEpveXN0aWNrSGFuZGxlcihcInN0aWNrMVwiLCA2NCwgOCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZW5hYmxlUmlnaHRKb3lzdGljayA9PT0gdHJ1ZSkgdGhpcy5tX3JpZ2h0U3RpY2sgPSBuZXcgQkFCWUxPTi5Ub3VjaEpveXN0aWNrSGFuZGxlcihcInN0aWNrMlwiLCA2NCwgOCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJvdGVjdGVkIHVwZGF0ZSgpOiB2b2lkIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuZW5hYmxlTGVmdEpveXN0aWNrID09PSB0cnVlICYmIHRoaXMubV9sZWZ0U3RpY2sgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbGVmdFN0aWNrVmFsdWVYOm51bWJlciA9IHRoaXMubV9sZWZ0U3RpY2suZ2V0VmFsdWVYKCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBsZWZ0U3RpY2tWYWx1ZVk6bnVtYmVyID0gdGhpcy5tX2xlZnRTdGljay5nZXRWYWx1ZVkoKTtcclxuICAgICAgICAgICAgICAgIEJBQllMT04uU2NlbmVNYW5hZ2VyLlNldExlZnRKb3lzdGlja0J1ZmZlcihsZWZ0U3RpY2tWYWx1ZVgsIGxlZnRTdGlja1ZhbHVlWSwgdGhpcy5pbnZlcnRMZWZ0U3RpY2tZKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy5lbmFibGVSaWdodEpveXN0aWNrID09PSB0cnVlICYmIHRoaXMubV9yaWdodFN0aWNrICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJpZ2h0U3RpY2tWYWx1ZVg6bnVtYmVyID0gdGhpcy5tX3JpZ2h0U3RpY2suZ2V0VmFsdWVYKCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCByaWdodFN0aWNrVmFsdWVZOm51bWJlciA9IHRoaXMubV9yaWdodFN0aWNrLmdldFZhbHVlWSgpO1xyXG4gICAgICAgICAgICAgICAgQkFCWUxPTi5TY2VuZU1hbmFnZXIuU2V0UmlnaHRKb3lzdGlja0J1ZmZlcihyaWdodFN0aWNrVmFsdWVYLCByaWdodFN0aWNrVmFsdWVZLCB0aGlzLmludmVydFJpZ2h0U3RpY2tZKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJvdGVjdGVkIGRlc3Ryb3koKTogdm9pZCB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm1fbGVmdFN0aWNrICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubV9sZWZ0U3RpY2suZGlzcG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tX2xlZnRTdGljayA9IG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMubV9yaWdodFN0aWNrICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubV9yaWdodFN0aWNrLmRpc3Bvc2UoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMubV9yaWdodFN0aWNrID0gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJvdGVjdGVkIGNyZWF0ZUh0bWxFbGVtZW50cygpOnZvaWQge1xyXG4gICAgICAgICAgICBjb25zdCByb290VXJsOnN0cmluZyA9IEJBQllMT04uU2NlbmVNYW5hZ2VyLkdldFJvb3RVcmwodGhpcy5zY2VuZSk7XHJcbiAgICAgICAgICAgIGNvbnN0IGJhc2VJbWFnZURhdGE6QkFCWUxPTi5JVW5pdHlUZXh0dXJlID0gdGhpcy5nZXRQcm9wZXJ0eShcImpveXN0aWNrQmFzZUltYWdlXCIpO1xyXG4gICAgICAgICAgICBjb25zdCBsZWZ0U3RpY2tJbWFnZURhdGE6QkFCWUxPTi5JVW5pdHlUZXh0dXJlID0gdGhpcy5nZXRQcm9wZXJ0eShcImxlZnRTdGlja0ltYWdlXCIpO1xyXG4gICAgICAgICAgICBjb25zdCByaWdodFN0aWNrSW1hZ2VEYXRhOkJBQllMT04uSVVuaXR5VGV4dHVyZSA9IHRoaXMuZ2V0UHJvcGVydHkoXCJyaWdodFN0aWNrSW1hZ2VcIik7XHJcbiAgICAgICAgICAgIGNvbnN0IGJhc2VJbWFnZUZpbGVuYW1lOnN0cmluZyA9IChiYXNlSW1hZ2VEYXRhICE9IG51bGwpID8gYmFzZUltYWdlRGF0YS5maWxlbmFtZSA6IFwiYmFzZUltYWdlLnBuZ1wiO1xyXG4gICAgICAgICAgICBjb25zdCBsZWZ0U3RpY2tJbWFnZUZpbGVuYW1lOnN0cmluZyA9IChsZWZ0U3RpY2tJbWFnZURhdGEgIT0gbnVsbCkgPyBsZWZ0U3RpY2tJbWFnZURhdGEuZmlsZW5hbWUgOiBcImxlZnRTdGljay5wbmdcIjtcclxuICAgICAgICAgICAgY29uc3QgcmlnaHRTdGlja0ltYWdlRmlsZW5hbWU6c3RyaW5nID0gKHJpZ2h0U3RpY2tJbWFnZURhdGEgIT0gbnVsbCkgPyByaWdodFN0aWNrSW1hZ2VEYXRhLmZpbGVuYW1lIDogXCJyaWdodFN0aWNrLnBuZ1wiO1xyXG4gICAgICAgICAgICAvLyAuLlxyXG4gICAgICAgICAgICAvLyBzdHlsZT1cImJvcmRlcjogMXB4IHNvbGlkIHJlZDsgd2lkdGg6IDEyOHB4OyBwb3NpdGlvbjogYWJzb2x1dGU7IGxlZnQ6MjBweDsgYm90dG9tOjIwcHg7XCJcclxuICAgICAgICAgICAgLy8gLi5cclxuICAgICAgICAgICAgaWYgKHRoaXMuZW5hYmxlTGVmdEpveXN0aWNrID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBiYXNlRGl2MTpIVE1MRGl2RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICAgICAgICAgICAgICBiYXNlRGl2MS5pZCA9IFwiYmFzZTFcIjtcclxuICAgICAgICAgICAgICAgIGJhc2VEaXYxLnN0eWxlLndpZHRoID0gXCIxMjhweFwiO1xyXG4gICAgICAgICAgICAgICAgYmFzZURpdjEuc3R5bGUucG9zaXRpb24gPSBcImFic29sdXRlXCI7XHJcbiAgICAgICAgICAgICAgICBiYXNlRGl2MS5zdHlsZS5sZWZ0ID0gKHRoaXMuc2lkZU1hcmdpbnMudG9GaXhlZCgwKSArIFwicHhcIik7XHJcbiAgICAgICAgICAgICAgICBiYXNlRGl2MS5zdHlsZS5ib3R0b20gPSAodGhpcy5ib3R0b21NYXJnaW5zLnRvRml4ZWQoMCkgKyBcInB4XCIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYmFzZUltZzE6SFRNTEltYWdlRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbWdcIik7XHJcbiAgICAgICAgICAgICAgICBiYXNlSW1nMS5pZCA9IFwiaW1hZ2UxXCI7XHJcbiAgICAgICAgICAgICAgICBiYXNlSW1nMS5zcmMgPSAocm9vdFVybCArIGJhc2VJbWFnZUZpbGVuYW1lKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGJhbGxEaXYxOkhUTUxEaXZFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgICAgICAgICAgICAgIGJhbGxEaXYxLmlkID0gXCJzdGljazFcIjtcclxuICAgICAgICAgICAgICAgIGJhbGxEaXYxLnN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xyXG4gICAgICAgICAgICAgICAgYmFsbERpdjEuc3R5bGUudG9wID0gXCIzMnB4XCI7XHJcbiAgICAgICAgICAgICAgICBiYWxsRGl2MS5zdHlsZS5sZWZ0ID0gXCIzMnB4XCI7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBiYWxsSW1nMTpIVE1MSW1hZ2VFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImltZ1wiKTtcclxuICAgICAgICAgICAgICAgIGJhbGxJbWcxLmlkID0gXCJiYWxsMVwiO1xyXG4gICAgICAgICAgICAgICAgYmFsbEltZzEuc3JjID0gKHJvb3RVcmwgKyBsZWZ0U3RpY2tJbWFnZUZpbGVuYW1lKTtcclxuICAgICAgICAgICAgICAgIGJhc2VEaXYxLmFwcGVuZENoaWxkKGJhc2VJbWcxKTtcclxuICAgICAgICAgICAgICAgIGJhbGxEaXYxLmFwcGVuZENoaWxkKGJhbGxJbWcxKTtcclxuICAgICAgICAgICAgICAgIGJhc2VEaXYxLmFwcGVuZENoaWxkKGJhbGxEaXYxKTtcclxuICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoYmFzZURpdjEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIC4uXHJcbiAgICAgICAgICAgIC8vIHN0eWxlPVwiYm9yZGVyOiAxcHggc29saWQgYmx1ZTsgd2lkdGg6IDEyOHB4OyBwb3NpdGlvbjogYWJzb2x1dGU7IHJpZ2h0OjIwcHg7IGJvdHRvbToyMHB4O1wiXHJcbiAgICAgICAgICAgIC8vIC4uXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmVuYWJsZVJpZ2h0Sm95c3RpY2sgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGJhc2VEaXYyOkhUTUxEaXZFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgICAgICAgICAgICAgIGJhc2VEaXYyLmlkID0gXCJiYXNlMlwiO1xyXG4gICAgICAgICAgICAgICAgYmFzZURpdjIuc3R5bGUud2lkdGggPSBcIjEyOHB4XCI7XHJcbiAgICAgICAgICAgICAgICBiYXNlRGl2Mi5zdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcclxuICAgICAgICAgICAgICAgIGJhc2VEaXYyLnN0eWxlLnJpZ2h0ID0gKHRoaXMuc2lkZU1hcmdpbnMudG9GaXhlZCgwKSArIFwicHhcIik7XHJcbiAgICAgICAgICAgICAgICBiYXNlRGl2Mi5zdHlsZS5ib3R0b20gPSAodGhpcy5ib3R0b21NYXJnaW5zLnRvRml4ZWQoMCkgKyBcInB4XCIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYmFzZUltZzI6SFRNTEltYWdlRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbWdcIik7XHJcbiAgICAgICAgICAgICAgICBiYXNlSW1nMi5pZCA9IFwiaW1hZ2UyXCI7XHJcbiAgICAgICAgICAgICAgICBiYXNlSW1nMi5zcmMgPSAocm9vdFVybCArIGJhc2VJbWFnZUZpbGVuYW1lKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGJhbGxEaXYyOkhUTUxEaXZFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgICAgICAgICAgICAgIGJhbGxEaXYyLmlkID0gXCJzdGljazJcIjtcclxuICAgICAgICAgICAgICAgIGJhbGxEaXYyLnN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xyXG4gICAgICAgICAgICAgICAgYmFsbERpdjIuc3R5bGUudG9wID0gXCIzMnB4XCI7XHJcbiAgICAgICAgICAgICAgICBiYWxsRGl2Mi5zdHlsZS5sZWZ0ID0gXCIzMnB4XCI7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBiYWxsSW1nMjpIVE1MSW1hZ2VFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImltZ1wiKTtcclxuICAgICAgICAgICAgICAgIGJhbGxJbWcyLmlkID0gXCJiYWxsMlwiO1xyXG4gICAgICAgICAgICAgICAgYmFsbEltZzIuc3JjID0gKHJvb3RVcmwgKyByaWdodFN0aWNrSW1hZ2VGaWxlbmFtZSk7XHJcbiAgICAgICAgICAgICAgICBiYXNlRGl2Mi5hcHBlbmRDaGlsZChiYXNlSW1nMik7XHJcbiAgICAgICAgICAgICAgICBiYWxsRGl2Mi5hcHBlbmRDaGlsZChiYWxsSW1nMik7XHJcbiAgICAgICAgICAgICAgICBiYXNlRGl2Mi5hcHBlbmRDaGlsZChiYWxsRGl2Mik7XHJcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGJhc2VEaXYyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogTWFuYWdlIHRoZSBqb3lzdGljayBpbnB1dHMgdG8gY29udHJvbCBhIGZyZWUgY2FtZXJhLlxyXG4gICAgICogQHNlZSBodHRwczovL2RvYy5iYWJ5bG9uanMuY29tL2hvd190by9jdXN0b21pemluZ19jYW1lcmFfaW5wdXRzXHJcbiAgICAgKi9cclxuICAgIGV4cG9ydCBjbGFzcyBGcmVlQ2FtZXJhVG91Y2hKb3lzdGlja0lucHV0IGltcGxlbWVudHMgQkFCWUxPTi5JQ2FtZXJhSW5wdXQ8QkFCWUxPTi5GcmVlQ2FtZXJhPiB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogRGVmaW5lIHRoZSBjYW1lcmEgdGhlIGlucHV0IGlzIGF0dGFjaGVkIHRvLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBjYW1lcmE6IEJBQllMT04uRnJlZUNhbWVyYTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogRGVmaW5lIHRoZSBqb3lzdGljayBjb250cm9sbGluZyB0aGUgaW5wdXRcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgY29udHJvbGxlcjogQkFCWUxPTi5OdWxsYWJsZTxQUk9KRUNULk1vYmlsZUlucHV0Q29udHJvbGxlcj47XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIERlZmluZXMgdGhlIGpveXN0aWNrIHJvdGF0aW9uIHNlbnNpYmxpdHkuXHJcbiAgICAgICAgICogVGhpcyBpcyB0aGUgdGhyZXNob2xkIGZyb20gd2hlbiByb3RhdGlvbiBzdGFydHMgdG8gYmUgYWNjb3VudGVkIGZvciB0byBwcmV2ZW50IGppdHRlcmluZy5cclxuICAgICAgICAgKi9cclxuICAgICAgICBAQkFCWUxPTi5zZXJpYWxpemUoKVxyXG4gICAgICAgIHB1YmxpYyBqb3lzdGlja0FuZ3VsYXJTZW5zaWJpbGl0eSA9IDIwMDtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogRGVmaW5lcyB0aGUgam95c3RpY2sgbW92ZSBzZW5zaWJsaXR5LlxyXG4gICAgICAgICAqIFRoaXMgaXMgdGhlIHRocmVzaG9sZCBmcm9tIHdoZW4gbW92aW5nIHN0YXJ0cyB0byBiZSBhY2NvdW50ZWQgZm9yIGZvciB0byBwcmV2ZW50IGppdHRlcmluZy5cclxuICAgICAgICAgKi9cclxuICAgICAgICBAQkFCWUxPTi5zZXJpYWxpemUoKVxyXG4gICAgICAgIHB1YmxpYyBqb3lzdGlja01vdmVTZW5zaWJpbGl0eSA9IDQwLjA7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIERlZmluZXMgdGhlIG1pbmltdW0gdmFsdWUgYXQgd2hpY2ggYW55IGFuYWxvZyBzdGljayBpbnB1dCBpcyBpZ25vcmVkLlxyXG4gICAgICAgICAqIE5vdGU6IFRoaXMgdmFsdWUgc2hvdWxkIG9ubHkgYmUgYSB2YWx1ZSBiZXR3ZWVuIDAgYW5kIDEuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGRlYWR6b25lRGVsdGEgPSAwLjE7XHJcblxyXG5cclxuICAgICAgICBwcml2YXRlIF95QXhpc1NjYWxlID0gMS4wO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEdldHMgb3Igc2V0cyBhIGJvb2xlYW4gaW5kaWNhdGluZyB0aGF0IFlheGlzIChmb3IgcmlnaHQgc3RpY2spIHNob3VsZCBiZSBpbnZlcnRlZFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBnZXQgaW52ZXJ0WUF4aXMoKSB7IHJldHVybiB0aGlzLl95QXhpc1NjYWxlICE9PSAxLjA7IH1cclxuICAgICAgICBwdWJsaWMgc2V0IGludmVydFlBeGlzKHZhbHVlOiBib29sZWFuKSB7IHRoaXMuX3lBeGlzU2NhbGUgPSB2YWx1ZSA/IC0xLjAgOiAxLjA7IH1cclxuXHJcbiAgICAgICAgLy8gcHJpdmF0ZSBtZW1iZXJzXHJcbiAgICAgICAgcHJpdmF0ZSBMU1ZhbHVlczpCQUJZTE9OLlZlY3RvcjIgPSBuZXcgQkFCWUxPTi5WZWN0b3IyKDAsMCk7XHJcbiAgICAgICAgcHJpdmF0ZSBSU1ZhbHVlczpCQUJZTE9OLlZlY3RvcjIgPSBuZXcgQkFCWUxPTi5WZWN0b3IyKDAsMCk7XHJcbiAgICAgICAgcHJpdmF0ZSBfY2FtZXJhVHJhbnNmb3JtOiBCQUJZTE9OLk1hdHJpeCA9IEJBQllMT04uTWF0cml4LklkZW50aXR5KCk7XHJcbiAgICAgICAgcHJpdmF0ZSBfZGVsdGFUcmFuc2Zvcm06IEJBQllMT04uVmVjdG9yMyA9IEJBQllMT04uVmVjdG9yMy5aZXJvKCk7XHJcbiAgICAgICAgcHJpdmF0ZSBfdmVjdG9yMzogQkFCWUxPTi5WZWN0b3IzID0gQkFCWUxPTi5WZWN0b3IzLlplcm8oKTtcclxuICAgICAgICBwcml2YXRlIF92ZWN0b3IyOiBCQUJZTE9OLlZlY3RvcjIgPSBCQUJZTE9OLlZlY3RvcjIuWmVybygpO1xyXG4gICAgICAgIHByaXZhdGUgX2F0dGFjaGVkOmJvb2xlYW4gPSBmYWxzZTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQXR0YWNoIHRoZSBpbnB1dCBjb250cm9scyB0byBhIHNwZWNpZmljIGRvbSBlbGVtZW50IHRvIGdldCB0aGUgaW5wdXQgZnJvbS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgYXR0YWNoQ29udHJvbCgpOiB2b2lkIHtcclxuICAgICAgICAgICAgdGhpcy5fYXR0YWNoZWQgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogRGV0YWNoIHRoZSBjdXJyZW50IGNvbnRyb2xzIGZyb20gdGhlIHNwZWNpZmllZCBkb20gZWxlbWVudC5cclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgZGV0YWNoQ29udHJvbCgpOiB2b2lkO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBEZXRhY2ggdGhlIGN1cnJlbnQgY29udHJvbHMgZnJvbSB0aGUgc3BlY2lmaWVkIGRvbSBlbGVtZW50LlxyXG4gICAgICAgICAqIEBwYXJhbSBpZ25vcmVkIGRlZmluZXMgYW4gaWdub3JlZCBwYXJhbWV0ZXIga2VwdCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eS4gSWYgeW91IHdhbnQgdG8gZGVmaW5lIHRoZSBzb3VyY2UgaW5wdXQgZWxlbWVudCwgeW91IGNhbiBzZXQgZW5naW5lLmlucHV0RWxlbWVudCBiZWZvcmUgY2FsbGluZyBjYW1lcmEuYXR0YWNoQ29udHJvbFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBkZXRhY2hDb250cm9sKGlnbm9yZWQ/OiBhbnkpOiB2b2lkIHtcclxuICAgICAgICAgICAgdGhpcy5fYXR0YWNoZWQgPSBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFVwZGF0ZSB0aGUgY3VycmVudCBjYW1lcmEgc3RhdGUgZGVwZW5kaW5nIG9uIHRoZSBpbnB1dHMgdGhhdCBoYXZlIGJlZW4gdXNlZCB0aGlzIGZyYW1lLlxyXG4gICAgICAgICAqIFRoaXMgaXMgYSBkeW5hbWljYWxseSBjcmVhdGVkIGxhbWJkYSB0byBhdm9pZCB0aGUgcGVyZm9ybWFuY2UgcGVuYWx0eSBvZiBsb29waW5nIGZvciBpbnB1dHMgaW4gdGhlIHJlbmRlciBsb29wLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBjaGVja0lucHV0cygpOiB2b2lkIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuY2FtZXJhICE9IG51bGwgJiYgdGhpcy5jb250cm9sbGVyICE9IG51bGwgJiYgdGhpcy5fYXR0YWNoZWQgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IExTdGljayA9IHRoaXMuY29udHJvbGxlci5nZXRMZWZ0U3RpY2soKTtcclxuICAgICAgICAgICAgICAgIGlmIChMU3RpY2sgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuTFNWYWx1ZXMuc2V0KExTdGljay5nZXRWYWx1ZVgoKSwgTFN0aWNrLmdldFZhbHVlWSgpKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5qb3lzdGlja01vdmVTZW5zaWJpbGl0eSAhPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLkxTVmFsdWVzLnggPSAoTWF0aC5hYnModGhpcy5MU1ZhbHVlcy54KSA+IHRoaXMuZGVhZHpvbmVEZWx0YSkgPyB0aGlzLkxTVmFsdWVzLnggLyB0aGlzLmpveXN0aWNrTW92ZVNlbnNpYmlsaXR5IDogMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5MU1ZhbHVlcy55ID0gKE1hdGguYWJzKHRoaXMuTFNWYWx1ZXMueSkgPiB0aGlzLmRlYWR6b25lRGVsdGEpID8gdGhpcy5MU1ZhbHVlcy55IC8gdGhpcy5qb3lzdGlja01vdmVTZW5zaWJpbGl0eSA6IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLkxTVmFsdWVzLnNldCgwLDApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gLi5cclxuICAgICAgICAgICAgICAgIGNvbnN0IFJTdGljayA9IHRoaXMuY29udHJvbGxlci5nZXRSaWdodFN0aWNrKCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoUlN0aWNrICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLlJTVmFsdWVzLnNldChSU3RpY2suZ2V0VmFsdWVYKCksIFJTdGljay5nZXRWYWx1ZVkoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuam95c3RpY2tBbmd1bGFyU2Vuc2liaWxpdHkgIT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5SU1ZhbHVlcy54ID0gKE1hdGguYWJzKHRoaXMuUlNWYWx1ZXMueCkgPiB0aGlzLmRlYWR6b25lRGVsdGEpID8gdGhpcy5SU1ZhbHVlcy54IC8gdGhpcy5qb3lzdGlja0FuZ3VsYXJTZW5zaWJpbGl0eSA6IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuUlNWYWx1ZXMueSA9ICgoTWF0aC5hYnModGhpcy5SU1ZhbHVlcy55KSA+IHRoaXMuZGVhZHpvbmVEZWx0YSkgPyB0aGlzLlJTVmFsdWVzLnkgLyB0aGlzLmpveXN0aWNrQW5ndWxhclNlbnNpYmlsaXR5IDogMCkgKiB0aGlzLl95QXhpc1NjYWxlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5SU1ZhbHVlcy5zZXQoMCwwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIC4uXHJcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuY2FtZXJhLnJvdGF0aW9uUXVhdGVybmlvbikge1xyXG4gICAgICAgICAgICAgICAgICAgIEJBQllMT04uTWF0cml4LlJvdGF0aW9uWWF3UGl0Y2hSb2xsVG9SZWYodGhpcy5jYW1lcmEucm90YXRpb24ueSwgdGhpcy5jYW1lcmEucm90YXRpb24ueCwgMCwgdGhpcy5fY2FtZXJhVHJhbnNmb3JtKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jYW1lcmEucm90YXRpb25RdWF0ZXJuaW9uLnRvUm90YXRpb25NYXRyaXgodGhpcy5fY2FtZXJhVHJhbnNmb3JtKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIC4uXHJcbiAgICAgICAgICAgICAgICB2YXIgc3BlZWQgPSB0aGlzLmNhbWVyYS5fY29tcHV0ZUxvY2FsQ2FtZXJhU3BlZWQoKSAqIDUwLjA7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl92ZWN0b3IzLmNvcHlGcm9tRmxvYXRzKHRoaXMuTFNWYWx1ZXMueCAqIHNwZWVkLCAwLCAtdGhpcy5MU1ZhbHVlcy55ICogc3BlZWQpO1xyXG4gICAgICAgICAgICAgICAgLy8gLi5cclxuICAgICAgICAgICAgICAgIEJBQllMT04uVmVjdG9yMy5UcmFuc2Zvcm1Db29yZGluYXRlc1RvUmVmKHRoaXMuX3ZlY3RvcjMsIHRoaXMuX2NhbWVyYVRyYW5zZm9ybSwgdGhpcy5fZGVsdGFUcmFuc2Zvcm0pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jYW1lcmEuY2FtZXJhRGlyZWN0aW9uLmFkZEluUGxhY2UodGhpcy5fZGVsdGFUcmFuc2Zvcm0pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdmVjdG9yMi5jb3B5RnJvbUZsb2F0cyh0aGlzLlJTVmFsdWVzLnksIHRoaXMuUlNWYWx1ZXMueCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNhbWVyYS5jYW1lcmFSb3RhdGlvbi5hZGRJblBsYWNlKHRoaXMuX3ZlY3RvcjIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBHZXRzIHRoZSBjbGFzcyBuYW1lIG9mIHRoZSBjdXJyZW50IGlucHV0LlxyXG4gICAgICAgICAqIEByZXR1cm5zIHRoZSBjbGFzcyBuYW1lXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGdldENsYXNzTmFtZSgpOiBzdHJpbmcge1xyXG4gICAgICAgICAgICByZXR1cm4gXCJGcmVlQ2FtZXJhVG91Y2hKb3lzdGlja0lucHV0XCI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBHZXQgdGhlIGZyaWVuZGx5IG5hbWUgYXNzb2NpYXRlZCB3aXRoIHRoZSBpbnB1dCBjbGFzcy5cclxuICAgICAgICAgKiBAcmV0dXJucyB0aGUgaW5wdXQgZnJpZW5kbHkgbmFtZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBnZXRTaW1wbGVOYW1lKCk6IHN0cmluZyB7XHJcbiAgICAgICAgICAgIHJldHVybiBcImpveXN0aWNrXCI7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgICg8YW55PkJBQllMT04uQ2FtZXJhSW5wdXRUeXBlcylbXCJGcmVlQ2FtZXJhVG91Y2hKb3lzdGlja0lucHV0XCJdID0gUFJPSkVDVC5GcmVlQ2FtZXJhVG91Y2hKb3lzdGlja0lucHV0O1xyXG59IiwibW9kdWxlIFBST0pFQ1Qge1xyXG5cdGltcG9ydCBNZXNoID0gQkFCWUxPTi5NZXNoO1xyXG5cdGltcG9ydCBWZWN0b3IzID0gQkFCWUxPTi5WZWN0b3IzO1xyXG5cclxuXHRleHBvcnQgY2xhc3MgVW5pdmVyc2FsUGxheWVyQ29udHJvbGxlciBleHRlbmRzIEJBQllMT04uU2NyaXB0Q29tcG9uZW50IHtcclxuXHRcdHB1YmxpYyBzdGF0aWMgTUlOX1ZFUlRJQ0FMX1ZFTE9DSVRZOiBudW1iZXIgPSAwLjAxO1xyXG5cdFx0cHVibGljIHN0YXRpYyBNSU5fR1JPVU5EX0RJU1RBTkNFOiBudW1iZXIgPSAwLjE1O1xyXG5cdFx0cHVibGljIHN0YXRpYyBNSU5fU0xPUEVfTElNSVQ6IG51bWJlciA9IDA7XHJcblx0XHRwdWJsaWMgZW5hYmxlSW5wdXQ6IGJvb2xlYW4gPSBmYWxzZTtcclxuXHRcdHB1YmxpYyBhdHRhY2hDYW1lcmE6IGJvb2xlYW4gPSBmYWxzZTtcclxuXHRcdHB1YmxpYyByb3RhdGVDYW1lcmE6IGJvb2xlYW4gPSB0cnVlO1xyXG5cdFx0cHVibGljIHRvZ2dsZVZpZXc6IGJvb2xlYW4gPSB0cnVlO1xyXG5cdFx0cHVibGljIGZyZWVMb29raW5nOiBib29sZWFuID0gZmFsc2U7XHJcblx0XHRwdWJsaWMgcmVxdWlyZVNwcmludEJ1dHRvbjogYm9vbGVhbiA9IGZhbHNlO1xyXG5cdFx0cHVibGljIGdyYXZpdGF0aW9uYWxGb3JjZTogbnVtYmVyID0gMjkuNDtcclxuXHRcdHB1YmxpYyB0ZXJtaW5hbFZlbG9jaXR5OiBudW1iZXIgPSA1NS4wO1xyXG5cdFx0cHVibGljIG1pbkZhbGxWZWxvY2l0eTogbnVtYmVyID0gMS4wO1xyXG5cdFx0cHVibGljIGFpcmJvcm5UaW1lb3V0OiBudW1iZXIgPSAwLjE7XHJcblx0XHRwdWJsaWMgbm9ybWFsQW5nbGU6IG51bWJlciA9IDAuNjtcclxuXHRcdHB1YmxpYyByYWRpdXNTY2FsZTogbnVtYmVyID0gMC41O1xyXG5cdFx0cHVibGljIHJheUxlbmd0aDogbnVtYmVyID0gMTA7XHJcblx0XHRwdWJsaWMgcmF5T3JpZ2luOiBudW1iZXIgPSAxO1xyXG5cdFx0cHVibGljIG1heEFuZ2xlOiBudW1iZXIgPSA0NTtcclxuXHRcdHB1YmxpYyBzcGVlZEZhY3RvcjogbnVtYmVyID0gMS4wO1xyXG5cdFx0cHVibGljIG1vdmVTcGVlZDogbnVtYmVyID0gNi4wO1xyXG5cdFx0cHVibGljIGxvb2tTcGVlZDogbnVtYmVyID0gMi4wO1xyXG5cdFx0cHVibGljIGp1bXBTcGVlZDogbnVtYmVyID0gMTAuMDtcclxuXHRcdHB1YmxpYyBqdW1wRGVsYXk6IG51bWJlciA9IDAuNzU7XHJcblx0XHRwdWJsaWMganVtcEFsbG93ZWQ6IGJvb2xlYW4gPSB0cnVlO1xyXG5cdFx0cHVibGljIGV5ZXNIZWlnaHQ6IG51bWJlciA9IDEuMDtcclxuXHRcdHB1YmxpYyBwaXZvdEhlaWdodDogbnVtYmVyID0gMS4wO1xyXG5cdFx0cHVibGljIHRvcExvb2tMaW1pdDogbnVtYmVyID0gNjAuMDtcclxuXHRcdHB1YmxpYyBkb3duTG9va0xpbWl0OiBudW1iZXIgPSAzMC4wO1xyXG5cdFx0cHVibGljIGxvd1R1cm5TcGVlZDogbnVtYmVyID0gMTUuMDtcclxuXHRcdHB1YmxpYyBoaWdoVHVyblNwZWVkOiBudW1iZXIgPSAyNS4wO1xyXG5cdFx0cHVibGljIHNtb290aEFjY2VsZXJhdGlvbjogYm9vbGVhbiA9IGZhbHNlO1xyXG5cdFx0cHVibGljIGFjY2VsZXJhdGlvblNwZWVkOiBudW1iZXIgPSAwLjE7XHJcblx0XHRwdWJsaWMgZGVjZWxlcmF0aW9uU3BlZWQ6IG51bWJlciA9IDAuMTtcclxuXHRcdHB1YmxpYyBhdmF0YXJTa2luVGFnOiBzdHJpbmcgPSBcIlNraW5cIjtcclxuXHRcdHB1YmxpYyBkaXN0YW5jZUZhY3RvcjogbnVtYmVyID0gMC44NTtcclxuXHRcdHB1YmxpYyBjYW1lcmFTbW9vdGhpbmc6IG51bWJlciA9IDU7XHJcblx0XHRwdWJsaWMgY2FtZXJhQ29sbGlzaW9uczogYm9vbGVhbiA9IHRydWU7XHJcblx0XHRwdWJsaWMgaW5wdXRNYWduaXR1ZGU6IG51bWJlciA9IDA7XHJcblx0XHRwdWJsaWMgbGFuZGluZ0Vwc2lsb246IG51bWJlciA9IDAuMTtcclxuXHRcdHB1YmxpYyBtaW5pbXVtRGlzdGFuY2U6IG51bWJlciA9IDAuODU7XHJcblx0XHRwdWJsaWMgcGxheWVySW5wdXRYOiBudW1iZXIgPSAwO1xyXG5cdFx0cHVibGljIHBsYXllcklucHV0WjogbnVtYmVyID0gMDtcclxuXHRcdHB1YmxpYyBwbGF5ZXJNb3VzZVg6IG51bWJlciA9IDA7XHJcblx0XHRwdWJsaWMgcGxheWVyTW91c2VZOiBudW1iZXIgPSAwO1xyXG5cdFx0cHVibGljIGNhblNwZWNpYWxKdW1wOiAoKSA9PiBib29sZWFuID0gbnVsbDtcclxuXHRcdHB1YmxpYyBpZ25vcmVUcmlnZ2VyVGFnczogc3RyaW5nID0gbnVsbDtcclxuXHRcdHB1YmxpYyBidXR0b25KdW1wOiBudW1iZXIgPSBCQUJZTE9OLlhib3gzNjBCdXR0b24uQTtcclxuXHRcdHB1YmxpYyBrZXlib2FyZEp1bXA6IG51bWJlciA9IEJBQllMT04uVXNlcklucHV0S2V5LlNwYWNlQmFyO1xyXG5cdFx0cHVibGljIGJ1dHRvblNwcmludDogbnVtYmVyID0gQkFCWUxPTi5YYm94MzYwQnV0dG9uLkxlZnRTdGljaztcclxuXHRcdHB1YmxpYyBrZXlib2FyZFNwcmludDogbnVtYmVyID0gQkFCWUxPTi5Vc2VySW5wdXRLZXkuU2hpZnQ7XHJcblx0XHRwdWJsaWMga2V5Ym9hcmRTcGVsbE9uZTogbnVtYmVyID0gQkFCWUxPTi5Vc2VySW5wdXRLZXkuTnVtMDtcclxuXHRcdHB1YmxpYyBrZXlib2FyZFNwZWxsVHdvOiBudW1iZXIgPSBCQUJZTE9OLlVzZXJJbnB1dEtleS5OdW0xO1xyXG5cdFx0cHVibGljIGtleWJvYXJkU3BlbGxUaHJlZTogbnVtYmVyID0gQkFCWUxPTi5Vc2VySW5wdXRLZXkuTnVtMjtcclxuXHRcdHB1YmxpYyBrZXlib2FyZFNwZWxsRm91cjogbnVtYmVyID0gQkFCWUxPTi5Vc2VySW5wdXRLZXkuTnVtMztcclxuXHRcdHB1YmxpYyBrZXlib2FyZFNwZWxsRml2ZTogbnVtYmVyID0gQkFCWUxPTi5Vc2VySW5wdXRLZXkuTnVtNDtcclxuXHRcdHB1YmxpYyBidXR0b25DYW1lcmE6IG51bWJlciA9IEJBQllMT04uWGJveDM2MEJ1dHRvbi5ZO1xyXG5cdFx0cHVibGljIGtleWJvYXJkQ2FtZXJhOiBudW1iZXIgPSBCQUJZTE9OLlVzZXJJbnB1dEtleS5QO1xyXG5cdFx0cHVibGljIHNwcmludFRocmVzaG9sZFNwZWVkOiBudW1iZXIgPSAxLjA7XHJcblx0XHRwdWJsaWMgcGxheWVyTnVtYmVyOiBCQUJZTE9OLlBsYXllck51bWJlciA9IEJBQllMT04uUGxheWVyTnVtYmVyLk9uZTtcclxuXHRcdHB1YmxpYyBib29tUG9zaXRpb246IEJBQllMT04uVmVjdG9yMyA9IG5ldyBCQUJZTE9OLlZlY3RvcjMoMCwgMCwgMCk7XHJcblx0XHRwdWJsaWMgYWlyYm9yblZlbG9jaXR5OiBCQUJZTE9OLlZlY3RvcjMgPSBuZXcgQkFCWUxPTi5WZWN0b3IzKDAsIDAsIDApO1xyXG5cdFx0cHVibGljIG1vdmVtZW50VmVsb2NpdHk6IEJBQllMT04uVmVjdG9yMyA9IG5ldyBCQUJZTE9OLlZlY3RvcjMoMCwgMCwgMCk7XHJcblx0XHRwdWJsaWMgdGFyZ2V0Q2FtZXJhT2Zmc2V0OiBCQUJZTE9OLlZlY3RvcjMgPSBuZXcgQkFCWUxPTi5WZWN0b3IzKDAsIDAsIDApO1xyXG5cdFx0cHVibGljIG9uUHJlVXBkYXRlT2JzZXJ2YWJsZSA9XHJcblx0XHRcdG5ldyBCQUJZTE9OLk9ic2VydmFibGU8QkFCWUxPTi5UcmFuc2Zvcm1Ob2RlPigpO1xyXG5cdFx0cHVibGljIG9uQmVmb3JlTW92ZU9ic2VydmFibGUgPVxyXG5cdFx0XHRuZXcgQkFCWUxPTi5PYnNlcnZhYmxlPEJBQllMT04uVHJhbnNmb3JtTm9kZT4oKTtcclxuXHRcdHB1YmxpYyBvblBvc3RVcGRhdGVPYnNlcnZhYmxlID1cclxuXHRcdFx0bmV3IEJBQllMT04uT2JzZXJ2YWJsZTxCQUJZTE9OLlRyYW5zZm9ybU5vZGU+KCk7XHJcblx0XHRwdWJsaWMgb25QbGF5ZXJJbnB1dE9ic2VydmFibGUgPVxyXG5cdFx0XHRuZXcgQkFCWUxPTi5PYnNlcnZhYmxlPEJBQllMT04uVHJhbnNmb3JtTm9kZT4oKTtcclxuXHRcdHByb3RlY3RlZCBtX3ZlbG9jaXR5T2Zmc2V0OiBCQUJZTE9OLlZlY3RvcjMgPSBuZXcgQkFCWUxPTi5WZWN0b3IzKDAsIDAsIDApO1xyXG5cdFx0cHJvdGVjdGVkIG1fYWN0dWFsVmVsb2NpdHk6IEJBQllMT04uVmVjdG9yMyA9IG5ldyBCQUJZTE9OLlZlY3RvcjMoMCwgMCwgMCk7XHJcblx0XHRwcm90ZWN0ZWQgbV9saW5lYXJWZWxvY2l0eTogQkFCWUxPTi5WZWN0b3IzID0gbmV3IEJBQllMT04uVmVjdG9yMygwLCAwLCAwKTtcclxuXHRcdHByb3RlY3RlZCBtX2xhc3RQb3NpdGlvbjogQkFCWUxPTi5WZWN0b3IzID0gbmV3IEJBQllMT04uVmVjdG9yMygwLCAwLCAwKTtcclxuXHRcdHByb3RlY3RlZCBtX3Bvc2l0aW9uQ2VudGVyOiBCQUJZTE9OLlZlY3RvcjMgPSBuZXcgQkFCWUxPTi5WZWN0b3IzKDAsIDAsIDApO1xyXG5cdFx0cHJvdGVjdGVkIG1fc2NhbGVkVmVsb2NpdHk6IG51bWJlciA9IDA7XHJcblx0XHRwcm90ZWN0ZWQgcGxheWVyRHJhd1ZlbG9jaXR5OiBudW1iZXIgPSAwO1xyXG5cdFx0cHJvdGVjdGVkIGJveDogTWVzaDtcclxuXHRcdHByb3RlY3RlZCB0cjogQkFCWUxPTi5Cb25lO1xyXG5cdFx0cHJpdmF0ZSBhYnN0cmFjdE1lc2g6IEJBQllMT04uQWJzdHJhY3RNZXNoID0gbnVsbDtcclxuXHRcdHByaXZhdGUgY2FtZXJhRGlzdGFuY2U6IG51bWJlciA9IDA7XHJcblx0XHRwcml2YXRlIGZvcndhcmRDYW1lcmE6IGJvb2xlYW4gPSBmYWxzZTtcclxuXHRcdHByaXZhdGUgYXZhdGFyUmFkaXVzOiBudW1iZXIgPSAwLjU7XHJcblx0XHRwcml2YXRlIGRvbGx5RGlyZWN0aW9uOiBCQUJZTE9OLlZlY3RvcjMgPSBuZXcgQkFCWUxPTi5WZWN0b3IzKDAsIDAsIDApO1xyXG5cdFx0cHJpdmF0ZSByb3RhdGlvbkV1bGVyczogQkFCWUxPTi5WZWN0b3IzID0gbmV3IEJBQllMT04uVmVjdG9yMygwLCAwLCAwKTtcclxuXHRcdHByaXZhdGUgY2FtZXJhUGl2b3RPZmZzZXQ6IEJBQllMT04uVmVjdG9yMyA9IG5ldyBCQUJZTE9OLlZlY3RvcjMoMCwgMCwgMCk7XHJcblx0XHRwcml2YXRlIGNhbWVyYUZvcndhcmRWZWN0b3I6IEJBQllMT04uVmVjdG9yMyA9IG5ldyBCQUJZTE9OLlZlY3RvcjMoMCwgMCwgMCk7XHJcblx0XHRwcml2YXRlIGNhbWVyYVJpZ2h0VmVjdG9yOiBCQUJZTE9OLlZlY3RvcjMgPSBuZXcgQkFCWUxPTi5WZWN0b3IzKDAsIDAsIDApO1xyXG5cdFx0cHJpdmF0ZSBkZXNpcmVkRm9yd2FyZFZlY3RvcjogQkFCWUxPTi5WZWN0b3IzID0gbmV3IEJBQllMT04uVmVjdG9yMyhcclxuXHRcdFx0MCxcclxuXHRcdFx0MCxcclxuXHRcdFx0MFxyXG5cdFx0KTtcclxuXHRcdHByaXZhdGUgZGVzaXJlZFJpZ2h0VmVjdG9yOiBCQUJZTE9OLlZlY3RvcjMgPSBuZXcgQkFCWUxPTi5WZWN0b3IzKDAsIDAsIDApO1xyXG5cdFx0cHJpdmF0ZSBzY2FsZWRDYW1EaXJlY3Rpb246IEJBQllMT04uVmVjdG9yMyA9IG5ldyBCQUJZTE9OLlZlY3RvcjMoMCwgMCwgMCk7XHJcblx0XHRwcml2YXRlIHNjYWxlZE1heERpcmVjdGlvbjogQkFCWUxPTi5WZWN0b3IzID0gbmV3IEJBQllMT04uVmVjdG9yMygwLCAwLCAwKTtcclxuXHRcdHByaXZhdGUgcGFyZW50Tm9kZVBvc2l0aW9uOiBCQUJZTE9OLlZlY3RvcjMgPSBuZXcgQkFCWUxPTi5WZWN0b3IzKDAsIDAsIDApO1xyXG5cdFx0cHJpdmF0ZSBtYXhpbXVtQ2FtZXJhUG9zOiBCQUJZTE9OLlZlY3RvcjMgPSBuZXcgQkFCWUxPTi5WZWN0b3IzKDAsIDAsIDApO1xyXG5cdFx0cHJpdmF0ZSB0ZW1wV29ybGRQb3NpdGlvbjogQkFCWUxPTi5WZWN0b3IzID0gbmV3IEJBQllMT04uVmVjdG9yMygwLCAwLCAwKTtcclxuXHRcdHByaXZhdGUgY2FtZXJhUmF5Y2FzdFNoYXBlOiBhbnkgPSBudWxsO1xyXG5cdFx0cHJpdmF0ZSBkZWZhdWx0UmF5Y2FzdEdyb3VwOiBudW1iZXIgPVxyXG5cdFx0XHRCQUJZTE9OLkNvbGxpc2lvbkZpbHRlcnMuRGVmYXVsdEZpbHRlcjtcclxuXHRcdHByaXZhdGUgZGVmYXVsdFJheWNhc3RNYXNrOiBudW1iZXIgPSBCQUJZTE9OLkNvbGxpc2lvbkZpbHRlcnMuU3RhdGljRmlsdGVyO1xyXG5cdFx0cHJpdmF0ZSBjYW1lcmFSYXljYXN0TWFzazogbnVtYmVyID1cclxuXHRcdFx0QkFCWUxPTi5Db2xsaXNpb25GaWx0ZXJzLkFsbEZpbHRlciBeXHJcblx0XHRcdEJBQllMT04uQ29sbGlzaW9uRmlsdGVycy5DaGFyYWN0ZXJGaWx0ZXI7XHJcblx0XHRwcml2YXRlIGF2YXRhclNraW5zOiBCQUJZTE9OLkFic3RyYWN0TWVzaFtdID0gbnVsbDtcclxuXHRcdHByaXZhdGUgY2FtZXJhTm9kZTogQkFCWUxPTi5UcmFuc2Zvcm1Ob2RlID0gbnVsbDtcclxuXHRcdHByaXZhdGUgY2FtZXJhUGl2b3Q6IEJBQllMT04uTWVzaCA9IG51bGw7XHJcblx0XHRwcml2YXRlIG5hdmlnYXRpb25BZ2VudDogQkFCWUxPTi5OYXZpZ2F0aW9uQWdlbnQgPSBudWxsO1xyXG5cdFx0cHJpdmF0ZSBjaGFyYWN0ZXJDb250cm9sbGVyOiBCQUJZTE9OLkNoYXJhY3RlckNvbnRyb2xsZXIgPSBudWxsO1xyXG5cdFx0cHJpdmF0ZSB2ZXJ0aWNhbFZlbG9jaXR5OiBudW1iZXIgPSAwO1xyXG5cdFx0cHJpdmF0ZSBtb3ZlbWVudFNwZWVkOiBudW1iZXIgPSAwO1xyXG5cdFx0cHJpdmF0ZSBpc0p1bXBQcmVzc2VkOiBib29sZWFuID0gZmFsc2U7XHJcblx0XHRwcml2YXRlIGlzU3ByaW50UHJlc3NlZDogYm9vbGVhbiA9IGZhbHNlO1xyXG5cdFx0cHJpdmF0ZSBpc0NoYXJhY3RlclNsaWRpbmc6IGJvb2xlYW4gPSBmYWxzZTtcclxuXHRcdHByaXZhdGUgaXNDaGFyYWN0ZXJGYWxsaW5nOiBib29sZWFuID0gZmFsc2U7XHJcblx0XHRwcml2YXRlIGlzQ2hhcmFjdGVyR3JvdW5kZWQ6IGJvb2xlYW4gPSBmYWxzZTtcclxuXHRcdHByaXZhdGUgaXNDaGFyYWN0ZXJGYWxsVHJpZ2dlcmVkOiBib29sZWFuID0gZmFsc2U7XHJcblx0XHRwcml2YXRlIGlzQ2hhcmFjdGVySnVtcEZyYW1lOiBib29sZWFuID0gZmFsc2U7XHJcblx0XHRwcml2YXRlIGlzQ2hhcmFjdGVySnVtcGluZzogYm9vbGVhbiA9IGZhbHNlO1xyXG5cdFx0cHJpdmF0ZSBpc0NoYXJhY3Rlckp1bXBTcGVjaWFsOiBib29sZWFuID0gZmFsc2U7XHJcblx0XHRwcml2YXRlIGlzQ2hhcmFjdGVyTmF2aWdhdGluZzogYm9vbGVhbiA9IGZhbHNlO1xyXG5cdFx0cHJpdmF0ZSB1cGRhdGVTdGF0ZVBhcmFtczogYm9vbGVhbiA9IHRydWU7XHJcblx0XHRwcml2YXRlIGFuaW1hdGlvblN0YXRlUGFyYW1zOiBBbmltYXRpb25TdGF0ZVBhcmFtcyA9IG51bGw7XHJcblx0XHRwcml2YXRlIHNwaGVyZUNvbGxpc2lvblNoYXBlOiBhbnkgPSBudWxsO1xyXG5cdFx0cHJpdmF0ZSBzaG93RGVidWdDb2xsaWRlcnM6IGJvb2xlYW4gPSBmYWxzZTtcclxuXHRcdHByaXZhdGUgY29sbGlkZXJWaXNpYmlsaXR5OiBudW1iZXIgPSAwO1xyXG5cdFx0cHJpdmF0ZSBjb2xsaWRlclJlbmRlckdyb3VwOiBudW1iZXIgPSAwO1xyXG5cdFx0cHJpdmF0ZSBkZWx0YVRpbWU6IG51bWJlciA9IDA7XHJcblx0XHRwcml2YXRlIG1pbkp1bXBUaW1lcjogbnVtYmVyID0gMDtcclxuXHRcdHByaXZhdGUgZGVsYXlKdW1wVGltZXI6IG51bWJlciA9IDA7XHJcblx0XHRwcml2YXRlIHBsYXllckNvbnRyb2w6IG51bWJlciA9IDA7XHJcblx0XHRwcml2YXRlIG1vdmVXaXRoQ29sbGlzaW9uOiBib29sZWFuID0gdHJ1ZTtcclxuXHRcdHByaXZhdGUgYW5pbWF0aW9uU3RhdGU6IEJBQllMT04uQW5pbWF0aW9uU3RhdGUgPSBudWxsO1xyXG5cclxuXHRcdHByaXZhdGUgbGFzdEp1bXBWZWxvY2l0eTogQkFCWUxPTi5WZWN0b3IzID0gbmV3IEJBQllMT04uVmVjdG9yMygwLCAwLCAwKTtcclxuXHRcdHByaXZhdGUgaW5wdXRNb3ZlbWVudFZlY3RvcjogQkFCWUxPTi5WZWN0b3IzID0gbmV3IEJBQllMT04uVmVjdG9yMygwLCAwLCAwKTtcclxuXHRcdHByaXZhdGUgcGxheWVyTG9va1JvdGF0aW9uOiBCQUJZTE9OLlZlY3RvcjMgPSBuZXcgQkFCWUxPTi5WZWN0b3IzKDAsIDAsIDApO1xyXG5cdFx0cHJpdmF0ZSBwbGF5ZXJSb3RhdGlvblZlY3RvcjogQkFCWUxPTi5WZWN0b3IyID0gQkFCWUxPTi5WZWN0b3IyLlplcm8oKTtcclxuXHRcdHByaXZhdGUgcGxheWVyTW92ZW1lbnRWZWxvY2l0eTogQkFCWUxPTi5WZWN0b3IzID0gbmV3IEJBQllMT04uVmVjdG9yMyhcclxuXHRcdFx0MCxcclxuXHRcdFx0MCxcclxuXHRcdFx0MFxyXG5cdFx0KTtcclxuXHRcdHByaXZhdGUgcGxheWVyUm90YXRpb25RdWF0ZXJuaW9uOiBCQUJZTE9OLlF1YXRlcm5pb24gPVxyXG5cdFx0XHRCQUJZTE9OLlF1YXRlcm5pb24uWmVybygpO1xyXG5cdFx0cHJpdmF0ZSBwbGF5ZXJNb3ZlRGlyZWN0aW9uOiBQUk9KRUNULlBsYXllck1vdmVEaXJlY3Rpb24gPVxyXG5cdFx0XHRQUk9KRUNULlBsYXllck1vdmVEaXJlY3Rpb24uU3RhdGlvbmFyeTtcclxuXHRcdHByaXZhdGUgZ3JvdW5kSGl0OiBib29sZWFuID0gZmFsc2U7XHJcblx0XHRwcml2YXRlIGdyb3VuZE5vZGU6IEJBQllMT04uVHJhbnNmb3JtTm9kZSA9IG51bGw7XHJcblx0XHRwcml2YXRlIGdyb3VuZEFuZ2xlOiBudW1iZXIgPSAwO1xyXG5cdFx0cHJpdmF0ZSBncm91bmRQb2ludDogQkFCWUxPTi5WZWN0b3IzID0gbmV3IEJBQllMT04uVmVjdG9yMygwLCAwLCAwKTtcclxuXHRcdHByaXZhdGUgZ3JvdW5kTm9ybWFsOiBCQUJZTE9OLlZlY3RvcjMgPSBuZXcgQkFCWUxPTi5WZWN0b3IzKDAsIDAsIDApO1xyXG5cdFx0cHJpdmF0ZSBncm91bmREaXN0YW5jZTogbnVtYmVyID0gMDtcclxuXHRcdHByaXZhdGUgZ3JvdW5kQ29sbGlzaW9uOiBib29sZWFuID0gZmFsc2U7XHJcblx0XHRwcml2YXRlIGdyb3VuZFZlbG9jaXR5OiBudW1iZXIgPSAwO1xyXG5cdFx0cHJpdmF0ZSBncm91bmRTZW5zb3JMaW5lOiBCQUJZTE9OLkxpbmVzTWVzaFJlbmRlcmVyID0gbnVsbDtcclxuXHRcdHByaXZhdGUgb2Zmc2V0R3JvdW5kUmF5Y2FzdFBvc2l0aW9uOiBCQUJZTE9OLlZlY3RvcjMgPSBuZXcgQkFCWUxPTi5WZWN0b3IzKFxyXG5cdFx0XHQwLFxyXG5cdFx0XHQwLFxyXG5cdFx0XHQwXHJcblx0XHQpO1xyXG5cdFx0cHJpdmF0ZSBzdGFydEdyb3VuZFJheWNhc3RQb3NpdGlvbjogQkFCWUxPTi5WZWN0b3IzID0gbmV3IEJBQllMT04uVmVjdG9yMyhcclxuXHRcdFx0MCxcclxuXHRcdFx0MCxcclxuXHRcdFx0MFxyXG5cdFx0KTtcclxuXHRcdHByaXZhdGUgZW5kR3JvdW5kUmF5Y2FzdFBvc2l0aW9uOiBCQUJZTE9OLlZlY3RvcjMgPSBuZXcgQkFCWUxPTi5WZWN0b3IzKFxyXG5cdFx0XHQwLFxyXG5cdFx0XHQwLFxyXG5cdFx0XHQwXHJcblx0XHQpO1xyXG5cdFx0cHJpdmF0ZSBkb3duRGlyZWN0aW9uOiBCQUJZTE9OLlZlY3RvcjMgPSBuZXcgQkFCWUxPTi5WZWN0b3IzKDAsIC0xLCAwKTtcclxuXHRcdHByaXZhdGUgZm9yd2FyZERpcmVjdGlvbjogQkFCWUxPTi5WZWN0b3IzID0gbmV3IEJBQllMT04uVmVjdG9yMygwLCAwLCAxKTtcclxuXHRcdHByaXZhdGUgX2lrTGVmdENvbnRyb2xsZXI6IEJBQllMT04uQm9uZUlLQ29udHJvbGxlciA9IG51bGw7XHJcblx0XHRwcml2YXRlIF9pa0xlZnRGb290VGFyZ2V0OiBCQUJZTE9OLlRyYW5zZm9ybU5vZGUgPSBudWxsO1xyXG5cdFx0cHJpdmF0ZSBfaWtMZWZ0UG9sZVRhcmdldDogQkFCWUxPTi5UcmFuc2Zvcm1Ob2RlID0gbnVsbDtcclxuXHRcdHByaXZhdGUgX2lrUmlnaHRDb250cm9sbGVyOiBCQUJZTE9OLkJvbmVJS0NvbnRyb2xsZXIgPSBudWxsO1xyXG5cdFx0cHJpdmF0ZSBfaWtSaWdodEZvb3RUYXJnZXQ6IEJBQllMT04uVHJhbnNmb3JtTm9kZSA9IG51bGw7XHJcblx0XHRwcml2YXRlIF9pa1JpZ2h0UG9sZVRhcmdldDogQkFCWUxPTi5UcmFuc2Zvcm1Ob2RlID0gbnVsbDtcclxuXHRcdHByaXZhdGUgYWJzdHJhY3RTa2luTWVzaDogQkFCWUxPTi5BYnN0cmFjdE1lc2ggPSBudWxsO1xyXG5cdFx0cHJpdmF0ZSByb290Qm9uZVRyYW5zZm9ybTogQkFCWUxPTi5UcmFuc2Zvcm1Ob2RlID0gbnVsbDtcclxuXHRcdHByaXZhdGUgbGVmdEZvb3RUcmFuc2Zvcm06IEJBQllMT04uVHJhbnNmb3JtTm9kZSA9IG51bGw7XHJcblx0XHRwcml2YXRlIGxlZnRGb290UG9sZVBvczogQkFCWUxPTi5WZWN0b3IzID0gbmV3IEJBQllMT04uVmVjdG9yMygwLCAwLCAwKTtcclxuXHRcdHByaXZhdGUgbGVmdEZvb3RCZW5kQXhpczogQkFCWUxPTi5WZWN0b3IzID0gbmV3IEJBQllMT04uVmVjdG9yMygxLCAwLCAwKTtcclxuXHRcdHByaXZhdGUgbGVmdEZvb3RQb2xlQW5nbGU6IG51bWJlciA9IDA7XHJcblx0XHRwcml2YXRlIGxlZnRGb290TWF4QW5nbGU6IG51bWJlciA9IDE4MDtcclxuXHRcdHByaXZhdGUgcmlnaHRGb290VHJhbnNmb3JtOiBCQUJZTE9OLlRyYW5zZm9ybU5vZGUgPSBudWxsO1xyXG5cdFx0cHJpdmF0ZSByaWdodEZvb3RQb2xlUG9zOiBCQUJZTE9OLlZlY3RvcjMgPSBuZXcgQkFCWUxPTi5WZWN0b3IzKDAsIDAsIDApO1xyXG5cdFx0cHJpdmF0ZSByaWdodEZvb3RCZW5kQXhpczogQkFCWUxPTi5WZWN0b3IzID0gbmV3IEJBQllMT04uVmVjdG9yMygxLCAwLCAwKTtcclxuXHRcdHByaXZhdGUgcmlnaHRGb290UG9sZUFuZ2xlOiBudW1iZXIgPSAwO1xyXG5cdFx0cHJpdmF0ZSByaWdodEZvb3RNYXhBbmdsZTogbnVtYmVyID0gMTgwO1xyXG5cdFx0cHJpdmF0ZSBwaWNraW5nUmF5OiBCQUJZTE9OLlJheSA9IG51bGw7XHJcblx0XHRwcml2YXRlIHBpY2tpbmdIZWxwZXI6IEJBQllMT04uUmF5SGVscGVyID0gbnVsbDtcclxuXHRcdHByaXZhdGUgcGlja2luZ09yaWdpbjogQkFCWUxPTi5WZWN0b3IzID0gbnVsbDtcclxuXHRcdHByaXZhdGUgcGlja2luZ0RpcmVjdGlvbjogQkFCWUxPTi5WZWN0b3IzID0gbmV3IEJBQllMT04uVmVjdG9yMygwLCAtMSwgMCk7XHJcblx0XHRwcml2YXRlIGNhbWVyYVJheTogQkFCWUxPTi5SYXkgPSBudWxsO1xyXG5cdFx0cHJpdmF0ZSBjYW1lcmFIZWxwZXI6IEJBQllMT04uUmF5SGVscGVyID0gbnVsbDtcclxuXHRcdHByaXZhdGUgY2FtZXJhRm9yd2FyZDogQkFCWUxPTi5WZWN0b3IzID0gbmV3IEJBQllMT04uVmVjdG9yMygwLCAwLCAwKTtcclxuXHRcdHByaXZhdGUgY2FtZXJhRGlyZWN0aW9uOiBCQUJZTE9OLlZlY3RvcjMgPSBuZXcgQkFCWUxPTi5WZWN0b3IzKDAsIDAsIDApO1xyXG5cclxuXHRcdHByaXZhdGUgYW5pbWF0aW9uTWFuYWdlcjogQW5pbWF0aW9uTWFuYWdlcjtcclxuXHRcdHByaXZhdGUgc3BlbGxPbmVTdGF0ZTogYm9vbGVhbiA9IGZhbHNlO1xyXG5cclxuXHRcdGNvbnN0cnVjdG9yKFxyXG5cdFx0XHR0cmFuc2Zvcm06IEJBQllMT04uVHJhbnNmb3JtTm9kZSxcclxuXHRcdFx0c2NlbmU6IEJBQllMT04uU2NlbmUsXHJcblx0XHRcdHByb3BlcnRpZXM/OiBhbnlcclxuXHRcdCkge1xyXG5cdFx0XHRzdXBlcih0cmFuc2Zvcm0sIHNjZW5lLCBwcm9wZXJ0aWVzKTtcclxuXHRcdH1cclxuXHJcblx0XHRwdWJsaWMgaXNBbmltYXRpb25FbmFibGVkKCk6IGJvb2xlYW4ge1xyXG5cdFx0XHRyZXR1cm4gdGhpcy51cGRhdGVTdGF0ZVBhcmFtcztcclxuXHRcdH1cclxuXHJcblx0XHRwdWJsaWMgaXNTcHJpbnRCdXR0b25QcmVzc2VkKCk6IGJvb2xlYW4ge1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5pc1NwcmludFByZXNzZWQ7XHJcblx0XHR9XHJcblxyXG5cdFx0cHVibGljIGdldFNwZWNpYWxKdW1wZWQoKTogYm9vbGVhbiB7XHJcblx0XHRcdHJldHVybiB0aGlzLmlzQ2hhcmFjdGVySnVtcFNwZWNpYWw7XHJcblx0XHR9XHJcblxyXG5cdFx0cHVibGljIGdldFBsYXllckp1bXBlZCgpOiBib29sZWFuIHtcclxuXHRcdFx0cmV0dXJuIHRoaXMuaXNDaGFyYWN0ZXJKdW1wRnJhbWU7XHJcblx0XHR9XHJcblxyXG5cdFx0cHVibGljIGdldFBsYXllckp1bXBpbmcoKTogYm9vbGVhbiB7XHJcblx0XHRcdHJldHVybiB0aGlzLmlzQ2hhcmFjdGVySnVtcGluZztcclxuXHRcdH1cclxuXHJcblx0XHRwdWJsaWMgZ2V0UGxheWVyRmFsbGluZygpOiBib29sZWFuIHtcclxuXHRcdFx0cmV0dXJuIHRoaXMuaXNDaGFyYWN0ZXJGYWxsaW5nO1xyXG5cdFx0fVxyXG5cclxuXHRcdHB1YmxpYyBnZXRQbGF5ZXJTbGlkaW5nKCk6IGJvb2xlYW4ge1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5pc0NoYXJhY3RlclNsaWRpbmc7XHJcblx0XHR9XHJcblxyXG5cdFx0cHVibGljIGdldFBsYXllckdyb3VuZGVkKCk6IGJvb2xlYW4ge1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5pc0NoYXJhY3Rlckdyb3VuZGVkO1xyXG5cdFx0fVxyXG5cclxuXHRcdHB1YmxpYyBnZXRGYWxsVHJpZ2dlcmVkKCk6IGJvb2xlYW4ge1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5pc0NoYXJhY3RlckZhbGxUcmlnZ2VyZWQ7XHJcblx0XHR9XHJcblxyXG5cdFx0cHVibGljIGdldE1vdmVtZW50U3BlZWQoKTogbnVtYmVyIHtcclxuXHRcdFx0cmV0dXJuIHRoaXMubW92ZW1lbnRTcGVlZDtcclxuXHRcdH1cclxuXHJcblx0XHRwdWJsaWMgZ2V0Q2FtZXJhQm9vbU5vZGUoKTogQkFCWUxPTi5UcmFuc2Zvcm1Ob2RlIHtcclxuXHRcdFx0cmV0dXJuIHRoaXMuY2FtZXJhTm9kZTtcclxuXHRcdH1cclxuXHJcblx0XHRwdWJsaWMgZ2V0Q2FtZXJhVHJhbnNmb3JtKCk6IEJBQllMT04uVHJhbnNmb3JtTm9kZSB7XHJcblx0XHRcdHJldHVybiB0aGlzLmNhbWVyYVBpdm90O1xyXG5cdFx0fVxyXG5cclxuXHRcdHB1YmxpYyBnZXRBbmltYXRpb25TdGF0ZSgpOiBCQUJZTE9OLkFuaW1hdGlvblN0YXRlIHtcclxuXHRcdFx0cmV0dXJuIHRoaXMuYW5pbWF0aW9uU3RhdGU7XHJcblx0XHR9XHJcblxyXG5cdFx0cHVibGljIGdldFZlcnRpY2FsVmVsb2NpdHkoKTogbnVtYmVyIHtcclxuXHRcdFx0cmV0dXJuIHRoaXMuZ2V0Q2hlY2tlZFZlcnRpY2FsVmVsb2NpdHkoKTtcclxuXHRcdH1cclxuXHJcblx0XHRwdWJsaWMgZ2V0Q2hhcmFjdGVyQ29udHJvbGxlcigpOiBCQUJZTE9OLkNoYXJhY3RlckNvbnRyb2xsZXIge1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5jaGFyYWN0ZXJDb250cm9sbGVyO1xyXG5cdFx0fVxyXG5cclxuXHRcdHB1YmxpYyBnZXRQbGF5ZXJNb3ZlRGlyZWN0aW9uKCk6IFBST0pFQ1QuUGxheWVyTW92ZURpcmVjdGlvbiB7XHJcblx0XHRcdHJldHVybiB0aGlzLnBsYXllck1vdmVEaXJlY3Rpb247XHJcblx0XHR9XHJcblxyXG5cdFx0cHVibGljIGdldElucHV0TW92ZW1lbnRWZWN0b3IoKTogQkFCWUxPTi5WZWN0b3IzIHtcclxuXHRcdFx0cmV0dXJuIHRoaXMuaW5wdXRNb3ZlbWVudFZlY3RvcjtcclxuXHRcdH1cclxuXHJcblx0XHRwdWJsaWMgZ2V0SW5wdXRNYWduaXR1ZGVWYWx1ZSgpOiBudW1iZXIge1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5pbnB1dE1hZ25pdHVkZTtcclxuXHRcdH1cclxuXHJcblx0XHRwdWJsaWMgZ2V0Q2FtZXJhUGl2b3RQb3NpdGlvbigpOiBCQUJZTE9OLlZlY3RvcjMge1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5jYW1lcmFQaXZvdCAhPSBudWxsID8gdGhpcy5jYW1lcmFQaXZvdC5wb3NpdGlvbiA6IG51bGw7XHJcblx0XHR9XHJcblxyXG5cdFx0cHVibGljIGdldENhbWVyYVBpdm90Um90YXRpb24oKTogQkFCWUxPTi5RdWF0ZXJuaW9uIHtcclxuXHRcdFx0cmV0dXJuIHRoaXMuY2FtZXJhUGl2b3QgIT0gbnVsbFxyXG5cdFx0XHRcdD8gdGhpcy5jYW1lcmFQaXZvdC5yb3RhdGlvblF1YXRlcm5pb25cclxuXHRcdFx0XHQ6IG51bGw7XHJcblx0XHR9XHJcblxyXG5cdFx0cHVibGljIGdldEdyb3VuZEhpdCgpOiBib29sZWFuIHtcclxuXHRcdFx0cmV0dXJuIHRoaXMuZ3JvdW5kSGl0O1xyXG5cdFx0fVxyXG5cclxuXHRcdHB1YmxpYyBnZXRHcm91bmROb2RlKCk6IEJBQllMT04uVHJhbnNmb3JtTm9kZSB7XHJcblx0XHRcdHJldHVybiB0aGlzLmdyb3VuZE5vZGU7XHJcblx0XHR9XHJcblxyXG5cdFx0cHVibGljIGdldEdyb3VuZFBvaW50KCk6IEJBQllMT04uVmVjdG9yMyB7XHJcblx0XHRcdHJldHVybiB0aGlzLmdyb3VuZFBvaW50O1xyXG5cdFx0fVxyXG5cclxuXHRcdHB1YmxpYyBnZXRHcm91bmRBbmdsZSgpOiBudW1iZXIge1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5ncm91bmRBbmdsZTtcclxuXHRcdH1cclxuXHJcblx0XHRwdWJsaWMgZ2V0R3JvdW5kTm9ybWFsKCk6IEJBQllMT04uVmVjdG9yMyB7XHJcblx0XHRcdHJldHVybiB0aGlzLmdyb3VuZE5vcm1hbDtcclxuXHRcdH1cclxuXHJcblx0XHRwdWJsaWMgZ2V0R3JvdW5kRGlzdGFuY2UoKTogbnVtYmVyIHtcclxuXHRcdFx0cmV0dXJuIHRoaXMuZ3JvdW5kRGlzdGFuY2U7XHJcblx0XHR9XHJcblxyXG5cdFx0cHVibGljIGdldEdyb3VuZENvbGxpc2lvbigpOiBib29sZWFuIHtcclxuXHRcdFx0cmV0dXJuIHRoaXMuZ3JvdW5kQ29sbGlzaW9uO1xyXG5cdFx0fVxyXG5cclxuXHRcdHB1YmxpYyBnZXRTcGVsbE9uZVN0YXRlKCk6IGJvb2xlYW4ge1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5zcGVsbE9uZVN0YXRlO1xyXG5cdFx0fVxyXG5cclxuXHRcdHB1YmxpYyBzZXRHYXZpdHlGb3JjZShncmF2aXR5OiBudW1iZXIpIHtcclxuXHRcdFx0dGhpcy5ncmF2aXRhdGlvbmFsRm9yY2UgPSBncmF2aXR5O1xyXG5cdFx0XHRpZiAodGhpcy5jaGFyYWN0ZXJDb250cm9sbGVyICE9IG51bGwpIHtcclxuXHRcdFx0XHR0aGlzLmNoYXJhY3RlckNvbnRyb2xsZXIuc2V0R3Jhdml0eSh0aGlzLmdyYXZpdGF0aW9uYWxGb3JjZSk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRwdWJsaWMgc2V0VGVybWluYWxWZWxvY2l0eSh2ZWxvY2l0eTogbnVtYmVyKTogdm9pZCB7XHJcblx0XHRcdHRoaXMudGVybWluYWxWZWxvY2l0eSA9IHZlbG9jaXR5O1xyXG5cdFx0XHRpZiAodGhpcy5jaGFyYWN0ZXJDb250cm9sbGVyICE9IG51bGwpIHtcclxuXHRcdFx0XHR0aGlzLmNoYXJhY3RlckNvbnRyb2xsZXIuc2V0RmFsbGluZ1NwZWVkKHRoaXMudGVybWluYWxWZWxvY2l0eSk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRwdWJsaWMgc2V0V29ybGRQb3NpdGlvbih4OiBudW1iZXIsIHk6IG51bWJlciwgejogbnVtYmVyKTogdm9pZCB7XHJcblx0XHRcdGlmICh0aGlzLmNoYXJhY3RlckNvbnRyb2xsZXIgIT0gbnVsbCkge1xyXG5cdFx0XHRcdHRoaXMuY2hhcmFjdGVyQ29udHJvbGxlci5zZXQoeCwgeSwgeik7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0dGhpcy50ZW1wV29ybGRQb3NpdGlvbi5zZXQoeCwgeSwgeik7XHJcblx0XHRcdFx0dGhpcy50cmFuc2Zvcm0uc2V0QWJzb2x1dGVQb3NpdGlvbih0aGlzLnRlbXBXb3JsZFBvc2l0aW9uKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHB1YmxpYyBzZXRQbGF5ZXJDb250cm9sKG1vZGU6IFBST0pFQ1QuUGxheWVySW5wdXRDb250cm9sKTogdm9pZCB7XHJcblx0XHRcdHRoaXMucGxheWVyQ29udHJvbCA9IG1vZGU7XHJcblx0XHRcdGlmIChcclxuXHRcdFx0XHR0aGlzLnBsYXllckNvbnRyb2wgPT09IFBST0pFQ1QuUGxheWVySW5wdXRDb250cm9sLlRoaXJkUGVyc29uU3RyYWZpbmcgfHxcclxuXHRcdFx0XHR0aGlzLnBsYXllckNvbnRyb2wgPT09IFBST0pFQ1QuUGxheWVySW5wdXRDb250cm9sLlRoaXJkUGVyc29uVHVybmluZyB8fFxyXG5cdFx0XHRcdHRoaXMucGxheWVyQ29udHJvbCA9PT0gUFJPSkVDVC5QbGF5ZXJJbnB1dENvbnRyb2wuVGhpcmRQZXJzb25Gb3J3YXJkXHJcblx0XHRcdCkge1xyXG5cdFx0XHRcdHRoaXMuc2hvd0F2YXRhclNraW5zKHRydWUpO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHRoaXMuc2hvd0F2YXRhclNraW5zKGZhbHNlKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRpZiAoXHJcblx0XHRcdFx0dGhpcy5wbGF5ZXJDb250cm9sID09PSBQUk9KRUNULlBsYXllcklucHV0Q29udHJvbC5UaGlyZFBlcnNvbkZvcndhcmRcclxuXHRcdFx0KSB7XHJcblx0XHRcdFx0dGhpcy5mb3J3YXJkQ2FtZXJhID0gdHJ1ZTtcclxuXHRcdFx0fSBlbHNlIGlmIChcclxuXHRcdFx0XHR0aGlzLnBsYXllckNvbnRyb2wgPT09IFBST0pFQ1QuUGxheWVySW5wdXRDb250cm9sLlRoaXJkUGVyc29uU3RyYWZpbmcgfHxcclxuXHRcdFx0XHR0aGlzLnBsYXllckNvbnRyb2wgPT09IFBST0pFQ1QuUGxheWVySW5wdXRDb250cm9sLlRoaXJkUGVyc29uVHVybmluZ1xyXG5cdFx0XHQpIHtcclxuXHRcdFx0XHR0aGlzLmZvcndhcmRDYW1lcmEgPSBmYWxzZTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHB1YmxpYyB0b2dnbGVQbGF5ZXJDb250cm9sKCk6IHZvaWQge1xyXG5cdFx0XHRpZiAodGhpcy50b2dnbGVWaWV3ID09PSB0cnVlKSB7XHJcblx0XHRcdFx0aWYgKFxyXG5cdFx0XHRcdFx0dGhpcy5wbGF5ZXJDb250cm9sID09PSBQUk9KRUNULlBsYXllcklucHV0Q29udHJvbC5GaXJzdFBlcnNvblN0cmFmaW5nXHJcblx0XHRcdFx0KSB7XHJcblx0XHRcdFx0XHRpZiAodGhpcy5mb3J3YXJkQ2FtZXJhID09PSB0cnVlKSB7XHJcblx0XHRcdFx0XHRcdHRoaXMuc2V0UGxheWVyQ29udHJvbChcclxuXHRcdFx0XHRcdFx0XHRQUk9KRUNULlBsYXllcklucHV0Q29udHJvbC5UaGlyZFBlcnNvbkZvcndhcmRcclxuXHRcdFx0XHRcdFx0KTtcclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdHRoaXMuc2V0UGxheWVyQ29udHJvbChcclxuXHRcdFx0XHRcdFx0XHRQUk9KRUNULlBsYXllcklucHV0Q29udHJvbC5UaGlyZFBlcnNvblN0cmFmaW5nXHJcblx0XHRcdFx0XHRcdCk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdHRoaXMuc2V0UGxheWVyQ29udHJvbChQUk9KRUNULlBsYXllcklucHV0Q29udHJvbC5GaXJzdFBlcnNvblN0cmFmaW5nKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRwdWJsaWMgYXR0YWNoUGxheWVyQ2FtZXJhKHBsYXllcjogQkFCWUxPTi5QbGF5ZXJOdW1iZXIpOiB2b2lkIHtcclxuXHRcdFx0aWYgKHRoaXMuY2FtZXJhTm9kZSA9PSBudWxsKSB7XHJcblx0XHRcdFx0Y29uc3QgcGxheWVyQ2FtZXJhOiBudW1iZXIgPSBwbGF5ZXIgPD0gMCB8fCBwbGF5ZXIgPiA0ID8gMSA6IHBsYXllcjtcclxuXHRcdFx0XHR0aGlzLmNhbWVyYU5vZGUgPSBQUk9KRUNULlVuaXZlcnNhbENhbWVyYVN5c3RlbS5HZXRDYW1lcmFUcmFuc2Zvcm0oXHJcblx0XHRcdFx0XHR0aGlzLnNjZW5lLFxyXG5cdFx0XHRcdFx0cGxheWVyQ2FtZXJhXHJcblx0XHRcdFx0KTtcclxuXHRcdFx0XHRpZiAodGhpcy5jYW1lcmFOb2RlICE9IG51bGwpIHtcclxuXHRcdFx0XHRcdHRoaXMuY2FtZXJhTm9kZS5wYXJlbnQgPSB0aGlzLmNhbWVyYVBpdm90O1xyXG5cdFx0XHRcdFx0dGhpcy5jYW1lcmFOb2RlLnBvc2l0aW9uLmNvcHlGcm9tKHRoaXMuYm9vbVBvc2l0aW9uKTtcclxuXHRcdFx0XHRcdHRoaXMuY2FtZXJhTm9kZS5yb3RhdGlvblF1YXRlcm5pb24gPSBuZXcgQkFCWUxPTi5RdWF0ZXJuaW9uKFxyXG5cdFx0XHRcdFx0XHQwLFxyXG5cdFx0XHRcdFx0XHQwLFxyXG5cdFx0XHRcdFx0XHQwLFxyXG5cdFx0XHRcdFx0XHQxXHJcblx0XHRcdFx0XHQpO1xyXG5cclxuXHRcdFx0XHRcdHRoaXMuY2FtZXJhRGlzdGFuY2UgPSB0aGlzLmNhbWVyYU5vZGUucG9zaXRpb24ubGVuZ3RoKCk7XHJcblx0XHRcdFx0XHR0aGlzLmRvbGx5RGlyZWN0aW9uLmNvcHlGcm9tKHRoaXMuY2FtZXJhTm9kZS5wb3NpdGlvbik7XHJcblx0XHRcdFx0XHR0aGlzLmRvbGx5RGlyZWN0aW9uLm5vcm1hbGl6ZSgpO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0cHVibGljIGdldExlZnRGb290VGFyZ2V0KCk6IEJBQllMT04uVHJhbnNmb3JtTm9kZSB7XHJcblx0XHRcdHJldHVybiB0aGlzLl9pa0xlZnRGb290VGFyZ2V0O1xyXG5cdFx0fVxyXG5cclxuXHRcdHB1YmxpYyBnZXRSaWdodEZvb3RUYXJnZXQoKTogQkFCWUxPTi5UcmFuc2Zvcm1Ob2RlIHtcclxuXHRcdFx0cmV0dXJuIHRoaXMuX2lrUmlnaHRGb290VGFyZ2V0O1xyXG5cdFx0fVxyXG5cclxuXHRcdHB1YmxpYyBnZXRMZWZ0Rm9vdENvbnRyb2xsZXIoKTogQkFCWUxPTi5Cb25lSUtDb250cm9sbGVyIHtcclxuXHRcdFx0cmV0dXJuIHRoaXMuX2lrTGVmdENvbnRyb2xsZXI7XHJcblx0XHR9XHJcblxyXG5cdFx0cHVibGljIGdldFJpZ2h0Rm9vdENvbnRyb2xsZXIoKTogQkFCWUxPTi5Cb25lSUtDb250cm9sbGVyIHtcclxuXHRcdFx0cmV0dXJuIHRoaXMuX2lrUmlnaHRDb250cm9sbGVyO1xyXG5cdFx0fVxyXG5cclxuXHRcdHB1YmxpYyBhdHRhY2hCb25lQ29udHJvbGxlcnMoKTogdm9pZCB7XHJcblx0XHRcdGNvbnN0IGRpc3BsYXlIYW5kbGVzOiBib29sZWFuID0gdGhpcy5nZXRQcm9wZXJ0eShcImRpc3BsYXlIYW5kbGVzXCIpO1xyXG5cdFx0XHRjb25zdCBhYnN0cmFjdFNraW5NZXNoRGF0YTogQkFCWUxPTi5JVW5pdHlUcmFuc2Zvcm0gPVxyXG5cdFx0XHRcdHRoaXMuZ2V0UHJvcGVydHkoXCJhYnN0cmFjdFNraW5NZXNoXCIpO1xyXG5cdFx0XHRpZiAoYWJzdHJhY3RTa2luTWVzaERhdGEgIT0gbnVsbClcclxuXHRcdFx0XHR0aGlzLmFic3RyYWN0U2tpbk1lc2ggPSB0aGlzLmdldENoaWxkTm9kZShcclxuXHRcdFx0XHRcdGFic3RyYWN0U2tpbk1lc2hEYXRhLm5hbWUsXHJcblx0XHRcdFx0XHRCQUJZTE9OLlNlYXJjaFR5cGUuRXhhY3RNYXRjaCxcclxuXHRcdFx0XHRcdGZhbHNlXHJcblx0XHRcdFx0KSBhcyBCQUJZTE9OLkFic3RyYWN0TWVzaDtcclxuXHRcdFx0Y29uc3Qgcm9vdEJvbmVUcmFuc2Zvcm1EYXRhOiBCQUJZTE9OLklVbml0eVRyYW5zZm9ybSA9XHJcblx0XHRcdFx0dGhpcy5nZXRQcm9wZXJ0eShcInJvb3RCb25lVHJhbnNmb3JtXCIpO1xyXG5cdFx0XHRpZiAocm9vdEJvbmVUcmFuc2Zvcm1EYXRhICE9IG51bGwpXHJcblx0XHRcdFx0dGhpcy5yb290Qm9uZVRyYW5zZm9ybSA9IHRoaXMuZ2V0Q2hpbGROb2RlKFxyXG5cdFx0XHRcdFx0cm9vdEJvbmVUcmFuc2Zvcm1EYXRhLm5hbWUsXHJcblx0XHRcdFx0XHRCQUJZTE9OLlNlYXJjaFR5cGUuRXhhY3RNYXRjaCxcclxuXHRcdFx0XHRcdGZhbHNlXHJcblx0XHRcdFx0KTtcclxuXHJcblx0XHRcdGNvbnN0IGxlZnRGb290VHJhbnNmb3JtRGF0YTogQkFCWUxPTi5JVW5pdHlUcmFuc2Zvcm0gPVxyXG5cdFx0XHRcdHRoaXMuZ2V0UHJvcGVydHkoXCJsZWZ0Rm9vdFRyYW5zZm9ybVwiKTtcclxuXHRcdFx0aWYgKGxlZnRGb290VHJhbnNmb3JtRGF0YSAhPSBudWxsKVxyXG5cdFx0XHRcdHRoaXMubGVmdEZvb3RUcmFuc2Zvcm0gPSB0aGlzLmdldENoaWxkTm9kZShcclxuXHRcdFx0XHRcdGxlZnRGb290VHJhbnNmb3JtRGF0YS5uYW1lLFxyXG5cdFx0XHRcdFx0QkFCWUxPTi5TZWFyY2hUeXBlLkV4YWN0TWF0Y2gsXHJcblx0XHRcdFx0XHRmYWxzZVxyXG5cdFx0XHRcdCk7XHJcblxyXG5cdFx0XHRjb25zdCBsZWZ0UG9sZUhhbmRsZURhdGE6IEJBQllMT04uSVVuaXR5VmVjdG9yMyA9XHJcblx0XHRcdFx0dGhpcy5nZXRQcm9wZXJ0eShcImxlZnRGb290UG9sZVBvc1wiKTtcclxuXHRcdFx0aWYgKGxlZnRQb2xlSGFuZGxlRGF0YSAhPSBudWxsKVxyXG5cdFx0XHRcdHRoaXMubGVmdEZvb3RQb2xlUG9zLmNvcHlGcm9tKFxyXG5cdFx0XHRcdFx0QkFCWUxPTi5VdGlsaXRpZXMuUGFyc2VWZWN0b3IzKGxlZnRQb2xlSGFuZGxlRGF0YSlcclxuXHRcdFx0XHQpO1xyXG5cdFx0XHRjb25zdCBsZWZ0QmVuZEF4aXNEYXRhOiBCQUJZTE9OLklVbml0eVZlY3RvcjMgPVxyXG5cdFx0XHRcdHRoaXMuZ2V0UHJvcGVydHkoXCJsZWZ0Rm9vdEJlbmRBeGlzXCIpO1xyXG5cdFx0XHRpZiAobGVmdEJlbmRBeGlzRGF0YSAhPSBudWxsKVxyXG5cdFx0XHRcdHRoaXMubGVmdEZvb3RCZW5kQXhpcy5jb3B5RnJvbShcclxuXHRcdFx0XHRcdEJBQllMT04uVXRpbGl0aWVzLlBhcnNlVmVjdG9yMyhsZWZ0QmVuZEF4aXNEYXRhKVxyXG5cdFx0XHRcdCk7XHJcblx0XHRcdHRoaXMubGVmdEZvb3RQb2xlQW5nbGUgPSB0aGlzLmdldFByb3BlcnR5KFxyXG5cdFx0XHRcdFwibGVmdEZvb3RQb2xlQW5nbGVcIixcclxuXHRcdFx0XHR0aGlzLmxlZnRGb290UG9sZUFuZ2xlXHJcblx0XHRcdCk7XHJcblx0XHRcdHRoaXMubGVmdEZvb3RNYXhBbmdsZSA9IHRoaXMuZ2V0UHJvcGVydHkoXHJcblx0XHRcdFx0XCJsZWZ0Rm9vdE1heEFuZ2xlXCIsXHJcblx0XHRcdFx0dGhpcy5sZWZ0Rm9vdE1heEFuZ2xlXHJcblx0XHRcdCk7XHJcblxyXG5cdFx0XHRjb25zdCByaWdodEZvb3RUcmFuc2Zvcm1EYXRhOiBCQUJZTE9OLklVbml0eVRyYW5zZm9ybSA9XHJcblx0XHRcdFx0dGhpcy5nZXRQcm9wZXJ0eShcInJpZ2h0Rm9vdFRyYW5zZm9ybVwiKTtcclxuXHRcdFx0aWYgKHJpZ2h0Rm9vdFRyYW5zZm9ybURhdGEgIT0gbnVsbClcclxuXHRcdFx0XHR0aGlzLnJpZ2h0Rm9vdFRyYW5zZm9ybSA9IHRoaXMuZ2V0Q2hpbGROb2RlKFxyXG5cdFx0XHRcdFx0cmlnaHRGb290VHJhbnNmb3JtRGF0YS5uYW1lLFxyXG5cdFx0XHRcdFx0QkFCWUxPTi5TZWFyY2hUeXBlLkV4YWN0TWF0Y2gsXHJcblx0XHRcdFx0XHRmYWxzZVxyXG5cdFx0XHRcdCk7XHJcblxyXG5cdFx0XHRjb25zdCByaWdodFBvbGVIYW5kbGVEYXRhOiBCQUJZTE9OLklVbml0eVZlY3RvcjMgPVxyXG5cdFx0XHRcdHRoaXMuZ2V0UHJvcGVydHkoXCJyaWdodEZvb3RQb2xlUG9zXCIpO1xyXG5cdFx0XHRpZiAocmlnaHRQb2xlSGFuZGxlRGF0YSAhPSBudWxsKVxyXG5cdFx0XHRcdHRoaXMucmlnaHRGb290UG9sZVBvcy5jb3B5RnJvbShcclxuXHRcdFx0XHRcdEJBQllMT04uVXRpbGl0aWVzLlBhcnNlVmVjdG9yMyhyaWdodFBvbGVIYW5kbGVEYXRhKVxyXG5cdFx0XHRcdCk7XHJcblx0XHRcdGNvbnN0IHJpZ2h0QmVuZEF4aXNEYXRhOiBCQUJZTE9OLklVbml0eVZlY3RvcjMgPVxyXG5cdFx0XHRcdHRoaXMuZ2V0UHJvcGVydHkoXCJyaWdodEZvb3RCZW5kQXhpc1wiKTtcclxuXHRcdFx0aWYgKHJpZ2h0QmVuZEF4aXNEYXRhICE9IG51bGwpXHJcblx0XHRcdFx0dGhpcy5yaWdodEZvb3RCZW5kQXhpcy5jb3B5RnJvbShcclxuXHRcdFx0XHRcdEJBQllMT04uVXRpbGl0aWVzLlBhcnNlVmVjdG9yMyhyaWdodEJlbmRBeGlzRGF0YSlcclxuXHRcdFx0XHQpO1xyXG5cdFx0XHR0aGlzLnJpZ2h0Rm9vdFBvbGVBbmdsZSA9IHRoaXMuZ2V0UHJvcGVydHkoXHJcblx0XHRcdFx0XCJyaWdodEZvb3RQb2xlQW5nbGVcIixcclxuXHRcdFx0XHR0aGlzLnJpZ2h0Rm9vdFBvbGVBbmdsZVxyXG5cdFx0XHQpO1xyXG5cdFx0XHR0aGlzLnJpZ2h0Rm9vdE1heEFuZ2xlID0gdGhpcy5nZXRQcm9wZXJ0eShcclxuXHRcdFx0XHRcInJpZ2h0Rm9vdE1heEFuZ2xlXCIsXHJcblx0XHRcdFx0dGhpcy5yaWdodEZvb3RNYXhBbmdsZVxyXG5cdFx0XHQpO1xyXG5cclxuXHRcdFx0aWYgKHRoaXMuYWJzdHJhY3RTa2luTWVzaCAhPSBudWxsKSB7XHJcblx0XHRcdFx0bGV0IG1hdGVyaWFsTmFtZTogc3RyaW5nID0gXCJNX1RBUkdFVF9NRVNIXCI7XHJcblx0XHRcdFx0bGV0IHRhcmdldE1hdGVyaWFsOiBCQUJZTE9OLk1hdGVyaWFsID1cclxuXHRcdFx0XHRcdHRoaXMuc2NlbmUuZ2V0TWF0ZXJpYWxCeU5hbWUobWF0ZXJpYWxOYW1lKTtcclxuXHRcdFx0XHRpZiAodGFyZ2V0TWF0ZXJpYWwgPT0gbnVsbCkge1xyXG5cdFx0XHRcdFx0dGFyZ2V0TWF0ZXJpYWwgPSBuZXcgQkFCWUxPTi5TdGFuZGFyZE1hdGVyaWFsKFxyXG5cdFx0XHRcdFx0XHRcIk1fVEFSR0VUX01FU0hcIixcclxuXHRcdFx0XHRcdFx0dGhpcy5zY2VuZVxyXG5cdFx0XHRcdFx0KTtcclxuXHRcdFx0XHRcdCg8QkFCWUxPTi5TdGFuZGFyZE1hdGVyaWFsPnRhcmdldE1hdGVyaWFsKS5kaWZmdXNlQ29sb3IgPVxyXG5cdFx0XHRcdFx0XHRuZXcgQkFCWUxPTi5Db2xvcjMoMS4wLCAwLjUsIDAuMjUpO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0aWYgKFxyXG5cdFx0XHRcdFx0dGhpcy5sZWZ0Rm9vdFRyYW5zZm9ybSAhPSBudWxsICYmXHJcblx0XHRcdFx0XHQoPGFueT50aGlzLmxlZnRGb290VHJhbnNmb3JtKS5fbGlua2VkQm9uZSAhPSBudWxsXHJcblx0XHRcdFx0KSB7XHJcblx0XHRcdFx0XHR0aGlzLl9pa0xlZnRGb290VGFyZ2V0ID0gQkFCWUxPTi5NZXNoQnVpbGRlci5DcmVhdGVCb3goXHJcblx0XHRcdFx0XHRcdHRoaXMudHJhbnNmb3JtLm5hbWUgKyBcIi5MZWZ0Rm9vdFRhcmdldFwiLFxyXG5cdFx0XHRcdFx0XHR7XHJcblx0XHRcdFx0XHRcdFx0d2lkdGg6IDAuMSxcclxuXHRcdFx0XHRcdFx0XHRoZWlnaHQ6IDAuMSxcclxuXHRcdFx0XHRcdFx0XHRkZXB0aDogMC4xLFxyXG5cdFx0XHRcdFx0XHR9LFxyXG5cdFx0XHRcdFx0XHR0aGlzLnNjZW5lXHJcblx0XHRcdFx0XHQpO1xyXG5cdFx0XHRcdFx0dGhpcy5faWtMZWZ0Rm9vdFRhcmdldC5wYXJlbnQgPSB0aGlzLmFic3RyYWN0U2tpbk1lc2g7XHJcblxyXG5cdFx0XHRcdFx0aWYgKHRoaXMuX2lrTGVmdEZvb3RUYXJnZXQgaW5zdGFuY2VvZiBCQUJZTE9OLkFic3RyYWN0TWVzaCkge1xyXG5cdFx0XHRcdFx0XHR0aGlzLl9pa0xlZnRGb290VGFyZ2V0Lm1hdGVyaWFsID0gdGFyZ2V0TWF0ZXJpYWw7XHJcblx0XHRcdFx0XHRcdHRoaXMuX2lrTGVmdEZvb3RUYXJnZXQuaXNWaXNpYmxlID0gZGlzcGxheUhhbmRsZXM7XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0dGhpcy5faWtMZWZ0UG9sZVRhcmdldCA9IEJBQllMT04uTWVzaEJ1aWxkZXIuQ3JlYXRlU3BoZXJlKFxyXG5cdFx0XHRcdFx0XHR0aGlzLnRyYW5zZm9ybS5uYW1lICsgXCIuTGVmdEZvb3RQb2xlXCIsXHJcblx0XHRcdFx0XHRcdHsgZGlhbWV0ZXI6IDAuMTUgfSxcclxuXHRcdFx0XHRcdFx0dGhpcy5zY2VuZVxyXG5cdFx0XHRcdFx0KTtcclxuXHRcdFx0XHRcdHRoaXMuX2lrTGVmdFBvbGVUYXJnZXQucGFyZW50ID0gdGhpcy5hYnN0cmFjdFNraW5NZXNoO1xyXG5cdFx0XHRcdFx0dGhpcy5faWtMZWZ0UG9sZVRhcmdldC5wb3NpdGlvbi5jb3B5RnJvbSh0aGlzLmxlZnRGb290UG9sZVBvcyk7XHJcblx0XHRcdFx0XHRpZiAodGhpcy5faWtMZWZ0UG9sZVRhcmdldCBpbnN0YW5jZW9mIEJBQllMT04uQWJzdHJhY3RNZXNoKSB7XHJcblx0XHRcdFx0XHRcdHRoaXMuX2lrTGVmdFBvbGVUYXJnZXQuaXNWaXNpYmxlID0gZGlzcGxheUhhbmRsZXM7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRpZiAoXHJcblx0XHRcdFx0XHR0aGlzLnJpZ2h0Rm9vdFRyYW5zZm9ybSAhPSBudWxsICYmXHJcblx0XHRcdFx0XHQoPGFueT50aGlzLnJpZ2h0Rm9vdFRyYW5zZm9ybSkuX2xpbmtlZEJvbmUgIT0gbnVsbFxyXG5cdFx0XHRcdCkge1xyXG5cdFx0XHRcdFx0dGhpcy5faWtSaWdodEZvb3RUYXJnZXQgPSBCQUJZTE9OLk1lc2hCdWlsZGVyLkNyZWF0ZUJveChcclxuXHRcdFx0XHRcdFx0dGhpcy50cmFuc2Zvcm0ubmFtZSArIFwiLlJpZ2h0Rm9vdFRhcmdldFwiLFxyXG5cdFx0XHRcdFx0XHR7XHJcblx0XHRcdFx0XHRcdFx0d2lkdGg6IDAuMSxcclxuXHRcdFx0XHRcdFx0XHRoZWlnaHQ6IDAuMSxcclxuXHRcdFx0XHRcdFx0XHRkZXB0aDogMC4xLFxyXG5cdFx0XHRcdFx0XHR9LFxyXG5cdFx0XHRcdFx0XHR0aGlzLnNjZW5lXHJcblx0XHRcdFx0XHQpO1xyXG5cdFx0XHRcdFx0dGhpcy5faWtSaWdodEZvb3RUYXJnZXQucGFyZW50ID0gdGhpcy5hYnN0cmFjdFNraW5NZXNoO1xyXG5cclxuXHRcdFx0XHRcdGlmICh0aGlzLl9pa1JpZ2h0Rm9vdFRhcmdldCBpbnN0YW5jZW9mIEJBQllMT04uQWJzdHJhY3RNZXNoKSB7XHJcblx0XHRcdFx0XHRcdHRoaXMuX2lrUmlnaHRGb290VGFyZ2V0Lm1hdGVyaWFsID0gdGFyZ2V0TWF0ZXJpYWw7XHJcblx0XHRcdFx0XHRcdHRoaXMuX2lrUmlnaHRGb290VGFyZ2V0LmlzVmlzaWJsZSA9IGRpc3BsYXlIYW5kbGVzO1xyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdHRoaXMuX2lrUmlnaHRQb2xlVGFyZ2V0ID0gQkFCWUxPTi5NZXNoQnVpbGRlci5DcmVhdGVTcGhlcmUoXHJcblx0XHRcdFx0XHRcdHRoaXMudHJhbnNmb3JtLm5hbWUgKyBcIi5SaWdodEZvb3RQb2xlXCIsXHJcblx0XHRcdFx0XHRcdHsgZGlhbWV0ZXI6IDAuMTUgfSxcclxuXHRcdFx0XHRcdFx0dGhpcy5zY2VuZVxyXG5cdFx0XHRcdFx0KTtcclxuXHRcdFx0XHRcdHRoaXMuX2lrUmlnaHRQb2xlVGFyZ2V0LnBhcmVudCA9IHRoaXMuYWJzdHJhY3RTa2luTWVzaDtcclxuXHRcdFx0XHRcdHRoaXMuX2lrUmlnaHRQb2xlVGFyZ2V0LnBvc2l0aW9uLmNvcHlGcm9tKHRoaXMucmlnaHRGb290UG9sZVBvcyk7XHJcblx0XHRcdFx0XHRpZiAodGhpcy5faWtSaWdodFBvbGVUYXJnZXQgaW5zdGFuY2VvZiBCQUJZTE9OLkFic3RyYWN0TWVzaCkge1xyXG5cdFx0XHRcdFx0XHR0aGlzLl9pa1JpZ2h0UG9sZVRhcmdldC5pc1Zpc2libGUgPSBkaXNwbGF5SGFuZGxlcztcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRwdWJsaWMgZW5hYmxlQ2hhcmFjdGVyQ29udHJvbGxlcihzdGF0ZTogYm9vbGVhbik6IHZvaWQge1xyXG5cdFx0XHRpZiAoc3RhdGUgPT09IHRydWUpIHtcclxuXHRcdFx0XHR0aGlzLm1vdmVXaXRoQ29sbGlzaW9uID0gdHJ1ZTtcclxuXHRcdFx0XHRpZiAodGhpcy5jaGFyYWN0ZXJDb250cm9sbGVyICE9IG51bGwpIHtcclxuXHRcdFx0XHRcdHRoaXMuY2hhcmFjdGVyQ29udHJvbGxlci5zZXRHaG9zdFdvcmxkUG9zaXRpb24oXHJcblx0XHRcdFx0XHRcdHRoaXMudHJhbnNmb3JtLnBvc2l0aW9uXHJcblx0XHRcdFx0XHQpO1xyXG5cdFx0XHRcdFx0dGhpcy5jaGFyYWN0ZXJDb250cm9sbGVyLnVwZGF0ZVBvc2l0aW9uID0gdHJ1ZTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0dGhpcy5tb3ZlV2l0aENvbGxpc2lvbiA9IGZhbHNlO1xyXG5cdFx0XHRcdGlmICh0aGlzLmNoYXJhY3RlckNvbnRyb2xsZXIgIT0gbnVsbCkge1xyXG5cdFx0XHRcdFx0dGhpcy5jaGFyYWN0ZXJDb250cm9sbGVyLnVwZGF0ZVBvc2l0aW9uID0gZmFsc2U7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0cHVibGljIHJlc2V0UGxheWVyUm90YXRpb24oKTogdm9pZCB7XHJcblx0XHRcdHRoaXMudHJhbnNmb3JtLnJvdGF0aW9uUXVhdGVybmlvbi50b0V1bGVyQW5nbGVzVG9SZWYodGhpcy5yb3RhdGlvbkV1bGVycyk7XHJcblx0XHRcdHRoaXMucGxheWVyUm90YXRpb25WZWN0b3IueCA9IHRoaXMucm90YXRpb25FdWxlcnMueDtcclxuXHRcdFx0dGhpcy5wbGF5ZXJSb3RhdGlvblZlY3Rvci55ID0gdGhpcy5yb3RhdGlvbkV1bGVycy55O1xyXG5cdFx0fVxyXG5cclxuXHRcdHByb3RlY3RlZCBhd2FrZSgpOiB2b2lkIHtcclxuXHRcdFx0dGhpcy5hd2FrZVBsYXllckNvbnRyb2xsZXIoKTtcclxuXHJcblx0XHRcdC8vIEFuaW1hdGlvbiBNYWdpYyBQbGF5ZXJcclxuXHRcdFx0dGhpcy5hbmltYXRpb25NYW5hZ2VyID0gbmV3IEFuaW1hdGlvbk1hbmFnZXIoXHJcblx0XHRcdFx0dGhpcy5nZXRQcm9wZXJ0eShcInNwZWxsQW5pbWF0aW9uU2V0TmFtZVwiKSwgLy8gTW9yZSBzZXQgLi4uLlxyXG5cdFx0XHRcdDxhbnk+dGhpcy5yb290Qm9uZVRyYW5zZm9ybSxcclxuXHRcdFx0XHR0aGlzLnNjZW5lXHJcblx0XHRcdCk7XHJcblx0XHR9XHJcblxyXG5cdFx0cHJvdGVjdGVkIHN0YXJ0KCk6IHZvaWQge1xyXG5cdFx0XHR0aGlzLnN0YXJ0UGxheWVyQ29udHJvbGxlcigpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHByb3RlY3RlZCB1cGRhdGUoKTogdm9pZCB7XHJcblx0XHRcdC8vIEFuaW1hdGlvbiBNYWdpYyBQbGF5ZXJcclxuXHRcdFx0dGhpcy5hbmltYXRpb25NYW5hZ2VyLnVwZGF0ZUFuaW1hdGlvblN0YXRlKHRoaXMuYW5pbWF0aW9uU3RhdGUsIHRoaXMpO1xyXG5cclxuXHRcdFx0dGhpcy51cGRhdGVQbGF5ZXJDb250cm9sbGVyKCk7XHJcblx0XHR9XHJcblxyXG5cdFx0cHJvdGVjdGVkIGRlc3Ryb3koKTogdm9pZCB7XHJcblx0XHRcdHRoaXMuZGVzdHJveVBsYXllckNvbnRyb2xsZXIoKTtcclxuXHRcdH1cclxuXHJcblx0XHRwcml2YXRlIHNob3dBdmF0YXJTa2lucyhzaG93OiBib29sZWFuKTogdm9pZCB7XHJcblx0XHRcdGlmICh0aGlzLmF2YXRhclNraW5zICE9IG51bGwpIHtcclxuXHRcdFx0XHR0aGlzLmF2YXRhclNraW5zLmZvckVhY2goKHNraW46IEJBQllMT04uQWJzdHJhY3RNZXNoKSA9PiB7XHJcblx0XHRcdFx0XHRza2luLmlzVmlzaWJsZSA9IHNob3c7XHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRwcml2YXRlIGF0dGFjaEFuaW1hdGlvbkNvbnRyb2xsZXIoKTogdm9pZCB7XHJcblx0XHRcdGlmICh0aGlzLmFuaW1hdGlvblN0YXRlID09IG51bGwpIHtcclxuXHRcdFx0XHR0aGlzLmFuaW1hdGlvblN0YXRlID0gdGhpcy5nZXRDb21wb25lbnQoXCJCQUJZTE9OLkFuaW1hdGlvblN0YXRlXCIpO1xyXG5cdFx0XHRcdGlmICh0aGlzLmFuaW1hdGlvblN0YXRlID09IG51bGwpIHtcclxuXHRcdFx0XHRcdGNvbnN0IGFuaW1hdGlvbk5vZGU6IEJBQllMT04uVHJhbnNmb3JtTm9kZSA9IHRoaXMuZ2V0Q2hpbGRXaXRoU2NyaXB0KFxyXG5cdFx0XHRcdFx0XHRcIkJBQllMT04uQW5pbWF0aW9uU3RhdGVcIlxyXG5cdFx0XHRcdFx0KTtcclxuXHRcdFx0XHRcdGlmIChhbmltYXRpb25Ob2RlICE9IG51bGwpIHtcclxuXHRcdFx0XHRcdFx0dGhpcy5hbmltYXRpb25TdGF0ZSA9IEJBQllMT04uU2NlbmVNYW5hZ2VyLkZpbmRTY3JpcHRDb21wb25lbnQoXHJcblx0XHRcdFx0XHRcdFx0YW5pbWF0aW9uTm9kZSxcclxuXHRcdFx0XHRcdFx0XHRcIkJBQllMT04uQW5pbWF0aW9uU3RhdGVcIlxyXG5cdFx0XHRcdFx0XHQpO1xyXG5cdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0aWYgKHRoaXMuYW5pbWF0aW9uU3RhdGUgIT0gbnVsbCkge1xyXG5cdFx0XHRcdHRoaXMuYW5pbWF0aW9uU3RhdGUub25BbmltYXRpb25VcGRhdGVPYnNlcnZhYmxlLmFkZCgoKSA9PiB7XHJcblx0XHRcdFx0XHRpZiAodGhpcy5hbmltYXRpb25TdGF0ZS5pa0ZyYW1lRW5hYmxlZCgpID09PSB0cnVlKSB7XHJcblx0XHRcdFx0XHRcdGlmICh0aGlzLl9pa0xlZnRDb250cm9sbGVyICE9IG51bGwpIHtcclxuXHRcdFx0XHRcdFx0XHR0aGlzLl9pa0xlZnRDb250cm9sbGVyLnVwZGF0ZSgpO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdGlmICh0aGlzLl9pa1JpZ2h0Q29udHJvbGxlciAhPSBudWxsKSB7XHJcblx0XHRcdFx0XHRcdFx0dGhpcy5faWtSaWdodENvbnRyb2xsZXIudXBkYXRlKCk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHByaXZhdGUgYXdha2VQbGF5ZXJDb250cm9sbGVyKCk6IHZvaWQge1xyXG5cdFx0XHR0aGlzLmdyYXZpdGF0aW9uYWxGb3JjZSA9IHRoaXMuZ2V0UHJvcGVydHkoXHJcblx0XHRcdFx0XCJncmF2aXRhdGlvbmFsRm9yY2VcIixcclxuXHRcdFx0XHR0aGlzLmdyYXZpdGF0aW9uYWxGb3JjZVxyXG5cdFx0XHQpO1xyXG5cdFx0XHR0aGlzLnRlcm1pbmFsVmVsb2NpdHkgPSB0aGlzLmdldFByb3BlcnR5KFxyXG5cdFx0XHRcdFwidGVybWluYWxWZWxvY2l0eVwiLFxyXG5cdFx0XHRcdHRoaXMudGVybWluYWxWZWxvY2l0eVxyXG5cdFx0XHQpO1xyXG5cdFx0XHR0aGlzLnJvdGF0ZUNhbWVyYSA9IHRoaXMuZ2V0UHJvcGVydHkoXCJyb3RhdGVDYW1lcmFcIiwgdGhpcy5yb3RhdGVDYW1lcmEpO1xyXG5cdFx0XHR0aGlzLm5vcm1hbEFuZ2xlID0gdGhpcy5nZXRQcm9wZXJ0eShcIm5vcm1hbEFuZ2xlXCIsIHRoaXMubm9ybWFsQW5nbGUpO1xyXG5cdFx0XHR0aGlzLnJhZGl1c1NjYWxlID0gdGhpcy5nZXRQcm9wZXJ0eShcInJhZGl1c1NjYWxlXCIsIHRoaXMucmFkaXVzU2NhbGUpO1xyXG5cdFx0XHR0aGlzLnJheUxlbmd0aCA9IHRoaXMuZ2V0UHJvcGVydHkoXCJyYXlMZW5ndGhcIiwgdGhpcy5yYXlMZW5ndGgpO1xyXG5cdFx0XHR0aGlzLnJheU9yaWdpbiA9IHRoaXMuZ2V0UHJvcGVydHkoXCJyYXlPcmlnaW5cIiwgdGhpcy5yYXlPcmlnaW4pO1xyXG5cdFx0XHR0aGlzLm1heEFuZ2xlID0gdGhpcy5nZXRQcm9wZXJ0eShcIm1heEFuZ2xlXCIsIHRoaXMubWF4QW5nbGUpO1xyXG5cdFx0XHR0aGlzLmxhbmRpbmdFcHNpbG9uID0gdGhpcy5nZXRQcm9wZXJ0eShcclxuXHRcdFx0XHRcImxhbmRpbmdFcHNpbG9uXCIsXHJcblx0XHRcdFx0dGhpcy5sYW5kaW5nRXBzaWxvblxyXG5cdFx0XHQpO1xyXG5cdFx0XHR0aGlzLm1pbkZhbGxWZWxvY2l0eSA9IHRoaXMuZ2V0UHJvcGVydHkoXHJcblx0XHRcdFx0XCJtaW5GYWxsVmVsb2NpdHlcIixcclxuXHRcdFx0XHR0aGlzLm1pbkZhbGxWZWxvY2l0eVxyXG5cdFx0XHQpO1xyXG5cdFx0XHR0aGlzLmFpcmJvcm5UaW1lb3V0ID0gdGhpcy5nZXRQcm9wZXJ0eShcclxuXHRcdFx0XHRcImFpcmJvcm5UaW1lb3V0XCIsXHJcblx0XHRcdFx0dGhpcy5haXJib3JuVGltZW91dFxyXG5cdFx0XHQpO1xyXG5cdFx0XHR0aGlzLm1vdmVTcGVlZCA9IHRoaXMuZ2V0UHJvcGVydHkoXCJtb3ZlU3BlZWRcIiwgdGhpcy5tb3ZlU3BlZWQpO1xyXG5cdFx0XHR0aGlzLmxvb2tTcGVlZCA9IHRoaXMuZ2V0UHJvcGVydHkoXCJsb29rU3BlZWRcIiwgdGhpcy5sb29rU3BlZWQpO1xyXG5cdFx0XHR0aGlzLmp1bXBTcGVlZCA9IHRoaXMuZ2V0UHJvcGVydHkoXCJqdW1wU3BlZWRcIiwgdGhpcy5qdW1wU3BlZWQpO1xyXG5cdFx0XHR0aGlzLmp1bXBEZWxheSA9IHRoaXMuZ2V0UHJvcGVydHkoXCJqdW1wRGVsYXlcIiwgdGhpcy5qdW1wRGVsYXkpO1xyXG5cdFx0XHR0aGlzLmV5ZXNIZWlnaHQgPSB0aGlzLmdldFByb3BlcnR5KFwiZXllc0hlaWdodFwiLCB0aGlzLmV5ZXNIZWlnaHQpO1xyXG5cdFx0XHR0aGlzLnBpdm90SGVpZ2h0ID0gdGhpcy5nZXRQcm9wZXJ0eShcInBpdm90SGVpZ2h0XCIsIHRoaXMucGl2b3RIZWlnaHQpO1xyXG5cdFx0XHR0aGlzLnRvcExvb2tMaW1pdCA9IHRoaXMuZ2V0UHJvcGVydHkoXCJ0b3BMb29rTGltaXRcIiwgdGhpcy50b3BMb29rTGltaXQpO1xyXG5cdFx0XHR0aGlzLmRvd25Mb29rTGltaXQgPSB0aGlzLmdldFByb3BlcnR5KFxyXG5cdFx0XHRcdFwiZG93bkxvb2tMaW1pdFwiLFxyXG5cdFx0XHRcdHRoaXMuZG93bkxvb2tMaW1pdFxyXG5cdFx0XHQpO1xyXG5cdFx0XHR0aGlzLmxvd1R1cm5TcGVlZCA9IHRoaXMuZ2V0UHJvcGVydHkoXCJsb3dUdXJuU3BlZWRcIiwgdGhpcy5sb3dUdXJuU3BlZWQpO1xyXG5cdFx0XHR0aGlzLmhpZ2hUdXJuU3BlZWQgPSB0aGlzLmdldFByb3BlcnR5KFxyXG5cdFx0XHRcdFwiaGlnaFR1cm5TcGVlZFwiLFxyXG5cdFx0XHRcdHRoaXMuaGlnaFR1cm5TcGVlZFxyXG5cdFx0XHQpO1xyXG5cclxuXHRcdFx0dGhpcy5lbmFibGVJbnB1dCA9IHRoaXMuZ2V0UHJvcGVydHkoXCJlbmFibGVJbnB1dFwiLCB0aGlzLmVuYWJsZUlucHV0KTtcclxuXHRcdFx0dGhpcy5wbGF5ZXJOdW1iZXIgPSB0aGlzLmdldFByb3BlcnR5KFwicGxheWVyTnVtYmVyXCIsIHRoaXMucGxheWVyTnVtYmVyKTtcclxuXHRcdFx0dGhpcy5hdHRhY2hDYW1lcmEgPSB0aGlzLmdldFByb3BlcnR5KFwiYXR0YWNoQ2FtZXJhXCIsIHRoaXMuYXR0YWNoQ2FtZXJhKTtcclxuXHRcdFx0dGhpcy5mcmVlTG9va2luZyA9IHRoaXMuZ2V0UHJvcGVydHkoXCJmcmVlTG9va2luZ1wiLCB0aGlzLmZyZWVMb29raW5nKTtcclxuXHRcdFx0dGhpcy50b2dnbGVWaWV3ID0gdGhpcy5nZXRQcm9wZXJ0eShcInRvZ2dsZVZpZXdcIiwgdGhpcy50b2dnbGVWaWV3KTtcclxuXHRcdFx0dGhpcy5hdmF0YXJTa2luVGFnID0gdGhpcy5nZXRQcm9wZXJ0eShcclxuXHRcdFx0XHRcImF2YXRhclNraW5UYWdcIixcclxuXHRcdFx0XHR0aGlzLmF2YXRhclNraW5UYWdcclxuXHRcdFx0KTtcclxuXHRcdFx0dGhpcy5jYW1lcmFDb2xsaXNpb25zID0gdGhpcy5nZXRQcm9wZXJ0eShcclxuXHRcdFx0XHRcImNhbWVyYUNvbGxpc2lvbnNcIixcclxuXHRcdFx0XHR0aGlzLmNhbWVyYUNvbGxpc2lvbnNcclxuXHRcdFx0KTtcclxuXHRcdFx0dGhpcy5jYW1lcmFTbW9vdGhpbmcgPSB0aGlzLmdldFByb3BlcnR5KFxyXG5cdFx0XHRcdFwiY2FtZXJhU21vb3RoaW5nXCIsXHJcblx0XHRcdFx0dGhpcy5jYW1lcmFTbW9vdGhpbmdcclxuXHRcdFx0KTtcclxuXHRcdFx0dGhpcy5kaXN0YW5jZUZhY3RvciA9IHRoaXMuZ2V0UHJvcGVydHkoXHJcblx0XHRcdFx0XCJkaXN0YW5jZUZhY3RvclwiLFxyXG5cdFx0XHRcdHRoaXMuZGlzdGFuY2VGYWN0b3JcclxuXHRcdFx0KTtcclxuXHRcdFx0dGhpcy5taW5pbXVtRGlzdGFuY2UgPSB0aGlzLmdldFByb3BlcnR5KFxyXG5cdFx0XHRcdFwibWluaW11bURpc3RhbmNlXCIsXHJcblx0XHRcdFx0dGhpcy5taW5pbXVtRGlzdGFuY2VcclxuXHRcdFx0KTtcclxuXHRcdFx0dGhpcy5zbW9vdGhBY2NlbGVyYXRpb24gPSB0aGlzLmdldFByb3BlcnR5KFxyXG5cdFx0XHRcdFwic21vb3RoQWNjZWxlcmF0aW9uXCIsXHJcblx0XHRcdFx0dGhpcy5zbW9vdGhBY2NlbGVyYXRpb25cclxuXHRcdFx0KTtcclxuXHRcdFx0dGhpcy5hY2NlbGVyYXRpb25TcGVlZCA9IHRoaXMuZ2V0UHJvcGVydHkoXHJcblx0XHRcdFx0XCJhY2NlbGVyYXRpb25TcGVlZFwiLFxyXG5cdFx0XHRcdHRoaXMuYWNjZWxlcmF0aW9uU3BlZWRcclxuXHRcdFx0KTtcclxuXHRcdFx0dGhpcy5kZWNlbGVyYXRpb25TcGVlZCA9IHRoaXMuZ2V0UHJvcGVydHkoXHJcblx0XHRcdFx0XCJkZWNlbGVyYXRpb25TcGVlZFwiLFxyXG5cdFx0XHRcdHRoaXMuZGVjZWxlcmF0aW9uU3BlZWRcclxuXHRcdFx0KTtcclxuXHRcdFx0dGhpcy5pZ25vcmVUcmlnZ2VyVGFncyA9IHRoaXMuZ2V0UHJvcGVydHkoXHJcblx0XHRcdFx0XCJpZ25vcmVUcmlnZ2VyVGFnc1wiLFxyXG5cdFx0XHRcdHRoaXMuaWdub3JlVHJpZ2dlclRhZ3NcclxuXHRcdFx0KTtcclxuXHRcdFx0dGhpcy5yZXF1aXJlU3ByaW50QnV0dG9uID0gdGhpcy5nZXRQcm9wZXJ0eShcclxuXHRcdFx0XHRcInJlcXVpcmVTcHJpbnRCdXR0b25cIixcclxuXHRcdFx0XHR0aGlzLnJlcXVpcmVTcHJpbnRCdXR0b25cclxuXHRcdFx0KTtcclxuXHRcdFx0dGhpcy5zcHJpbnRUaHJlc2hvbGRTcGVlZCA9IHRoaXMuZ2V0UHJvcGVydHkoXHJcblx0XHRcdFx0XCJzcHJpbnRUaHJlc2hvbGRTcGVlZFwiLFxyXG5cdFx0XHRcdHRoaXMuc3ByaW50VGhyZXNob2xkU3BlZWRcclxuXHRcdFx0KTtcclxuXHRcdFx0dGhpcy51cGRhdGVTdGF0ZVBhcmFtcyA9IHRoaXMuZ2V0UHJvcGVydHkoXHJcblx0XHRcdFx0XCJ1cGRhdGVTdGF0ZVBhcmFtc1wiLFxyXG5cdFx0XHRcdHRoaXMudXBkYXRlU3RhdGVQYXJhbXNcclxuXHRcdFx0KTtcclxuXHRcdFx0dGhpcy5hbmltYXRpb25TdGF0ZVBhcmFtcyA9IHRoaXMuZ2V0UHJvcGVydHkoXHJcblx0XHRcdFx0XCJhbmltYXRpb25TdGF0ZVBhcmFtc1wiLFxyXG5cdFx0XHRcdHRoaXMuYW5pbWF0aW9uU3RhdGVQYXJhbXNcclxuXHRcdFx0KTtcclxuXHJcblx0XHRcdGNvbnN0IGFycm93S2V5Um90YXRpb246IGJvb2xlYW4gPSB0aGlzLmdldFByb3BlcnR5KFwiYXJyb3dLZXlSb3RhdGlvblwiKTtcclxuXHRcdFx0aWYgKGFycm93S2V5Um90YXRpb24gPT09IHRydWUpXHJcblx0XHRcdFx0QkFCWUxPTi5Vc2VySW5wdXRPcHRpb25zLlVzZUFycm93S2V5Um90YXRpb24gPSB0cnVlO1xyXG5cclxuXHRcdFx0Y29uc3QgYm9vbVBvc2l0aW9uRGF0YTogYW55ID0gdGhpcy5nZXRQcm9wZXJ0eShcImJvb21Qb3NpdGlvblwiKTtcclxuXHRcdFx0aWYgKGJvb21Qb3NpdGlvbkRhdGEgIT0gbnVsbClcclxuXHRcdFx0XHR0aGlzLmJvb21Qb3NpdGlvbiA9IEJBQllMT04uVXRpbGl0aWVzLlBhcnNlVmVjdG9yMyhib29tUG9zaXRpb25EYXRhKTtcclxuXHJcblx0XHRcdGNvbnN0IHNwaGVyZVJhZGl1czogbnVtYmVyID0gdGhpcy5nZXRQcm9wZXJ0eShcInNwaGVyZVJhZGl1c1wiLCAwLjUpO1xyXG5cdFx0XHR0aGlzLmNhbWVyYVJheWNhc3RTaGFwZSA9XHJcblx0XHRcdFx0QkFCWUxPTi5TY2VuZU1hbmFnZXIuQ3JlYXRlUGh5c2ljc1NwaGVyZVNoYXBlKHNwaGVyZVJhZGl1cyk7XHJcblxyXG5cdFx0XHR0aGlzLmFic3RyYWN0TWVzaCA9IHRoaXMuZ2V0QWJzdHJhY3RNZXNoKCk7XHJcblx0XHRcdHRoaXMuc2hvd0RlYnVnQ29sbGlkZXJzID0gQkFCWUxPTi5VdGlsaXRpZXMuU2hvd0RlYnVnQ29sbGlkZXJzKCk7XHJcblx0XHRcdHRoaXMuY29sbGlkZXJWaXNpYmlsaXR5ID0gQkFCWUxPTi5VdGlsaXRpZXMuQ29sbGlkZXJWaXNpYmlsaXR5KCk7XHJcblx0XHRcdHRoaXMuY29sbGlkZXJSZW5kZXJHcm91cCA9IEJBQllMT04uVXRpbGl0aWVzLkNvbGxpZGVyUmVuZGVyR3JvdXAoKTtcclxuXHJcblx0XHRcdGlmICh0aGlzLmF2YXRhclNraW5UYWcgIT0gbnVsbCAmJiB0aGlzLmF2YXRhclNraW5UYWcgIT09IFwiXCIpIHtcclxuXHRcdFx0XHR0aGlzLmF2YXRhclNraW5zID0gdGhpcy5nZXRDaGlsZHJlbldpdGhUYWdzKFxyXG5cdFx0XHRcdFx0dGhpcy5hdmF0YXJTa2luVGFnLFxyXG5cdFx0XHRcdFx0ZmFsc2VcclxuXHRcdFx0XHQpIGFzIEJBQllMT04uQWJzdHJhY3RNZXNoW107XHJcblx0XHRcdH1cclxuXHRcdFx0Y29uc3QgcGNvbnRyb2w6IG51bWJlciA9IHRoaXMuZ2V0UHJvcGVydHkoXHJcblx0XHRcdFx0XCJwbGF5ZXJDb250cm9sXCIsXHJcblx0XHRcdFx0dGhpcy5wbGF5ZXJDb250cm9sXHJcblx0XHRcdCk7XHJcblx0XHRcdHRoaXMuc2V0UGxheWVyQ29udHJvbChwY29udHJvbCk7XHJcblx0XHRcdHRoaXMucmVzZXRQbGF5ZXJSb3RhdGlvbigpO1xyXG5cclxuXHRcdFx0dGhpcy5jYW1lcmFQaXZvdCA9IG5ldyBCQUJZTE9OLk1lc2goXHJcblx0XHRcdFx0dGhpcy50cmFuc2Zvcm0ubmFtZSArIFwiLkNhbWVyYVBpdm90XCIsXHJcblx0XHRcdFx0dGhpcy5zY2VuZVxyXG5cdFx0XHQpO1xyXG5cdFx0XHR0aGlzLmNhbWVyYVBpdm90LnBhcmVudCA9IG51bGw7XHJcblx0XHRcdHRoaXMuY2FtZXJhUGl2b3QucG9zaXRpb24gPSB0aGlzLnRyYW5zZm9ybS5wb3NpdGlvbi5jbG9uZSgpO1xyXG5cdFx0XHR0aGlzLmNhbWVyYVBpdm90LnJvdGF0aW9uUXVhdGVybmlvbiA9XHJcblx0XHRcdFx0dGhpcy50cmFuc2Zvcm0ucm90YXRpb25RdWF0ZXJuaW9uLmNsb25lKCk7XHJcblx0XHRcdHRoaXMuY2FtZXJhUGl2b3QuY2hlY2tDb2xsaXNpb25zID0gZmFsc2U7XHJcblx0XHRcdHRoaXMuY2FtZXJhUGl2b3QuaXNQaWNrYWJsZSA9IGZhbHNlO1xyXG5cclxuXHRcdFx0aWYgKHRoaXMuc2hvd0RlYnVnQ29sbGlkZXJzID09PSB0cnVlKSB7XHJcblx0XHRcdFx0Y29uc3QgdGVzdFBpdm90OiBCQUJZTE9OLk1lc2ggPSBCQUJZTE9OLk1lc2hCdWlsZGVyLkNyZWF0ZUJveChcclxuXHRcdFx0XHRcdFwiVGVzdFBpdm90XCIsXHJcblx0XHRcdFx0XHR7XHJcblx0XHRcdFx0XHRcdHdpZHRoOiAwLjI1LFxyXG5cdFx0XHRcdFx0XHRoZWlnaHQ6IDAuMjUsXHJcblx0XHRcdFx0XHRcdGRlcHRoOiAwLjUsXHJcblx0XHRcdFx0XHR9LFxyXG5cdFx0XHRcdFx0dGhpcy5zY2VuZVxyXG5cdFx0XHRcdCk7XHJcblx0XHRcdFx0dGVzdFBpdm90LnBhcmVudCA9IHRoaXMuY2FtZXJhUGl2b3Q7XHJcblx0XHRcdFx0dGVzdFBpdm90LnBvc2l0aW9uLnNldCgwLCAwLCAwKTtcclxuXHRcdFx0XHR0ZXN0UGl2b3Qucm90YXRpb25RdWF0ZXJuaW9uID0gbmV3IEJBQllMT04uUXVhdGVybmlvbigwLCAwLCAwLCAxKTtcclxuXHRcdFx0XHR0ZXN0UGl2b3QudmlzaWJpbGl0eSA9IDAuNTtcclxuXHRcdFx0XHR0ZXN0UGl2b3QucmVuZGVyaW5nR3JvdXBJZCA9IHRoaXMuY29sbGlkZXJSZW5kZXJHcm91cDtcclxuXHRcdFx0XHR0ZXN0UGl2b3QuY2hlY2tDb2xsaXNpb25zID0gZmFsc2U7XHJcblx0XHRcdFx0dGVzdFBpdm90LmlzUGlja2FibGUgPSBmYWxzZTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Y29uc3QgY3lsaW5kZXJTaGFwZTogYm9vbGVhbiA9IHRoaXMuZ2V0UHJvcGVydHkoXCJjeWxpbmRlclNoYXBlXCIpO1xyXG5cdFx0XHRjb25zdCBjb25maWdDb250cm9sbGVyOiBCQUJZTE9OLkNoYXJhY3RlckNvbnRyb2xsZXIgPSB0aGlzLmdldENvbXBvbmVudChcclxuXHRcdFx0XHRcIkJBQllMT04uQ2hhcmFjdGVyQ29udHJvbGxlclwiXHJcblx0XHRcdCk7XHJcblx0XHRcdGlmIChjb25maWdDb250cm9sbGVyICE9IG51bGwgJiYgY3lsaW5kZXJTaGFwZSA9PT0gdHJ1ZSlcclxuXHRcdFx0XHRjb25maWdDb250cm9sbGVyLnByZUNyZWF0ZUN5bGluZGVyU2hhcGUoKTtcclxuXHJcblx0XHRcdHRoaXMuYXR0YWNoQm9uZUNvbnRyb2xsZXJzKCk7XHJcblxyXG5cdFx0XHRCQUJZTE9OLlNjZW5lTWFuYWdlci5PbktleWJvYXJkUHJlc3ModGhpcy5rZXlib2FyZENhbWVyYSwgKCkgPT4ge1xyXG5cdFx0XHRcdHRoaXMudG9nZ2xlUGxheWVyQ29udHJvbCgpO1xyXG5cdFx0XHR9KTtcclxuXHRcdFx0QkFCWUxPTi5TY2VuZU1hbmFnZXIuT25HYW1lcGFkQnV0dG9uUHJlc3ModGhpcy5idXR0b25DYW1lcmEsICgpID0+IHtcclxuXHRcdFx0XHR0aGlzLnRvZ2dsZVBsYXllckNvbnRyb2woKTtcclxuXHRcdFx0fSk7XHJcblx0XHR9XHJcblxyXG5cdFx0cHJpdmF0ZSBzdGFydFBsYXllckNvbnRyb2xsZXIoKTogdm9pZCB7XHJcblx0XHRcdGlmICh0aGlzLmF0dGFjaENhbWVyYSA9PT0gdHJ1ZSkge1xyXG5cdFx0XHRcdHRoaXMuYXR0YWNoUGxheWVyQ2FtZXJhKHRoaXMucGxheWVyTnVtYmVyKTtcclxuXHRcdFx0fVxyXG5cdFx0XHR0aGlzLm5hdmlnYXRpb25BZ2VudCA9IHRoaXMuZ2V0Q29tcG9uZW50KFwiQkFCWUxPTi5OYXZpZ2F0aW9uQWdlbnRcIik7XHJcblx0XHRcdHRoaXMuY2hhcmFjdGVyQ29udHJvbGxlciA9IHRoaXMuZ2V0Q29tcG9uZW50KFxyXG5cdFx0XHRcdFwiQkFCWUxPTi5DaGFyYWN0ZXJDb250cm9sbGVyXCJcclxuXHRcdFx0KTtcclxuXHRcdFx0aWYgKHRoaXMuY2hhcmFjdGVyQ29udHJvbGxlciAhPSBudWxsKSB7XHJcblx0XHRcdFx0dGhpcy5hdmF0YXJSYWRpdXMgPSB0aGlzLmNoYXJhY3RlckNvbnRyb2xsZXIuZ2V0QXZhdGFyUmFkaXVzKCk7XHJcblx0XHRcdFx0dGhpcy5jaGFyYWN0ZXJDb250cm9sbGVyLnNldEdyYXZpdHkodGhpcy5ncmF2aXRhdGlvbmFsRm9yY2UpO1xyXG5cdFx0XHRcdHRoaXMuY2hhcmFjdGVyQ29udHJvbGxlci5zZXRGYWxsaW5nU3BlZWQodGhpcy50ZXJtaW5hbFZlbG9jaXR5KTtcclxuXHRcdFx0XHR0aGlzLmNoYXJhY3RlckNvbnRyb2xsZXIub25VcGRhdGVQb3NpdGlvbk9ic2VydmFibGUuYWRkKCgpID0+IHtcclxuXHRcdFx0XHRcdHRoaXMudXBkYXRlQ2FtZXJhQ29udHJvbGxlcigpO1xyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHRcdEJBQllMT04uU2NlbmVNYW5hZ2VyLkxvZ1dhcm5pbmcoXHJcblx0XHRcdFx0XHRcIlN0YXJ0aW5nIHBsYXllciBjb250cm9sbGVyIGluIHBoeXNpYyBlbmdpbmUgbW9kZSBmb3I6IFwiICtcclxuXHRcdFx0XHRcdFx0dGhpcy50cmFuc2Zvcm0ubmFtZVxyXG5cdFx0XHRcdCk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0QkFCWUxPTi5TY2VuZU1hbmFnZXIuTG9nV2FybmluZyhcclxuXHRcdFx0XHRcdFwiU3RhcnRpbmcgcGxheWVyIGNvbnRyb2xsZXIgaW4gY2hlY2sgY29sbGlzaW9ucyBtb2RlIGZvcjogXCIgK1xyXG5cdFx0XHRcdFx0XHR0aGlzLnRyYW5zZm9ybS5uYW1lXHJcblx0XHRcdFx0KTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Y29uc3QgZWxsaXBzb2lkU2VnczogbnVtYmVyID0gMTY7XHJcblx0XHRcdGlmICh0aGlzLmNoYXJhY3RlckNvbnRyb2xsZXIgPT0gbnVsbCkge1xyXG5cdFx0XHRcdGlmICh0aGlzLmFic3RyYWN0TWVzaCAhPSBudWxsKSB7XHJcblx0XHRcdFx0XHR0aGlzLmFic3RyYWN0TWVzaC5jaGVja0NvbGxpc2lvbnMgPSB0cnVlO1xyXG5cdFx0XHRcdFx0dGhpcy5hYnN0cmFjdE1lc2guaXNQaWNrYWJsZSA9IHRydWU7XHJcblx0XHRcdFx0XHRjb25zdCBjYXBzdWxlU2l6ZTogQkFCWUxPTi5WZWN0b3IzID1cclxuXHRcdFx0XHRcdFx0dGhpcy5hYnN0cmFjdE1lc2guZWxsaXBzb2lkLmNsb25lKCk7XHJcblxyXG5cdFx0XHRcdFx0aWYgKFxyXG5cdFx0XHRcdFx0XHR0aGlzLnNob3dEZWJ1Z0NvbGxpZGVycyA9PT0gdHJ1ZSAmJlxyXG5cdFx0XHRcdFx0XHQoPGFueT50aGlzLnRyYW5zZm9ybSkuX2RlYnVnQ29sbGlkZXIgPT0gbnVsbFxyXG5cdFx0XHRcdFx0KSB7XHJcblx0XHRcdFx0XHRcdGNvbnN0IGRlYnVnTmFtZTogc3RyaW5nID0gdGhpcy50cmFuc2Zvcm0ubmFtZSArIFwiLkRlYnVnXCI7XHJcblx0XHRcdFx0XHRcdGNvbnN0IGRlYnVnQ2Fwc3VsZTogQkFCWUxPTi5NZXNoID0gQkFCWUxPTi5NZXNoQnVpbGRlci5DcmVhdGVTcGhlcmUoXHJcblx0XHRcdFx0XHRcdFx0ZGVidWdOYW1lLFxyXG5cdFx0XHRcdFx0XHRcdHtcclxuXHRcdFx0XHRcdFx0XHRcdHNlZ21lbnRzOiBlbGxpcHNvaWRTZWdzLFxyXG5cdFx0XHRcdFx0XHRcdFx0ZGlhbWV0ZXJYOiBjYXBzdWxlU2l6ZS54ICogMixcclxuXHRcdFx0XHRcdFx0XHRcdGRpYW1ldGVyWTogY2Fwc3VsZVNpemUueSAqIDIsXHJcblx0XHRcdFx0XHRcdFx0XHRkaWFtZXRlclo6IGNhcHN1bGVTaXplLnogKiAyLFxyXG5cdFx0XHRcdFx0XHRcdH0sXHJcblx0XHRcdFx0XHRcdFx0dGhpcy5zY2VuZVxyXG5cdFx0XHRcdFx0XHQpO1xyXG5cdFx0XHRcdFx0XHRkZWJ1Z0NhcHN1bGUucG9zaXRpb24uc2V0KDAsIDAsIDApO1xyXG5cdFx0XHRcdFx0XHRkZWJ1Z0NhcHN1bGUucm90YXRpb25RdWF0ZXJuaW9uID1cclxuXHRcdFx0XHRcdFx0XHR0aGlzLnRyYW5zZm9ybS5yb3RhdGlvblF1YXRlcm5pb24uY2xvbmUoKTtcclxuXHRcdFx0XHRcdFx0ZGVidWdDYXBzdWxlLnNldFBhcmVudCh0aGlzLnRyYW5zZm9ybSk7XHJcblx0XHRcdFx0XHRcdGRlYnVnQ2Fwc3VsZS5wb3NpdGlvbi5zZXQoMCwgMCwgMCk7XHJcblx0XHRcdFx0XHRcdGRlYnVnQ2Fwc3VsZS52aXNpYmlsaXR5ID0gdGhpcy5jb2xsaWRlclZpc2liaWxpdHk7XHJcblx0XHRcdFx0XHRcdGRlYnVnQ2Fwc3VsZS5yZW5kZXJpbmdHcm91cElkID0gdGhpcy5jb2xsaWRlclJlbmRlckdyb3VwO1xyXG5cdFx0XHRcdFx0XHRkZWJ1Z0NhcHN1bGUubWF0ZXJpYWwgPSBCQUJZTE9OLlV0aWxpdGllcy5HZXRDb2xsaWRlck1hdGVyaWFsKFxyXG5cdFx0XHRcdFx0XHRcdHRoaXMuc2NlbmVcclxuXHRcdFx0XHRcdFx0KTtcclxuXHRcdFx0XHRcdFx0ZGVidWdDYXBzdWxlLmNoZWNrQ29sbGlzaW9ucyA9IGZhbHNlO1xyXG5cdFx0XHRcdFx0XHRkZWJ1Z0NhcHN1bGUuaXNQaWNrYWJsZSA9IGZhbHNlO1xyXG5cdFx0XHRcdFx0XHQoPGFueT50aGlzLnRyYW5zZm9ybSkuX2RlYnVnQ29sbGlkZXIgPSBkZWJ1Z0NhcHN1bGU7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0cHJpdmF0ZSB1cGRhdGVQbGF5ZXJDb250cm9sbGVyKCk6IHZvaWQge1xyXG5cdFx0XHQvKlxyXG4gICAgICAgICAgICAgICAgTXkgc3R1ZmZcclxuICAgICAgICAgICAgKi9cclxuXHRcdFx0dGhpcy5zcGVsbE9uZVN0YXRlID0gQkFCWUxPTi5TY2VuZU1hbmFnZXIuR2V0S2V5Ym9hcmRJbnB1dChcclxuXHRcdFx0XHR0aGlzLmtleWJvYXJkU3BlbGxPbmVcclxuXHRcdFx0KTtcclxuXHRcdFx0LypcclxuICAgICAgICAgICAgICAgIE15IHN0dWZmXHJcbiAgICAgICAgICAgICovXHJcblx0XHRcdHRoaXMuZGVsdGFUaW1lID0gdGhpcy5nZXREZWx0YVNlY29uZHMoKTtcclxuXHJcblx0XHRcdHRoaXMubV9hY3R1YWxWZWxvY2l0eSA9IHRoaXMudHJhbnNmb3JtLmFic29sdXRlUG9zaXRpb24uc3VidHJhY3QoXHJcblx0XHRcdFx0dGhpcy5tX2xhc3RQb3NpdGlvblxyXG5cdFx0XHQpO1xyXG5cdFx0XHR0aGlzLm1fbGluZWFyVmVsb2NpdHkuY29weUZyb20odGhpcy5tX2FjdHVhbFZlbG9jaXR5KTtcclxuXHRcdFx0dGhpcy5tX3NjYWxlZFZlbG9jaXR5ID0gdGhpcy5tX2xpbmVhclZlbG9jaXR5Lmxlbmd0aCgpIC8gdGhpcy5kZWx0YVRpbWU7XHJcblx0XHRcdHRoaXMubV9saW5lYXJWZWxvY2l0eS5ub3JtYWxpemUoKTtcclxuXHRcdFx0dGhpcy5tX2xpbmVhclZlbG9jaXR5LnNjYWxlSW5QbGFjZSh0aGlzLm1fc2NhbGVkVmVsb2NpdHkpO1xyXG5cdFx0XHRpZiAodGhpcy5wbGF5ZXJEcmF3VmVsb2NpdHkgPiAwKSB7XHJcblx0XHRcdFx0dGhpcy5tX3ZlbG9jaXR5T2Zmc2V0LmNvcHlGcm9tKHRoaXMubV9saW5lYXJWZWxvY2l0eSk7XHJcblx0XHRcdFx0dGhpcy5tX3ZlbG9jaXR5T2Zmc2V0LnNjYWxlSW5QbGFjZSh0aGlzLnBsYXllckRyYXdWZWxvY2l0eSk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0dGhpcy5tX3ZlbG9jaXR5T2Zmc2V0LnNldCgwLCAwLCAwKTtcclxuXHRcdFx0fVxyXG5cdFx0XHR0aGlzLm1fbGFzdFBvc2l0aW9uLmNvcHlGcm9tKHRoaXMudHJhbnNmb3JtLmFic29sdXRlUG9zaXRpb24pO1xyXG5cclxuXHRcdFx0aWYgKHRoaXMudXBkYXRlU3RhdGVQYXJhbXMgPT09IHRydWUgJiYgdGhpcy5hbmltYXRpb25TdGF0ZSA9PSBudWxsKSB7XHJcblx0XHRcdFx0dGhpcy5hdHRhY2hBbmltYXRpb25Db250cm9sbGVyKCk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmICh0aGlzLm1pbkp1bXBUaW1lciA+IDApIHtcclxuXHRcdFx0XHR0aGlzLm1pbkp1bXBUaW1lciAtPSB0aGlzLmRlbHRhVGltZTtcclxuXHRcdFx0XHRpZiAodGhpcy5taW5KdW1wVGltZXIgPCAwKSB0aGlzLm1pbkp1bXBUaW1lciA9IDA7XHJcblx0XHRcdH1cclxuXHRcdFx0aWYgKHRoaXMuaXNDaGFyYWN0ZXJHcm91bmRlZCA9PT0gdHJ1ZSAmJiB0aGlzLmRlbGF5SnVtcFRpbWVyID4gMCkge1xyXG5cdFx0XHRcdHRoaXMuZGVsYXlKdW1wVGltZXIgLT0gdGhpcy5kZWx0YVRpbWU7XHJcblx0XHRcdFx0aWYgKHRoaXMuZGVsYXlKdW1wVGltZXIgPCAwKSB0aGlzLmRlbGF5SnVtcFRpbWVyID0gMDtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0dGhpcy5qdW1wQWxsb3dlZCA9IHRydWU7XHJcblx0XHRcdGlmICh0aGlzLmVuYWJsZUlucHV0ID09PSBmYWxzZSkgcmV0dXJuO1xyXG5cdFx0XHRjb25zdCB1c2VySW5wdXRYOiBudW1iZXIgPSBCQUJZTE9OLlNjZW5lTWFuYWdlci5HZXRVc2VySW5wdXQoXHJcblx0XHRcdFx0QkFCWUxPTi5Vc2VySW5wdXRBeGlzLkhvcml6b250YWwsXHJcblx0XHRcdFx0dGhpcy5wbGF5ZXJOdW1iZXJcclxuXHRcdFx0KTtcclxuXHRcdFx0Y29uc3QgdXNlcklucHV0WjogbnVtYmVyID0gQkFCWUxPTi5TY2VuZU1hbmFnZXIuR2V0VXNlcklucHV0KFxyXG5cdFx0XHRcdEJBQllMT04uVXNlcklucHV0QXhpcy5WZXJ0aWNhbCxcclxuXHRcdFx0XHR0aGlzLnBsYXllck51bWJlclxyXG5cdFx0XHQpO1xyXG5cdFx0XHRjb25zdCB1c2VyTW91c2VYOiBudW1iZXIgPSBCQUJZTE9OLlNjZW5lTWFuYWdlci5HZXRVc2VySW5wdXQoXHJcblx0XHRcdFx0QkFCWUxPTi5Vc2VySW5wdXRBeGlzLk1vdXNlWCxcclxuXHRcdFx0XHR0aGlzLnBsYXllck51bWJlclxyXG5cdFx0XHQpO1xyXG5cdFx0XHRjb25zdCB1c2VyTW91c2VZOiBudW1iZXIgPSBCQUJZTE9OLlNjZW5lTWFuYWdlci5HZXRVc2VySW5wdXQoXHJcblx0XHRcdFx0QkFCWUxPTi5Vc2VySW5wdXRBeGlzLk1vdXNlWSxcclxuXHRcdFx0XHR0aGlzLnBsYXllck51bWJlclxyXG5cdFx0XHQpO1xyXG5cdFx0XHRpZiAodGhpcy5zbW9vdGhBY2NlbGVyYXRpb24gPT09IHRydWUpIHtcclxuXHRcdFx0XHRpZiAoXHJcblx0XHRcdFx0XHR0aGlzLnBsYXllckNvbnRyb2wgPT09IFBST0pFQ1QuUGxheWVySW5wdXRDb250cm9sLlRoaXJkUGVyc29uVHVybmluZ1xyXG5cdFx0XHRcdCkge1xyXG5cdFx0XHRcdFx0dGhpcy5wbGF5ZXJJbnB1dFggPSB1c2VySW5wdXRYO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRpZiAodXNlcklucHV0WCA+IDApIHtcclxuXHRcdFx0XHRcdFx0dGhpcy5wbGF5ZXJJbnB1dFggKz0gdGhpcy5hY2NlbGVyYXRpb25TcGVlZCAqIHRoaXMuZGVsdGFUaW1lO1xyXG5cdFx0XHRcdFx0XHRpZiAodGhpcy5wbGF5ZXJJbnB1dFggPiAxKSB0aGlzLnBsYXllcklucHV0WCA9IDE7XHJcblx0XHRcdFx0XHR9IGVsc2UgaWYgKHVzZXJJbnB1dFggPCAwKSB7XHJcblx0XHRcdFx0XHRcdHRoaXMucGxheWVySW5wdXRYIC09IHRoaXMuYWNjZWxlcmF0aW9uU3BlZWQgKiB0aGlzLmRlbHRhVGltZTtcclxuXHRcdFx0XHRcdFx0aWYgKHRoaXMucGxheWVySW5wdXRYIDwgLTEpIHRoaXMucGxheWVySW5wdXRYID0gLTE7XHJcblx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRpZiAodGhpcy5wbGF5ZXJJbnB1dFggPCAwKSB7XHJcblx0XHRcdFx0XHRcdFx0dGhpcy5wbGF5ZXJJbnB1dFggKz0gdGhpcy5kZWNlbGVyYXRpb25TcGVlZCAqIHRoaXMuZGVsdGFUaW1lO1xyXG5cdFx0XHRcdFx0XHRcdGlmICh0aGlzLnBsYXllcklucHV0WCA+IDApIHRoaXMucGxheWVySW5wdXRYID0gMDtcclxuXHRcdFx0XHRcdFx0fSBlbHNlIGlmICh0aGlzLnBsYXllcklucHV0WCA+IDApIHtcclxuXHRcdFx0XHRcdFx0XHR0aGlzLnBsYXllcklucHV0WCAtPSB0aGlzLmRlY2VsZXJhdGlvblNwZWVkICogdGhpcy5kZWx0YVRpbWU7XHJcblx0XHRcdFx0XHRcdFx0aWYgKHRoaXMucGxheWVySW5wdXRYIDwgMCkgdGhpcy5wbGF5ZXJJbnB1dFggPSAwO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRpZiAodXNlcklucHV0WiA+IDApIHtcclxuXHRcdFx0XHRcdHRoaXMucGxheWVySW5wdXRaICs9IHRoaXMuYWNjZWxlcmF0aW9uU3BlZWQgKiB0aGlzLmRlbHRhVGltZTtcclxuXHRcdFx0XHRcdGlmICh0aGlzLnBsYXllcklucHV0WiA+IDEpIHRoaXMucGxheWVySW5wdXRaID0gMTtcclxuXHRcdFx0XHR9IGVsc2UgaWYgKHVzZXJJbnB1dFogPCAwKSB7XHJcblx0XHRcdFx0XHR0aGlzLnBsYXllcklucHV0WiAtPSB0aGlzLmFjY2VsZXJhdGlvblNwZWVkICogdGhpcy5kZWx0YVRpbWU7XHJcblx0XHRcdFx0XHRpZiAodGhpcy5wbGF5ZXJJbnB1dFogPCAtMSkgdGhpcy5wbGF5ZXJJbnB1dFogPSAtMTtcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0aWYgKHRoaXMucGxheWVySW5wdXRaIDwgMCkge1xyXG5cdFx0XHRcdFx0XHR0aGlzLnBsYXllcklucHV0WiArPSB0aGlzLmRlY2VsZXJhdGlvblNwZWVkICogdGhpcy5kZWx0YVRpbWU7XHJcblx0XHRcdFx0XHRcdGlmICh0aGlzLnBsYXllcklucHV0WiA+IDApIHRoaXMucGxheWVySW5wdXRaID0gMDtcclxuXHRcdFx0XHRcdH0gZWxzZSBpZiAodGhpcy5wbGF5ZXJJbnB1dFogPiAwKSB7XHJcblx0XHRcdFx0XHRcdHRoaXMucGxheWVySW5wdXRaIC09IHRoaXMuZGVjZWxlcmF0aW9uU3BlZWQgKiB0aGlzLmRlbHRhVGltZTtcclxuXHRcdFx0XHRcdFx0aWYgKHRoaXMucGxheWVySW5wdXRaIDwgMCkgdGhpcy5wbGF5ZXJJbnB1dFogPSAwO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHR0aGlzLnBsYXllcklucHV0WCA9IHVzZXJJbnB1dFg7XHJcblx0XHRcdFx0dGhpcy5wbGF5ZXJJbnB1dFogPSB1c2VySW5wdXRaO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR0aGlzLnBsYXllck1vdXNlWCA9IHVzZXJNb3VzZVg7XHJcblx0XHRcdHRoaXMucGxheWVyTW91c2VZID0gdXNlck1vdXNlWTtcclxuXHJcblx0XHRcdGlmIChcclxuXHRcdFx0XHR0aGlzLnBsYXllckNvbnRyb2wgPT09IFBST0pFQ1QuUGxheWVySW5wdXRDb250cm9sLlRoaXJkUGVyc29uVHVybmluZ1xyXG5cdFx0XHQpIHtcclxuXHRcdFx0XHRpZiAodGhpcy5wbGF5ZXJJbnB1dFggIT09IDApIHtcclxuXHRcdFx0XHRcdHRoaXMucGxheWVyTW91c2VYID0gdGhpcy5wbGF5ZXJJbnB1dFg7XHJcblx0XHRcdFx0XHR0aGlzLnBsYXllcklucHV0WCA9IDA7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpZiAodGhpcy5vblBsYXllcklucHV0T2JzZXJ2YWJsZS5oYXNPYnNlcnZlcnMoKSA9PT0gdHJ1ZSkge1xyXG5cdFx0XHRcdHRoaXMub25QbGF5ZXJJbnB1dE9ic2VydmFibGUubm90aWZ5T2JzZXJ2ZXJzKHRoaXMudHJhbnNmb3JtKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0dGhpcy5pbnB1dE1vdmVtZW50VmVjdG9yLnNldCh0aGlzLnBsYXllcklucHV0WCwgMCwgdGhpcy5wbGF5ZXJJbnB1dFopO1xyXG5cdFx0XHRpZiAodGhpcy5pbnB1dE1vdmVtZW50VmVjdG9yLmxlbmd0aCgpID4gMS4wKVxyXG5cdFx0XHRcdHRoaXMuaW5wdXRNb3ZlbWVudFZlY3Rvci5ub3JtYWxpemUoKTtcclxuXHRcdFx0dGhpcy5pbnB1dE1hZ25pdHVkZSA9IHRoaXMuaW5wdXRNb3ZlbWVudFZlY3Rvci5sZW5ndGgoKTtcclxuXHJcblx0XHRcdGNvbnN0IG1vdmVGb3J3YXJkOiBib29sZWFuID0gdGhpcy5wbGF5ZXJJbnB1dFogPiAwO1xyXG5cdFx0XHRjb25zdCBtb3ZlQmFja3dhcmQ6IGJvb2xlYW4gPSB0aGlzLnBsYXllcklucHV0WiA8IDA7XHJcblx0XHRcdGNvbnN0IG1vdmVSaWdodDogYm9vbGVhbiA9IHRoaXMucGxheWVySW5wdXRYID4gMDtcclxuXHRcdFx0Y29uc3QgbW92ZUxlZnQ6IGJvb2xlYW4gPSB0aGlzLnBsYXllcklucHV0WCA8IDA7XHJcblx0XHRcdGlmIChtb3ZlRm9yd2FyZCA9PT0gdHJ1ZSkge1xyXG5cdFx0XHRcdGlmIChtb3ZlTGVmdCA9PT0gdHJ1ZSkge1xyXG5cdFx0XHRcdFx0dGhpcy5wbGF5ZXJNb3ZlRGlyZWN0aW9uID0gUFJPSkVDVC5QbGF5ZXJNb3ZlRGlyZWN0aW9uLkZvcndhcmRMZWZ0O1xyXG5cdFx0XHRcdH0gZWxzZSBpZiAobW92ZVJpZ2h0ID09PSB0cnVlKSB7XHJcblx0XHRcdFx0XHR0aGlzLnBsYXllck1vdmVEaXJlY3Rpb24gPSBQUk9KRUNULlBsYXllck1vdmVEaXJlY3Rpb24uRm9yd2FyZFJpZ2h0O1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHR0aGlzLnBsYXllck1vdmVEaXJlY3Rpb24gPSBQUk9KRUNULlBsYXllck1vdmVEaXJlY3Rpb24uRm9yd2FyZDtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0gZWxzZSBpZiAobW92ZUJhY2t3YXJkID09PSB0cnVlKSB7XHJcblx0XHRcdFx0aWYgKG1vdmVMZWZ0ID09PSB0cnVlKSB7XHJcblx0XHRcdFx0XHR0aGlzLnBsYXllck1vdmVEaXJlY3Rpb24gPSBQUk9KRUNULlBsYXllck1vdmVEaXJlY3Rpb24uQmFja3dhcmRMZWZ0O1xyXG5cdFx0XHRcdH0gZWxzZSBpZiAobW92ZVJpZ2h0ID09PSB0cnVlKSB7XHJcblx0XHRcdFx0XHR0aGlzLnBsYXllck1vdmVEaXJlY3Rpb24gPSBQUk9KRUNULlBsYXllck1vdmVEaXJlY3Rpb24uQmFja3dhcmRSaWdodDtcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0dGhpcy5wbGF5ZXJNb3ZlRGlyZWN0aW9uID0gUFJPSkVDVC5QbGF5ZXJNb3ZlRGlyZWN0aW9uLkJhY2t3YXJkO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSBlbHNlIGlmIChtb3ZlTGVmdCA9PT0gdHJ1ZSkge1xyXG5cdFx0XHRcdHRoaXMucGxheWVyTW92ZURpcmVjdGlvbiA9IFBST0pFQ1QuUGxheWVyTW92ZURpcmVjdGlvbi5TdHJhZmluZ0xlZnQ7XHJcblx0XHRcdH0gZWxzZSBpZiAobW92ZVJpZ2h0ID09PSB0cnVlKSB7XHJcblx0XHRcdFx0dGhpcy5wbGF5ZXJNb3ZlRGlyZWN0aW9uID0gUFJPSkVDVC5QbGF5ZXJNb3ZlRGlyZWN0aW9uLlN0cmFmaW5nUmlnaHQ7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0dGhpcy5wbGF5ZXJNb3ZlRGlyZWN0aW9uID0gUFJPSkVDVC5QbGF5ZXJNb3ZlRGlyZWN0aW9uLlN0YXRpb25hcnk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmICh0aGlzLm9uUHJlVXBkYXRlT2JzZXJ2YWJsZS5oYXNPYnNlcnZlcnMoKSA9PT0gdHJ1ZSkge1xyXG5cdFx0XHRcdHRoaXMub25QcmVVcGRhdGVPYnNlcnZhYmxlLm5vdGlmeU9ic2VydmVycyh0aGlzLnRyYW5zZm9ybSk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHRoaXMuY2FtZXJhRm9yd2FyZFZlY3Rvci5jb3B5RnJvbSh0aGlzLmNhbWVyYVBpdm90LmZvcndhcmQpO1xyXG5cdFx0XHR0aGlzLmNhbWVyYUZvcndhcmRWZWN0b3IueSA9IDA7XHJcblx0XHRcdHRoaXMuY2FtZXJhRm9yd2FyZFZlY3Rvci5ub3JtYWxpemUoKTtcclxuXHRcdFx0dGhpcy5jYW1lcmFGb3J3YXJkVmVjdG9yLnNjYWxlVG9SZWYoXHJcblx0XHRcdFx0dGhpcy5wbGF5ZXJJbnB1dFosXHJcblx0XHRcdFx0dGhpcy5kZXNpcmVkRm9yd2FyZFZlY3RvclxyXG5cdFx0XHQpO1xyXG5cclxuXHRcdFx0dGhpcy5jYW1lcmFSaWdodFZlY3Rvci5jb3B5RnJvbSh0aGlzLmNhbWVyYVBpdm90LnJpZ2h0KTtcclxuXHRcdFx0dGhpcy5jYW1lcmFSaWdodFZlY3Rvci55ID0gMDtcclxuXHRcdFx0dGhpcy5jYW1lcmFSaWdodFZlY3Rvci5ub3JtYWxpemUoKTtcclxuXHRcdFx0dGhpcy5jYW1lcmFSaWdodFZlY3Rvci5zY2FsZVRvUmVmKFxyXG5cdFx0XHRcdHRoaXMucGxheWVySW5wdXRYLFxyXG5cdFx0XHRcdHRoaXMuZGVzaXJlZFJpZ2h0VmVjdG9yXHJcblx0XHRcdCk7XHJcblxyXG5cdFx0XHR0aGlzLnBsYXllclJvdGF0aW9uVmVjdG9yLnkgKz1cclxuXHRcdFx0XHR0aGlzLnBsYXllck1vdXNlWCAqIHRoaXMubG9va1NwZWVkICogdGhpcy5kZWx0YVRpbWU7XHJcblx0XHRcdHRoaXMucGxheWVyUm90YXRpb25WZWN0b3IueCArPVxyXG5cdFx0XHRcdC10aGlzLnBsYXllck1vdXNlWSAqIHRoaXMubG9va1NwZWVkICogdGhpcy5kZWx0YVRpbWU7XHJcblx0XHRcdHRoaXMucGxheWVyUm90YXRpb25WZWN0b3IueCA9IEJBQllMT04uU2NhbGFyLkNsYW1wKFxyXG5cdFx0XHRcdHRoaXMucGxheWVyUm90YXRpb25WZWN0b3IueCxcclxuXHRcdFx0XHQtQkFCWUxPTi5Ub29scy5Ub1JhZGlhbnModGhpcy5kb3duTG9va0xpbWl0KSxcclxuXHRcdFx0XHRCQUJZTE9OLlRvb2xzLlRvUmFkaWFucyh0aGlzLnRvcExvb2tMaW1pdClcclxuXHRcdFx0KTtcclxuXHJcblx0XHRcdHRoaXMuaXNKdW1wUHJlc3NlZCA9XHJcblx0XHRcdFx0QkFCWUxPTi5TY2VuZU1hbmFnZXIuR2V0S2V5Ym9hcmRJbnB1dCh0aGlzLmtleWJvYXJkSnVtcCkgfHxcclxuXHRcdFx0XHRCQUJZTE9OLlNjZW5lTWFuYWdlci5HZXRHYW1lcGFkQnV0dG9uSW5wdXQodGhpcy5idXR0b25KdW1wKTtcclxuXHRcdFx0dGhpcy5pc1NwcmludFByZXNzZWQgPVxyXG5cdFx0XHRcdEJBQllMT04uU2NlbmVNYW5hZ2VyLkdldEtleWJvYXJkSW5wdXQodGhpcy5rZXlib2FyZFNwcmludCkgfHxcclxuXHRcdFx0XHRCQUJZTE9OLlNjZW5lTWFuYWdlci5HZXRHYW1lcGFkQnV0dG9uSW5wdXQodGhpcy5idXR0b25TcHJpbnQpO1xyXG5cclxuXHRcdFx0dGhpcy5tb3ZlbWVudFNwZWVkID1cclxuXHRcdFx0XHR0aGlzLmlucHV0TWFnbml0dWRlICogdGhpcy5tb3ZlU3BlZWQgKiB0aGlzLnNwZWVkRmFjdG9yO1xyXG5cdFx0XHRpZiAodGhpcy5yZXF1aXJlU3ByaW50QnV0dG9uID09PSB0cnVlKSB7XHJcblx0XHRcdFx0aWYgKFxyXG5cdFx0XHRcdFx0dGhpcy5pc1NwcmludFByZXNzZWQgPT09IGZhbHNlICYmXHJcblx0XHRcdFx0XHR0aGlzLm1vdmVtZW50U3BlZWQgPiB0aGlzLnNwcmludFRocmVzaG9sZFNwZWVkXHJcblx0XHRcdFx0KSB7XHJcblx0XHRcdFx0XHR0aGlzLm1vdmVtZW50U3BlZWQgPSB0aGlzLnNwcmludFRocmVzaG9sZFNwZWVkO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRpZiAoXHJcblx0XHRcdFx0dGhpcy5wbGF5ZXJDb250cm9sID09PSBQUk9KRUNULlBsYXllcklucHV0Q29udHJvbC5GaXJzdFBlcnNvblN0cmFmaW5nXHJcblx0XHRcdCkge1xyXG5cdFx0XHRcdHRoaXMuZGVzaXJlZEZvcndhcmRWZWN0b3IuYWRkVG9SZWYoXHJcblx0XHRcdFx0XHR0aGlzLmRlc2lyZWRSaWdodFZlY3RvcixcclxuXHRcdFx0XHRcdHRoaXMucGxheWVyTW92ZW1lbnRWZWxvY2l0eVxyXG5cdFx0XHRcdCk7XHJcblx0XHRcdFx0dGhpcy5wbGF5ZXJNb3ZlbWVudFZlbG9jaXR5LnNjYWxlSW5QbGFjZSh0aGlzLm1vdmVtZW50U3BlZWQpO1xyXG5cclxuXHRcdFx0XHRCQUJZTE9OLlF1YXRlcm5pb24uRnJvbUV1bGVyQW5nbGVzVG9SZWYoXHJcblx0XHRcdFx0XHQwLFxyXG5cdFx0XHRcdFx0dGhpcy5wbGF5ZXJSb3RhdGlvblZlY3Rvci55LFxyXG5cdFx0XHRcdFx0MCxcclxuXHRcdFx0XHRcdHRoaXMudHJhbnNmb3JtLnJvdGF0aW9uUXVhdGVybmlvblxyXG5cdFx0XHRcdCk7XHJcblx0XHRcdH0gZWxzZSBpZiAoXHJcblx0XHRcdFx0dGhpcy5wbGF5ZXJDb250cm9sID09PSBQUk9KRUNULlBsYXllcklucHV0Q29udHJvbC5UaGlyZFBlcnNvblN0cmFmaW5nIHx8XHJcblx0XHRcdFx0dGhpcy5wbGF5ZXJDb250cm9sID09PSBQUk9KRUNULlBsYXllcklucHV0Q29udHJvbC5UaGlyZFBlcnNvblR1cm5pbmdcclxuXHRcdFx0KSB7XHJcblx0XHRcdFx0dGhpcy5kZXNpcmVkRm9yd2FyZFZlY3Rvci5hZGRUb1JlZihcclxuXHRcdFx0XHRcdHRoaXMuZGVzaXJlZFJpZ2h0VmVjdG9yLFxyXG5cdFx0XHRcdFx0dGhpcy5wbGF5ZXJNb3ZlbWVudFZlbG9jaXR5XHJcblx0XHRcdFx0KTtcclxuXHRcdFx0XHR0aGlzLnBsYXllck1vdmVtZW50VmVsb2NpdHkuc2NhbGVJblBsYWNlKHRoaXMubW92ZW1lbnRTcGVlZCk7XHJcblxyXG5cdFx0XHRcdGlmICh0aGlzLmZyZWVMb29raW5nID09PSB0cnVlKSB7XHJcblx0XHRcdFx0XHRpZiAodGhpcy5pbnB1dE1hZ25pdHVkZSA+IDApIHtcclxuXHRcdFx0XHRcdFx0Y29uc3Qgc3RyYWZpbmdUdXJuUmF0aW86IG51bWJlciA9XHJcblx0XHRcdFx0XHRcdFx0dGhpcy5wbGF5ZXJNb3ZlbWVudFZlbG9jaXR5Lmxlbmd0aCgpIC8gdGhpcy5tb3ZlU3BlZWQ7XHJcblx0XHRcdFx0XHRcdGNvbnN0IHN0cmFmaW5nVHVyblNwZWVkOiBudW1iZXIgPSBCQUJZTE9OLlNjYWxhci5MZXJwKFxyXG5cdFx0XHRcdFx0XHRcdHRoaXMuaGlnaFR1cm5TcGVlZCxcclxuXHRcdFx0XHRcdFx0XHR0aGlzLmxvd1R1cm5TcGVlZCxcclxuXHRcdFx0XHRcdFx0XHRzdHJhZmluZ1R1cm5SYXRpb1xyXG5cdFx0XHRcdFx0XHQpO1xyXG5cdFx0XHRcdFx0XHRCQUJZTE9OLlF1YXRlcm5pb24uRnJvbUV1bGVyQW5nbGVzVG9SZWYoXHJcblx0XHRcdFx0XHRcdFx0MCxcclxuXHRcdFx0XHRcdFx0XHR0aGlzLnBsYXllclJvdGF0aW9uVmVjdG9yLnksXHJcblx0XHRcdFx0XHRcdFx0MCxcclxuXHRcdFx0XHRcdFx0XHR0aGlzLnBsYXllclJvdGF0aW9uUXVhdGVybmlvblxyXG5cdFx0XHRcdFx0XHQpO1xyXG5cdFx0XHRcdFx0XHRCQUJZTE9OLlF1YXRlcm5pb24uU2xlcnBUb1JlZihcclxuXHRcdFx0XHRcdFx0XHR0aGlzLnRyYW5zZm9ybS5yb3RhdGlvblF1YXRlcm5pb24sXHJcblx0XHRcdFx0XHRcdFx0dGhpcy5wbGF5ZXJSb3RhdGlvblF1YXRlcm5pb24sXHJcblx0XHRcdFx0XHRcdFx0c3RyYWZpbmdUdXJuU3BlZWQgKiB0aGlzLmRlbHRhVGltZSxcclxuXHRcdFx0XHRcdFx0XHR0aGlzLnRyYW5zZm9ybS5yb3RhdGlvblF1YXRlcm5pb25cclxuXHRcdFx0XHRcdFx0KTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0QkFCWUxPTi5RdWF0ZXJuaW9uLkZyb21FdWxlckFuZ2xlc1RvUmVmKFxyXG5cdFx0XHRcdFx0XHQwLFxyXG5cdFx0XHRcdFx0XHR0aGlzLnBsYXllclJvdGF0aW9uVmVjdG9yLnksXHJcblx0XHRcdFx0XHRcdDAsXHJcblx0XHRcdFx0XHRcdHRoaXMudHJhbnNmb3JtLnJvdGF0aW9uUXVhdGVybmlvblxyXG5cdFx0XHRcdFx0KTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0gZWxzZSBpZiAoXHJcblx0XHRcdFx0dGhpcy5wbGF5ZXJDb250cm9sID09PSBQUk9KRUNULlBsYXllcklucHV0Q29udHJvbC5UaGlyZFBlcnNvbkZvcndhcmRcclxuXHRcdFx0KSB7XHJcblx0XHRcdFx0dGhpcy5kZXNpcmVkRm9yd2FyZFZlY3Rvci5hZGRUb1JlZihcclxuXHRcdFx0XHRcdHRoaXMuZGVzaXJlZFJpZ2h0VmVjdG9yLFxyXG5cdFx0XHRcdFx0dGhpcy5wbGF5ZXJMb29rUm90YXRpb25cclxuXHRcdFx0XHQpO1xyXG5cdFx0XHRcdHRoaXMudHJhbnNmb3JtLmZvcndhcmQuc2NhbGVUb1JlZihcclxuXHRcdFx0XHRcdHRoaXMubW92ZW1lbnRTcGVlZCxcclxuXHRcdFx0XHRcdHRoaXMucGxheWVyTW92ZW1lbnRWZWxvY2l0eVxyXG5cdFx0XHRcdCk7XHJcblxyXG5cdFx0XHRcdGlmICh0aGlzLmlucHV0TWFnbml0dWRlID4gMCkge1xyXG5cdFx0XHRcdFx0Y29uc3QgZm9yd2FyZFR1cm5SYXRpbzogbnVtYmVyID1cclxuXHRcdFx0XHRcdFx0dGhpcy5wbGF5ZXJNb3ZlbWVudFZlbG9jaXR5Lmxlbmd0aCgpIC8gdGhpcy5tb3ZlU3BlZWQ7XHJcblx0XHRcdFx0XHRjb25zdCBmb3J3YXJkVHVyblNwZWVkOiBudW1iZXIgPSBCQUJZTE9OLlNjYWxhci5MZXJwKFxyXG5cdFx0XHRcdFx0XHR0aGlzLmhpZ2hUdXJuU3BlZWQsXHJcblx0XHRcdFx0XHRcdHRoaXMubG93VHVyblNwZWVkLFxyXG5cdFx0XHRcdFx0XHRmb3J3YXJkVHVyblJhdGlvXHJcblx0XHRcdFx0XHQpO1xyXG5cdFx0XHRcdFx0QkFCWUxPTi5VdGlsaXRpZXMuTG9va1JvdGF0aW9uVG9SZWYoXHJcblx0XHRcdFx0XHRcdHRoaXMucGxheWVyTG9va1JvdGF0aW9uLFxyXG5cdFx0XHRcdFx0XHR0aGlzLnBsYXllclJvdGF0aW9uUXVhdGVybmlvblxyXG5cdFx0XHRcdFx0KTtcclxuXHRcdFx0XHRcdEJBQllMT04uUXVhdGVybmlvbi5TbGVycFRvUmVmKFxyXG5cdFx0XHRcdFx0XHR0aGlzLnRyYW5zZm9ybS5yb3RhdGlvblF1YXRlcm5pb24sXHJcblx0XHRcdFx0XHRcdHRoaXMucGxheWVyUm90YXRpb25RdWF0ZXJuaW9uLFxyXG5cdFx0XHRcdFx0XHRmb3J3YXJkVHVyblNwZWVkICogdGhpcy5kZWx0YVRpbWUsXHJcblx0XHRcdFx0XHRcdHRoaXMudHJhbnNmb3JtLnJvdGF0aW9uUXVhdGVybmlvblxyXG5cdFx0XHRcdFx0KTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0dGhpcy52ZXJ0aWNhbFZlbG9jaXR5ID0gdGhpcy5nZXRWZXJ0aWNhbFZlbG9jaXR5KCk7XHJcblx0XHRcdHRoaXMubW92ZW1lbnRWZWxvY2l0eS5jb3B5RnJvbSh0aGlzLnBsYXllck1vdmVtZW50VmVsb2NpdHkpO1xyXG5cclxuXHRcdFx0dGhpcy5pc0NoYXJhY3Rlckdyb3VuZGVkID0gZmFsc2U7XHJcblx0XHRcdHRoaXMuaXNDaGFyYWN0ZXJTbGlkaW5nID0gZmFsc2U7XHJcblx0XHRcdHRoaXMuaXNDaGFyYWN0ZXJGYWxsaW5nID0gZmFsc2U7XHJcblx0XHRcdHRoaXMuaXNDaGFyYWN0ZXJKdW1wRnJhbWUgPSBmYWxzZTtcclxuXHRcdFx0dGhpcy5pc0NoYXJhY3Rlckp1bXBTcGVjaWFsID0gZmFsc2U7XHJcblx0XHRcdHRoaXMuaXNDaGFyYWN0ZXJOYXZpZ2F0aW5nID1cclxuXHRcdFx0XHR0aGlzLm5hdmlnYXRpb25BZ2VudCAhPSBudWxsICYmIHRoaXMubmF2aWdhdGlvbkFnZW50LmlzTmF2aWdhdGluZygpO1xyXG5cdFx0XHRpZiAodGhpcy5jaGFyYWN0ZXJDb250cm9sbGVyICE9IG51bGwpIHtcclxuXHRcdFx0XHR0aGlzLnVwZGF0ZUNoYXJhY3RlckNvbnRyb2xsZXIoKTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHR0aGlzLnVwZGF0ZUNoZWNrQ29sbGlzaW9ucygpO1xyXG5cdFx0XHRcdHRoaXMudXBkYXRlQ2FtZXJhQ29udHJvbGxlcigpO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpZiAodGhpcy5hbmltYXRpb25TdGF0ZSAhPSBudWxsICYmIHRoaXMudXBkYXRlU3RhdGVQYXJhbXMgPT09IHRydWUpIHtcclxuXHRcdFx0XHR0aGlzLnZhbGlkYXRlQW5pbWF0aW9uU3RhdGVQYXJhbXMoKTtcclxuXHRcdFx0XHR0aGlzLmFuaW1hdGlvblN0YXRlLnNldEludGVnZXIoXHJcblx0XHRcdFx0XHR0aGlzLmFuaW1hdGlvblN0YXRlUGFyYW1zLm1vdmVEaXJlY3Rpb24sXHJcblx0XHRcdFx0XHR0aGlzLnBsYXllck1vdmVEaXJlY3Rpb25cclxuXHRcdFx0XHQpO1xyXG5cclxuXHRcdFx0XHR0aGlzLmFuaW1hdGlvblN0YXRlLnNldEZsb2F0KFxyXG5cdFx0XHRcdFx0dGhpcy5hbmltYXRpb25TdGF0ZVBhcmFtcy5pbnB1dE1hZ25pdHVkZSxcclxuXHRcdFx0XHRcdHRoaXMuaW5wdXRNYWduaXR1ZGVcclxuXHRcdFx0XHQpO1xyXG5cclxuXHRcdFx0XHR0aGlzLmFuaW1hdGlvblN0YXRlLnNldEZsb2F0KFxyXG5cdFx0XHRcdFx0dGhpcy5hbmltYXRpb25TdGF0ZVBhcmFtcy5ob3Jpem9udGFsSW5wdXQsXHJcblx0XHRcdFx0XHR0aGlzLnBsYXllcklucHV0WFxyXG5cdFx0XHRcdCk7XHJcblxyXG5cdFx0XHRcdHRoaXMuYW5pbWF0aW9uU3RhdGUuc2V0RmxvYXQoXHJcblx0XHRcdFx0XHR0aGlzLmFuaW1hdGlvblN0YXRlUGFyYW1zLnZlcnRpY2FsSW5wdXQsXHJcblx0XHRcdFx0XHR0aGlzLnBsYXllcklucHV0WlxyXG5cdFx0XHRcdCk7XHJcblxyXG5cdFx0XHRcdHRoaXMuYW5pbWF0aW9uU3RhdGUuc2V0RmxvYXQoXHJcblx0XHRcdFx0XHR0aGlzLmFuaW1hdGlvblN0YXRlUGFyYW1zLm1vdXNlWElucHV0LFxyXG5cdFx0XHRcdFx0dGhpcy5wbGF5ZXJNb3VzZVhcclxuXHRcdFx0XHQpO1xyXG5cclxuXHRcdFx0XHR0aGlzLmFuaW1hdGlvblN0YXRlLnNldEZsb2F0KFxyXG5cdFx0XHRcdFx0dGhpcy5hbmltYXRpb25TdGF0ZVBhcmFtcy5tb3VzZVlJbnB1dCxcclxuXHRcdFx0XHRcdHRoaXMucGxheWVyTW91c2VZXHJcblx0XHRcdFx0KTtcclxuXHJcblx0XHRcdFx0dGhpcy5hbmltYXRpb25TdGF0ZS5zZXRGbG9hdChcclxuXHRcdFx0XHRcdHRoaXMuYW5pbWF0aW9uU3RhdGVQYXJhbXMuaGVpZ2h0SW5wdXQsXHJcblx0XHRcdFx0XHR0aGlzLnZlcnRpY2FsVmVsb2NpdHlcclxuXHRcdFx0XHQpO1xyXG5cclxuXHRcdFx0XHR0aGlzLmFuaW1hdGlvblN0YXRlLnNldEZsb2F0KFxyXG5cdFx0XHRcdFx0dGhpcy5hbmltYXRpb25TdGF0ZVBhcmFtcy5zcGVlZElucHV0LFxyXG5cdFx0XHRcdFx0dGhpcy5tb3ZlbWVudFNwZWVkXHJcblx0XHRcdFx0KTtcclxuXHJcblx0XHRcdFx0dGhpcy5hbmltYXRpb25TdGF0ZS5zZXRCb29sKFxyXG5cdFx0XHRcdFx0dGhpcy5hbmltYXRpb25TdGF0ZVBhcmFtcy5qdW1wSW5wdXQsXHJcblx0XHRcdFx0XHR0aGlzLmlzQ2hhcmFjdGVySnVtcEZyYW1lXHJcblx0XHRcdFx0KTtcclxuXHJcblx0XHRcdFx0dGhpcy5hbmltYXRpb25TdGF0ZS5zZXRCb29sKFxyXG5cdFx0XHRcdFx0dGhpcy5hbmltYXRpb25TdGF0ZVBhcmFtcy5qdW1wU3RhdGUsXHJcblx0XHRcdFx0XHR0aGlzLmlzQ2hhcmFjdGVySnVtcGluZ1xyXG5cdFx0XHRcdCk7XHJcblxyXG5cdFx0XHRcdHRoaXMuYW5pbWF0aW9uU3RhdGUuc2V0Qm9vbChcclxuXHRcdFx0XHRcdHRoaXMuYW5pbWF0aW9uU3RhdGVQYXJhbXMuZmFsbGluZ1N0YXRlLFxyXG5cdFx0XHRcdFx0dGhpcy5pc0NoYXJhY3RlckZhbGxpbmdcclxuXHRcdFx0XHQpO1xyXG5cclxuXHRcdFx0XHR0aGlzLmFuaW1hdGlvblN0YXRlLnNldEJvb2woXHJcblx0XHRcdFx0XHR0aGlzLmFuaW1hdGlvblN0YXRlUGFyYW1zLnNsaWRpbmdTdGF0ZSxcclxuXHRcdFx0XHRcdHRoaXMuaXNDaGFyYWN0ZXJTbGlkaW5nXHJcblx0XHRcdFx0KTtcclxuXHJcblx0XHRcdFx0dGhpcy5hbmltYXRpb25TdGF0ZS5zZXRCb29sKFxyXG5cdFx0XHRcdFx0dGhpcy5hbmltYXRpb25TdGF0ZVBhcmFtcy5zcGVjaWFsU3RhdGUsXHJcblx0XHRcdFx0XHR0aGlzLmlzQ2hhcmFjdGVySnVtcFNwZWNpYWxcclxuXHRcdFx0XHQpO1xyXG5cclxuXHRcdFx0XHR0aGlzLmFuaW1hdGlvblN0YXRlLnNldEJvb2woXHJcblx0XHRcdFx0XHR0aGlzLmFuaW1hdGlvblN0YXRlUGFyYW1zLmdyb3VuZGVkU3RhdGUsXHJcblx0XHRcdFx0XHR0aGlzLmlzQ2hhcmFjdGVyR3JvdW5kZWRcclxuXHRcdFx0XHQpO1xyXG5cclxuXHRcdFx0XHR0aGlzLmFuaW1hdGlvblN0YXRlLnNldEJvb2woXHJcblx0XHRcdFx0XHR0aGlzLmFuaW1hdGlvblN0YXRlUGFyYW1zLnNwZWxsT25lU3RhdGUsXHJcblx0XHRcdFx0XHR0aGlzLnNwZWxsT25lU3RhdGVcclxuXHRcdFx0XHQpO1xyXG5cclxuXHRcdFx0XHRpZiAodGhpcy5pc0NoYXJhY3Rlck5hdmlnYXRpbmcgPT09IHRydWUpIHtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmICh0aGlzLm9uUG9zdFVwZGF0ZU9ic2VydmFibGUuaGFzT2JzZXJ2ZXJzKCkgPT09IHRydWUpIHtcclxuXHRcdFx0XHR0aGlzLm9uUG9zdFVwZGF0ZU9ic2VydmFibGUubm90aWZ5T2JzZXJ2ZXJzKHRoaXMudHJhbnNmb3JtKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHByaXZhdGUgdXBkYXRlQ2hhcmFjdGVyQ29udHJvbGxlcigpOiB2b2lkIHtcclxuXHRcdFx0aWYgKHRoaXMuY2hhcmFjdGVyQ29udHJvbGxlciAhPSBudWxsKSB7XHJcblx0XHRcdFx0dGhpcy5jYXN0UGh5c2ljc0dyb3VuZENoZWNrUmF5KCk7XHJcblx0XHRcdFx0Y29uc3Qgc2xvcGVBbmdsZUxlbmd0aDogbnVtYmVyID0gMDtcclxuXHRcdFx0XHRjb25zdCBtaW5Hcm91bmREaXN0YW5jZUxlbmd0aDogbnVtYmVyID1cclxuXHRcdFx0XHRcdFBST0pFQ1QuVW5pdmVyc2FsUGxheWVyQ29udHJvbGxlci5NSU5fR1JPVU5EX0RJU1RBTkNFICtcclxuXHRcdFx0XHRcdHNsb3BlQW5nbGVMZW5ndGg7XHJcblx0XHRcdFx0dGhpcy5ncm91bmRDb2xsaXNpb24gPVxyXG5cdFx0XHRcdFx0dGhpcy5ncm91bmRIaXQgPT09IHRydWUgJiZcclxuXHRcdFx0XHRcdHRoaXMuZ3JvdW5kRGlzdGFuY2UgPD0gbWluR3JvdW5kRGlzdGFuY2VMZW5ndGggJiZcclxuXHRcdFx0XHRcdCh0aGlzLm5vcm1hbEFuZ2xlIDw9IDAgfHwgdGhpcy5ncm91bmROb3JtYWwueSA+PSB0aGlzLm5vcm1hbEFuZ2xlKTtcclxuXHRcdFx0XHRpZiAodGhpcy5ncm91bmRDb2xsaXNpb24gPT09IHRydWUgJiYgdGhpcy5taW5KdW1wVGltZXIgPD0gMCkge1xyXG5cdFx0XHRcdFx0aWYgKFxyXG5cdFx0XHRcdFx0XHR0aGlzLnZlcnRpY2FsVmVsb2NpdHkgPT09IDAgfHxcclxuXHRcdFx0XHRcdFx0KHRoaXMuZ3JvdW5kQW5nbGUgPiAwICYmIHRoaXMudmVydGljYWxWZWxvY2l0eSA+IDApXHJcblx0XHRcdFx0XHQpIHtcclxuXHRcdFx0XHRcdFx0dGhpcy5pc0NoYXJhY3RlclNsaWRpbmcgPSBmYWxzZTtcclxuXHRcdFx0XHRcdFx0dGhpcy5pc0NoYXJhY3Rlckdyb3VuZGVkID0gdHJ1ZTtcclxuXHRcdFx0XHRcdH0gZWxzZSBpZiAodGhpcy5ncm91bmRBbmdsZSA+IDAgJiYgdGhpcy52ZXJ0aWNhbFZlbG9jaXR5IDwgMCkge1xyXG5cdFx0XHRcdFx0XHR0aGlzLmlzQ2hhcmFjdGVyU2xpZGluZyA9IHRydWU7XHJcblx0XHRcdFx0XHRcdHRoaXMuaXNDaGFyYWN0ZXJHcm91bmRlZCA9IGZhbHNlO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0aWYgKHRoaXMuaXNDaGFyYWN0ZXJHcm91bmRlZCA9PT0gdHJ1ZSkgdGhpcy5pc0NoYXJhY3Rlckp1bXBpbmcgPSBmYWxzZTtcclxuXHRcdFx0XHR0aGlzLmlzQ2hhcmFjdGVyRmFsbGluZyA9XHJcblx0XHRcdFx0XHR0aGlzLmlzQ2hhcmFjdGVyR3JvdW5kZWQgPT09IGZhbHNlICYmXHJcblx0XHRcdFx0XHR0aGlzLmlzQ2hhcmFjdGVyU2xpZGluZyA9PSBmYWxzZSAmJlxyXG5cdFx0XHRcdFx0dGhpcy5pc0NoYXJhY3Rlckp1bXBpbmcgPT0gZmFsc2UgJiZcclxuXHRcdFx0XHRcdHRoaXMudmVydGljYWxWZWxvY2l0eSA8IDAgJiZcclxuXHRcdFx0XHRcdE1hdGguYWJzKHRoaXMudmVydGljYWxWZWxvY2l0eSkgPj0gdGhpcy5taW5GYWxsVmVsb2NpdHk7XHJcblx0XHRcdFx0aWYgKFxyXG5cdFx0XHRcdFx0dGhpcy5pc0NoYXJhY3RlckZhbGxpbmcgPT09IHRydWUgJiZcclxuXHRcdFx0XHRcdHRoaXMuaXNDaGFyYWN0ZXJGYWxsVHJpZ2dlcmVkID09PSBmYWxzZVxyXG5cdFx0XHRcdCkge1xyXG5cdFx0XHRcdFx0dGhpcy5pc0NoYXJhY3RlckZhbGxUcmlnZ2VyZWQgPSB0cnVlO1xyXG5cdFx0XHRcdFx0aWYgKHRoaXMuanVtcERlbGF5ID4gMCkgdGhpcy5kZWxheUp1bXBUaW1lciA9IHRoaXMuanVtcERlbGF5O1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRpZiAodGhpcy5pc0NoYXJhY3Rlckdyb3VuZGVkID09PSB0cnVlKVxyXG5cdFx0XHRcdFx0dGhpcy5pc0NoYXJhY3RlckZhbGxUcmlnZ2VyZWQgPSBmYWxzZTtcclxuXHJcblx0XHRcdFx0aWYgKHRoaXMubW92ZVdpdGhDb2xsaXNpb24gPT09IGZhbHNlKSByZXR1cm47XHJcblx0XHRcdFx0aWYgKHRoaXMuaXNDaGFyYWN0ZXJOYXZpZ2F0aW5nID09PSBmYWxzZSkge1xyXG5cdFx0XHRcdFx0aWYgKHRoaXMuaXNDaGFyYWN0ZXJHcm91bmRlZCA9PT0gdHJ1ZSkge1xyXG5cdFx0XHRcdFx0XHRpZiAodGhpcy5kZWxheUp1bXBUaW1lciA8PSAwKVxyXG5cdFx0XHRcdFx0XHRcdHRoaXMuaXNDaGFyYWN0ZXJKdW1wRnJhbWUgPVxyXG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5qdW1wQWxsb3dlZCA9PT0gdHJ1ZSAmJiB0aGlzLmlzSnVtcFByZXNzZWQgPT09IHRydWU7XHJcblx0XHRcdFx0XHRcdGlmIChcclxuXHRcdFx0XHRcdFx0XHR0aGlzLmlzQ2hhcmFjdGVySnVtcEZyYW1lID09PSB0cnVlICYmXHJcblx0XHRcdFx0XHRcdFx0dGhpcy5jYW5TcGVjaWFsSnVtcCAhPSBudWxsICYmXHJcblx0XHRcdFx0XHRcdFx0dGhpcy5jYW5TcGVjaWFsSnVtcCgpID09PSB0cnVlXHJcblx0XHRcdFx0XHRcdCkge1xyXG5cdFx0XHRcdFx0XHRcdHRoaXMuaXNDaGFyYWN0ZXJKdW1wRnJhbWUgPSBmYWxzZTtcclxuXHRcdFx0XHRcdFx0XHR0aGlzLmlzQ2hhcmFjdGVySnVtcFNwZWNpYWwgPSB0cnVlO1xyXG5cdFx0XHRcdFx0XHRcdHRoaXMuaXNDaGFyYWN0ZXJKdW1waW5nID0gZmFsc2U7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0aWYgKHRoaXMuaXNDaGFyYWN0ZXJKdW1wRnJhbWUgPT09IHRydWUgJiYgdGhpcy5qdW1wU3BlZWQgPiAwKSB7XHJcblx0XHRcdFx0XHRcdFx0dGhpcy5pc0NoYXJhY3Rlckp1bXBpbmcgPSB0cnVlO1xyXG5cdFx0XHRcdFx0XHRcdHRoaXMuY2hhcmFjdGVyQ29udHJvbGxlci5qdW1wKHRoaXMuanVtcFNwZWVkKTtcclxuXHRcdFx0XHRcdFx0XHRpZiAodGhpcy5qdW1wRGVsYXkgPiAwKSB0aGlzLmRlbGF5SnVtcFRpbWVyID0gdGhpcy5qdW1wRGVsYXk7XHJcblx0XHRcdFx0XHRcdFx0aWYgKHRoaXMuYWlyYm9yblRpbWVvdXQgPiAwKVxyXG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5taW5KdW1wVGltZXIgPSB0aGlzLmFpcmJvcm5UaW1lb3V0ICsgdGhpcy5kZWx0YVRpbWU7XHJcblx0XHRcdFx0XHRcdFx0dGhpcy5sYXN0SnVtcFZlbG9jaXR5LnNldChcclxuXHRcdFx0XHRcdFx0XHRcdHRoaXMubW92ZW1lbnRWZWxvY2l0eS54LFxyXG5cdFx0XHRcdFx0XHRcdFx0MCxcclxuXHRcdFx0XHRcdFx0XHRcdHRoaXMubW92ZW1lbnRWZWxvY2l0eS56XHJcblx0XHRcdFx0XHRcdFx0KTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0aWYgKHRoaXMub25CZWZvcmVNb3ZlT2JzZXJ2YWJsZS5oYXNPYnNlcnZlcnMoKSA9PT0gdHJ1ZSkge1xyXG5cdFx0XHRcdFx0XHRcdHRoaXMub25CZWZvcmVNb3ZlT2JzZXJ2YWJsZS5ub3RpZnlPYnNlcnZlcnModGhpcy50cmFuc2Zvcm0pO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdHRoaXMubW92ZW1lbnRWZWxvY2l0eS5zY2FsZUluUGxhY2UodGhpcy5kZWx0YVRpbWUpO1xyXG5cdFx0XHRcdFx0XHR0aGlzLmNoYXJhY3RlckNvbnRyb2xsZXIubW92ZSh0aGlzLm1vdmVtZW50VmVsb2NpdHkpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHR0aGlzLmNoYXJhY3RlckNvbnRyb2xsZXIuc2V0R2hvc3RXb3JsZFBvc2l0aW9uKFxyXG5cdFx0XHRcdFx0XHR0aGlzLnRyYW5zZm9ybS5wb3NpdGlvblxyXG5cdFx0XHRcdFx0KTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRwcml2YXRlIHVwZGF0ZUNoZWNrQ29sbGlzaW9ucygpOiB2b2lkIHtcclxuXHRcdFx0aWYgKHRoaXMuYWJzdHJhY3RNZXNoICE9IG51bGwpIHtcclxuXHRcdFx0XHRjb25zdCBwaWNrOiBCQUJZTE9OLlBpY2tpbmdJbmZvID0gdGhpcy5waWNrQ2hlY2tDb2xsaXNpb25zUmF5Y2FzdCgpO1xyXG5cclxuXHRcdFx0XHR0aGlzLmdyb3VuZEhpdCA9IHBpY2sgIT0gbnVsbCAmJiBwaWNrLmhpdDtcclxuXHRcdFx0XHR0aGlzLmdyb3VuZE5vZGUgPSBwaWNrICE9IG51bGwgJiYgcGljay5oaXQgPyBwaWNrLnBpY2tlZE1lc2ggOiBudWxsO1xyXG5cdFx0XHRcdGlmIChwaWNrICE9IG51bGwgJiYgcGljay5oaXQgJiYgcGljay5waWNrZWRQb2ludCAhPSBudWxsKSB7XHJcblx0XHRcdFx0XHR0aGlzLmdyb3VuZFBvaW50LmNvcHlGcm9tKHBpY2sucGlja2VkUG9pbnQpO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHR0aGlzLmdyb3VuZFBvaW50LnNldCgwLCAwLCAwKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0aWYgKHBpY2sgIT0gbnVsbCkge1xyXG5cdFx0XHRcdFx0Y29uc3QgcGlja05vcm1hbDogQkFCWUxPTi5WZWN0b3IzID0gcGljay5nZXROb3JtYWwodHJ1ZSk7XHJcblx0XHRcdFx0XHRpZiAocGlja05vcm1hbCAhPSBudWxsKSB7XHJcblx0XHRcdFx0XHRcdHRoaXMuZ3JvdW5kTm9ybWFsLmNvcHlGcm9tKHBpY2tOb3JtYWwpO1xyXG5cdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0dGhpcy5ncm91bmROb3JtYWwuc2V0KDAsIDAsIDApO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHR0aGlzLmdyb3VuZE5vcm1hbC5zZXQoMCwgMCwgMCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHRoaXMuZ3JvdW5kQW5nbGUgPVxyXG5cdFx0XHRcdFx0dGhpcy5ncm91bmRIaXQgPT09IHRydWVcclxuXHRcdFx0XHRcdFx0PyBNYXRoLmFicyhcclxuXHRcdFx0XHRcdFx0XHRcdEJBQllMT04uVXRpbGl0aWVzLkdldEFuZ2xlKFxyXG5cdFx0XHRcdFx0XHRcdFx0XHR0aGlzLmdyb3VuZE5vcm1hbCxcclxuXHRcdFx0XHRcdFx0XHRcdFx0QkFCWUxPTi5WZWN0b3IzLlVwUmVhZE9ubHlcclxuXHRcdFx0XHRcdFx0XHRcdClcclxuXHRcdFx0XHRcdFx0ICApXHJcblx0XHRcdFx0XHRcdDogMDtcclxuXHRcdFx0XHRpZiAodGhpcy5ncm91bmRBbmdsZSA+PSA4OCkgdGhpcy5ncm91bmRBbmdsZSA9IDA7XHJcblx0XHRcdFx0dGhpcy5ncm91bmREaXN0YW5jZSA9XHJcblx0XHRcdFx0XHRwaWNrICE9IG51bGwgJiYgcGljay5oaXQgPyBwaWNrLmRpc3RhbmNlIC0gdGhpcy5yYXlPcmlnaW4gOiAtMTtcclxuXHJcblx0XHRcdFx0bGV0IG1pbkdyb3VuZERpc3RhbmNlTGVuZ3RoOiBudW1iZXIgPSAwLjE7XHJcblx0XHRcdFx0dGhpcy5ncm91bmRDb2xsaXNpb24gPVxyXG5cdFx0XHRcdFx0dGhpcy5ncm91bmRIaXQgPT09IHRydWUgJiZcclxuXHRcdFx0XHRcdHRoaXMuZ3JvdW5kRGlzdGFuY2UgPD0gbWluR3JvdW5kRGlzdGFuY2VMZW5ndGg7XHJcblxyXG5cdFx0XHRcdGlmICh0aGlzLmdyb3VuZENvbGxpc2lvbiA9PT0gdHJ1ZSAmJiB0aGlzLm1pbkp1bXBUaW1lciA8PSAwKSB7XHJcblx0XHRcdFx0XHRpZiAoXHJcblx0XHRcdFx0XHRcdHRoaXMudmVydGljYWxWZWxvY2l0eSA9PT0gMCB8fFxyXG5cdFx0XHRcdFx0XHQodGhpcy5ncm91bmRBbmdsZSA+IDAgJiYgdGhpcy52ZXJ0aWNhbFZlbG9jaXR5ID4gMClcclxuXHRcdFx0XHRcdCkge1xyXG5cdFx0XHRcdFx0XHR0aGlzLmlzQ2hhcmFjdGVyU2xpZGluZyA9IGZhbHNlO1xyXG5cdFx0XHRcdFx0XHR0aGlzLmlzQ2hhcmFjdGVyR3JvdW5kZWQgPSB0cnVlO1xyXG5cdFx0XHRcdFx0fSBlbHNlIGlmICh0aGlzLmdyb3VuZEFuZ2xlID4gMCAmJiB0aGlzLnZlcnRpY2FsVmVsb2NpdHkgPCAwKSB7XHJcblx0XHRcdFx0XHRcdHRoaXMuaXNDaGFyYWN0ZXJTbGlkaW5nID0gdHJ1ZTtcclxuXHRcdFx0XHRcdFx0dGhpcy5pc0NoYXJhY3Rlckdyb3VuZGVkID0gZmFsc2U7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGNvbnN0IG1heFNsb3BlTGltaXQ6IG51bWJlciA9IHRoaXMubWF4QW5nbGU7XHJcblx0XHRcdFx0aWYgKHRoaXMuaXNDaGFyYWN0ZXJHcm91bmRlZCA9PT0gdHJ1ZSkgdGhpcy5pc0NoYXJhY3Rlckp1bXBpbmcgPSBmYWxzZTtcclxuXHRcdFx0XHR0aGlzLmlzQ2hhcmFjdGVyRmFsbGluZyA9XHJcblx0XHRcdFx0XHR0aGlzLmlzQ2hhcmFjdGVyR3JvdW5kZWQgPT09IGZhbHNlICYmXHJcblx0XHRcdFx0XHR0aGlzLmlzQ2hhcmFjdGVyU2xpZGluZyA9PSBmYWxzZSAmJlxyXG5cdFx0XHRcdFx0dGhpcy5pc0NoYXJhY3Rlckp1bXBpbmcgPT0gZmFsc2UgJiZcclxuXHRcdFx0XHRcdHRoaXMudmVydGljYWxWZWxvY2l0eSA8IDAgJiZcclxuXHRcdFx0XHRcdE1hdGguYWJzKHRoaXMudmVydGljYWxWZWxvY2l0eSkgPj0gdGhpcy5taW5GYWxsVmVsb2NpdHk7XHJcblx0XHRcdFx0aWYgKFxyXG5cdFx0XHRcdFx0dGhpcy5pc0NoYXJhY3RlckZhbGxpbmcgPT09IHRydWUgJiZcclxuXHRcdFx0XHRcdHRoaXMuaXNDaGFyYWN0ZXJGYWxsVHJpZ2dlcmVkID09PSBmYWxzZVxyXG5cdFx0XHRcdCkge1xyXG5cdFx0XHRcdFx0dGhpcy5pc0NoYXJhY3RlckZhbGxUcmlnZ2VyZWQgPSB0cnVlO1xyXG5cdFx0XHRcdFx0aWYgKHRoaXMuanVtcERlbGF5ID4gMCkgdGhpcy5kZWxheUp1bXBUaW1lciA9IHRoaXMuanVtcERlbGF5O1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRpZiAodGhpcy5pc0NoYXJhY3Rlckdyb3VuZGVkID09PSB0cnVlKVxyXG5cdFx0XHRcdFx0dGhpcy5pc0NoYXJhY3RlckZhbGxUcmlnZ2VyZWQgPSBmYWxzZTtcclxuXHJcblx0XHRcdFx0aWYgKHRoaXMuZ3Jhdml0YXRpb25hbEZvcmNlID4gMCkge1xyXG5cdFx0XHRcdFx0dGhpcy5ncm91bmRWZWxvY2l0eSAtPSB0aGlzLmdyYXZpdGF0aW9uYWxGb3JjZSAqIHRoaXMuZGVsdGFUaW1lO1xyXG5cdFx0XHRcdFx0aWYgKFxyXG5cdFx0XHRcdFx0XHR0aGlzLmdyb3VuZFZlbG9jaXR5ID4gMCAmJlxyXG5cdFx0XHRcdFx0XHR0aGlzLmp1bXBTcGVlZCA+IDAgJiZcclxuXHRcdFx0XHRcdFx0dGhpcy5ncm91bmRWZWxvY2l0eSA+IHRoaXMuanVtcFNwZWVkXHJcblx0XHRcdFx0XHQpIHtcclxuXHRcdFx0XHRcdFx0dGhpcy5ncm91bmRWZWxvY2l0eSA9IHRoaXMuanVtcFNwZWVkO1xyXG5cdFx0XHRcdFx0fSBlbHNlIGlmIChcclxuXHRcdFx0XHRcdFx0dGhpcy5ncm91bmRWZWxvY2l0eSA8IDAgJiZcclxuXHRcdFx0XHRcdFx0TWF0aC5hYnModGhpcy5ncm91bmRWZWxvY2l0eSkgPiBNYXRoLmFicyh0aGlzLnRlcm1pbmFsVmVsb2NpdHkpXHJcblx0XHRcdFx0XHQpIHtcclxuXHRcdFx0XHRcdFx0dGhpcy5ncm91bmRWZWxvY2l0eSA9IC1NYXRoLmFicyh0aGlzLnRlcm1pbmFsVmVsb2NpdHkpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0aWYgKHRoaXMuaXNDaGFyYWN0ZXJHcm91bmRlZCA9PT0gdHJ1ZSAmJiB0aGlzLmdyb3VuZFZlbG9jaXR5IDwgLTEpIHtcclxuXHRcdFx0XHRcdFx0dGhpcy5ncm91bmRWZWxvY2l0eSA9IC0xO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0aWYgKHRoaXMubW92ZVdpdGhDb2xsaXNpb24gPT09IGZhbHNlKSByZXR1cm47XHJcblx0XHRcdFx0aWYgKHRoaXMuaXNDaGFyYWN0ZXJOYXZpZ2F0aW5nID09PSBmYWxzZSkge1xyXG5cdFx0XHRcdFx0aWYgKHRoaXMuaXNDaGFyYWN0ZXJHcm91bmRlZCA9PT0gdHJ1ZSkge1xyXG5cdFx0XHRcdFx0XHRpZiAodGhpcy5kZWxheUp1bXBUaW1lciA8PSAwKVxyXG5cdFx0XHRcdFx0XHRcdHRoaXMuaXNDaGFyYWN0ZXJKdW1wRnJhbWUgPVxyXG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5qdW1wQWxsb3dlZCA9PT0gdHJ1ZSAmJiB0aGlzLmlzSnVtcFByZXNzZWQgPT09IHRydWU7XHJcblx0XHRcdFx0XHRcdGlmIChcclxuXHRcdFx0XHRcdFx0XHR0aGlzLmlzQ2hhcmFjdGVySnVtcEZyYW1lID09PSB0cnVlICYmXHJcblx0XHRcdFx0XHRcdFx0dGhpcy5jYW5TcGVjaWFsSnVtcCAhPSBudWxsICYmXHJcblx0XHRcdFx0XHRcdFx0dGhpcy5jYW5TcGVjaWFsSnVtcCgpID09PSB0cnVlXHJcblx0XHRcdFx0XHRcdCkge1xyXG5cdFx0XHRcdFx0XHRcdHRoaXMuaXNDaGFyYWN0ZXJKdW1wRnJhbWUgPSBmYWxzZTtcclxuXHRcdFx0XHRcdFx0XHR0aGlzLmlzQ2hhcmFjdGVySnVtcFNwZWNpYWwgPSB0cnVlO1xyXG5cdFx0XHRcdFx0XHRcdHRoaXMuaXNDaGFyYWN0ZXJKdW1waW5nID0gZmFsc2U7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0aWYgKHRoaXMuaXNDaGFyYWN0ZXJKdW1wRnJhbWUgPT09IHRydWUgJiYgdGhpcy5qdW1wU3BlZWQgPiAwKSB7XHJcblx0XHRcdFx0XHRcdFx0dGhpcy5pc0NoYXJhY3Rlckp1bXBpbmcgPSB0cnVlO1xyXG5cdFx0XHRcdFx0XHRcdHRoaXMuZ3JvdW5kVmVsb2NpdHkgPSB0aGlzLmp1bXBTcGVlZDtcclxuXHRcdFx0XHRcdFx0XHRpZiAodGhpcy5qdW1wRGVsYXkgPiAwKSB0aGlzLmRlbGF5SnVtcFRpbWVyID0gdGhpcy5qdW1wRGVsYXk7XHJcblx0XHRcdFx0XHRcdFx0aWYgKHRoaXMuYWlyYm9yblRpbWVvdXQgPiAwKVxyXG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5taW5KdW1wVGltZXIgPSB0aGlzLmFpcmJvcm5UaW1lb3V0ICsgdGhpcy5kZWx0YVRpbWU7XHJcblx0XHRcdFx0XHRcdFx0dGhpcy5sYXN0SnVtcFZlbG9jaXR5LnNldChcclxuXHRcdFx0XHRcdFx0XHRcdHRoaXMubW92ZW1lbnRWZWxvY2l0eS54LFxyXG5cdFx0XHRcdFx0XHRcdFx0MCxcclxuXHRcdFx0XHRcdFx0XHRcdHRoaXMubW92ZW1lbnRWZWxvY2l0eS56XHJcblx0XHRcdFx0XHRcdFx0KTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0aWYgKHRoaXMuaXNDaGFyYWN0ZXJKdW1waW5nID09PSB0cnVlKSB7XHJcblx0XHRcdFx0XHRcdFx0dGhpcy5tb3ZlbWVudFZlbG9jaXR5LmNvcHlGcm9tKHRoaXMubGFzdEp1bXBWZWxvY2l0eSk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdHRoaXMubW92ZW1lbnRWZWxvY2l0eS5hZGRJblBsYWNlKHRoaXMuYWlyYm9yblZlbG9jaXR5KTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdHRoaXMubW92ZW1lbnRWZWxvY2l0eS55ID0gdGhpcy5ncm91bmRWZWxvY2l0eTtcclxuXHJcblx0XHRcdFx0XHRpZiAodGhpcy5vbkJlZm9yZU1vdmVPYnNlcnZhYmxlLmhhc09ic2VydmVycygpID09PSB0cnVlKSB7XHJcblx0XHRcdFx0XHRcdHRoaXMub25CZWZvcmVNb3ZlT2JzZXJ2YWJsZS5ub3RpZnlPYnNlcnZlcnModGhpcy50cmFuc2Zvcm0pO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0dGhpcy5tb3ZlbWVudFZlbG9jaXR5LnNjYWxlSW5QbGFjZSh0aGlzLmRlbHRhVGltZSk7XHJcblx0XHRcdFx0XHR0aGlzLmFic3RyYWN0TWVzaC5tb3ZlV2l0aENvbGxpc2lvbnModGhpcy5tb3ZlbWVudFZlbG9jaXR5KTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRwcml2YXRlIHVwZGF0ZUNhbWVyYUNvbnRyb2xsZXIoKTogdm9pZCB7XHJcblx0XHRcdGlmICh0aGlzLmVuYWJsZUlucHV0ID09PSBmYWxzZSkgcmV0dXJuO1xyXG5cdFx0XHRsZXQgYWxsb3dSb3RhdGlvbjogYm9vbGVhbiA9IHRoaXMucm90YXRlQ2FtZXJhO1xyXG5cclxuXHRcdFx0aWYgKHRoaXMuY2FtZXJhUGl2b3QgIT0gbnVsbCkge1xyXG5cdFx0XHRcdGlmIChcclxuXHRcdFx0XHRcdHRoaXMudGFyZ2V0Q2FtZXJhT2Zmc2V0LnggIT09IDAgfHxcclxuXHRcdFx0XHRcdHRoaXMudGFyZ2V0Q2FtZXJhT2Zmc2V0LnkgIT09IDAgfHxcclxuXHRcdFx0XHRcdHRoaXMudGFyZ2V0Q2FtZXJhT2Zmc2V0LnogIT09IDBcclxuXHRcdFx0XHQpIHtcclxuXHRcdFx0XHRcdHRoaXMuY2FtZXJhUGl2b3RPZmZzZXQuY29weUZyb20odGhpcy50YXJnZXRDYW1lcmFPZmZzZXQpO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRpZiAoXHJcblx0XHRcdFx0XHRcdHRoaXMucGxheWVyQ29udHJvbCA9PT1cclxuXHRcdFx0XHRcdFx0XHRQUk9KRUNULlBsYXllcklucHV0Q29udHJvbC5UaGlyZFBlcnNvblN0cmFmaW5nIHx8XHJcblx0XHRcdFx0XHRcdHRoaXMucGxheWVyQ29udHJvbCA9PT1cclxuXHRcdFx0XHRcdFx0XHRQUk9KRUNULlBsYXllcklucHV0Q29udHJvbC5UaGlyZFBlcnNvblR1cm5pbmcgfHxcclxuXHRcdFx0XHRcdFx0dGhpcy5wbGF5ZXJDb250cm9sID09PSBQUk9KRUNULlBsYXllcklucHV0Q29udHJvbC5UaGlyZFBlcnNvbkZvcndhcmRcclxuXHRcdFx0XHRcdCkge1xyXG5cdFx0XHRcdFx0XHR0aGlzLmNhbWVyYVBpdm90T2Zmc2V0LnNldCgwLCB0aGlzLnBpdm90SGVpZ2h0LCAwKTtcclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdHRoaXMuY2FtZXJhUGl2b3RPZmZzZXQuc2V0KDAsIHRoaXMuZXllc0hlaWdodCwgMCk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRCQUJZTE9OLlV0aWxpdGllcy5HZXRBYnNvbHV0ZVBvc2l0aW9uVG9SZWYoXHJcblx0XHRcdFx0XHR0aGlzLnRyYW5zZm9ybSxcclxuXHRcdFx0XHRcdHRoaXMuY2FtZXJhUGl2b3QucG9zaXRpb24sXHJcblx0XHRcdFx0XHR0aGlzLmNhbWVyYVBpdm90T2Zmc2V0XHJcblx0XHRcdFx0KTtcclxuXHJcblx0XHRcdFx0aWYgKGFsbG93Um90YXRpb24gPT09IHRydWUpIHtcclxuXHRcdFx0XHRcdEJBQllMT04uUXVhdGVybmlvbi5Gcm9tRXVsZXJBbmdsZXNUb1JlZihcclxuXHRcdFx0XHRcdFx0dGhpcy5wbGF5ZXJSb3RhdGlvblZlY3Rvci54LFxyXG5cdFx0XHRcdFx0XHR0aGlzLnBsYXllclJvdGF0aW9uVmVjdG9yLnksXHJcblx0XHRcdFx0XHRcdDAsXHJcblx0XHRcdFx0XHRcdHRoaXMuY2FtZXJhUGl2b3Qucm90YXRpb25RdWF0ZXJuaW9uXHJcblx0XHRcdFx0XHQpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRpZiAoYWxsb3dSb3RhdGlvbiA9PT0gdHJ1ZSAmJiB0aGlzLmNhbWVyYU5vZGUgIT0gbnVsbCkge1xyXG5cdFx0XHRcdGlmICh0aGlzLmNhbWVyYVNtb290aGluZyA8PSAwKSB0aGlzLmNhbWVyYVNtb290aGluZyA9IDUuMDtcclxuXHRcdFx0XHRpZiAoXHJcblx0XHRcdFx0XHR0aGlzLnBsYXllckNvbnRyb2wgPT09XHJcblx0XHRcdFx0XHRcdFBST0pFQ1QuUGxheWVySW5wdXRDb250cm9sLlRoaXJkUGVyc29uU3RyYWZpbmcgfHxcclxuXHRcdFx0XHRcdHRoaXMucGxheWVyQ29udHJvbCA9PT1cclxuXHRcdFx0XHRcdFx0UFJPSkVDVC5QbGF5ZXJJbnB1dENvbnRyb2wuVGhpcmRQZXJzb25UdXJuaW5nIHx8XHJcblx0XHRcdFx0XHR0aGlzLnBsYXllckNvbnRyb2wgPT09IFBST0pFQ1QuUGxheWVySW5wdXRDb250cm9sLlRoaXJkUGVyc29uRm9yd2FyZFxyXG5cdFx0XHRcdCkge1xyXG5cdFx0XHRcdFx0aWYgKHRoaXMuY2FtZXJhQ29sbGlzaW9ucyA9PT0gdHJ1ZSkge1xyXG5cdFx0XHRcdFx0XHRjb25zdCBtYXhEaXN0YW5jZTogbnVtYmVyID0gTWF0aC5hYnModGhpcy5ib29tUG9zaXRpb24ueik7XHJcblx0XHRcdFx0XHRcdGNvbnN0IHBhcmVudE5vZGU6IEJBQllMT04uVHJhbnNmb3JtTm9kZSA9IHRoaXMuY2FtZXJhTm9kZVxyXG5cdFx0XHRcdFx0XHRcdC5wYXJlbnQgYXMgQkFCWUxPTi5UcmFuc2Zvcm1Ob2RlO1xyXG5cdFx0XHRcdFx0XHR0aGlzLmRvbGx5RGlyZWN0aW9uLnNjYWxlVG9SZWYoXHJcblx0XHRcdFx0XHRcdFx0bWF4RGlzdGFuY2UsXHJcblx0XHRcdFx0XHRcdFx0dGhpcy5zY2FsZWRNYXhEaXJlY3Rpb25cclxuXHRcdFx0XHRcdFx0KTtcclxuXHRcdFx0XHRcdFx0dGhpcy5kb2xseURpcmVjdGlvbi5zY2FsZVRvUmVmKFxyXG5cdFx0XHRcdFx0XHRcdHRoaXMuY2FtZXJhRGlzdGFuY2UsXHJcblx0XHRcdFx0XHRcdFx0dGhpcy5zY2FsZWRDYW1EaXJlY3Rpb25cclxuXHRcdFx0XHRcdFx0KTtcclxuXHRcdFx0XHRcdFx0QkFCWUxPTi5VdGlsaXRpZXMuR2V0QWJzb2x1dGVQb3NpdGlvblRvUmVmKFxyXG5cdFx0XHRcdFx0XHRcdHBhcmVudE5vZGUsXHJcblx0XHRcdFx0XHRcdFx0dGhpcy5wYXJlbnROb2RlUG9zaXRpb25cclxuXHRcdFx0XHRcdFx0KTtcclxuXHRcdFx0XHRcdFx0QkFCWUxPTi5VdGlsaXRpZXMuVHJhbnNmb3JtUG9pbnRUb1JlZihcclxuXHRcdFx0XHRcdFx0XHRwYXJlbnROb2RlLFxyXG5cdFx0XHRcdFx0XHRcdHRoaXMuc2NhbGVkTWF4RGlyZWN0aW9uLFxyXG5cdFx0XHRcdFx0XHRcdHRoaXMubWF4aW11bUNhbWVyYVBvc1xyXG5cdFx0XHRcdFx0XHQpO1xyXG5cclxuXHRcdFx0XHRcdFx0bGV0IGNvbnRhY3Q6IGJvb2xlYW4gPSBmYWxzZTtcclxuXHRcdFx0XHRcdFx0bGV0IGRpc3RhbmNlOiBudW1iZXIgPSAwO1xyXG5cdFx0XHRcdFx0XHRpZiAodGhpcy5jaGFyYWN0ZXJDb250cm9sbGVyICE9IG51bGwpIHtcclxuXHRcdFx0XHRcdFx0XHRjb25zdCByYXljYXN0OiBCQUJZTE9OLlJheWNhc3RIaXRSZXN1bHQgPVxyXG5cdFx0XHRcdFx0XHRcdFx0QkFCWUxPTi5TY2VuZU1hbmFnZXIuUGh5c2ljc1NoYXBlY2FzdFRvUG9pbnQoXHJcblx0XHRcdFx0XHRcdFx0XHRcdHRoaXMuc2NlbmUsXHJcblx0XHRcdFx0XHRcdFx0XHRcdHRoaXMuY2FtZXJhUmF5Y2FzdFNoYXBlLFxyXG5cdFx0XHRcdFx0XHRcdFx0XHR0aGlzLnBhcmVudE5vZGVQb3NpdGlvbixcclxuXHRcdFx0XHRcdFx0XHRcdFx0dGhpcy5tYXhpbXVtQ2FtZXJhUG9zLFxyXG5cdFx0XHRcdFx0XHRcdFx0XHR0aGlzLmRlZmF1bHRSYXljYXN0R3JvdXAsXHJcblx0XHRcdFx0XHRcdFx0XHRcdHRoaXMuY2FtZXJhUmF5Y2FzdE1hc2tcclxuXHRcdFx0XHRcdFx0XHRcdCk7XHJcblx0XHRcdFx0XHRcdFx0Y29udGFjdCA9XHJcblx0XHRcdFx0XHRcdFx0XHRyYXljYXN0ICE9IG51bGwgJiZcclxuXHRcdFx0XHRcdFx0XHRcdHJheWNhc3QuaGFzSGl0ID09PSB0cnVlICYmXHJcblx0XHRcdFx0XHRcdFx0XHRyYXljYXN0LmNvbGxpc2lvbk9iamVjdCAhPSBudWxsICYmXHJcblx0XHRcdFx0XHRcdFx0XHRyYXljYXN0LmNvbGxpc2lvbk9iamVjdC5lbnRpdHkgIT0gbnVsbDtcclxuXHRcdFx0XHRcdFx0XHRkaXN0YW5jZSA9XHJcblx0XHRcdFx0XHRcdFx0XHRyYXljYXN0ICE9IG51bGwgJiYgcmF5Y2FzdC5oYXNIaXQgPT09IHRydWVcclxuXHRcdFx0XHRcdFx0XHRcdFx0PyByYXljYXN0LmhpdERpc3RhbmNlXHJcblx0XHRcdFx0XHRcdFx0XHRcdDogMDtcclxuXHRcdFx0XHRcdFx0XHRpZiAoY29udGFjdCA9PT0gdHJ1ZSkge1xyXG5cdFx0XHRcdFx0XHRcdFx0Y29uc3QgY29udGFjdFRhZzogc3RyaW5nID0gU00uR2V0VHJhbnNmb3JtVGFnKFxyXG5cdFx0XHRcdFx0XHRcdFx0XHRyYXljYXN0LmNvbGxpc2lvbk9iamVjdC5lbnRpdHlcclxuXHRcdFx0XHRcdFx0XHRcdCk7XHJcblx0XHRcdFx0XHRcdFx0XHRpZiAoXHJcblx0XHRcdFx0XHRcdFx0XHRcdHRoaXMuaWdub3JlVHJpZ2dlclRhZ3MgIT0gbnVsbCAmJlxyXG5cdFx0XHRcdFx0XHRcdFx0XHR0aGlzLmlnbm9yZVRyaWdnZXJUYWdzICE9PSBcIlwiICYmXHJcblx0XHRcdFx0XHRcdFx0XHRcdHRoaXMuaWdub3JlVHJpZ2dlclRhZ3MuaW5kZXhPZihjb250YWN0VGFnKSA+PSAwXHJcblx0XHRcdFx0XHRcdFx0XHQpIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0Y29udGFjdCA9IGZhbHNlO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRkaXN0YW5jZSA9IDA7XHJcblx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRcdHRoaXMuY2FtZXJhRm9yd2FyZC5zZXQoMCwgMCwgLTEpO1xyXG5cdFx0XHRcdFx0XHRcdEJBQllMT04uVXRpbGl0aWVzLlRyYW5zZm9ybVBvaW50VG9SZWYoXHJcblx0XHRcdFx0XHRcdFx0XHRwYXJlbnROb2RlLFxyXG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5jYW1lcmFGb3J3YXJkLFxyXG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5jYW1lcmFGb3J3YXJkXHJcblx0XHRcdFx0XHRcdFx0KTtcclxuXHRcdFx0XHRcdFx0XHR0aGlzLmNhbWVyYUZvcndhcmQuc3VidHJhY3RUb1JlZihcclxuXHRcdFx0XHRcdFx0XHRcdHRoaXMucGFyZW50Tm9kZVBvc2l0aW9uLFxyXG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5jYW1lcmFEaXJlY3Rpb25cclxuXHRcdFx0XHRcdFx0XHQpO1xyXG5cdFx0XHRcdFx0XHRcdHRoaXMuY2FtZXJhRGlyZWN0aW9uLm5vcm1hbGl6ZSgpO1xyXG5cclxuXHRcdFx0XHRcdFx0XHRjb25zdCBwaWNrOiBCQUJZTE9OLlBpY2tpbmdJbmZvID1cclxuXHRcdFx0XHRcdFx0XHRcdHRoaXMucGlja0NhbWVyYUNvbGxpc2lvbnNSYXljYXN0KFxyXG5cdFx0XHRcdFx0XHRcdFx0XHR0aGlzLnBhcmVudE5vZGVQb3NpdGlvbixcclxuXHRcdFx0XHRcdFx0XHRcdFx0dGhpcy5jYW1lcmFEaXJlY3Rpb24sXHJcblx0XHRcdFx0XHRcdFx0XHRcdHRoaXMubWF4aW11bUNhbWVyYVBvcy5sZW5ndGgoKVxyXG5cdFx0XHRcdFx0XHRcdFx0KTtcclxuXHRcdFx0XHRcdFx0XHRjb250YWN0ID0gcGljayAhPSBudWxsICYmIHBpY2suaGl0ICYmIHBpY2sucGlja2VkTWVzaCAhPSBudWxsO1xyXG5cdFx0XHRcdFx0XHRcdGRpc3RhbmNlID0gcGljayAhPSBudWxsICYmIHBpY2suZGlzdGFuY2U7XHJcblx0XHRcdFx0XHRcdFx0aWYgKGNvbnRhY3QgPT09IHRydWUpIHtcclxuXHRcdFx0XHRcdFx0XHRcdGNvbnN0IGNvbnRhY3RUYWc6IHN0cmluZyA9IFNNLkdldFRyYW5zZm9ybVRhZyhwaWNrLnBpY2tlZE1lc2gpO1xyXG5cdFx0XHRcdFx0XHRcdFx0aWYgKFxyXG5cdFx0XHRcdFx0XHRcdFx0XHR0aGlzLmlnbm9yZVRyaWdnZXJUYWdzICE9IG51bGwgJiZcclxuXHRcdFx0XHRcdFx0XHRcdFx0dGhpcy5pZ25vcmVUcmlnZ2VyVGFncyAhPT0gXCJcIiAmJlxyXG5cdFx0XHRcdFx0XHRcdFx0XHR0aGlzLmlnbm9yZVRyaWdnZXJUYWdzLmluZGV4T2YoY29udGFjdFRhZykgPj0gMFxyXG5cdFx0XHRcdFx0XHRcdFx0KSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdGNvbnRhY3QgPSBmYWxzZTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0ZGlzdGFuY2UgPSAwO1xyXG5cdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRpZiAoY29udGFjdCA9PT0gdHJ1ZSkge1xyXG5cdFx0XHRcdFx0XHRcdHRoaXMuY2FtZXJhRGlzdGFuY2UgPSBCQUJZTE9OLlNjYWxhci5DbGFtcChcclxuXHRcdFx0XHRcdFx0XHRcdGRpc3RhbmNlICogdGhpcy5kaXN0YW5jZUZhY3RvcixcclxuXHRcdFx0XHRcdFx0XHRcdHRoaXMubWluaW11bURpc3RhbmNlLFxyXG5cdFx0XHRcdFx0XHRcdFx0bWF4RGlzdGFuY2VcclxuXHRcdFx0XHRcdFx0XHQpO1xyXG5cclxuXHRcdFx0XHRcdFx0XHRpZiAoXHJcblx0XHRcdFx0XHRcdFx0XHR0aGlzLmNhbWVyYU5vZGUucG9zaXRpb24ueCAhPT0gdGhpcy5zY2FsZWRDYW1EaXJlY3Rpb24ueCB8fFxyXG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5jYW1lcmFOb2RlLnBvc2l0aW9uLnkgIT09IHRoaXMuc2NhbGVkQ2FtRGlyZWN0aW9uLnkgfHxcclxuXHRcdFx0XHRcdFx0XHRcdHRoaXMuY2FtZXJhTm9kZS5wb3NpdGlvbi56ICE9PSB0aGlzLnNjYWxlZENhbURpcmVjdGlvbi56XHJcblx0XHRcdFx0XHRcdFx0KSB7XHJcblx0XHRcdFx0XHRcdFx0XHRCQUJZTE9OLlZlY3RvcjMuTGVycFRvUmVmKFxyXG5cdFx0XHRcdFx0XHRcdFx0XHR0aGlzLmNhbWVyYU5vZGUucG9zaXRpb24sXHJcblx0XHRcdFx0XHRcdFx0XHRcdHRoaXMuc2NhbGVkQ2FtRGlyZWN0aW9uLFxyXG5cdFx0XHRcdFx0XHRcdFx0XHR0aGlzLmRlbHRhVGltZSAqIHRoaXMuY2FtZXJhU21vb3RoaW5nLFxyXG5cdFx0XHRcdFx0XHRcdFx0XHR0aGlzLmNhbWVyYU5vZGUucG9zaXRpb25cclxuXHRcdFx0XHRcdFx0XHRcdCk7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRcdGlmIChcclxuXHRcdFx0XHRcdFx0XHRcdHRoaXMuY2FtZXJhTm9kZS5wb3NpdGlvbi54ICE9PSB0aGlzLmJvb21Qb3NpdGlvbi54IHx8XHJcblx0XHRcdFx0XHRcdFx0XHR0aGlzLmNhbWVyYU5vZGUucG9zaXRpb24ueSAhPT0gdGhpcy5ib29tUG9zaXRpb24ueSB8fFxyXG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5jYW1lcmFOb2RlLnBvc2l0aW9uLnogIT09IHRoaXMuYm9vbVBvc2l0aW9uLnpcclxuXHRcdFx0XHRcdFx0XHQpIHtcclxuXHRcdFx0XHRcdFx0XHRcdEJBQllMT04uVmVjdG9yMy5MZXJwVG9SZWYoXHJcblx0XHRcdFx0XHRcdFx0XHRcdHRoaXMuY2FtZXJhTm9kZS5wb3NpdGlvbixcclxuXHRcdFx0XHRcdFx0XHRcdFx0dGhpcy5ib29tUG9zaXRpb24sXHJcblx0XHRcdFx0XHRcdFx0XHRcdHRoaXMuZGVsdGFUaW1lICogdGhpcy5jYW1lcmFTbW9vdGhpbmcsXHJcblx0XHRcdFx0XHRcdFx0XHRcdHRoaXMuY2FtZXJhTm9kZS5wb3NpdGlvblxyXG5cdFx0XHRcdFx0XHRcdFx0KTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdGlmIChcclxuXHRcdFx0XHRcdFx0XHR0aGlzLmNhbWVyYU5vZGUucG9zaXRpb24ueCAhPT0gdGhpcy5ib29tUG9zaXRpb24ueCB8fFxyXG5cdFx0XHRcdFx0XHRcdHRoaXMuY2FtZXJhTm9kZS5wb3NpdGlvbi55ICE9PSB0aGlzLmJvb21Qb3NpdGlvbi55IHx8XHJcblx0XHRcdFx0XHRcdFx0dGhpcy5jYW1lcmFOb2RlLnBvc2l0aW9uLnogIT09IHRoaXMuYm9vbVBvc2l0aW9uLnpcclxuXHRcdFx0XHRcdFx0KSB7XHJcblx0XHRcdFx0XHRcdFx0QkFCWUxPTi5WZWN0b3IzLkxlcnBUb1JlZihcclxuXHRcdFx0XHRcdFx0XHRcdHRoaXMuY2FtZXJhTm9kZS5wb3NpdGlvbixcclxuXHRcdFx0XHRcdFx0XHRcdHRoaXMuYm9vbVBvc2l0aW9uLFxyXG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5kZWx0YVRpbWUgKiB0aGlzLmNhbWVyYVNtb290aGluZyxcclxuXHRcdFx0XHRcdFx0XHRcdHRoaXMuY2FtZXJhTm9kZS5wb3NpdGlvblxyXG5cdFx0XHRcdFx0XHRcdCk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0aWYgKFxyXG5cdFx0XHRcdFx0XHR0aGlzLmNhbWVyYU5vZGUucG9zaXRpb24ueCAhPT0gMCB8fFxyXG5cdFx0XHRcdFx0XHR0aGlzLmNhbWVyYU5vZGUucG9zaXRpb24ueSAhPT0gMCB8fFxyXG5cdFx0XHRcdFx0XHR0aGlzLmNhbWVyYU5vZGUucG9zaXRpb24ueiAhPT0gMFxyXG5cdFx0XHRcdFx0KSB7XHJcblx0XHRcdFx0XHRcdHRoaXMuY2FtZXJhTm9kZS5wb3NpdGlvbi5zZXQoMCwgMCwgMCk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0cHJpdmF0ZSBjYXN0UGh5c2ljc0dyb3VuZENoZWNrUmF5KCk6IHZvaWQge1xyXG5cdFx0XHR0aGlzLmdyb3VuZEhpdCA9IGZhbHNlO1xyXG5cdFx0XHR0aGlzLmdyb3VuZE5vZGUgPSBudWxsO1xyXG5cdFx0XHR0aGlzLmdyb3VuZFBvaW50LnNldCgwLCAwLCAwKTtcclxuXHRcdFx0dGhpcy5ncm91bmROb3JtYWwuc2V0KDAsIDAsIDApO1xyXG5cdFx0XHR0aGlzLmdyb3VuZEFuZ2xlID0gMDtcclxuXHRcdFx0dGhpcy5ncm91bmREaXN0YW5jZSA9IDA7XHJcblx0XHRcdGlmICh0aGlzLnJheUxlbmd0aCA8PSAwKSB0aGlzLnJheUxlbmd0aCA9IDAuMTtcclxuXHRcdFx0Y29uc3QgcmF5Y2FzdExlbmd0aDogbnVtYmVyID1cclxuXHRcdFx0XHR0aGlzLnJheUxlbmd0aCAvIHRoaXMudHJhbnNmb3JtLnNjYWxpbmcueSArIDAuMTtcclxuXHJcblx0XHRcdGNvbnN0IHBsYXllclRyYW5zZm9ybURvd25EaXJlY3Rpb24gPSBVVElMLlRyYW5zZm9ybURpcmVjdGlvbihcclxuXHRcdFx0XHR0aGlzLnRyYW5zZm9ybSxcclxuXHRcdFx0XHR0aGlzLmRvd25EaXJlY3Rpb25cclxuXHRcdFx0KTtcclxuXHRcdFx0dGhpcy5vZmZzZXRHcm91bmRSYXljYXN0UG9zaXRpb24uc2V0KDAsIHRoaXMucmF5T3JpZ2luLCAwKTtcclxuXHRcdFx0QkFCWUxPTi5VdGlsaXRpZXMuR2V0QWJzb2x1dGVQb3NpdGlvblRvUmVmKFxyXG5cdFx0XHRcdHRoaXMudHJhbnNmb3JtLFxyXG5cdFx0XHRcdHRoaXMuc3RhcnRHcm91bmRSYXljYXN0UG9zaXRpb24sXHJcblx0XHRcdFx0dGhpcy5vZmZzZXRHcm91bmRSYXljYXN0UG9zaXRpb25cclxuXHRcdFx0KTtcclxuXHRcdFx0QkFCWUxPTi5VdGlsaXRpZXMuR2V0QWJzb2x1dGVQb3NpdGlvblRvUmVmKFxyXG5cdFx0XHRcdHRoaXMudHJhbnNmb3JtLFxyXG5cdFx0XHRcdHRoaXMuZW5kR3JvdW5kUmF5Y2FzdFBvc2l0aW9uLFxyXG5cdFx0XHRcdHRoaXMuZG93bkRpcmVjdGlvbi5zY2FsZShyYXljYXN0TGVuZ3RoKVxyXG5cdFx0XHQpO1xyXG5cdFx0XHR0aGlzLmVuZEdyb3VuZFJheWNhc3RQb3NpdGlvbi55ICs9IHRoaXMucmF5T3JpZ2luO1xyXG5cclxuXHRcdFx0aWYgKHRoaXMucmFkaXVzU2NhbGUgPD0gMCkgdGhpcy5yYWRpdXNTY2FsZSA9IDEuMDtcclxuXHRcdFx0aWYgKHRoaXMuc3BoZXJlQ29sbGlzaW9uU2hhcGUgPT0gbnVsbClcclxuXHRcdFx0XHR0aGlzLnNwaGVyZUNvbGxpc2lvblNoYXBlID1cclxuXHRcdFx0XHRcdEJBQllMT04uU2NlbmVNYW5hZ2VyLkNyZWF0ZVBoeXNpY3NTcGhlcmVTaGFwZShcclxuXHRcdFx0XHRcdFx0dGhpcy5hdmF0YXJSYWRpdXMgKiB0aGlzLnJhZGl1c1NjYWxlXHJcblx0XHRcdFx0XHQpO1xyXG5cdFx0XHRjb25zdCByYXljYXN0OiBCQUJZTE9OLlJheWNhc3RIaXRSZXN1bHQgPVxyXG5cdFx0XHRcdEJBQllMT04uU2NlbmVNYW5hZ2VyLlBoeXNpY3NTaGFwZWNhc3QoXHJcblx0XHRcdFx0XHR0aGlzLnNjZW5lLFxyXG5cdFx0XHRcdFx0dGhpcy5zcGhlcmVDb2xsaXNpb25TaGFwZSxcclxuXHRcdFx0XHRcdHRoaXMuc3RhcnRHcm91bmRSYXljYXN0UG9zaXRpb24sXHJcblx0XHRcdFx0XHRwbGF5ZXJUcmFuc2Zvcm1Eb3duRGlyZWN0aW9uLFxyXG5cdFx0XHRcdFx0cmF5Y2FzdExlbmd0aCxcclxuXHRcdFx0XHRcdHRoaXMuZGVmYXVsdFJheWNhc3RHcm91cCxcclxuXHRcdFx0XHRcdHRoaXMuZGVmYXVsdFJheWNhc3RNYXNrXHJcblx0XHRcdFx0KTtcclxuXHJcblx0XHRcdGlmIChcclxuXHRcdFx0XHRyYXljYXN0Lmhhc0hpdCA9PT0gdHJ1ZSAmJlxyXG5cdFx0XHRcdHJheWNhc3QuY29sbGlzaW9uT2JqZWN0ICE9IG51bGwgJiZcclxuXHRcdFx0XHRyYXljYXN0LmNvbGxpc2lvbk9iamVjdC5lbnRpdHkgIT0gbnVsbFxyXG5cdFx0XHQpIHtcclxuXHRcdFx0XHR0aGlzLmdyb3VuZEhpdCA9IHRydWU7XHJcblx0XHRcdFx0dGhpcy5ncm91bmROb2RlID0gcmF5Y2FzdC5jb2xsaXNpb25PYmplY3QuZW50aXR5O1xyXG5cdFx0XHRcdGlmIChyYXljYXN0LmhpdFBvaW50ICE9IG51bGwpXHJcblx0XHRcdFx0XHR0aGlzLmdyb3VuZFBvaW50LmNvcHlGcm9tKHJheWNhc3QuaGl0UG9pbnQpO1xyXG5cdFx0XHRcdGlmIChyYXljYXN0LmhpdE5vcm1hbCAhPSBudWxsKVxyXG5cdFx0XHRcdFx0dGhpcy5ncm91bmROb3JtYWwuY29weUZyb20ocmF5Y2FzdC5oaXROb3JtYWwpO1xyXG5cdFx0XHRcdHRoaXMuZ3JvdW5kQW5nbGUgPVxyXG5cdFx0XHRcdFx0dGhpcy5ncm91bmRIaXQgPT09IHRydWVcclxuXHRcdFx0XHRcdFx0PyBNYXRoLmFicyhcclxuXHRcdFx0XHRcdFx0XHRcdEJBQllMT04uVXRpbGl0aWVzLkdldEFuZ2xlKFxyXG5cdFx0XHRcdFx0XHRcdFx0XHR0aGlzLmdyb3VuZE5vcm1hbCxcclxuXHRcdFx0XHRcdFx0XHRcdFx0QkFCWUxPTi5WZWN0b3IzLlVwUmVhZE9ubHlcclxuXHRcdFx0XHRcdFx0XHRcdClcclxuXHRcdFx0XHRcdFx0ICApXHJcblx0XHRcdFx0XHRcdDogMDtcclxuXHRcdFx0XHRpZiAodGhpcy5ncm91bmRBbmdsZSA+PSA4OCkgdGhpcy5ncm91bmRBbmdsZSA9IDA7XHJcblx0XHRcdFx0dGhpcy5ncm91bmREaXN0YW5jZSA9IHJheWNhc3QuaGl0RGlzdGFuY2UgLSB0aGlzLnJheU9yaWdpbjtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKHRoaXMuc2hvd0RlYnVnQ29sbGlkZXJzID09PSB0cnVlKSB7XHJcblx0XHRcdFx0aWYgKHRoaXMuZ3JvdW5kU2Vuc29yTGluZSA9PSBudWxsKVxyXG5cdFx0XHRcdFx0dGhpcy5ncm91bmRTZW5zb3JMaW5lID0gbmV3IEJBQllMT04uTGluZXNNZXNoUmVuZGVyZXIoXHJcblx0XHRcdFx0XHRcdHRoaXMudHJhbnNmb3JtLm5hbWUgKyBcIi5Hcm91bmRTZW5zb3JMaW5lXCIsXHJcblx0XHRcdFx0XHRcdHRoaXMuc2NlbmVcclxuXHRcdFx0XHRcdCk7XHJcblx0XHRcdFx0aWYgKHRoaXMuZ3JvdW5kSGl0ID09PSB0cnVlKSB7XHJcblx0XHRcdFx0XHR0aGlzLmdyb3VuZFNlbnNvckxpbmUuZHJhd0xpbmUoXHJcblx0XHRcdFx0XHRcdFt0aGlzLnN0YXJ0R3JvdW5kUmF5Y2FzdFBvc2l0aW9uLCByYXljYXN0LmhpdFBvaW50XSxcclxuXHRcdFx0XHRcdFx0QkFCWUxPTi5Db2xvcjMuUmVkKClcclxuXHRcdFx0XHRcdCk7XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdHRoaXMuZ3JvdW5kU2Vuc29yTGluZS5kcmF3TGluZShcclxuXHRcdFx0XHRcdFx0W3RoaXMuc3RhcnRHcm91bmRSYXljYXN0UG9zaXRpb24sIHRoaXMuZW5kR3JvdW5kUmF5Y2FzdFBvc2l0aW9uXSxcclxuXHRcdFx0XHRcdFx0QkFCWUxPTi5Db2xvcjMuR3JlZW4oKVxyXG5cdFx0XHRcdFx0KTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRwcml2YXRlIHBpY2tDaGVja0NvbGxpc2lvbnNSYXljYXN0KFxyXG5cdFx0XHRjbG9zZXRDaGVjazogYm9vbGVhbiA9IHRydWVcclxuXHRcdCk6IEJBQllMT04uUGlja2luZ0luZm8ge1xyXG5cdFx0XHRpZiAodGhpcy5hYnN0cmFjdE1lc2ggPT0gbnVsbCkgcmV0dXJuIG51bGw7XHJcblx0XHRcdGlmICh0aGlzLnJheUxlbmd0aCA8PSAwKSB0aGlzLnJheUxlbmd0aCA9IDAuMTtcclxuXHRcdFx0Y29uc3QgcmF5Y2FzdExlbmd0aDogbnVtYmVyID1cclxuXHRcdFx0XHR0aGlzLnJheUxlbmd0aCAvIHRoaXMudHJhbnNmb3JtLnNjYWxpbmcueSArIDAuMTtcclxuXHRcdFx0aWYgKHRoaXMucGlja2luZ09yaWdpbiA9PSBudWxsKVxyXG5cdFx0XHRcdHRoaXMucGlja2luZ09yaWdpbiA9IG5ldyBCQUJZTE9OLlZlY3RvcjMoMCwgdGhpcy5yYXlPcmlnaW4sIDApO1xyXG5cdFx0XHRpZiAodGhpcy5waWNraW5nUmF5ID09IG51bGwpIHtcclxuXHRcdFx0XHR0aGlzLnBpY2tpbmdSYXkgPSBuZXcgQkFCWUxPTi5SYXkoXHJcblx0XHRcdFx0XHR0aGlzLnBpY2tpbmdPcmlnaW4sXHJcblx0XHRcdFx0XHR0aGlzLnBpY2tpbmdEaXJlY3Rpb24sXHJcblx0XHRcdFx0XHRyYXljYXN0TGVuZ3RoXHJcblx0XHRcdFx0KTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKHRoaXMucGlja2luZ0hlbHBlciA9PSBudWxsKSB7XHJcblx0XHRcdFx0dGhpcy5waWNraW5nSGVscGVyID0gbmV3IEJBQllMT04uUmF5SGVscGVyKHRoaXMucGlja2luZ1JheSk7XHJcblx0XHRcdFx0dGhpcy5waWNraW5nSGVscGVyLmF0dGFjaFRvTWVzaChcclxuXHRcdFx0XHRcdHRoaXMuYWJzdHJhY3RNZXNoLFxyXG5cdFx0XHRcdFx0dGhpcy5waWNraW5nRGlyZWN0aW9uLFxyXG5cdFx0XHRcdFx0dGhpcy5waWNraW5nT3JpZ2luLFxyXG5cdFx0XHRcdFx0cmF5Y2FzdExlbmd0aFxyXG5cdFx0XHRcdCk7XHJcblx0XHRcdFx0aWYgKHRoaXMuc2hvd0RlYnVnQ29sbGlkZXJzID09PSB0cnVlKVxyXG5cdFx0XHRcdFx0dGhpcy5waWNraW5nSGVscGVyLnNob3codGhpcy5zY2VuZSwgbmV3IEJBQllMT04uQ29sb3IzKDEsIDAsIDApKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gdGhpcy5waWNraW5nUmF5ICE9IG51bGxcclxuXHRcdFx0XHQ/IHRoaXMuc2NlbmUucGlja1dpdGhSYXkoXHJcblx0XHRcdFx0XHRcdHRoaXMucGlja2luZ1JheSxcclxuXHRcdFx0XHRcdFx0KG1lc2g6IEJBQllMT04uQWJzdHJhY3RNZXNoKSA9PiB7XHJcblx0XHRcdFx0XHRcdFx0cmV0dXJuIG1lc2ggIT0gdGhpcy5hYnN0cmFjdE1lc2ggJiYgbWVzaC5jaGVja0NvbGxpc2lvbnMgPT09IHRydWU7XHJcblx0XHRcdFx0XHRcdH0sXHJcblx0XHRcdFx0XHRcdCFjbG9zZXRDaGVja1xyXG5cdFx0XHRcdCAgKVxyXG5cdFx0XHRcdDogbnVsbDtcclxuXHRcdH1cclxuXHJcblx0XHRwcml2YXRlIHBpY2tDYW1lcmFDb2xsaXNpb25zUmF5Y2FzdChcclxuXHRcdFx0b3JpZ2luOiBCQUJZTE9OLlZlY3RvcjMsXHJcblx0XHRcdGRpcmVjdGlvbjogQkFCWUxPTi5WZWN0b3IzLFxyXG5cdFx0XHRyYXlMZW5ndGg6IG51bWJlcixcclxuXHRcdFx0Y2xvc2V0Q2hlY2s6IGJvb2xlYW4gPSB0cnVlXHJcblx0XHQpOiBCQUJZTE9OLlBpY2tpbmdJbmZvIHtcclxuXHRcdFx0aWYgKHRoaXMuYWJzdHJhY3RNZXNoID09IG51bGwpIHJldHVybiBudWxsO1xyXG5cdFx0XHRpZiAodGhpcy5jYW1lcmFSYXkgPT0gbnVsbClcclxuXHRcdFx0XHR0aGlzLmNhbWVyYVJheSA9IG5ldyBCQUJZTE9OLlJheShvcmlnaW4sIGRpcmVjdGlvbiwgcmF5TGVuZ3RoKTtcclxuXHRcdFx0aWYgKHRoaXMuY2FtZXJhUmF5ICE9IG51bGwpIHtcclxuXHRcdFx0XHR0aGlzLmNhbWVyYVJheS5vcmlnaW4uY29weUZyb20ob3JpZ2luKTtcclxuXHRcdFx0XHR0aGlzLmNhbWVyYVJheS5kaXJlY3Rpb24uY29weUZyb20oZGlyZWN0aW9uKTtcclxuXHRcdFx0XHR0aGlzLmNhbWVyYVJheS5sZW5ndGggPSByYXlMZW5ndGg7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmICh0aGlzLmNhbWVyYUhlbHBlciA9PSBudWxsKSB7XHJcblx0XHRcdFx0dGhpcy5jYW1lcmFIZWxwZXIgPSBuZXcgQkFCWUxPTi5SYXlIZWxwZXIodGhpcy5jYW1lcmFSYXkpO1xyXG5cdFx0XHRcdHRoaXMuY2FtZXJhSGVscGVyLmF0dGFjaFRvTWVzaChcclxuXHRcdFx0XHRcdHRoaXMuYWJzdHJhY3RNZXNoLFxyXG5cdFx0XHRcdFx0dGhpcy5jYW1lcmFEaXJlY3Rpb24sXHJcblx0XHRcdFx0XHRvcmlnaW4sXHJcblx0XHRcdFx0XHRyYXlMZW5ndGhcclxuXHRcdFx0XHQpO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiB0aGlzLmNhbWVyYVJheSAhPSBudWxsXHJcblx0XHRcdFx0PyB0aGlzLnNjZW5lLnBpY2tXaXRoUmF5KFxyXG5cdFx0XHRcdFx0XHR0aGlzLmNhbWVyYVJheSxcclxuXHRcdFx0XHRcdFx0KG1lc2g6IEJBQllMT04uQWJzdHJhY3RNZXNoKSA9PiB7XHJcblx0XHRcdFx0XHRcdFx0cmV0dXJuIG1lc2ggIT0gdGhpcy5hYnN0cmFjdE1lc2ggJiYgbWVzaC5jaGVja0NvbGxpc2lvbnMgPT09IHRydWU7XHJcblx0XHRcdFx0XHRcdH0sXHJcblx0XHRcdFx0XHRcdCFjbG9zZXRDaGVja1xyXG5cdFx0XHRcdCAgKVxyXG5cdFx0XHRcdDogbnVsbDtcclxuXHRcdH1cclxuXHJcblx0XHRwcml2YXRlIGdldEFjdHVhbFZlcnRpY2FsVmVsb2NpdHkoKTogbnVtYmVyIHtcclxuXHRcdFx0cmV0dXJuIHRoaXMubV9hY3R1YWxWZWxvY2l0eS55IC8gdGhpcy5kZWx0YVRpbWU7XHJcblx0XHR9XHJcblxyXG5cdFx0cHJpdmF0ZSBnZXRDaGVja2VkVmVydGljYWxWZWxvY2l0eSgpOiBudW1iZXIge1xyXG5cdFx0XHRjb25zdCBjdXJyZW50VmVsb2NpdHk6IG51bWJlciA9XHJcblx0XHRcdFx0dGhpcy5jaGFyYWN0ZXJDb250cm9sbGVyICE9IG51bGxcclxuXHRcdFx0XHRcdD8gdGhpcy5jaGFyYWN0ZXJDb250cm9sbGVyLmdldFZlcnRpY2FsVmVsb2NpdHkoKVxyXG5cdFx0XHRcdFx0OiB0aGlzLmdldEFjdHVhbFZlcnRpY2FsVmVsb2NpdHkoKTtcclxuXHRcdFx0cmV0dXJuIE1hdGguYWJzKGN1cnJlbnRWZWxvY2l0eSkgPj1cclxuXHRcdFx0XHRQUk9KRUNULlVuaXZlcnNhbFBsYXllckNvbnRyb2xsZXIuTUlOX1ZFUlRJQ0FMX1ZFTE9DSVRZXHJcblx0XHRcdFx0PyBjdXJyZW50VmVsb2NpdHlcclxuXHRcdFx0XHQ6IDA7XHJcblx0XHR9XHJcblxyXG5cdFx0cHJpdmF0ZSBkZXN0cm95UGxheWVyQ29udHJvbGxlcigpOiB2b2lkIHtcclxuXHRcdFx0dGhpcy5jYW1lcmFQaXZvdCA9IG51bGw7XHJcblx0XHRcdHRoaXMuY2FtZXJhTm9kZSA9IG51bGw7XHJcblx0XHRcdHRoaXMuYW5pbWF0aW9uU3RhdGUgPSBudWxsO1xyXG5cdFx0XHR0aGlzLmNoYXJhY3RlckNvbnRyb2xsZXIgPSBudWxsO1xyXG5cdFx0XHR0aGlzLm9uUHJlVXBkYXRlT2JzZXJ2YWJsZS5jbGVhcigpO1xyXG5cdFx0XHR0aGlzLm9uUHJlVXBkYXRlT2JzZXJ2YWJsZSA9IG51bGw7XHJcblx0XHRcdHRoaXMub25CZWZvcmVNb3ZlT2JzZXJ2YWJsZS5jbGVhcigpO1xyXG5cdFx0XHR0aGlzLm9uQmVmb3JlTW92ZU9ic2VydmFibGUgPSBudWxsO1xyXG5cdFx0XHR0aGlzLm9uUG9zdFVwZGF0ZU9ic2VydmFibGUuY2xlYXIoKTtcclxuXHRcdFx0dGhpcy5vblBvc3RVcGRhdGVPYnNlcnZhYmxlID0gbnVsbDtcclxuXHRcdH1cclxuXHJcblx0XHRwcml2YXRlIHZhbGlkYXRlQW5pbWF0aW9uU3RhdGVQYXJhbXMoKTogdm9pZCB7XHJcblx0XHRcdGlmICh0aGlzLmFuaW1hdGlvblN0YXRlUGFyYW1zID09IG51bGwpIHtcclxuXHRcdFx0XHR0aGlzLmFuaW1hdGlvblN0YXRlUGFyYW1zID0ge1xyXG5cdFx0XHRcdFx0bW92ZURpcmVjdGlvbjogXCJEaXJlY3Rpb25cIixcclxuXHRcdFx0XHRcdGlucHV0TWFnbml0dWRlOiBcIk1hZ25pdHVkZVwiLFxyXG5cdFx0XHRcdFx0aG9yaXpvbnRhbElucHV0OiBcIkhvcml6b250YWxcIixcclxuXHRcdFx0XHRcdHZlcnRpY2FsSW5wdXQ6IFwiVmVydGljYWxcIixcclxuXHRcdFx0XHRcdG1vdXNlWElucHV0OiBcIk1vdXNlWFwiLFxyXG5cdFx0XHRcdFx0bW91c2VZSW5wdXQ6IFwiTW91c2VZXCIsXHJcblx0XHRcdFx0XHRoZWlnaHRJbnB1dDogXCJIZWlnaHRcIixcclxuXHRcdFx0XHRcdHNwZWVkSW5wdXQ6IFwiU3BlZWRcIixcclxuXHRcdFx0XHRcdGp1bXBJbnB1dDogXCJKdW1wXCIsXHJcblx0XHRcdFx0XHRqdW1wU3RhdGU6IFwiSnVtcGluZ1wiLFxyXG5cdFx0XHRcdFx0ZmFsbGluZ1N0YXRlOiBcIkZhbGxpbmdcIixcclxuXHRcdFx0XHRcdHNsaWRpbmdTdGF0ZTogXCJTbGlkaW5nXCIsXHJcblx0XHRcdFx0XHRzcGVjaWFsU3RhdGU6IFwiU3BlY2lhbFwiLFxyXG5cdFx0XHRcdFx0Z3JvdW5kZWRTdGF0ZTogXCJHcm91bmRlZFwiLFxyXG5cdFx0XHRcdFx0c3BlbGxPbmVTdGF0ZTogXCJNYWdpY09uZVwiLFxyXG5cdFx0XHRcdFx0c3BlbGxUd29TdGF0ZTogXCJTcGVsbF8yXCIsXHJcblx0XHRcdFx0XHRzcGVsbFRocmVlU3RhdGU6IFwiU3BlbGxfM1wiLFxyXG5cdFx0XHRcdFx0c3BlbGxGb3VyU3RhdGU6IFwiU3BlbGxfNFwiLFxyXG5cdFx0XHRcdFx0c3BlbGxGaXZlU3RhdGU6IFwiU3BlbGxfNVwiLFxyXG5cdFx0XHRcdH07XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGV4cG9ydCBpbnRlcmZhY2UgQW5pbWF0aW9uU3RhdGVQYXJhbXMge1xyXG5cdFx0bW92ZURpcmVjdGlvbjogc3RyaW5nO1xyXG5cdFx0aW5wdXRNYWduaXR1ZGU6IHN0cmluZztcclxuXHRcdGhvcml6b250YWxJbnB1dDogc3RyaW5nO1xyXG5cdFx0dmVydGljYWxJbnB1dDogc3RyaW5nO1xyXG5cdFx0bW91c2VYSW5wdXQ6IHN0cmluZztcclxuXHRcdG1vdXNlWUlucHV0OiBzdHJpbmc7XHJcblx0XHRoZWlnaHRJbnB1dDogc3RyaW5nO1xyXG5cdFx0c3BlZWRJbnB1dDogc3RyaW5nO1xyXG5cdFx0anVtcElucHV0OiBzdHJpbmc7XHJcblx0XHRqdW1wU3RhdGU6IHN0cmluZztcclxuXHRcdGZhbGxpbmdTdGF0ZTogc3RyaW5nO1xyXG5cdFx0c2xpZGluZ1N0YXRlOiBzdHJpbmc7XHJcblx0XHRzcGVjaWFsU3RhdGU6IHN0cmluZztcclxuXHRcdGdyb3VuZGVkU3RhdGU6IHN0cmluZztcclxuXHRcdHNwZWxsT25lU3RhdGU6IHN0cmluZztcclxuXHRcdHNwZWxsVHdvU3RhdGU6IHN0cmluZztcclxuXHRcdHNwZWxsVGhyZWVTdGF0ZTogc3RyaW5nO1xyXG5cdFx0c3BlbGxGb3VyU3RhdGU6IHN0cmluZztcclxuXHRcdHNwZWxsRml2ZVN0YXRlOiBzdHJpbmc7XHJcblx0fVxyXG5cclxuXHRleHBvcnQgZW51bSBQbGF5ZXJJbnB1dENvbnRyb2wge1xyXG5cdFx0Rmlyc3RQZXJzb25TdHJhZmluZyA9IDAsXHJcblx0XHRUaGlyZFBlcnNvblN0cmFmaW5nID0gMSxcclxuXHRcdFRoaXJkUGVyc29uVHVybmluZyA9IDIsXHJcblx0XHRUaGlyZFBlcnNvbkZvcndhcmQgPSAzLFxyXG5cdH1cclxuXHJcblx0ZXhwb3J0IGVudW0gU3BlbGxBbmltYXRpb25TdGF0ZSB7XHJcblx0XHROb1NwZWxsU3RhcnRlZCA9IDAsXHJcblx0XHRTcGVsbFN0YXJ0ZWQsXHJcblx0fVxyXG5cclxuXHRleHBvcnQgZW51bSBQbGF5ZXJNb3ZlRGlyZWN0aW9uIHtcclxuXHRcdFN0YXRpb25hcnkgPSAwLFxyXG5cdFx0Rm9yd2FyZCA9IDEsXHJcblx0XHRGb3J3YXJkTGVmdCA9IDIsXHJcblx0XHRGb3J3YXJkUmlnaHQgPSAzLFxyXG5cdFx0QmFja3dhcmQgPSA0LFxyXG5cdFx0QmFja3dhcmRMZWZ0ID0gNSxcclxuXHRcdEJhY2t3YXJkUmlnaHQgPSA2LFxyXG5cdFx0U3RyYWZpbmdMZWZ0ID0gNyxcclxuXHRcdFN0cmFmaW5nUmlnaHQgPSA4LFxyXG5cdH1cclxufVxyXG4iLCJtb2R1bGUgUFJPSkVDVCB7XHJcbiAgICAvKipcclxuICAgICogQmFieWxvbiBTY3JpcHQgQ29tcG9uZW50XHJcbiAgICAqIEBjbGFzcyBGeFBhcnRpY2xlU3lzdGVtXHJcbiAgICAqL1xyXG4gICAgZXhwb3J0IGNsYXNzIEZ4UGFydGljbGVTeXN0ZW0gZXh0ZW5kcyBCQUJZTE9OLlNjcmlwdENvbXBvbmVudCB7XHJcbiAgICAgICAgcHVibGljIGdldFBhcnRpY2xlRW1pdHRlcigpOkJBQllMT04uQWJzdHJhY3RNZXNoIHsgcmV0dXJuIHRoaXMubV9wYXJ0aWNsZUVtaXR0ZXI7IH1cclxuICAgICAgICBwdWJsaWMgZ2V0UGFydGljbGVTeXN0ZW0oKTpCQUJZTE9OLlBhcnRpY2xlU3lzdGVtIHwgQkFCWUxPTi5HUFVQYXJ0aWNsZVN5c3RlbSB7IHJldHVybiB0aGlzLm1fcGFydGljbGVTeXN0ZW07IH1cclxuXHJcbiAgICAgICAgcHJvdGVjdGVkIG1fcGFydGljbGVFbWl0dGVyOkJBQllMT04uQWJzdHJhY3RNZXNoID0gbnVsbDtcclxuICAgICAgICBwcm90ZWN0ZWQgbV9wYXJ0aWNsZVN5c3RlbTpCQUJZTE9OLlBhcnRpY2xlU3lzdGVtIHwgQkFCWUxPTi5HUFVQYXJ0aWNsZVN5c3RlbSA9IG51bGw7XHJcbiAgICAgICAgcHJvdGVjdGVkIGF3YWtlKCk6IHZvaWQge1xyXG4gICAgICAgICAgICBjb25zdCByb290VXJsOnN0cmluZyA9IEJBQllMT04uU2NlbmVNYW5hZ2VyLkdldFJvb3RVcmwodGhpcy5zY2VuZSk7XHJcbiAgICAgICAgICAgIGNvbnN0IGNsYXNzVHlwZTpudW1iZXIgPSB0aGlzLmdldFByb3BlcnR5KFwiY2xhc3NUeXBlXCIsIDApO1xyXG4gICAgICAgICAgICBjb25zdCBwYXJ0aWNsZVRleHQ6c3RyaW5nID0gdGhpcy5nZXRQcm9wZXJ0eShcImJhc2U2NFBhcnRpY2xlU3lzdGVtXCIpO1xyXG4gICAgICAgICAgICBjb25zdCBwbGF5T25Bd2FrZTpib29sZWFuID0gdGhpcy5nZXRQcm9wZXJ0eShcInBsYXlPbkF3YWtlXCIsIGZhbHNlKTtcclxuICAgICAgICAgICAgY29uc3QgcGFydGljbGVUZXh0dXJlOkJBQllMT04uSVVuaXR5VGV4dHVyZSA9IHRoaXMuZ2V0UHJvcGVydHkoXCJwYXJ0aWNsZVRleHR1cmVcIik7XHJcbiAgICAgICAgICAgIHRoaXMubV9wYXJ0aWNsZUVtaXR0ZXIgPSB0aGlzLmdldEFic3RyYWN0TWVzaCgpO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5tX3BhcnRpY2xlRW1pdHRlciA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1fcGFydGljbGVFbWl0dGVyID0gQkFCWUxPTi5NZXNoLkNyZWF0ZUJveCh0aGlzLnRyYW5zZm9ybS5uYW1lICsgXCIuRW1pdHRlclwiLCAwLjI1LCB0aGlzLnNjZW5lKTtcclxuICAgICAgICAgICAgICAgIHRoaXMubV9wYXJ0aWNsZUVtaXR0ZXIucGFyZW50ID0gdGhpcy50cmFuc2Zvcm07XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1fcGFydGljbGVFbWl0dGVyLnBvc2l0aW9uLnNldCgwLDAsMCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1fcGFydGljbGVFbWl0dGVyLmlzVmlzaWJsZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tX3BhcnRpY2xlRW1pdHRlci5pc1BpY2thYmxlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1fcGFydGljbGVFbWl0dGVyLm1hdGVyaWFsID0gQkFCWUxPTi5VdGlsaXRpZXMuR2V0Q29sbGlkZXJNYXRlcmlhbCh0aGlzLnNjZW5lKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAocGFydGljbGVUZXh0ICE9IG51bGwgJiYgcGFydGljbGVUZXh0ICE9PSBcIlwiKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBwYXJ0aWNsZUpzb246c3RyaW5nID0gd2luZG93LmF0b2IocGFydGljbGVUZXh0KTtcclxuICAgICAgICAgICAgICAgIGlmIChwYXJ0aWNsZUpzb24gIT0gbnVsbCAmJiBwYXJ0aWNsZUpzb24gIT09IFwiXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXJ0aWNsZVBhcnNlZDphbnkgPSBKU09OLnBhcnNlKHBhcnRpY2xlSnNvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBhcnRpY2xlUGFyc2VkICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhcnRpY2xlUGFyc2VkLnRleHR1cmUgIT0gbnVsbCAmJiBwYXJ0aWNsZVRleHR1cmUgIT0gbnVsbCkgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcnRpY2xlUGFyc2VkLnRleHR1cmUubmFtZSA9IHBhcnRpY2xlVGV4dHVyZS5maWxlbmFtZTsgLy8gTm90ZTogUGFydGljbGUgU3lzdGVtIFBhcnNlciBVc2UgTmFtZSBOb3QgVXJsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJ0aWNsZVBhcnNlZC50ZXh0dXJlLnVybCA9IHBhcnRpY2xlVGV4dHVyZS5maWxlbmFtZTsgIC8vIE5vdGU6IFBhcnRpY2xlIFN5c3RlbSBQYXJzZXIgVXNlIE5hbWUgTm90IFVybFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjbGFzc1R5cGUgPT09IDEpIHsgIC8vIEdQVSBQYXJ0aWNsZSBTeXN0ZW1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubV9wYXJ0aWNsZVN5c3RlbSA9IEJBQllMT04uR1BVUGFydGljbGVTeXN0ZW0uUGFyc2UocGFydGljbGVQYXJzZWQsIHRoaXMuc2NlbmUsIHJvb3RVcmwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgeyAgICAgICAgICAgICAgICAvLyBDUFUgUGFydGljbGUgU3lzdGVtXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1fcGFydGljbGVTeXN0ZW0gPSBCQUJZTE9OLlBhcnRpY2xlU3lzdGVtLlBhcnNlKHBhcnRpY2xlUGFyc2VkLCB0aGlzLnNjZW5lLCByb290VXJsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5tX3BhcnRpY2xlU3lzdGVtICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm1fcGFydGljbGVFbWl0dGVyICE9IG51bGwpIHRoaXMubV9wYXJ0aWNsZVN5c3RlbS5lbWl0dGVyID0gdGhpcy5tX3BhcnRpY2xlRW1pdHRlcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwbGF5T25Bd2FrZSA9PT0gZmFsc2UpIHRoaXMubV9wYXJ0aWNsZVN5c3RlbS5zdG9wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByb3RlY3RlZCBkZXN0cm95KCk6IHZvaWQge1xyXG4gICAgICAgICAgICB0aGlzLm1fcGFydGljbGVFbWl0dGVyID0gbnVsbDtcclxuICAgICAgICAgICAgaWYgKHRoaXMubV9wYXJ0aWNsZVN5c3RlbSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1fcGFydGljbGVTeXN0ZW0uZGlzcG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tX3BhcnRpY2xlU3lzdGVtID0gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsIm1vZHVsZSBQUk9KRUNUIHtcclxuICAgIC8qKlxyXG4gICAgICogQmFieWxvbiB3YXRlciBtYXRlcmlhbCBzeXN0ZW0gcHJvIGNsYXNzIChCYWJ5bG9uIFdhdGVyIE1hdGVyaWFsKVxyXG4gICAgICogQGNsYXNzIFNreU1hdGVyaWFsU3lzdGVtIC0gQWxsIHJpZ2h0cyByZXNlcnZlZCAoYykgMjAyMCBNYWNrZXkgS2luYXJkXHJcbiAgICAgKi9cclxuICAgIGV4cG9ydCBjbGFzcyBTa3lNYXRlcmlhbFN5c3RlbSBleHRlbmRzIEJBQllMT04uU2NyaXB0Q29tcG9uZW50IHtcclxuICAgICAgICBwcml2YXRlIHNreWZvZzpib29sZWFuID0gZmFsc2U7XHJcbiAgICAgICAgcHJpdmF0ZSBza3lzaXplOm51bWJlciA9IDEwMDA7XHJcbiAgICAgICAgcHJpdmF0ZSBwcm9iZXNpemU6bnVtYmVyID0gMTI4O1xyXG4gICAgICAgIHByaXZhdGUgcmVmbGVjdGlvbnM6Ym9vbGVhbiA9IGZhbHNlO1xyXG4gICAgICAgIHByaXZhdGUgcmVmbGVjdGxldmVsOm51bWJlciA9IDE7XHJcbiAgICAgICAgcHJpdmF0ZSBza3l0aW50Y29sb3I6QkFCWUxPTi5Db2xvcjMgPSBuZXcgQkFCWUxPTi5Db2xvcjMoMSwxLDEpO1xyXG4gICAgICAgIHB1YmxpYyBnZXRTa3lib3hNZXNoKCk6QkFCWUxPTi5BYnN0cmFjdE1lc2ggeyByZXR1cm4gdGhpcy5tX3NreWJveE1lc2g7IH1cclxuICAgICAgICBwdWJsaWMgZ2V0U2t5TWF0ZXJpYWwoKTpCQUJZTE9OLlNreU1hdGVyaWFsIHsgcmV0dXJuIHRoaXMubV9za3lNYXRlcmlhbDsgfVxyXG4gICAgICAgIHB1YmxpYyBnZXRSZWZsZWN0aW9uUHJvYmUoKTpCQUJZTE9OLlJlZmxlY3Rpb25Qcm9iZSB7IHJldHVybiB0aGlzLm1fcmVmbGVjdFByb2JlOyB9XHJcblxyXG4gICAgICAgIHByb3RlY3RlZCBhd2FrZSgpOiB2b2lkIHsgdGhpcy5hd2FrZVNreWJveE1hdGVyaWFsKCk7IH1cclxuICAgICAgICBwcm90ZWN0ZWQgc3RhcnQoKTogdm9pZCB7IC8qIFN0YXJ0IHJlbmRlciBsb29wIGZ1bmN0aW9uICovIH1cclxuICAgICAgICBwcm90ZWN0ZWQgdXBkYXRlKCk6IHZvaWQgeyAvKiBVcGRhdGUgcmVuZGVyIGxvb3AgZnVuY3Rpb24gKi8gfVxyXG4gICAgICAgIHByb3RlY3RlZCBsYXRlKCk6IHZvaWQgeyAvKiBMYXRlIHVwZGF0ZSByZW5kZXIgbG9vcCBmdW5jdGlvbiAqLyB9XHJcbiAgICAgICAgcHJvdGVjdGVkIGFmdGVyKCk6IHZvaWQgeyAvKiBBZnRlciByZW5kZXIgbG9vcCBmdW5jdGlvbiAqLyB9XHJcbiAgICAgICAgcHJvdGVjdGVkIGRlc3Ryb3koKTogdm9pZCB7IHRoaXMuZGVzdHJveVNreWJveE1hdGVyaWFsKCk7IH1cclxuXHJcbiAgICAgICAgcHJvdGVjdGVkIG1fc2t5Ym94TWVzaDpCQUJZTE9OLk1lc2ggPSBudWxsO1xyXG4gICAgICAgIHByb3RlY3RlZCBtX3NreU1hdGVyaWFsOkJBQllMT04uU2t5TWF0ZXJpYWwgPSBudWxsO1xyXG4gICAgICAgIHByb3RlY3RlZCBtX3JlZmxlY3RQcm9iZTpCQUJZTE9OLlJlZmxlY3Rpb25Qcm9iZSA9IG51bGw7XHJcbiAgICAgICAgcHJvdGVjdGVkIGF3YWtlU2t5Ym94TWF0ZXJpYWwoKTp2b2lkIHtcclxuICAgICAgICAgICAgdGhpcy5za3lmb2cgPSB0aGlzLmdldFByb3BlcnR5KFwiYXBwbHlNZXNoRm9nXCIsIHRoaXMuc2t5Zm9nKTtcclxuICAgICAgICAgICAgdGhpcy5za3lzaXplID0gdGhpcy5nZXRQcm9wZXJ0eShcImJveFNpemVcIiwgdGhpcy5za3lzaXplKTtcclxuICAgICAgICAgICAgdGhpcy5wcm9iZXNpemUgPSB0aGlzLmdldFByb3BlcnR5KFwicHJvYmVTaXplXCIsIHRoaXMucHJvYmVzaXplKTtcclxuICAgICAgICAgICAgdGhpcy5yZWZsZWN0aW9ucyA9IHRoaXMuZ2V0UHJvcGVydHkoXCJyZWZsZWN0aW9uc1wiLCB0aGlzLnJlZmxlY3Rpb25zKTtcclxuICAgICAgICAgICAgdGhpcy5yZWZsZWN0bGV2ZWwgPSB0aGlzLmdldFByb3BlcnR5KFwicmVmbGVjdExldmVsXCIsIHRoaXMucmVmbGVjdGxldmVsKTtcclxuICAgICAgICAgICAgLy8gLi5cclxuICAgICAgICAgICAgY29uc3QgdGludENvbG9yOkJBQllMT04uSVVuaXR5Q29sb3IgPSB0aGlzLmdldFByb3BlcnR5KFwidGludENvbG9yXCIpO1xyXG4gICAgICAgICAgICBpZiAodGludENvbG9yICE9IG51bGwpIHRoaXMuc2t5dGludGNvbG9yID0gQkFCWUxPTi5VdGlsaXRpZXMuUGFyc2VDb2xvcjModGludENvbG9yKTtcclxuICAgICAgICAgICAgLy8gLi5cclxuICAgICAgICAgICAgdGhpcy5tX3NreWJveE1lc2ggPSBCQUJZTE9OLk1lc2guQ3JlYXRlQm94KFwiQW1iaWVudCBTa3lib3hcIiwgdGhpcy5za3lzaXplLCB0aGlzLnNjZW5lKTtcclxuICAgICAgICAgICAgdGhpcy5tX3NreWJveE1lc2gucG9zaXRpb24uc2V0KDAsMCwwKTtcclxuICAgICAgICAgICAgdGhpcy5tX3NreWJveE1lc2guaW5maW5pdGVEaXN0YW5jZSA9IHRydWU7XHJcbiAgICAgICAgICAgIHRoaXMubV9za3lib3hNZXNoLmFwcGx5Rm9nID0gdGhpcy5za3lmb2c7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnNjZW5lLnVzZVJpZ2h0SGFuZGVkU3lzdGVtID09PSB0cnVlKSB0aGlzLm1fc2t5Ym94TWVzaC5zY2FsaW5nLnggKj0gLTE7XHJcbiAgICAgICAgICAgIC8vIFNldHVwIFNreSBNYXRlcmlhbCBQcm9wZXJ0aWVzXHJcbiAgICAgICAgICAgIHRoaXMubV9za3lNYXRlcmlhbCA9IG5ldyBCQUJZTE9OLlNreU1hdGVyaWFsKHRoaXMudHJhbnNmb3JtLm5hbWUgKyBcIi5Ta3lNYXRlcmlhbFwiLCB0aGlzLnNjZW5lKTtcclxuICAgICAgICAgICAgdGhpcy5tX3NreU1hdGVyaWFsLmJhY2tGYWNlQ3VsbGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLnNldFNreWJveFRpbnRDb2xvcih0aGlzLnNreXRpbnRjb2xvcik7XHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBEZWZpbmVzIHRoZSBvdmVyYWxsIGx1bWluYW5jZSBvZiBza3kgaW4gaW50ZXJ2YWwgWzAsIDFdLlxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgdGhpcy5tX3NreU1hdGVyaWFsLmx1bWluYW5jZSA9IHRoaXMuZ2V0UHJvcGVydHkoXCJsdW1pbmFuY2VcIiwgdGhpcy5tX3NreU1hdGVyaWFsLmx1bWluYW5jZSk7XHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAqIERlZmluZXMgdGhlIGFtb3VudCAoc2NhdHRlcmluZykgb2YgaGF6ZSBhcyBvcHBvc2VkIHRvIG1vbGVjdWxlcyBpbiBhdG1vc3BoZXJlLlxyXG4gICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICB0aGlzLm1fc2t5TWF0ZXJpYWwudHVyYmlkaXR5ID0gdGhpcy5nZXRQcm9wZXJ0eShcInR1cmJpZGl0eVwiLCB0aGlzLm1fc2t5TWF0ZXJpYWwudHVyYmlkaXR5KTtcclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIERlZmluZXMgdGhlIHNreSBhcHBlYXJhbmNlIChsaWdodCBpbnRlbnNpdHkpLlxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgdGhpcy5tX3NreU1hdGVyaWFsLnJheWxlaWdoID0gdGhpcy5nZXRQcm9wZXJ0eShcInJheWxlaWdoXCIsIHRoaXMubV9za3lNYXRlcmlhbC5yYXlsZWlnaCk7XHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBEZWZpbmVzIHRoZSBtaWVDb2VmZmljaWVudCBpbiBpbnRlcnZhbCBbMCwgMC4xXSB3aGljaCBhZmZlY3RzIHRoZSBwcm9wZXJ0eSAubWllRGlyZWN0aW9uYWxHLlxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgdGhpcy5tX3NreU1hdGVyaWFsLm1pZUNvZWZmaWNpZW50ID0gdGhpcy5nZXRQcm9wZXJ0eShcIm1pZUNvZWZmaWNpZW50XCIsIHRoaXMubV9za3lNYXRlcmlhbC5taWVDb2VmZmljaWVudCk7XHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBEZWZpbmVzIHRoZSBhbW91bnQgb2YgaGF6ZSBwYXJ0aWNsZXMgZm9sbG93aW5nIHRoZSBNaWUgc2NhdHRlcmluZyB0aGVvcnkuXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICB0aGlzLm1fc2t5TWF0ZXJpYWwubWllRGlyZWN0aW9uYWxHID0gdGhpcy5nZXRQcm9wZXJ0eShcIm1pZURpcmVjdGlvbmFsR1wiLCB0aGlzLm1fc2t5TWF0ZXJpYWwubWllRGlyZWN0aW9uYWxHKTtcclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIERlZmluZXMgdGhlIGRpc3RhbmNlIG9mIHRoZSBzdW4gYWNjb3JkaW5nIHRvIHRoZSBhY3RpdmUgc2NlbmUgY2FtZXJhLlxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgdGhpcy5tX3NreU1hdGVyaWFsLmRpc3RhbmNlID0gdGhpcy5nZXRQcm9wZXJ0eShcImRpc3RhbmNlXCIsIHRoaXMubV9za3lNYXRlcmlhbC5kaXN0YW5jZSk7XHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBEZWZpbmVzIHRoZSBzdW4gaW5jbGluYXRpb24sIGluIGludGVydmFsIFstMC41LCAwLjVdLiBXaGVuIHRoZSBpbmNsaW5hdGlvbiBpcyBub3QgMCwgdGhlIHN1biBpcyBzYWlkXHJcbiAgICAgICAgICAgICAqIFwiaW5jbGluZWRcIi5cclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIHRoaXMubV9za3lNYXRlcmlhbC5pbmNsaW5hdGlvbiA9IHRoaXMuZ2V0UHJvcGVydHkoXCJpbmNsaW5hdGlvblwiLCB0aGlzLm1fc2t5TWF0ZXJpYWwuaW5jbGluYXRpb24pO1xyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogRGVmaW5lcyB0aGUgc29sYXIgYXppbXV0aCBpbiBpbnRlcnZhbCBbMCwgMV0uIFRoZSBhemltdXRoIGlzIHRoZSBhbmdsZSBpbiB0aGUgaG9yaXpvbnRhbCBwbGFuIGJldHdlZW5cclxuICAgICAgICAgICAgICogYW4gb2JqZWN0IGRpcmVjdGlvbiBhbmQgYSByZWZlcmVuY2UgZGlyZWN0aW9uLlxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgdGhpcy5tX3NreU1hdGVyaWFsLmF6aW11dGggPSB0aGlzLmdldFByb3BlcnR5KFwiYXppbXV0aFwiLCB0aGlzLm1fc2t5TWF0ZXJpYWwuYXppbXV0aCk7XHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBEZWZpbmVzIGFuIG9mZnNldCB2ZWN0b3IgdXNlZCB0byBnZXQgYSBob3Jpem9uIG9mZnNldC5cclxuICAgICAgICAgICAgICogQGV4YW1wbGUgc2t5TWF0ZXJpYWwuY2FtZXJhT2Zmc2V0LnkgPSBjYW1lcmEuZ2xvYmFsUG9zaXRpb24ueSAvLyBTZXQgaG9yaXpvbiByZWxhdGl2ZSB0byAwIG9uIHRoZSBZIGF4aXNcclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIGNvbnN0IGNhbU9mZnNldERhdGE6QkFCWUxPTi5JVW5pdHlWZWN0b3IzID0gdGhpcy5nZXRQcm9wZXJ0eShcImNhbWVyYU9mZnNldFwiKTtcclxuICAgICAgICAgICAgaWYgKGNhbU9mZnNldERhdGEgIT0gbnVsbCkgdGhpcy5tX3NreU1hdGVyaWFsLmNhbWVyYU9mZnNldCA9IEJBQllMT04uVXRpbGl0aWVzLlBhcnNlVmVjdG9yMyhjYW1PZmZzZXREYXRhKTtcclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIERlZmluZXMgaWYgdGhlIHN1biBwb3NpdGlvbiBzaG91bGQgYmUgY29tcHV0ZWQgKGluY2xpbmF0aW9uIGFuZCBhemltdXRoKSBhY2NvcmRpbmcgdG8gdGhlIHNjZW5lXHJcbiAgICAgICAgICAgICAqIHN1biBwb3NpdGlvbi5cclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIHRoaXMubV9za3lNYXRlcmlhbC51c2VTdW5Qb3NpdGlvbiA9IHRoaXMuZ2V0UHJvcGVydHkoXCJ1c2VTdW5Qb3NpdGlvblwiLCB0aGlzLm1fc2t5TWF0ZXJpYWwudXNlU3VuUG9zaXRpb24pO1xyXG4gICAgICAgICAgICB0aGlzLm1fc2t5TWF0ZXJpYWwuc3VuUG9zaXRpb24gPSBuZXcgQkFCWUxPTi5WZWN0b3IzKDAsIDUwLCAwKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuc2NlbmUubWV0YWRhdGEgIT0gbnVsbCAmJiB0aGlzLnNjZW5lLm1ldGFkYXRhLnVuaXR5ICE9IG51bGwgJiYgdGhpcy5zY2VuZS5tZXRhZGF0YS51bml0eSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc2NlbmUubWV0YWRhdGEudW5pdHkuc3VucG9zaXRpb24gIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubV9za3lNYXRlcmlhbC5zdW5Qb3NpdGlvbiA9IEJBQllMT04uVXRpbGl0aWVzLlBhcnNlVmVjdG9yMyh0aGlzLnNjZW5lLm1ldGFkYXRhLnVuaXR5LnN1bnBvc2l0aW9uKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBBc3NpZ24gU2t5IE1hdGVyaWFsIFRvIFNreWJveCBNZXNoXHJcbiAgICAgICAgICAgIHRoaXMubV9za3lib3hNZXNoLm1hdGVyaWFsID0gdGhpcy5tX3NreU1hdGVyaWFsO1xyXG4gICAgICAgICAgICAvLyBTZXR1cCBFbnZpcm9ubWVudCBSZWZsZWN0aW9uIFByb2JlIFRleHR1cmVcclxuICAgICAgICAgICAgaWYgKHRoaXMucmVmbGVjdGlvbnMgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubV9yZWZsZWN0UHJvYmUgPSBuZXcgQkFCWUxPTi5SZWZsZWN0aW9uUHJvYmUoXCJTa3lib3gtUmVmbGVjdGlvblByb2JlXCIsIHRoaXMucHJvYmVzaXplLCB0aGlzLnNjZW5lKTtcclxuICAgICAgICAgICAgICAgIHRoaXMubV9yZWZsZWN0UHJvYmUucmVuZGVyTGlzdC5wdXNoKHRoaXMubV9za3lib3hNZXNoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2NlbmUuY3VzdG9tUmVuZGVyVGFyZ2V0cy5wdXNoKHRoaXMubV9yZWZsZWN0UHJvYmUuY3ViZVRleHR1cmUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zY2VuZS5lbnZpcm9ubWVudFRleHR1cmUgPSB0aGlzLm1fcmVmbGVjdFByb2JlLmN1YmVUZXh0dXJlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zY2VuZS5lbnZpcm9ubWVudEludGVuc2l0eSA9IHRoaXMucmVmbGVjdGxldmVsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHByb3RlY3RlZCBkZXN0cm95U2t5Ym94TWF0ZXJpYWwoKTp2b2lkIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMubV9za3lib3hNZXNoICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubV9za3lib3hNZXNoLmRpc3Bvc2UoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMubV9za3lib3hNZXNoID0gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy5tX3JlZmxlY3RQcm9iZSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1fcmVmbGVjdFByb2JlLmRpc3Bvc2UoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMubV9yZWZsZWN0UHJvYmUgPSBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm1fc2t5TWF0ZXJpYWwgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tX3NreU1hdGVyaWFsLmRpc3Bvc2UoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMubV9za3lNYXRlcmlhbCA9IG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLyoqIFNldCBTa3lib3ggTWVzaCB0aW50IGNvbG9yLiAoQm94IE1lc2ggVmVydGV4IENvbG9ycykgKi9cclxuICAgICAgICBwdWJsaWMgc2V0U2t5Ym94VGludENvbG9yKGNvbG9yOkJBQllMT04uQ29sb3IzKTp2b2lkIHtcclxuICAgICAgICAgICAgY29uc3QgY29sb3JzID0gW107XHJcbiAgICAgICAgICAgIGNvbnN0IG51bVZlcnRpY2VzID0gdGhpcy5tX3NreWJveE1lc2guZ2V0VG90YWxWZXJ0aWNlcygpO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bVZlcnRpY2VzOyArK2kpIHtcclxuICAgICAgICAgICAgICAgIGNvbG9ycy5wdXNoKGNvbG9yLnIsIGNvbG9yLmcsIGNvbG9yLmIsIDEuMCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5tX3NreWJveE1lc2guc2V0VmVydGljZXNEYXRhKFwiY29sb3JcIiwgY29sb3JzKTtcclxuICAgICAgICAgICAgdGhpcy5tX3NreWJveE1lc2gudXNlVmVydGV4Q29sb3JzID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwibW9kdWxlIFBST0pFQ1Qge1xyXG4gICAgLyoqXHJcbiAgICAgwqDCoMKgwqDCoCrCoEJhYnlsb27CoHdhdGVywqBtYXRlcmlhbMKgc3lzdGVtwqBwcm/CoGNsYXNzwqAoQmFieWxvbsKgV2F0ZXLCoE1hdGVyaWFsKVxyXG4gICAgIMKgwqDCoMKgwqAqwqBAY2xhc3PCoFdhdGVyTWF0ZXJpYWxTeXN0ZW3CoC3CoEFsbMKgcmlnaHRzwqByZXNlcnZlZMKgKGMpwqAyMDIwwqBNYWNrZXnCoEtpbmFyZFxyXG4gICAgIMKgwqDCoMKgwqAqL1xyXG4gICAgZXhwb3J0IGNsYXNzIFdhdGVyTWF0ZXJpYWxTeXN0ZW0gZXh0ZW5kcyBCQUJZTE9OLlNjcmlwdENvbXBvbmVudCB7XHJcbiAgICAgICAgcHJpdmF0ZSB3YXRlclRhZzogc3RyaW5nID0gXCJXYXRlclwiO1xyXG4gICAgICAgIHByaXZhdGUgdGFyZ2V0U2l6ZTogQkFCWUxPTi5WZWN0b3IyID0gbmV3IEJBQllMT04uVmVjdG9yMigxMjgsIDEyOCk7XHJcbiAgICAgICAgcHJpdmF0ZSByZW5kZXJTaXplOiBCQUJZTE9OLlZlY3RvcjIgPSBuZXcgQkFCWUxPTi5WZWN0b3IyKDUxMiwgNTEyKTtcclxuICAgICAgICBwcml2YXRlIGRlcHRoRmFjdG9yOiBudW1iZXIgPSAxLjA7XHJcbiAgICAgICAgcHJpdmF0ZSByZWZsZWN0U2t5Ym94OiBib29sZWFuID0gdHJ1ZTtcclxuICAgICAgICBwcml2YXRlIHN1YkRpdmlzaW9uczogbnVtYmVyID0gMzI7XHJcbiAgICAgICAgcHJpdmF0ZSBoZWlnaHRPZmZzZXQ6IG51bWJlciA9IDEuMDtcclxuICAgICAgICBwcml2YXRlIHdpbmREaXJlY3Rpb246IEJBQllMT04uVmVjdG9yMiA9IG5ldyBCQUJZTE9OLlZlY3RvcjIoMCwgMSk7XHJcbiAgICAgICAgcHJpdmF0ZSB3aW5kRm9yY2U6IG51bWJlciA9IDY7XHJcbiAgICAgICAgcHJpdmF0ZSB3YXZlU3BlZWQ6IG51bWJlciA9IDEuMDtcclxuICAgICAgICBwcml2YXRlIHdhdmVMZW5ndGg6IG51bWJlciA9IDAuNDtcclxuICAgICAgICBwcml2YXRlIHdhdmVIZWlnaHQ6IG51bWJlciA9IDAuNDtcclxuICAgICAgICBwcml2YXRlIGJ1bXBIZWlnaHQ6IG51bWJlciA9IDAuNDtcclxuICAgICAgICBwcml2YXRlIGJ1bXBTdXBlcmltcG9zZTogYm9vbGVhbjtcclxuICAgICAgICBwcml2YXRlIGJ1bXBBZmZlY3RzUmVmbGVjdGlvbjogYm9vbGVhbjtcclxuICAgICAgICBwcml2YXRlIHdhdGVyQ29sb3I6IEJBQllMT04uQ29sb3IzID0gbmV3IEJBQllMT04uQ29sb3IzKDAuMSwgMC4xLCAwLjYpO1xyXG4gICAgICAgIHByaXZhdGUgY29sb3JCbGVuZEZhY3RvcjogbnVtYmVyID0gMC4yO1xyXG4gICAgICAgIHByaXZhdGUgd2F0ZXJDb2xvcjI6IEJBQllMT04uQ29sb3IzID0gbmV3IEJBQllMT04uQ29sb3IzKDAuMSwgMC4xLCAwLjYpO1xyXG4gICAgICAgIHByaXZhdGUgY29sb3JCbGVuZEZhY3RvcjI6IG51bWJlciA9IDAuMjtcclxuICAgICAgICBwcml2YXRlIGRpc2FibGVDbGlwUGxhbmU6IGJvb2xlYW4gPSBmYWxzZTtcclxuICAgICAgICBwcml2YXRlIGZyZXNuZWxTZXBhcmF0ZTogYm9vbGVhbjtcclxuXHJcbiAgICAgICAgcHVibGljIGdldFdhdGVyR2VvbWV0cnkoKTogQkFCWUxPTi5BYnN0cmFjdE1lc2gge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5tX3dhdGVyR2VvbWV0cnk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgZ2V0V2F0ZXJNYXRlcmlhbCgpOiBCQUJZTE9OLldhdGVyTWF0ZXJpYWwge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5tX3dhdGVyTWF0ZXJpYWw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcm90ZWN0ZWQgbV93YXRlckdlb21ldHJ5OiBCQUJZTE9OLkFic3RyYWN0TWVzaCA9IG51bGw7XHJcbiAgICAgICAgcHJvdGVjdGVkIG1fd2F0ZXJNYXRlcmlhbDogQkFCWUxPTi5XYXRlck1hdGVyaWFsID0gbnVsbDtcclxuXHJcbiAgICAgICAgcHJvdGVjdGVkIGF3YWtlKCk6IHZvaWQge1xyXG4gICAgICAgICAgICB0aGlzLndhdGVyVGFnID0gdGhpcy5nZXRQcm9wZXJ0eShcIndhdGVyVGFnXCIsIHRoaXMud2F0ZXJUYWcpO1xyXG4gICAgICAgICAgICB0aGlzLmRlcHRoRmFjdG9yID0gdGhpcy5nZXRQcm9wZXJ0eShcImRlcHRoRmFjdG9yXCIsIHRoaXMuZGVwdGhGYWN0b3IpO1xyXG4gICAgICAgICAgICB0aGlzLnN1YkRpdmlzaW9ucyA9IHRoaXMuZ2V0UHJvcGVydHkoXCJzdWJEaXZpc2lvbnNcIiwgdGhpcy5zdWJEaXZpc2lvbnMpO1xyXG4gICAgICAgICAgICB0aGlzLmhlaWdodE9mZnNldCA9IHRoaXMuZ2V0UHJvcGVydHkoXCJoZWlnaHRPZmZzZXRcIiwgdGhpcy5oZWlnaHRPZmZzZXQpO1xyXG4gICAgICAgICAgICB0aGlzLnJlZmxlY3RTa3lib3ggPSB0aGlzLmdldFByb3BlcnR5KFwicmVmbGVjdFNreWJveFwiLCB0aGlzLnJlZmxlY3RTa3lib3gpO1xyXG4gICAgICAgICAgICB0aGlzLndpbmRGb3JjZSA9IHRoaXMuZ2V0UHJvcGVydHkoXCJ3aW5kRm9yY2VcIiwgdGhpcy53aW5kRm9yY2UpO1xyXG4gICAgICAgICAgICB0aGlzLndhdmVTcGVlZCA9IHRoaXMuZ2V0UHJvcGVydHkoXCJ3YXZlU3BlZWRcIiwgdGhpcy53YXZlU3BlZWQpO1xyXG4gICAgICAgICAgICB0aGlzLndhdmVMZW5ndGggPSB0aGlzLmdldFByb3BlcnR5KFwid2F2ZUxlbmd0aFwiLCB0aGlzLndhdmVMZW5ndGgpO1xyXG4gICAgICAgICAgICB0aGlzLndhdmVIZWlnaHQgPSB0aGlzLmdldFByb3BlcnR5KFwid2F2ZUhlaWdodFwiLCB0aGlzLndhdmVIZWlnaHQpO1xyXG4gICAgICAgICAgICB0aGlzLmJ1bXBIZWlnaHQgPSB0aGlzLmdldFByb3BlcnR5KFwiYnVtcEhlaWdodFwiLCB0aGlzLmJ1bXBIZWlnaHQpO1xyXG4gICAgICAgICAgICB0aGlzLmJ1bXBTdXBlcmltcG9zZSA9IHRoaXMuZ2V0UHJvcGVydHkoXCJidW1wU3VwZXJpbXBvc2VcIiwgdGhpcy5idW1wU3VwZXJpbXBvc2UpO1xyXG4gICAgICAgICAgICB0aGlzLmJ1bXBBZmZlY3RzUmVmbGVjdGlvbiA9IHRoaXMuZ2V0UHJvcGVydHkoXCJidW1wQWZmZWN0c1JlZmxlY3Rpb25cIiwgdGhpcy5idW1wQWZmZWN0c1JlZmxlY3Rpb24pO1xyXG4gICAgICAgICAgICB0aGlzLmNvbG9yQmxlbmRGYWN0b3IgPSB0aGlzLmdldFByb3BlcnR5KFwiY29sb3JCbGVuZEZhY3RvclwiLCB0aGlzLmNvbG9yQmxlbmRGYWN0b3IpO1xyXG4gICAgICAgICAgICB0aGlzLmNvbG9yQmxlbmRGYWN0b3IyID0gdGhpcy5nZXRQcm9wZXJ0eShcImNvbG9yQmxlbmRGYWN0b3IyXCIsIHRoaXMuY29sb3JCbGVuZEZhY3RvcjIpO1xyXG4gICAgICAgICAgICB0aGlzLmRpc2FibGVDbGlwUGxhbmUgPSB0aGlzLmdldFByb3BlcnR5KFwiZGlzYWJsZUNsaXBQbGFuZVwiLCB0aGlzLmRpc2FibGVDbGlwUGxhbmUpO1xyXG4gICAgICAgICAgICB0aGlzLmZyZXNuZWxTZXBhcmF0ZSA9IHRoaXMuZ2V0UHJvcGVydHkoXCJmcmVzbmVsU2VwYXJhdGVcIiwgdGhpcy5mcmVzbmVsU2VwYXJhdGUpO1xyXG4gICAgICAgICAgICAvL8KgLi5cclxuICAgICAgICAgICAgY29uc3Qgd2NvbG9yMTogQkFCWUxPTi5JVW5pdHlDb2xvciA9IHRoaXMuZ2V0UHJvcGVydHkoXCJ3YXRlckNvbG9yXCIpO1xyXG4gICAgICAgICAgICB0aGlzLndhdGVyQ29sb3IgPSBCQUJZTE9OLlV0aWxpdGllcy5QYXJzZUNvbG9yMyh3Y29sb3IxKTtcclxuICAgICAgICAgICAgLy/CoC4uXHJcbiAgICAgICAgICAgIGNvbnN0IHdjb2xvcjI6IEJBQllMT04uSVVuaXR5Q29sb3IgPSB0aGlzLmdldFByb3BlcnR5KFwid2F0ZXJDb2xvcjJcIik7XHJcbiAgICAgICAgICAgIHRoaXMud2F0ZXJDb2xvcjIgPSBCQUJZTE9OLlV0aWxpdGllcy5QYXJzZUNvbG9yMyh3Y29sb3IyKTtcclxuICAgICAgICAgICAgLy/CoC4uXHJcbiAgICAgICAgICAgIGNvbnN0IHdkaXJlY3Rpb246IEJBQllMT04uSVVuaXR5VmVjdG9yMiA9IHRoaXMuZ2V0UHJvcGVydHkoXCJ3aW5kRGlyZWN0aW9uXCIpO1xyXG4gICAgICAgICAgICB0aGlzLndpbmREaXJlY3Rpb24gPSBCQUJZTE9OLlV0aWxpdGllcy5QYXJzZVZlY3RvcjIod2RpcmVjdGlvbik7XHJcbiAgICAgICAgICAgIC8vwqAuLlxyXG4gICAgICAgICAgICBjb25zdCBpdGFyZ2V0c2l6ZTogQkFCWUxPTi5JVW5pdHlWZWN0b3IyID0gdGhpcy5nZXRQcm9wZXJ0eShcInRhcmdldFNpemVcIik7XHJcbiAgICAgICAgICAgIGlmIChpdGFyZ2V0c2l6ZSAhPSBudWxsKSB0aGlzLnRhcmdldFNpemUgPSBCQUJZTE9OLlV0aWxpdGllcy5QYXJzZVZlY3RvcjIoaXRhcmdldHNpemUpO1xyXG4gICAgICAgICAgICAvL8KgLi7CoMKgwqDCoMKgwqDCoMKgXHJcbiAgICAgICAgICAgIGNvbnN0IGlyZW5kZXJzaXplOiBCQUJZTE9OLklVbml0eVZlY3RvcjIgPSB0aGlzLmdldFByb3BlcnR5KFwicmVuZGVyU2l6ZVwiKTtcclxuICAgICAgICAgICAgaWYgKGlyZW5kZXJzaXplICE9IG51bGwpIHRoaXMucmVuZGVyU2l6ZSA9IEJBQllMT04uVXRpbGl0aWVzLlBhcnNlVmVjdG9yMihpcmVuZGVyc2l6ZSk7XHJcbiAgICAgICAgICAgIC8qwqBBd2FrZcKgY29tcG9uZW50wqBmdW5jdGlvbsKgKi9cclxuICAgICAgICAgICAgbGV0IGJ1bXBUZXh0dXJlOiBCQUJZTE9OLlRleHR1cmUgPSBudWxsO1xyXG4gICAgICAgICAgICBjb25zdCBidW1wVGV4dHVyZURhdGE6IEJBQllMT04uSVVuaXR5VGV4dHVyZSA9IHRoaXMuZ2V0UHJvcGVydHkoXCJidW1wVGV4dHVyZVwiKTtcclxuICAgICAgICAgICAgaWYgKGJ1bXBUZXh0dXJlRGF0YSAhPSBudWxsKSBidW1wVGV4dHVyZSA9IEJBQllMT04uVXRpbGl0aWVzLlBhcnNlVGV4dHVyZShidW1wVGV4dHVyZURhdGEsIHRoaXMuc2NlbmUpO1xyXG4gICAgICAgICAgICBpZiAoYnVtcFRleHR1cmUgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tX3dhdGVyTWF0ZXJpYWwgPSBuZXcgQkFCWUxPTi5XYXRlck1hdGVyaWFsKHRoaXMudHJhbnNmb3JtLm5hbWUgKyBcIi5XYXRlclwiLCB0aGlzLnNjZW5lLCB0aGlzLnJlbmRlclNpemUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tX3dhdGVyTWF0ZXJpYWwuYnVtcFRleHR1cmUgPSBidW1wVGV4dHVyZTtcclxuICAgICAgICAgICAgICAgIHRoaXMubV93YXRlck1hdGVyaWFsLndpbmREaXJlY3Rpb24gPSB0aGlzLndpbmREaXJlY3Rpb247XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1fd2F0ZXJNYXRlcmlhbC53aW5kRm9yY2UgPSB0aGlzLndpbmRGb3JjZTtcclxuICAgICAgICAgICAgICAgIHRoaXMubV93YXRlck1hdGVyaWFsLndhdmVTcGVlZCA9IHRoaXMud2F2ZVNwZWVkO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tX3dhdGVyTWF0ZXJpYWwud2F2ZUxlbmd0aCA9IHRoaXMud2F2ZUxlbmd0aDtcclxuICAgICAgICAgICAgICAgIHRoaXMubV93YXRlck1hdGVyaWFsLndhdmVIZWlnaHQgPSB0aGlzLndhdmVIZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1fd2F0ZXJNYXRlcmlhbC5idW1wSGVpZ2h0ID0gdGhpcy5idW1wSGVpZ2h0O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tX3dhdGVyTWF0ZXJpYWwuYnVtcFN1cGVyaW1wb3NlID0gdGhpcy5idW1wU3VwZXJpbXBvc2U7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1fd2F0ZXJNYXRlcmlhbC5idW1wQWZmZWN0c1JlZmxlY3Rpb24gPSB0aGlzLmJ1bXBBZmZlY3RzUmVmbGVjdGlvbjtcclxuICAgICAgICAgICAgICAgIHRoaXMubV93YXRlck1hdGVyaWFsLndhdGVyQ29sb3IgPSB0aGlzLndhdGVyQ29sb3I7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1fd2F0ZXJNYXRlcmlhbC5jb2xvckJsZW5kRmFjdG9yID0gdGhpcy5jb2xvckJsZW5kRmFjdG9yO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tX3dhdGVyTWF0ZXJpYWwud2F0ZXJDb2xvcjIgPSB0aGlzLndhdGVyQ29sb3IyO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tX3dhdGVyTWF0ZXJpYWwuY29sb3JCbGVuZEZhY3RvcjIgPSB0aGlzLmNvbG9yQmxlbmRGYWN0b3IyO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tX3dhdGVyTWF0ZXJpYWwuZGlzYWJsZUNsaXBQbGFuZSA9IHRoaXMuZGlzYWJsZUNsaXBQbGFuZTtcclxuICAgICAgICAgICAgICAgIHRoaXMubV93YXRlck1hdGVyaWFsLmZyZXNuZWxTZXBhcmF0ZSA9IHRoaXMuZnJlc25lbFNlcGFyYXRlO1xyXG4gICAgICAgICAgICAgICAgLy/CoC4uXHJcbiAgICAgICAgICAgICAgICAvL8KgV2F0ZXLCoE1hdGVyaWFswqBUYWdzXHJcbiAgICAgICAgICAgICAgICAvL8KgLi5cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnJlZmxlY3RTa3lib3ggPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBza3lib3hNZXNoOiBCQUJZTE9OLkFic3RyYWN0TWVzaCA9IEJBQllMT04uU2NlbmVNYW5hZ2VyLkdldEFtYmllbnRTa3lib3godGhpcy5zY2VuZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNreWJveE1lc2ggIT0gbnVsbCkgdGhpcy5tX3dhdGVyTWF0ZXJpYWwuYWRkVG9SZW5kZXJMaXN0KHNreWJveE1lc2gpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMud2F0ZXJUYWcgIT0gbnVsbCAmJiB0aGlzLndhdGVyVGFnICE9PSBcIlwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgd2F0ZXJNZXNoZXM6IEJBQllMT04uQWJzdHJhY3RNZXNoW10gPSB0aGlzLnNjZW5lLmdldE1lc2hlc0J5VGFncyh0aGlzLndhdGVyVGFnKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAod2F0ZXJNZXNoZXMgIT0gbnVsbCAmJiB3YXRlck1lc2hlcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdhdGVyTWVzaGVzLmZvckVhY2goKG1lc2g6IEJBQllMT04uQWJzdHJhY3RNZXNoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1fd2F0ZXJNYXRlcmlhbC5hZGRUb1JlbmRlckxpc3QobWVzaCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vwqAuLlxyXG4gICAgICAgICAgICAgICAgLy/CoFdhdGVywqBNYXRlcmlhbMKgTWVzaFxyXG4gICAgICAgICAgICAgICAgLy/CoC4uXHJcbiAgICAgICAgICAgICAgICB0aGlzLm1fd2F0ZXJHZW9tZXRyeSA9IEJBQllMT04uTWVzaC5DcmVhdGVHcm91bmQodGhpcy50cmFuc2Zvcm0ubmFtZSArIFwiLldhdGVyTWVzaFwiLCB0aGlzLnRhcmdldFNpemUueCwgdGhpcy50YXJnZXRTaXplLnksIHRoaXMuc3ViRGl2aXNpb25zLCB0aGlzLnNjZW5lLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1fd2F0ZXJHZW9tZXRyeS5wYXJlbnQgPSB0aGlzLnRyYW5zZm9ybTtcclxuICAgICAgICAgICAgICAgIHRoaXMubV93YXRlckdlb21ldHJ5LnBvc2l0aW9uLnNldCgwLCB0aGlzLmhlaWdodE9mZnNldCwgMCk7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5kZXB0aEZhY3RvciA+IDApIHRoaXMubV93YXRlckdlb21ldHJ5LnNjYWxpbmcueSAqPSB0aGlzLmRlcHRoRmFjdG9yO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tX3dhdGVyR2VvbWV0cnkubWF0ZXJpYWwgPSB0aGlzLm1fd2F0ZXJNYXRlcmlhbDtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIEJBQllMT04uU2NlbmVNYW5hZ2VyLkxvZ1dhcm5pbmcoXCJOb8Kgc3VwcG9ydGVkwqB3YXRlcsKgYnVtcMKgdGV4dHVyZcKgZm9yOsKgXCIgKyB0aGlzLnRyYW5zZm9ybS5uYW1lKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJvdGVjdGVkIHN0YXJ0KCk6IHZvaWQge8KgLyrCoFN0YXJ0wqByZW5kZXLCoGxvb3DCoGZ1bmN0aW9uwqAqL1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJvdGVjdGVkIHVwZGF0ZSgpOiB2b2lkIHvCoC8qwqBVcGRhdGXCoHJlbmRlcsKgbG9vcMKgZnVuY3Rpb27CoCovXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcm90ZWN0ZWQgbGF0ZSgpOiB2b2lkIHvCoC8qwqBMYXRlwqB1cGRhdGXCoHJlbmRlcsKgbG9vcMKgZnVuY3Rpb27CoCovXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcm90ZWN0ZWQgYWZ0ZXIoKTogdm9pZCB7wqAvKsKgQWZ0ZXLCoHJlbmRlcsKgbG9vcMKgZnVuY3Rpb27CoCovXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcm90ZWN0ZWQgZGVzdHJveSgpOiB2b2lkIHvCoC8qwqBEZXN0cm95wqBjb21wb25lbnTCoGZ1bmN0aW9uwqAqL1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCJtb2R1bGUgUFJPSkVDVCB7XHJcbiAgICAvKipcclxuICAgICogQmFieWxvbiBTY3JpcHQgQ29tcG9uZW50XHJcbiAgICAqIEBjbGFzcyBTaW1wbGVGb2xsb3dDYW1lcmFcclxuICAgICovXHJcbiAgICBleHBvcnQgY2xhc3MgU2ltcGxlRm9sbG93Q2FtZXJhIGV4dGVuZHMgQkFCWUxPTi5TY3JpcHRDb21wb25lbnQge1xyXG4gICAgICAgIHByaXZhdGUgc21vb3RoRm9sbG93Om51bWJlciA9IDA7XHJcbiAgICAgICAgcHJpdmF0ZSBzbW9vdGhSb3RhdGU6bnVtYmVyID0gMDtcclxuICAgICAgICBwcml2YXRlIG1hdGNoUm90YXRpb246Ym9vbGVhbiA9IGZhbHNlO1xyXG4gICAgICAgIHByaXZhdGUgZm9sbG93VGFyZ2V0OkJBQllMT04uVHJhbnNmb3JtTm9kZSA9IG51bGw7XHJcbiAgICAgICAgcHJpdmF0ZSB0YXJnZXRQb3NpdGlvbjpCQUJZTE9OLlZlY3RvcjMgPSBCQUJZTE9OLlZlY3RvcjMuWmVybygpO1xyXG4gICAgICAgIHByaXZhdGUgdGFyZ2V0Um90YXRpb246QkFCWUxPTi5RdWF0ZXJuaW9uID0gQkFCWUxPTi5RdWF0ZXJuaW9uLlplcm8oKTtcclxuXHJcbiAgICAgICAgcHJvdGVjdGVkIGF3YWtlKCk6dm9pZCB7XHJcbiAgICAgICAgICAgIHRoaXMuc21vb3RoRm9sbG93ID0gdGhpcy5nZXRQcm9wZXJ0eShcInNtb290aEZvbGxvd1wiLCB0aGlzLnNtb290aEZvbGxvdyk7XHJcbiAgICAgICAgICAgIHRoaXMuc21vb3RoUm90YXRlID0gdGhpcy5nZXRQcm9wZXJ0eShcInNtb290aFJvdGF0ZVwiLCB0aGlzLnNtb290aFJvdGF0ZSk7XHJcbiAgICAgICAgICAgIHRoaXMubWF0Y2hSb3RhdGlvbiA9IHRoaXMuZ2V0UHJvcGVydHkoXCJtYXRjaFJvdGF0aW9uXCIsIHRoaXMubWF0Y2hSb3RhdGlvbik7XHJcbiAgICAgICAgICAgIGNvbnN0IGZ0YXJnZXQ6QkFCWUxPTi5JVW5pdHlUcmFuc2Zvcm0gPSB0aGlzLmdldFByb3BlcnR5KFwiZm9sbG93VGFyZ2V0XCIpO1xyXG4gICAgICAgICAgICBpZiAoZnRhcmdldCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZvbGxvd1RhcmdldCA9IEJBQllMT04uVXRpbGl0aWVzLlBhcnNlVHJhbnNmb3JtQnlJRChmdGFyZ2V0LCB0aGlzLnNjZW5lKTtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmZvbGxvd1RhcmdldCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgQkFCWUxPTi5VdGlsaXRpZXMuVmFsaWRhdGVUcmFuc2Zvcm1RdWF0ZXJuaW9uKHRoaXMuZm9sbG93VGFyZ2V0KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBCQUJZTE9OLlV0aWxpdGllcy5WYWxpZGF0ZVRyYW5zZm9ybVF1YXRlcm5pb24odGhpcy50cmFuc2Zvcm0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJvdGVjdGVkIHN0YXJ0KCk6IHZvaWQge1xyXG4gICAgICAgICAgICBCQUJZTE9OLlNjZW5lTWFuYWdlci5Db25zb2xlTG9nKFwiU3RhcnRpbmcgc2ltcGxlIGZvbGxvdyB0YXJnZXQgZm9yOiBcIiArIHRoaXMudHJhbnNmb3JtLm5hbWUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJvdGVjdGVkIGxhdGUoKTogdm9pZCB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmZvbGxvd1RhcmdldCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBkZWx0YVRpbWU6bnVtYmVyID0gdGhpcy5nZXREZWx0YVNlY29uZHMoKTtcclxuICAgICAgICAgICAgICAgIEJBQllMT04uVXRpbGl0aWVzLkdldEFic29sdXRlUG9zaXRpb25Ub1JlZih0aGlzLmZvbGxvd1RhcmdldCwgdGhpcy50YXJnZXRQb3NpdGlvbik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRhcmdldFJvdGF0aW9uLmNvcHlGcm9tKHRoaXMuZm9sbG93VGFyZ2V0LmFic29sdXRlUm90YXRpb25RdWF0ZXJuaW9uKTtcclxuICAgICAgICAgICAgICAgIC8vIC4uXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zbW9vdGhGb2xsb3cgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgQkFCWUxPTi5WZWN0b3IzLkxlcnBUb1JlZih0aGlzLnRyYW5zZm9ybS5wb3NpdGlvbiwgdGhpcy50YXJnZXRQb3NpdGlvbiwgKGRlbHRhVGltZSAqIHRoaXMuc21vb3RoRm9sbG93KSwgdGhpcy50cmFuc2Zvcm0ucG9zaXRpb24pO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnRyYW5zZm9ybS5wb3NpdGlvbi5jb3B5RnJvbSh0aGlzLnRhcmdldFBvc2l0aW9uKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIC4uXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5tYXRjaFJvdGF0aW9uID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuc21vb3RoUm90YXRlID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBCQUJZTE9OLlF1YXRlcm5pb24uU2xlcnBUb1JlZih0aGlzLnRyYW5zZm9ybS5yb3RhdGlvblF1YXRlcm5pb24sIHRoaXMudGFyZ2V0Um90YXRpb24sIChkZWx0YVRpbWUgKiB0aGlzLnNtb290aFJvdGF0ZSksIHRoaXMudHJhbnNmb3JtLnJvdGF0aW9uUXVhdGVybmlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50cmFuc2Zvcm0ucm90YXRpb25RdWF0ZXJuaW9uLmNvcHlGcm9tKHRoaXMudGFyZ2V0Um90YXRpb24pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsIm1vZHVsZSBQUk9KRUNUIHtcclxuICAgIC8qKlxyXG4gICAgKiBCYWJ5bG9uIFNjcmlwdCBDb21wb25lbnRcclxuICAgICogQGNsYXNzIFNtb290aEZvbGxvd1RhcmdldFxyXG4gICAgKi9cclxuICAgIGV4cG9ydCBjbGFzcyBTbW9vdGhGb2xsb3dUYXJnZXQgZXh0ZW5kcyBCQUJZTE9OLlNjcmlwdENvbXBvbmVudCB7XHJcblxyXG4gICAgICAgIHB1YmxpYyB0YXJnZXQ6QkFCWUxPTi5UcmFuc2Zvcm1Ob2RlID0gbnVsbDtcclxuICAgICAgICBwdWJsaWMgdGFyZ2V0SGVpZ2h0Om51bWJlciA9IDEuNzU7XHJcbiAgICAgICAgcHVibGljIGZvbGxvd0hlaWdodDpudW1iZXIgPSAxLjc1O1xyXG5cdFx0cHVibGljIGhlaWdodERhbXBpbmc6bnVtYmVyID0gMTIuMDtcclxuICAgICAgICBwdWJsaWMgcm90YXRpb25EYW1waW5nOm51bWJlciA9IDMuMDtcclxuXHRcdHB1YmxpYyBtaW5pbXVtRGlzdGFuY2U6bnVtYmVyID0gNi4wO1xyXG4gICAgICAgIHB1YmxpYyBtYXhpbXVtRGlzdGFuY2U6bnVtYmVyID0gOC4wO1xyXG4gICAgICAgIHB1YmxpYyBzdGFydEJlaGluZFRhcmdldDpib29sZWFuID0gdHJ1ZTtcclxuICAgICAgICBwdWJsaWMgZm9sbG93QmVoaW5kVGFyZ2V0OmJvb2xlYW4gPSB0cnVlO1xyXG5cclxuXHRcdHByaXZhdGUgdGFyZ2V0UG9zaXRpb246QkFCWUxPTi5WZWN0b3IzID0gQkFCWUxPTi5WZWN0b3IzLlplcm8oKTtcclxuICAgICAgICBwcml2YXRlIHRhcmdldEFuZ2xlczpCQUJZTE9OLlZlY3RvcjMgPSBuZXcgQkFCWUxPTi5WZWN0b3IzKDAsMCwwKTtcclxuICAgICAgICBwcml2YXRlIHRyYW5zZm9ybUFuZ2xlczpCQUJZTE9OLlZlY3RvcjMgPSBuZXcgQkFCWUxPTi5WZWN0b3IzKDAsMCwwKTtcclxuICAgICAgICBwcml2YXRlIHBvc2l0aW9uQnVmZmVyOkJBQllMT04uVmVjdG9yMyA9IG5ldyBCQUJZTE9OLlZlY3RvcjMoMCwwLDApO1xyXG4gICAgICAgIHByaXZhdGUgcm90YXRpb25CdWZmZXI6QkFCWUxPTi5RdWF0ZXJuaW9uID0gbmV3IEJBQllMT04uUXVhdGVybmlvbigwLDAsMCwxKTtcclxuICAgICAgICBwcml2YXRlIHRlbXBSb3RhdGlvbkJ1ZmZlcjpCQUJZTE9OLlZlY3RvcjMgPSBuZXcgQkFCWUxPTi5WZWN0b3IzKDAsMCwwKTtcclxuICAgICAgICBcclxuICAgICAgICBwcm90ZWN0ZWQgYXdha2UoKTogdm9pZCB7XHJcbiAgICAgICAgICAgIHRoaXMudGFyZ2V0SGVpZ2h0ID0gdGhpcy5nZXRQcm9wZXJ0eShcInRhcmdldEhlaWdodFwiLCB0aGlzLnRhcmdldEhlaWdodCk7XHJcbiAgICAgICAgICAgIHRoaXMuZm9sbG93SGVpZ2h0ID0gdGhpcy5nZXRQcm9wZXJ0eShcImZvbGxvd0hlaWdodFwiLCB0aGlzLmZvbGxvd0hlaWdodCk7XHJcbiAgICAgICAgICAgIHRoaXMuaGVpZ2h0RGFtcGluZyA9IHRoaXMuZ2V0UHJvcGVydHkoXCJoZWlnaHREYW1waW5nXCIsIHRoaXMuaGVpZ2h0RGFtcGluZyk7XHJcbiAgICAgICAgICAgIHRoaXMucm90YXRpb25EYW1waW5nID0gdGhpcy5nZXRQcm9wZXJ0eShcInJvdGF0aW9uRGFtcGluZ1wiLCB0aGlzLnJvdGF0aW9uRGFtcGluZyk7XHJcbiAgICAgICAgICAgIHRoaXMubWluaW11bURpc3RhbmNlID0gdGhpcy5nZXRQcm9wZXJ0eShcIm1pbmltdW1EaXN0YW5jZVwiLCB0aGlzLm1pbmltdW1EaXN0YW5jZSk7XHJcbiAgICAgICAgICAgIHRoaXMubWF4aW11bURpc3RhbmNlID0gdGhpcy5nZXRQcm9wZXJ0eShcIm1heGltdW1EaXN0YW5jZVwiLCB0aGlzLm1heGltdW1EaXN0YW5jZSk7XHJcbiAgICAgICAgICAgIHRoaXMuc3RhcnRCZWhpbmRUYXJnZXQgPSB0aGlzLmdldFByb3BlcnR5KFwic3RhcnRCZWhpbmRUYXJnZXRcIiwgdGhpcy5zdGFydEJlaGluZFRhcmdldCk7XHJcbiAgICAgICAgICAgIHRoaXMuZm9sbG93QmVoaW5kVGFyZ2V0ID0gdGhpcy5nZXRQcm9wZXJ0eShcImZvbGxvd0JlaGluZFRhcmdldFwiLCB0aGlzLmZvbGxvd0JlaGluZFRhcmdldCk7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5yb3RhdGlvbkRhbXBpbmcgPD0gMCkgdGhpcy5yb3RhdGlvbkRhbXBpbmcgPSAzO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5oZWlnaHREYW1waW5nIDw9IDApIHRoaXMuaGVpZ2h0RGFtcGluZyA9IDEyO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgZm9sbG93VGFyZ2V0OmFueSA9IHRoaXMuZ2V0UHJvcGVydHkoXCJ0YXJnZXRcIik7XHJcbiAgICAgICAgICAgIGlmIChmb2xsb3dUYXJnZXQgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy50YXJnZXQgPSBCQUJZTE9OLlV0aWxpdGllcy5QYXJzZVRyYW5zZm9ybUJ5SUQoZm9sbG93VGFyZ2V0LCB0aGlzLnNjZW5lKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJvdGVjdGVkIHN0YXJ0KCk6IHZvaWQge1xyXG4gICAgICAgICAgICBpZiAodGhpcy50YXJnZXQgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc3RhcnRCZWhpbmRUYXJnZXQgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBUT0RPIC0gdGhpcy50cmFuc2Zvcm0ucG9zaXRpb24gPSB0aGlzLnRhcmdldC5wb3NpdGlvbi5jbG9uZSgpOyAtID8/P1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcm90ZWN0ZWQgbGF0ZSgpOiB2b2lkIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMudGFyZ2V0ICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudGFyZ2V0UG9zaXRpb24uY29weUZyb20odGhpcy50YXJnZXQucG9zaXRpb24pO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZm9sbG93QmVoaW5kVGFyZ2V0ID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZGVsdGFUaW1lOm51bWJlciA9IHRoaXMuZ2V0RGVsdGFTZWNvbmRzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgQkFCWUxPTi5VdGlsaXRpZXMuVG9FdWxlclRvUmVmKHRoaXMudGFyZ2V0LnJvdGF0aW9uUXVhdGVybmlvbiwgdGhpcy50YXJnZXRBbmdsZXMpO1xyXG4gICAgICAgICAgICAgICAgICAgIEJBQllMT04uVXRpbGl0aWVzLlRvRXVsZXJUb1JlZih0aGlzLnRyYW5zZm9ybS5yb3RhdGlvblF1YXRlcm5pb24sIHRoaXMudHJhbnNmb3JtQW5nbGVzKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgbm9ybWFsaXplZFNwZWVkOm51bWJlciA9IDEuMDsgLy8gVE9ETyAtIEdldCBUYXJnZXQgTm9ybWFsaXplZCBTcGVlZFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHdhbnRlZEhlaWdodDpudW1iZXIgPSAodGhpcy50YXJnZXRQb3NpdGlvbi55ICsgdGhpcy5mb2xsb3dIZWlnaHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRIZWlnaHQ6bnVtYmVyID0gQkFCWUxPTi5TY2FsYXIuTGVycCh0aGlzLnRyYW5zZm9ybS5wb3NpdGlvbi55LCB3YW50ZWRIZWlnaHQsICh0aGlzLmhlaWdodERhbXBpbmcgKiBkZWx0YVRpbWUpKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB3YW50ZWRSb3RhdGlvbkFuZ2xlOm51bWJlciA9IHRoaXMudGFyZ2V0QW5nbGVzLnk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY3VycmVudFJvdGF0aW9uQW5nbGU6bnVtYmVyID0gQkFCWUxPTi5TY2FsYXIuTGVycEFuZ2xlKHRoaXMudHJhbnNmb3JtQW5nbGVzLnksIHdhbnRlZFJvdGF0aW9uQW5nbGUsICh0aGlzLnJvdGF0aW9uRGFtcGluZyAqIGRlbHRhVGltZSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHdhbnRlZFRhcmdldERpc3RhbmNlOm51bWJlciA9IEJBQllMT04uU2NhbGFyLkxlcnAodGhpcy5taW5pbXVtRGlzdGFuY2UsIHRoaXMubWF4aW11bURpc3RhbmNlLCBub3JtYWxpemVkU3BlZWQpO1xyXG4gICAgICAgICAgICAgICAgICAgIEJBQllMT04uVXRpbGl0aWVzLkZyb21FdWxlclRvUmVmKDAsIGN1cnJlbnRSb3RhdGlvbkFuZ2xlLCAwLCB0aGlzLnJvdGF0aW9uQnVmZmVyKTtcclxuICAgICAgICAgICAgICAgICAgICBCQUJZTE9OLlV0aWxpdGllcy5NdWx0aXBseVF1YXRlcm5pb25CeVZlY3RvclRvUmVmKHRoaXMucm90YXRpb25CdWZmZXIsIEJBQllMT04uVmVjdG9yMy5Gb3J3YXJkKCksIHRoaXMudGVtcFJvdGF0aW9uQnVmZmVyKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnRlbXBSb3RhdGlvbkJ1ZmZlci5zY2FsZUluUGxhY2Uod2FudGVkVGFyZ2V0RGlzdGFuY2UpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvL2xldCB3YW50ZWRSb3RhdGlvbkFuZ2xlID0gdGhpcy50YXJnZXRBbmdsZXMueTtcclxuICAgICAgICAgICAgICAgICAgICAvL2xldCB3YW50ZWRIZWlnaHQgPSB0aGlzLnRhcmdldFBvc2l0aW9uLnkgKyB0aGlzLmhlaWdodDtcclxuICAgICAgICAgICAgICAgICAgICAvL2xldCBjdXJyZW50Um90YXRpb25BbmdsZSA9IHRoaXMudHJhbnNmb3JtQW5nbGVzLnk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9sZXQgY3VycmVudEhlaWdodCA9IHRoaXMudHJhbnNmb3JtLnBvc2l0aW9uLnk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9jdXJyZW50Um90YXRpb25BbmdsZSA9IEJBQllMT04uU2NhbGFyLkxlcnBBbmdsZShjdXJyZW50Um90YXRpb25BbmdsZSwgd2FudGVkUm90YXRpb25BbmdsZSwgdGhpcy5yb3RhdGlvbkRhbXBpbmcgKiBkZWx0YVRpbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vY3VycmVudEhlaWdodCA9IEJBQllMT04uU2NhbGFyLkxlcnAoY3VycmVudEhlaWdodCwgd2FudGVkSGVpZ2h0LCB0aGlzLmhlaWdodERhbXBpbmcgKiBkZWx0YVRpbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vQkFCWUxPTi5VdGlsaXRpZXMuRnJvbUV1bGVyVG9SZWYoMCwgY3VycmVudFJvdGF0aW9uQW5nbGUsIDAsIHRoaXMucm90YXRpb25CdWZmZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vQkFCWUxPTi5VdGlsaXRpZXMuTXVsdGlwbHlRdWF0ZXJuaW9uQnlWZWN0b3JUb1JlZih0aGlzLnJvdGF0aW9uQnVmZmVyLCBCQUJZTE9OLlZlY3RvcjMuRm9yd2FyZCgpLCB0aGlzLnRlbXBSb3RhdGlvbkJ1ZmZlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgLy90aGlzLnRlbXBSb3RhdGlvbkJ1ZmZlci5zY2FsZUluUGxhY2UodGhpcy5kaXN0YW5jZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucG9zaXRpb25CdWZmZXIuY29weUZyb20odGhpcy50YXJnZXRQb3NpdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wb3NpdGlvbkJ1ZmZlci5zdWJ0cmFjdEluUGxhY2UodGhpcy50ZW1wUm90YXRpb25CdWZmZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudHJhbnNmb3JtLnBvc2l0aW9uLnNldCh0aGlzLnBvc2l0aW9uQnVmZmVyLngsIGN1cnJlbnRIZWlnaHQsIHRoaXMucG9zaXRpb25CdWZmZXIueik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRhcmdldFBvc2l0aW9uLnkgKz0gdGhpcy50YXJnZXRIZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRyYW5zZm9ybS5sb29rQXQodGhpcy50YXJnZXRQb3NpdGlvbik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByb3RlY3RlZCBkZXN0cm95KCk6IHZvaWQge1xyXG4gICAgICAgICAgICB0aGlzLnRhcmdldCA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMudGFyZ2V0QW5nbGVzID0gbnVsbDtcclxuICAgICAgICAgICAgdGhpcy50cmFuc2Zvcm1BbmdsZXMgPSBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLnBvc2l0aW9uQnVmZmVyID0gbnVsbDtcclxuICAgICAgICAgICAgdGhpcy5yb3RhdGlvbkJ1ZmZlciA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMudGVtcFJvdGF0aW9uQnVmZmVyID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJtb2R1bGUgUFJPSkVDVCB7XHJcbiAgICAvKipcclxuICAgICogQmFieWxvbiBTY3JpcHQgQ29tcG9uZW50XHJcbiAgICAqIEBjbGFzcyBXYXlwb2ludFRhcmdldE1hbmFnZXJcclxuICAgICovXHJcbiAgICBleHBvcnQgY2xhc3MgV2F5cG9pbnRUYXJnZXRNYW5hZ2VyIGV4dGVuZHMgQkFCWUxPTi5TY3JpcHRDb21wb25lbnQge1xyXG4gICAgICAgIHByaXZhdGUgX3dheXBvaW50TWVzaExpbmVzOkJBQllMT04uTGluZXNNZXNoID0gbnVsbDtcclxuICAgICAgICBwcml2YXRlIF93YXlwb2ludFNwbGluZUN1cnZlOkJBQllMT04uQ3VydmUzID0gbnVsbDtcclxuICAgICAgICBwcml2YXRlIF93YXlwb2ludFRyYW5zZm9ybU5vZGVzOkJBQllMT04uVHJhbnNmb3JtTm9kZVtdID0gbnVsbDtcclxuICAgICAgICBwcml2YXRlIF93YXlwb2ludFNwbGluZVBvc2l0aW9uczpCQUJZTE9OLlZlY3RvcjNbXSA9IG51bGw7XHJcbiAgICAgICAgcHJpdmF0ZSBfd2F5cG9pbnRTcGhlcmVNYXRlcmlhbDpCQUJZTE9OLlN0YW5kYXJkTWF0ZXJpYWwgPSBudWxsO1xyXG5cclxuICAgICAgICBwdWJsaWMgcmVzb2x1dGlvbjpudW1iZXIgPSAxO1xyXG4gICAgICAgIHB1YmxpYyBjbG9zZWRMb29wOmJvb2xlYW4gPSB0cnVlO1xyXG4gICAgICAgIHB1YmxpYyBkcmF3TGluZXM6Ym9vbGVhbiA9IGZhbHNlO1xyXG4gICAgICAgIHB1YmxpYyBkcmF3UG9pbnRzOmJvb2xlYW4gPSBmYWxzZTtcclxuICAgICAgICBwdWJsaWMgZHJhd1RyYWNlczpib29sZWFuID0gZmFsc2U7XHJcbiAgICAgICAgcHVibGljIHBvaW50U2l6ZTpudW1iZXIgPSAwLjU7XHJcbiAgICAgICAgcHVibGljIGxpbmVIZWlnaHQ6bnVtYmVyID0gMC4yNTtcclxuICAgICAgICBwdWJsaWMgbGluZUNvbG9yOkJBQllMT04uQ29sb3IzID0gbmV3IEJBQllMT04uQ29sb3IzKDEsIDEsIDEpO1xyXG4gICAgICAgIHB1YmxpYyBwb2ludENvbG9yOkJBQllMT04uQ29sb3IzID0gbmV3IEJBQllMT04uQ29sb3IzKDEsIDEsIDEpO1xyXG4gICAgICAgIHB1YmxpYyB0cmFjZUNvbG9yOkJBQllMT04uQ29sb3IzID0gbmV3IEJBQllMT04uQ29sb3IzKDEsIDEsIDEpO1xyXG4gICAgICAgIHB1YmxpYyBnZXRTcGxpbmVDdXJ2ZSgpOkJBQllMT04uQ3VydmUzIHsgcmV0dXJuIHRoaXMuX3dheXBvaW50U3BsaW5lQ3VydmU7IH1cclxuICAgICAgICBwdWJsaWMgZ2V0U3BsaW5lQ3VydmVMZW5ndGgoKTpudW1iZXIgeyByZXR1cm4gKHRoaXMuX3dheXBvaW50U3BsaW5lQ3VydmUgIT0gbnVsbCkgPyB0aGlzLl93YXlwb2ludFNwbGluZUN1cnZlLmxlbmd0aCgpIDogMDsgIH1cclxuICAgICAgICBwdWJsaWMgZ2V0U3BsaW5lQ3VydmVQb3NpdGlvbnMoKTpCQUJZTE9OLlZlY3RvcjNbXSB7IHJldHVybiB0aGlzLl93YXlwb2ludFNwbGluZVBvc2l0aW9uczsgfVxyXG4gICAgICAgIHB1YmxpYyBnZXRDb250cm9sUG9pbnRUcmFuc2Zvcm1zKCk6QkFCWUxPTi5UcmFuc2Zvcm1Ob2RlW10geyByZXR1cm4gdGhpcy5fd2F5cG9pbnRUcmFuc2Zvcm1Ob2RlczsgfVxyXG5cclxuICAgICAgICBwcm90ZWN0ZWQgYXdha2UoKTp2b2lkIHtcclxuICAgICAgICAgICAgdGhpcy5yZXNvbHV0aW9uID0gdGhpcy5nZXRQcm9wZXJ0eShcInJlc29sdXRpb25cIiwgdGhpcy5yZXNvbHV0aW9uKTtcclxuICAgICAgICAgICAgdGhpcy5jbG9zZWRMb29wID0gdGhpcy5nZXRQcm9wZXJ0eShcImNsb3NlZExvb3BcIiwgdGhpcy5jbG9zZWRMb29wKTtcclxuICAgICAgICAgICAgdGhpcy5kcmF3TGluZXMgPSB0aGlzLmdldFByb3BlcnR5KFwiZHJhd0xpbmVzXCIsIHRoaXMuZHJhd0xpbmVzKTtcclxuICAgICAgICAgICAgdGhpcy5kcmF3UG9pbnRzID0gdGhpcy5nZXRQcm9wZXJ0eShcImRyYXdQb2ludHNcIiwgdGhpcy5kcmF3UG9pbnRzKTtcclxuICAgICAgICAgICAgdGhpcy5kcmF3VHJhY2VzID0gdGhpcy5nZXRQcm9wZXJ0eShcImRyYXdUcmFjZXNcIiwgdGhpcy5kcmF3VHJhY2VzKTtcclxuICAgICAgICAgICAgdGhpcy5wb2ludFNpemUgPSB0aGlzLmdldFByb3BlcnR5KFwicG9pbnRTaXplXCIsIHRoaXMucG9pbnRTaXplKTtcclxuICAgICAgICAgICAgdGhpcy5saW5lSGVpZ2h0ID0gdGhpcy5nZXRQcm9wZXJ0eShcImxpbmVIZWlnaHRcIiwgdGhpcy5saW5lSGVpZ2h0KTtcclxuICAgICAgICAgICAgLy8gLi5cclxuICAgICAgICAgICAgY29uc3QgbGNvbG9yOkJBQllMT04uSVVuaXR5Q29sb3IgPSB0aGlzLmdldFByb3BlcnR5KFwibGluZUNvbG9yXCIpO1xyXG4gICAgICAgICAgICBjb25zdCBwY29sb3I6QkFCWUxPTi5JVW5pdHlDb2xvciA9IHRoaXMuZ2V0UHJvcGVydHkoXCJwb2ludENvbG9yXCIpO1xyXG4gICAgICAgICAgICBjb25zdCB0Y29sb3I6QkFCWUxPTi5JVW5pdHlDb2xvciA9IHRoaXMuZ2V0UHJvcGVydHkoXCJ0cmFjZUNvbG9yXCIpO1xyXG4gICAgICAgICAgICAvLyAuLlxyXG4gICAgICAgICAgICB0aGlzLmxpbmVDb2xvciA9IEJBQllMT04uVXRpbGl0aWVzLlBhcnNlQ29sb3IzKGxjb2xvciwgdGhpcy5saW5lQ29sb3IpO1xyXG4gICAgICAgICAgICB0aGlzLnBvaW50Q29sb3IgPSBCQUJZTE9OLlV0aWxpdGllcy5QYXJzZUNvbG9yMyhwY29sb3IsIHRoaXMucG9pbnRDb2xvcik7XHJcbiAgICAgICAgICAgIHRoaXMudHJhY2VDb2xvciA9IEJBQllMT04uVXRpbGl0aWVzLlBhcnNlQ29sb3IzKHRjb2xvciwgdGhpcy50cmFjZUNvbG9yKTtcclxuICAgICAgICAgICAgLy8gLi5cclxuICAgICAgICAgICAgdGhpcy5fd2F5cG9pbnRTcGhlcmVNYXRlcmlhbCA9IG5ldyBCQUJZTE9OLlN0YW5kYXJkTWF0ZXJpYWwodGhpcy50cmFuc2Zvcm0ubmFtZSArIFwiLlNwbGluZU1hdGVyaWFsXCIsIHRoaXMuc2NlbmUpO1xyXG4gICAgICAgICAgICB0aGlzLl93YXlwb2ludFNwaGVyZU1hdGVyaWFsLmRpZmZ1c2VDb2xvciA9IHRoaXMucG9pbnRDb2xvcjtcclxuICAgICAgICAgICAgLy90aGlzLl93YXlwb2ludFNwaGVyZU1hdGVyaWFsLndpcmVmcmFtZSA9IHRydWU7XHJcbiAgICAgICAgICAgIC8vIC4uXHJcbiAgICAgICAgICAgIHRoaXMuX3dheXBvaW50VHJhbnNmb3JtTm9kZXMgPSB0aGlzLnRyYW5zZm9ybS5nZXRDaGlsZHJlbihudWxsLCB0cnVlKSBhcyBCQUJZTE9OLlRyYW5zZm9ybU5vZGVbXTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX3dheXBvaW50VHJhbnNmb3JtTm9kZXMgIT0gbnVsbCAmJiB0aGlzLl93YXlwb2ludFRyYW5zZm9ybU5vZGVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNvbnRyb2xQb2ludHM6QkFCWUxPTi5WZWN0b3IzW10gPSBbXTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3dheXBvaW50VHJhbnNmb3JtTm9kZXMuZm9yRWFjaCgodHJhbnNmb3JtOkJBQllMT04uVHJhbnNmb3JtTm9kZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIEJBQllMT04uVXRpbGl0aWVzLlZhbGlkYXRlVHJhbnNmb3JtUXVhdGVybmlvbih0cmFuc2Zvcm0pO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIFRPRE8gLSBGSVhNRSAtIFVzZSBUcmFuc2Zvcm0gUG9pbnQgVG8gR2V0IFdvcmxkIFBvc2l0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gY29udHJvbFBvaW50cy5wdXNoKHRyYW5zZm9ybS5nZXRBYnNvbHV0ZVBvc2l0aW9uKCkuY2xvbmUoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbFBvaW50cy5wdXNoKEJBQllMT04uVXRpbGl0aWVzLkdldEFic29sdXRlUG9zaXRpb24odHJhbnNmb3JtKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZHJhd1BvaW50cyA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjb250cm9sUG9pbnQ6QkFCWUxPTi5NZXNoID0gQkFCWUxPTi5NZXNoQnVpbGRlci5DcmVhdGVTcGhlcmUodHJhbnNmb3JtLm5hbWUgKyBcIi5XaXJlU3BoZXJlXCIsIHsgc2VnbWVudHM6IDI0LCBkaWFtZXRlcjogKHRoaXMucG9pbnRTaXplICogMikgfSwgdGhpcy5zY2VuZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xQb2ludC5wYXJlbnQgPSB0cmFuc2Zvcm07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xQb2ludC5wb3NpdGlvbi5zZXQoMCwwLDApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sUG9pbnQudmlzaWJpbGl0eSA9IDAuMjU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xQb2ludC5pc1Zpc2libGUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sUG9pbnQubWF0ZXJpYWwgPSB0aGlzLl93YXlwb2ludFNwaGVyZU1hdGVyaWFsO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fd2F5cG9pbnRTcGxpbmVDdXJ2ZSA9IEJBQllMT04uQ3VydmUzLkNyZWF0ZUNhdG11bGxSb21TcGxpbmUoY29udHJvbFBvaW50cywgdGhpcy5yZXNvbHV0aW9uLCB0aGlzLmNsb3NlZExvb3ApO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX3dheXBvaW50U3BsaW5lQ3VydmUgIT0gbnVsbCkgdGhpcy5fd2F5cG9pbnRTcGxpbmVQb3NpdGlvbnMgPSB0aGlzLl93YXlwb2ludFNwbGluZUN1cnZlLmdldFBvaW50cygpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX3dheXBvaW50U3BsaW5lUG9zaXRpb25zICE9IG51bGwpIEJBQllMT04uU2NlbmVNYW5hZ2VyLkNvbnNvbGVXYXJuKFwiREVCVUc6IFdheXBvaW50IE1hbmFnZXIgLSBcIiArIHRoaXMudHJhbnNmb3JtLm5hbWUgKyBcIjogKFwiICsgdGhpcy5fd2F5cG9pbnRUcmFuc2Zvcm1Ob2Rlcy5sZW5ndGggKyBcIiAtIFwiICsgdGhpcy5fd2F5cG9pbnRTcGxpbmVQb3NpdGlvbnMubGVuZ3RoICsgXCIgLSBcIiArIHRoaXMuX3dheXBvaW50U3BsaW5lQ3VydmUubGVuZ3RoKCkudG9GaXhlZCgyKSArIFwiKVwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJvdGVjdGVkIHN0YXJ0KCkgOnZvaWQge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fd2F5cG9pbnRTcGxpbmVQb3NpdGlvbnMgIT0gbnVsbCAmJiB0aGlzLmRyYXdMaW5lcyA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fd2F5cG9pbnRNZXNoTGluZXMgPSBCQUJZTE9OLk1lc2hCdWlsZGVyLkNyZWF0ZUxpbmVzKCh0aGlzLnRyYW5zZm9ybS5uYW1lICsgXCIuU3BsaW5lTWVzaFwiKSwgeyBwb2ludHM6IHRoaXMuX3dheXBvaW50U3BsaW5lUG9zaXRpb25zIH0sIHRoaXMuc2NlbmUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fd2F5cG9pbnRNZXNoTGluZXMucGFyZW50ID0gdGhpcy50cmFuc2Zvcm07XHJcbiAgICAgICAgICAgICAgICB0aGlzLl93YXlwb2ludE1lc2hMaW5lcy5jb2xvciA9IHRoaXMubGluZUNvbG9yOyBcclxuICAgICAgICAgICAgICAgIHRoaXMuX3dheXBvaW50TWVzaExpbmVzLnBvc2l0aW9uLnkgKz0gdGhpcy5saW5lSGVpZ2h0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHByb3RlY3RlZCBkZXN0cm95KCk6IHZvaWQge1xyXG4gICAgICAgICAgICB0aGlzLmxpbmVDb2xvciA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMuX3dheXBvaW50U3BsaW5lQ3VydmUgPSBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLl93YXlwb2ludFRyYW5zZm9ybU5vZGVzID0gbnVsbDtcclxuICAgICAgICAgICAgdGhpcy5fd2F5cG9pbnRTcGxpbmVQb3NpdGlvbnMgPSBudWxsO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fd2F5cG9pbnRNZXNoTGluZXMgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fd2F5cG9pbnRNZXNoTGluZXMuZGlzcG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fd2F5cG9pbnRNZXNoTGluZXMgPSBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwibW9kdWxlIFBST0pFQ1Qge1xyXG4gICAgLyoqXHJcbiAgICAgKiBCYWJ5bG9uIFNjcmlwdCBDb21wb25lbnRcclxuICAgICAqIEBjbGFzcyBEZWJ1Z0luZm9ybWF0aW9uXHJcbiAgICAgKi9cclxuICAgIGV4cG9ydCBjbGFzcyBEZWJ1Z0luZm9ybWF0aW9uIGV4dGVuZHMgQkFCWUxPTi5TY3JpcHRDb21wb25lbnQge1xyXG4gICAgICAgIHByaXZhdGUga2V5czpib29sZWFuID0gdHJ1ZTtcclxuICAgICAgICBwcml2YXRlIHNob3c6Ym9vbGVhbiA9IHRydWU7XHJcbiAgICAgICAgcHJpdmF0ZSBwb3B1cDpib29sZWFuID0gZmFsc2U7XHJcbiAgICAgICAgcHJpdmF0ZSB2aWV3czpib29sZWFuID0gZmFsc2U7XHJcbiAgICAgICAgcHJpdmF0ZSB4Ym94OmJvb2xlYW4gPSBmYWxzZTtcclxuICAgICAgICBwcml2YXRlIGNvbG9yOkJBQllMT04uQ29sb3IzID0gQkFCWUxPTi5Db2xvcjMuR3JlZW4oKTtcclxuXHJcbiAgICAgICAgcHJvdGVjdGVkIGF3YWtlKCk6dm9pZCB7XHJcbiAgICAgICAgICAgIHRoaXMua2V5cyA9IHRoaXMuZ2V0UHJvcGVydHkoXCJlbmFibGVEZWJ1Z0tleXNcIiwgdGhpcy5rZXlzKTtcclxuICAgICAgICAgICAgdGhpcy5zaG93ID0gdGhpcy5nZXRQcm9wZXJ0eShcInNob3dEZWJ1Z0xhYmVsc1wiLCB0aGlzLnNob3cpO1xyXG4gICAgICAgICAgICB0aGlzLnBvcHVwID0gdGhpcy5nZXRQcm9wZXJ0eShcInBvcHVwRGVidWdQYW5lbFwiLCB0aGlzLnBvcHVwKTtcclxuICAgICAgICAgICAgdGhpcy52aWV3cyA9IHRoaXMuZ2V0UHJvcGVydHkoXCJ0b2dnbGVQbGF5ZXJWaWV3c1wiLCB0aGlzLnZpZXdzKTtcclxuICAgICAgICAgICAgdGhpcy54Ym94ID0gdGhpcy5nZXRQcm9wZXJ0eShcImFsbG93WGJveExpdmVTaWduSW5cIiwgdGhpcy54Ym94KTtcclxuICAgICAgICAgICAgLy8gLi5cclxuICAgICAgICAgICAgY29uc3QgZGVidWdMYWJlbENvbG9yOkJBQllMT04uSVVuaXR5Q29sb3IgPSB0aGlzLmdldFByb3BlcnR5KFwiZGVidWdPdXRwdXRUZXh0Q29sb3JcIik7XHJcbiAgICAgICAgICAgIGlmIChkZWJ1Z0xhYmVsQ29sb3IgIT0gbnVsbCkgdGhpcy5jb2xvciA9IEJBQllMT04uVXRpbGl0aWVzLlBhcnNlQ29sb3IzKGRlYnVnTGFiZWxDb2xvcik7XHJcbiAgICAgICAgICAgIC8vIC4uXHJcbiAgICAgICAgICAgIGlmIChCQUJZTE9OLlNjZW5lTWFuYWdlci5Jc1dpbmRvd3MoKSkgdGhpcy5wb3B1cCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBCQUJZTE9OLlNjZW5lTWFuYWdlci5Mb2dNZXNzYWdlKFwiRGVidWcgaW5mb3JtYXRpb24gb3ZlcmxheSBsb2FkZWRcIik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcm90ZWN0ZWQgc3RhcnQoKSA6dm9pZCB7XHJcbiAgICAgICAgICAgIC8vdGhpcy5zY3JlZW4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInNjcmVlblwiKTtcclxuICAgICAgICAgICAgLy90aGlzLnRvZ2dsZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidG9nZ2xlXCIpO1xyXG4gICAgICAgICAgICAvL3RoaXMuc2lnbmluID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzaWduaW5cIik7XHJcbiAgICAgICAgICAgIC8vdGhpcy5yZWxvYWQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJlbG9hZFwiKTtcclxuICAgICAgICAgICAgLy90aGlzLm1vdXNlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJtb3VzZVwiKTtcclxuICAgICAgICAgICAgLy90aGlzLmRlYnVnID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJkZWJ1Z1wiKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuc2hvdyA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgLypcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmtleXMgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIUJBQllMT04uU2NlbmVNYW5hZ2VyLklzWGJveE9uZSgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnNjcmVlbikgdGhpcy5zY3JlZW4uaW5uZXJIVE1MID0gXCJGIC0gU2hvdyBGdWxsIFNjcmVlblwiO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoQkFCWUxPTi5DYW1lcmFTeXN0ZW0uSXNNdWx0aVBsYXllclZpZXcoKSAmJiB0aGlzLnZpZXdzID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnRvZ2dsZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKEJBQllMT04uU2NlbmVNYW5hZ2VyLklzWGJveE9uZSgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50b2dnbGUuc3R5bGUudG9wID0gXCIyOXB4XCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRvZ2dsZS5pbm5lckhUTUwgPSBcIjEgLSA0IFRvZ2dsZSBQbGF5ZXIgVmlld1wiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChCQUJZTE9OLlNjZW5lTWFuYWdlci5Jc1hib3hMaXZlUGx1Z2luRW5hYmxlZCgpICYmIHRoaXMueGJveCA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5zaWduaW4pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChCQUJZTE9OLlNjZW5lTWFuYWdlci5Jc1hib3hPbmUoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2lnbmluLnN0eWxlLnRvcCA9IFwiNDlweFwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zaWduaW4uaW5uZXJIVE1MID0gXCJYIC0gWGJveCBMaXZlIFNpZ24gSW5cIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5tb3VzZSkgdGhpcy5tb3VzZS5pbm5lckhUTUwgPSAoQkFCWUxPTi5TY2VuZU1hbmFnZXIuSXNYYm94T25lKCkpID8gXCJNIC0gTW91c2VcIiA6IFwiXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucmVsb2FkKSB0aGlzLnJlbG9hZC5pbm5lckhUTUwgPSBcIlIgLSBSZWxvYWRcIjtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5kZWJ1ZykgdGhpcy5kZWJ1Zy5pbm5lckhUTUwgPSBcIlAgLSBEZWJ1Z1wiO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy5rZXlzID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy52aWV3cyA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIEJBQllMT04uU2NlbmVNYW5hZ2VyLkxvZ01lc3NhZ2UoXCJFbmFibGUgTXVsdGlwbGF5ZXIgS2V5c1wiKTtcclxuICAgICAgICAgICAgICAgICAgICBCQUJZTE9OLlNjZW5lTWFuYWdlci5PbktleWJvYXJkUHJlc3MoQkFCWUxPTi5Vc2VySW5wdXRLZXkuTnVtMSwgKCk9PntcclxuICAgICAgICAgICAgICAgICAgICAgICAgUFJPSkVDVC5Vbml2ZXJzYWxDYW1lcmFTeXN0ZW0uU2V0TXVsdGlQbGF5ZXJWaWV3TGF5b3V0KHRoaXMuc2NlbmUsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBCQUJZTE9OLlNjZW5lTWFuYWdlci5Mb2dNZXNzYWdlKFwiMSBwbGF5ZXIgcHJlc3NlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBCQUJZTE9OLlNjZW5lTWFuYWdlci5PbktleWJvYXJkUHJlc3MoQkFCWUxPTi5Vc2VySW5wdXRLZXkuTnVtMiwgKCk9PntcclxuICAgICAgICAgICAgICAgICAgICAgICAgUFJPSkVDVC5Vbml2ZXJzYWxDYW1lcmFTeXN0ZW0uU2V0TXVsdGlQbGF5ZXJWaWV3TGF5b3V0KHRoaXMuc2NlbmUsIDIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBCQUJZTE9OLlNjZW5lTWFuYWdlci5Mb2dNZXNzYWdlKFwiMiBwbGF5ZXJzIHByZXNzZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgQkFCWUxPTi5TY2VuZU1hbmFnZXIuT25LZXlib2FyZFByZXNzKEJBQllMT04uVXNlcklucHV0S2V5Lk51bTMsICgpPT57XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFBST0pFQ1QuVW5pdmVyc2FsQ2FtZXJhU3lzdGVtLlNldE11bHRpUGxheWVyVmlld0xheW91dCh0aGlzLnNjZW5lLCAzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgQkFCWUxPTi5TY2VuZU1hbmFnZXIuTG9nTWVzc2FnZShcIjMgcGxheWVycyBwcmVzc2VkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIEJBQllMT04uU2NlbmVNYW5hZ2VyLk9uS2V5Ym9hcmRQcmVzcyhCQUJZTE9OLlVzZXJJbnB1dEtleS5OdW00LCAoKT0+e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBQUk9KRUNULlVuaXZlcnNhbENhbWVyYVN5c3RlbS5TZXRNdWx0aVBsYXllclZpZXdMYXlvdXQodGhpcy5zY2VuZSwgNCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIEJBQllMT04uU2NlbmVNYW5hZ2VyLkxvZ01lc3NhZ2UoXCI0IHBsYXllcnMgcHJlc3NlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIEJBQllMT04uU2NlbmVNYW5hZ2VyLk9uS2V5Ym9hcmRQcmVzcyhCQUJZTE9OLlVzZXJJbnB1dEtleS5SLCAoKT0+e1xyXG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgQkFCWUxPTi5TY2VuZU1hbmFnZXIuT25LZXlib2FyZFByZXNzKEJBQllMT04uVXNlcklucHV0S2V5LkksICgpPT57XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucG9wdXAgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgQkFCWUxPTi5TY2VuZU1hbmFnZXIuUG9wdXBEZWJ1Zyh0aGlzLnNjZW5lKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBCQUJZTE9OLlNjZW5lTWFuYWdlci5Ub2dnbGVEZWJ1Zyh0aGlzLnNjZW5lLCB0cnVlLCBudWxsKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcblxyXG4gICAgICAgICAgICAgICAgQkFCWUxPTi5TY2VuZU1hbmFnZXIuT25LZXlib2FyZFByZXNzKEJBQllMT04uVXNlcklucHV0S2V5LkYsICgpPT57XHJcbiAgICAgICAgICAgICAgICAgICAgLy9CQUJZTE9OLlNjZW5lTWFuYWdlci5Ub2dnbGVGdWxsU2NyZWVuTW9kZSh0aGlzLnNjZW5lKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIC8qXHJcbiAgICAgICAgICAgICAgICBpZiAoQkFCWUxPTi5TY2VuZU1hbmFnZXIuSXNYYm94T25lKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobmF2aWdhdG9yLmdhbWVwYWRJbnB1dEVtdWxhdGlvbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBCQUJZTE9OLlNjZW5lTWFuYWdlci5PbktleWJvYXJkUHJlc3MoQkFCWUxPTi5Vc2VySW5wdXRLZXkuTSwgKCk9PntcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuYXZpZ2F0b3IuZ2FtZXBhZElucHV0RW11bGF0aW9uICE9PSBcIm1vdXNlXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXZpZ2F0b3IuZ2FtZXBhZElucHV0RW11bGF0aW9uID0gXCJtb3VzZVwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXZpZ2F0b3IuZ2FtZXBhZElucHV0RW11bGF0aW9uID0gXCJnYW1lcGFkXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgQkFCWUxPTi5TY2VuZU1hbmFnZXIuT25LZXlib2FyZFByZXNzKEJBQllMT04uVXNlcklucHV0S2V5LkYsICgpPT57XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vQkFCWUxPTi5Ub29scy5SZXF1ZXN0RnVsbHNjcmVlbihkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNjZW5lLmdldEVuZ2luZSgpLmVudGVyRnVsbHNjcmVlbih0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChCQUJZTE9OLldpbmRvd3NQbGF0Zm9ybS5Jc1hib3hMaXZlUGx1Z2luRW5hYmxlZCgpICYmIHRoaXMueGJveCA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIEJBQllMT04uU2NlbmVNYW5hZ2VyLk9uS2V5Ym9hcmRQcmVzcyhCQUJZTE9OLlVzZXJJbnB1dEtleS5YLCAoKT0+e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGxheWVyOkJBQllMT04uUGxheWVyTnVtYmVyLk9uZSA9IEJBQllMT04uUGxheWVyTnVtYmVyLk9uZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFCQUJZTE9OLldpbmRvd3NQbGF0Zm9ybS5Jc1hib3hMaXZlVXNlclNpZ25lZEluKG51bGwsIHBsYXllcikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJBQllMT04uU2NlbmVNYW5hZ2VyLkxvZ01lc3NhZ2UoXCI9PT0+IFRyeWluZyBYYm94IExpdmUgU2lnbiBJbiBGb3IgUGxheWVyOiBcIiArIHBsYXllci50b1N0cmluZygpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJBQllMT04uV2luZG93c1BsYXRmb3JtLlhib3hMaXZlVXNlclNpZ25JbihwbGF5ZXIsIChyZXN1bHQ6IE1pY3Jvc29mdC5YYm94LlNlcnZpY2VzLlN5c3RlbS5TaWduSW5SZXN1bHQpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdXNlciA9IEJBQllMT04uV2luZG93c1BsYXRmb3JtLkdldFhib3hMaXZlVXNlcihwbGF5ZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtc2cgPSBcIihcIiArIHVzZXIueGJveFVzZXJJZCArIFwiKSAtIFwiICsgdXNlci5nYW1lcnRhZztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBCQUJZTE9OLlNjZW5lTWFuYWdlci5BbGVydE1lc3NhZ2UobXNnLCBcIlhib3ggTGl2ZSBVc2VyIFNpZ25lZCBJblwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIChlcnIpPT57XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQkFCWUxPTi5TY2VuZU1hbmFnZXIuTG9nTWVzc2FnZShlcnIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtc2c6c3RyaW5nID0gXCJFbmNvdW50ZXJlZCBTaWduIEVycm9yXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQkFCWUxPTi5TY2VuZU1hbmFnZXIuTG9nV2FybmluZyhtc2cpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJBQllMT04uU2NlbmVNYW5hZ2VyLkFsZXJ0TWVzc2FnZShtc2csIFwiWGJveCBMaXZlIFdhcm5pbmdcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJBQllMT04uU2NlbmVNYW5hZ2VyLkxvZ1dhcm5pbmcoXCJYYm94IExpdmUgVXNlciBBbHJlYWR5IFNpZ25lZCBJblwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJBQllMT04uU2NlbmVNYW5hZ2VyLkFsZXJ0TWVzc2FnZShcIlVzZXIgQWxyZWFkeSBTaWduZWQgSW5cIiwgXCJYYm94IExpdmUgV2FybmluZ1wiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIERlZmF1bHQgUHJpbnQgVG8gU2NyZWVuIFRleHRcclxuICAgICAgICAgICAgdmFyIHByaW50Q29sb3I6c3RyaW5nID0gKHRoaXMuc2NlbmUuZ2V0RW5naW5lKCkud2ViR0xWZXJzaW9uIDwgMikgPyBcInJlZFwiIDogdGhpcy5jb2xvci50b0hleFN0cmluZygpO1xyXG4gICAgICAgICAgICB2YXIgZ3JhcGhpY3NWZXJzaW9uOnN0cmluZyA9IEJBQllMT04uU2NlbmVNYW5hZ2VyLkdldFdlYkdMVmVyc2lvblN0cmluZyh0aGlzLnNjZW5lKTtcclxuICAgICAgICAgICAgQkFCWUxPTi5VdGlsaXRpZXMuUHJpbnRUb1NjcmVlbihncmFwaGljc1ZlcnNpb24sIHByaW50Q29sb3IpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJvdGVjdGVkIGRlc3Ryb3koKSA6dm9pZCB7XHJcbiAgICAgICAgICAgIC8vdGhpcy5zY3JlZW4gPSBudWxsO1xyXG4gICAgICAgICAgICAvL3RoaXMudG9nZ2xlID0gbnVsbDtcclxuICAgICAgICAgICAgLy90aGlzLnNpZ25pbiA9IG51bGw7XHJcbiAgICAgICAgICAgIC8vdGhpcy5yZWxvYWQgPSBudWxsO1xyXG4gICAgICAgICAgICAvL3RoaXMubW91c2UgPSBudWxsO1xyXG4gICAgICAgICAgICAvL3RoaXMuZGVidWcgPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsIm1vZHVsZSBQUk9KRUNUIHtcclxuICAgIC8qKlxyXG4gICAgKiBCYWJ5bG9uIFNjcmlwdCBDb21wb25lbnRcclxuICAgICogQGNsYXNzIFRlc3ROYXZpZ2F0aW9uQWdlbnRcclxuICAgICovXHJcbiAgICBleHBvcnQgY2xhc3MgVGVzdE5hdmlnYXRpb25BZ2VudCBleHRlbmRzIEJBQllMT04uU2NyaXB0Q29tcG9uZW50IHtcclxuXHJcbiAgICAgICAgcHJvdGVjdGVkIG1fcGxheWVyQWdlbnQ6QkFCWUxPTi5OYXZpZ2F0aW9uQWdlbnQgPSBudWxsO1xyXG4gICAgICAgIHByb3RlY3RlZCBtX2NoYXJDb250cm9sbGVyOkJBQllMT04uQ2hhcmFjdGVyQ29udHJvbGxlciA9IG51bGw7XHJcbiAgICAgICAgcHJvdGVjdGVkIGF3YWtlKCk6IHZvaWQge1xyXG4gICAgICAgICAgICB0aGlzLmRvUG9pbnRlckNhbmNlbCgpOyAvLyBOb3RlOiBEaXNhYmxlIFJpZ2h0IENsaWNrIFNvIENhbiBCZSBVc2VkIEZvciBUZWxlcG9ydFxyXG4gICAgICAgICAgICB0aGlzLnNjZW5lLm9uUG9pbnRlck9ic2VydmFibGUuYWRkKChwb2ludGVySW5mbykgPT4ge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChwb2ludGVySW5mby50eXBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBCQUJZTE9OLlBvaW50ZXJFdmVudFR5cGVzLlBPSU5URVJET1dOOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocG9pbnRlckluZm8ucGlja0luZm8uaGl0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRvUG9pbnRlckRvd24ocG9pbnRlckluZm8pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAvLyAuLlxyXG4gICAgICAgICAgICAvLyBOb3RlOiBHZXQgTmF2aWdhdGlvbiBBZ2VudCBBdHRhY2hlZCBUbyBUcmFuc2Zvcm0gTm9kZVxyXG4gICAgICAgICAgICAvLyAuLlxyXG4gICAgICAgICAgICB0aGlzLm1fY2hhckNvbnRyb2xsZXIgPSB0aGlzLmdldENvbXBvbmVudChcIkJBQllMT04uQ2hhcmFjdGVyQ29udHJvbGxlclwiKTtcclxuICAgICAgICAgICAgdGhpcy5tX3BsYXllckFnZW50ID0gdGhpcy5nZXRDb21wb25lbnQoXCJCQUJZTE9OLk5hdmlnYXRpb25BZ2VudFwiKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMubV9wbGF5ZXJBZ2VudCAhPSBudWxsKSB7IFxyXG4gICAgICAgICAgICAgICAgdGhpcy5tX3BsYXllckFnZW50Lm9uUHJlVXBkYXRlT2JzZXJ2YWJsZS5hZGQoKCk9PnsgdGhpcy51cGRhdGVOYXZBZ2VudCgpOyB9KTtcclxuICAgICAgICAgICAgICAgIEJBQllMT04uU2NlbmVNYW5hZ2VyLkxvZ01lc3NhZ2UoXCJUZXN0IG5hdmlnYXRpb24gbWVzaCBhZ2VudCBmb3I6IFwiICsgdGhpcy50cmFuc2Zvcm0ubmFtZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBCQUJZTE9OLlNjZW5lTWFuYWdlci5Mb2dNZXNzYWdlKFwiRmFpbGVkIHRvIGxvY2F0ZSB0ZXN0IG5hdiBtZXNoIGFnZW50IGZvcjogXCIgKyB0aGlzLnRyYW5zZm9ybS5uYW1lKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByb3RlY3RlZCBkb1BvaW50ZXJDYW5jZWwoKTp2b2lkIHtcclxuICAgICAgICAgICAgY29uc3QgY2FudmFzID0gdGhpcy5zY2VuZS5nZXRFbmdpbmUoKS5nZXRSZW5kZXJpbmdDYW52YXMoKTtcclxuICAgICAgICAgICAgY2FudmFzLm9uY29udGV4dG1lbnUgPSBmdW5jdGlvbiAoZSkgeyBlLnByZXZlbnREZWZhdWx0KCk7IH07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcm90ZWN0ZWQgZG9Qb2ludGVyRG93bihwb2ludGVySW5mbzpCQUJZTE9OLlBvaW50ZXJJbmZvKTp2b2lkIHtcclxuICAgICAgICAgICAgdmFyIHBpY2tpbmZvID0gdGhpcy5zY2VuZS5waWNrKHRoaXMuc2NlbmUucG9pbnRlclgsIHRoaXMuc2NlbmUucG9pbnRlclkpO1xyXG4gICAgICAgICAgICBpZiAocGlja2luZm8uaGl0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5tX3BsYXllckFnZW50ICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocG9pbnRlckluZm8uZXZlbnQuYnV0dG9uID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5vdGU6IFVzZSBOYXZpZ2F0aW9uIEFnZW50IC0gU2V0RGVzdGluYXRpb25cclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tX3BsYXllckFnZW50LnNldERlc3RpbmF0aW9uKHBpY2tpbmZvLnBpY2tlZFBvaW50KTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBOb3RlOiBVc2UgTmF2aWdhdGlvbiBBZ2VudCAtIFRlbGVwb3J0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubV9wbGF5ZXJBZ2VudC50ZWxlcG9ydChwaWNraW5mby5waWNrZWRQb2ludCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9ICAgICAgICAgICAgXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcm90ZWN0ZWQgdXBkYXRlKCk6dm9pZCB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm1fcGxheWVyQWdlbnQgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgLy8gREVCVUc6IGNvbnN0IGFnZW50U3RhdGU6bnVtYmVyID0gdGhpcy5tX3BsYXllckFnZW50LmdldEFnZW50U3RhdGUoKTtcclxuICAgICAgICAgICAgICAgIC8vIERFQlVHOiBVVElMLlByaW50VG9TY3JlZW4oXCJOYXZpZ2F0aW9uIFN0YXRlOiBcIiArIGFnZW50U3RhdGUudG9GaXhlZCgpICwgXCJncmVlblwiKTtcclxuICAgICAgICAgICAgICAgIC8vIERFQlVHOiBpZiAoYWdlbnRTdGF0ZSA9PT0gMCkgY29uc29sZS53YXJuKFwiPj4+IElOVkFMSUQgTkFWIFNUQVRFOiBcIiArIHRoaXMudHJhbnNmb3JtLm5hbWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIE5vdGU6IEFuaW1hdGlvbiBKdW1wIEN1cnZlIFN1cHBvcnRcclxuICAgICAgICBwcml2YXRlIHRpbWU6bnVtYmVyID0gLTE7XHJcbiAgICAgICAgcHJpdmF0ZSBkdXJhdGlvbjpudW1iZXIgPSAtMTtcclxuICAgICAgICBwcml2YXRlIGp1bXBDdXJ2ZTpCQUJZTE9OLkFuaW1hdGlvbiA9IG51bGw7XHJcbiAgICAgICAgcHJpdmF0ZSB0cmF2ZXJzYWxUaW1lOm51bWJlciA9IDAuNTtcclxuICAgICAgICBwcm90ZWN0ZWQgdXBkYXRlTmF2QWdlbnQoKTp2b2lkIHtcclxuICAgICAgICAgICAgbGV0IGRlbHRhVGltZTpudW1iZXIgPSB0aGlzLmdldERlbHRhU2Vjb25kcygpO1xyXG4gICAgICAgICAgICBsZXQgbm9ybWFsaXplZFRpbWU6bnVtYmVyID0gMDtcclxuICAgICAgICAgICAgaWYgKHRoaXMuZHVyYXRpb24gPj0gMCAmJiB0aGlzLnRpbWUgPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgbm9ybWFsaXplZFRpbWUgPSAodGhpcy50aW1lIC8gdGhpcy5kdXJhdGlvbik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRpbWUgKz0gZGVsdGFUaW1lO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm1fcGxheWVyQWdlbnQgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tX3BsYXllckFnZW50LmhlaWdodE9mZnNldCA9IDA7IC8vIE5vdGU6IEFsd2F5cyBSZXNldCBIZWlnaHQgT2Zmc2V0IEhlcmVcclxuICAgICAgICAgICAgICAgIGNvbnN0IHRlbGVwb3J0aW5nOmJvb2xlYW4gPSB0aGlzLm1fcGxheWVyQWdlbnQuaXNUZWxlcG9ydGluZygpO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgb2ZmbWVzaGxpbms6Ym9vbGVhbiA9IHRoaXMubV9wbGF5ZXJBZ2VudC5pc09uT2ZmTWVzaExpbmsoKTtcclxuICAgICAgICAgICAgICAgIGlmICh0ZWxlcG9ydGluZyA9PT0gdHJ1ZSB8fCBvZmZtZXNobGluayA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm1fY2hhckNvbnRyb2xsZXIgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1fcGxheWVyQWdlbnQudXBkYXRlUG9zaXRpb24gPSB0cnVlOyAgICAgICAgICAgLy8gRW5hYmxlIE5hdmlnYXRpb24gQWdlbnQgTW92ZW1lbnRcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tX2NoYXJDb250cm9sbGVyLnVwZGF0ZVBvc2l0aW9uID0gZmFsc2U7ICAgICAgIC8vIERpc2FibGUgQ2hhcmFjdGVyIENvbnRyb2xsZXIgTW92ZW1lbnRcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tX3BsYXllckFnZW50LnVwZGF0ZVBvc2l0aW9uID0gdHJ1ZTsgICAgICAgICAgIC8vIEVuYWJsZSBOYXZpZ2F0aW9uIEFnZW50IE1vdmVtZW50XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvZmZtZXNobGluayA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy50aW1lID09PSAtMSkgdGhpcy50aW1lID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZHVyYXRpb24gPT09IC0xKSB0aGlzLmR1cmF0aW9uID0gdGhpcy50cmF2ZXJzYWxUaW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5qdW1wQ3VydmUgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYW5pbWF0aW9uQ3VydmVWYWx1ZTpudW1iZXIgPSBVVElMLlNhbXBsZUFuaW1hdGlvbkZsb2F0KHRoaXMuanVtcEN1cnZlLCBub3JtYWxpemVkVGltZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1fcGxheWVyQWdlbnQuaGVpZ2h0T2Zmc2V0ID0gYW5pbWF0aW9uQ3VydmVWYWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubV9jaGFyQ29udHJvbGxlciAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubV9wbGF5ZXJBZ2VudC51cGRhdGVQb3NpdGlvbiA9IGZhbHNlOyAgICAgICAgICAvLyBEaXNhYmxlIE5hdmlnYXRpb24gQWdlbnQgTW92ZW1lbnRcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tX2NoYXJDb250cm9sbGVyLnVwZGF0ZVBvc2l0aW9uID0gdHJ1ZTsgICAgICAgIC8vIEVuYWJsZSBDaGFyYWN0ZXIgQ29udHJvbGxlciBNb3ZlbWVudFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBPdmVycmlkZSBDaGFyYWN0ZXIgQ29udHJvbGxlciBNb3ZlbWVudFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwb3MgPSB0aGlzLm1fcGxheWVyQWdlbnQuZ2V0Q3VycmVudFBvc2l0aW9uKCkuY2xvbmUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcG9zLnkgPSB0aGlzLm1fY2hhckNvbnRyb2xsZXIuZ2V0R2hvc3RXb3JsZFBvc2l0aW9uKCkueTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tX2NoYXJDb250cm9sbGVyLnNldChwb3MueCwgcG9zLnksIHBvcy56KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tX3BsYXllckFnZW50LnVwZGF0ZVBvc2l0aW9uID0gdHJ1ZTsgICAgICAgICAgIC8vIEVuYWJsZSBOYXZpZ2F0aW9uIEFnZW50IE1vdmVtZW50IFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnRpbWUgPSAtMTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmR1cmF0aW9uID0gLTE7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJtb2R1bGUgUFJPSkVDVCB7XHJcbiAgICAvKipcclxuICAgICogQmFieWxvbiBTY3JpcHQgQ29tcG9uZW50XHJcbiAgICAqIEBjbGFzcyBUZXN0Um9vdE1vdGlvblxyXG4gICAgKi9cclxuICAgIGV4cG9ydCBjbGFzcyBUZXN0Um9vdE1vdGlvbiBleHRlbmRzIEJBQllMT04uU2NyaXB0Q29tcG9uZW50IHtcclxuICAgICAgICBwcml2YXRlIG1vdGlvblR5cGU6bnVtYmVyID0gMDtcclxuICAgICAgICBcclxuICAgICAgICBwdWJsaWMgdXBkYXRlUG9zaXRpb246Ym9vbGVhbiA9IHRydWU7XHJcbiAgICAgICAgcHVibGljIHVwZGF0ZVJvdGF0aW9uOmJvb2xlYW4gPSB0cnVlO1xyXG4gICAgICAgIHB1YmxpYyBtb3ZlV2l0aENvbGxpc2lvbnM6Ym9vbGVhbiA9IGZhbHNlO1xyXG5cclxuICAgICAgICBwcm90ZWN0ZWQgbV9hbmltYXRvcjpCQUJZTE9OLkFuaW1hdGlvblN0YXRlID0gbnVsbDtcclxuICAgICAgICBwcm90ZWN0ZWQgbV9jaGFyYWN0ZXI6QkFCWUxPTi5DaGFyYWN0ZXJDb250cm9sbGVyID0gbnVsbDtcclxuICAgICAgICBwcm90ZWN0ZWQgbV9yaWdpZGJvZHk6QkFCWUxPTi5SaWdpZGJvZHlQaHlzaWNzID0gbnVsbDtcclxuXHJcbiAgICAgICAgcHJvdGVjdGVkIGF3YWtlKCk6IHZvaWQge1xyXG4gICAgICAgICAgICB0aGlzLm1vdGlvblR5cGUgPSB0aGlzLmdldFByb3BlcnR5KFwibW90aW9uVHlwZVwiLCB0aGlzLm1vdGlvblR5cGUpO1xyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVBvc2l0aW9uID0gdGhpcy5nZXRQcm9wZXJ0eShcInVwZGF0ZVBvc2l0aW9uXCIsIHRoaXMudXBkYXRlUG9zaXRpb24pO1xyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVJvdGF0aW9uID0gdGhpcy5nZXRQcm9wZXJ0eShcInVwZGF0ZVJvdGF0aW9uXCIsIHRoaXMudXBkYXRlUm90YXRpb24pO1xyXG4gICAgICAgICAgICB0aGlzLm1vdmVXaXRoQ29sbGlzaW9ucyA9IHRoaXMuZ2V0UHJvcGVydHkoXCJtb3ZlV2l0aENvbGxpc2lvbnNcIiwgdGhpcy5tb3ZlV2l0aENvbGxpc2lvbnMpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJvdGVjdGVkIHN0YXJ0KCk6IHZvaWQge1xyXG4gICAgICAgICAgICAvLyBBdHRhY2ggQW5pbWF0aW9uIFN0YXRlXHJcbiAgICAgICAgICAgIHRoaXMubV9hbmltYXRvciA9IHRoaXMuZ2V0Q29tcG9uZW50KFwiQkFCWUxPTi5BbmltYXRpb25TdGF0ZVwiKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMubV9hbmltYXRvciA9PSBudWxsKSBCQUJZTE9OLlNjZW5lTWFuYWdlci5Mb2dXYXJuaW5nKFwiVGVzdCBSb290IE1vdGlvbjogRmFpbGVkIHRvIGxvY2F0ZSBhbmltYXRpb24gc3RhdGUgZm9yOiBcIiArIHRoaXMudHJhbnNmb3JtLm5hbWUpO1xyXG4gICAgICAgICAgICAvLyBTZXR1cCBSb290IFRyYW5zZm9ybVxyXG4gICAgICAgICAgICBpZiAodGhpcy5tb3Rpb25UeXBlID09PSAxKSB7IC8vIFJpZ2lkYm9keSBQaHlzaWNzXHJcbiAgICAgICAgICAgICAgICB0aGlzLm1fcmlnaWRib2R5ID0gQkFCWUxPTi5TY2VuZU1hbmFnZXIuRmluZFNjcmlwdENvbXBvbmVudCh0aGlzLnRyYW5zZm9ybSwgXCJCQUJZTE9OLlJpZ2lkYm9keVBoeXNpY3NcIik7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5tX3JpZ2lkYm9keSA9PSBudWxsKSBCQUJZTE9OLlNjZW5lTWFuYWdlci5Mb2dXYXJuaW5nKFwiVGVzdCBSb290IE1vdGlvbjogRmFpbGVkIHRvIGxvY2F0ZSByaWdpZGJvZHkgcGh5c2ljcyBmb3I6IFwiICsgdGhpcy50cmFuc2Zvcm0ubmFtZSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5tb3Rpb25UeXBlID09PSAyKSB7IC8vIENoYXJhY3RlciBDb250cm9sbGVyXHJcbiAgICAgICAgICAgICAgICB0aGlzLm1fY2hhcmFjdGVyID0gQkFCWUxPTi5TY2VuZU1hbmFnZXIuRmluZFNjcmlwdENvbXBvbmVudCh0aGlzLnRyYW5zZm9ybSwgXCJCQUJZTE9OLkNoYXJhY3RlckNvbnRyb2xsZXJcIik7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5tX2NoYXJhY3RlciA9PSBudWxsKSBCQUJZTE9OLlNjZW5lTWFuYWdlci5Mb2dXYXJuaW5nKFwiVGVzdCBSb290IE1vdGlvbjogRmFpbGVkIHRvIGxvY2F0ZSBjaGFyYWN0ZXIgY29udHJvbGxlciBmb3I6IFwiICsgdGhpcy50cmFuc2Zvcm0ubmFtZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByb3RlY3RlZCB1cGRhdGUoKTogdm9pZCB7XHJcbiAgICAgICAgICAgIHRoaXMudHVybigpO1xyXG4gICAgICAgICAgICB0aGlzLm1vdmUoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByb3RlY3RlZCB0dXJuKCk6dm9pZCB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm1fYW5pbWF0b3IgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMudXBkYXRlUm90YXRpb24gPT09IHRydWUpIHsgLy8gUm90YXRpb25cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnRyYW5zZm9ybS5hZGRSb3RhdGlvbigwLCB0aGlzLm1fYW5pbWF0b3IuZ2V0Um9vdE1vdGlvbkFuZ2xlKCksIDApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcm90ZWN0ZWQgbW92ZSgpOnZvaWQge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5tX2FuaW1hdG9yICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnVwZGF0ZVBvc2l0aW9uID09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5tb3Rpb25UeXBlID09PSAwKSB7IC8vIFRyYW5zbGF0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm1vdmVXaXRoQ29sbGlzaW9ucyA9PT0gdHJ1ZSAmJiB0aGlzLnRyYW5zZm9ybSBpbnN0YW5jZW9mIEJBQllMT04uQWJzdHJhY3RNZXNoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRyYW5zZm9ybS5tb3ZlV2l0aENvbGxpc2lvbnModGhpcy5tX2FuaW1hdG9yLmdldFJvb3RNb3Rpb25Qb3NpdGlvbigpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudHJhbnNmb3JtLnBvc2l0aW9uLmFkZEluUGxhY2UodGhpcy5tX2FuaW1hdG9yLmdldFJvb3RNb3Rpb25Qb3NpdGlvbigpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5tb3Rpb25UeXBlID09PSAxICYmIHRoaXMubV9yaWdpZGJvZHkgIT0gbnVsbCkgeyAvLyBSaWdpZGJvZHkgUGh5c2ljc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1fcmlnaWRib2R5LnNldExpbmVhclZlbG9jaXR5KHRoaXMubV9hbmltYXRvci5nZXRSb290TW90aW9uUG9zaXRpb24oKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLm1vdGlvblR5cGUgPT09IDIgJiYgdGhpcy5tX2NoYXJhY3RlciAhPSBudWxsKSB7IC8vIENoYXJhY3RlciBDb250cm9sbGVyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubV9jaGFyYWN0ZXIubW92ZSh0aGlzLm1fYW5pbWF0b3IuZ2V0Um9vdE1vdGlvblBvc2l0aW9uKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsIm1vZHVsZSBCQUJZTE9OIHtcclxuICAgIC8qKlxyXG4gICAgICogQmFieWxvbiB3aW5kb3dzIHBsYXRmb3JtIHBybyBjbGFzc1xyXG4gICAgICogQGNsYXNzIFdpbmRvd3NQbGF0Zm9ybSAtIEFsbCByaWdodHMgcmVzZXJ2ZWQgKGMpIDIwMjAgTWFja2V5IEtpbmFyZFxyXG4gICAgICovXHJcbiAgICBleHBvcnQgY2xhc3MgV2luZG93c1BsYXRmb3JtIHtcclxuICAgICAgICAvKiogSXMgeGJveCBsaXZlIHVzZXIgc2lnbmVkIGluIGlmIHBsYXRmb3JtIHNlcnZpY2VzIGVuYWJsZWQuIChXaW5SVCkgKi9cclxuICAgICAgICBwdWJsaWMgc3RhdGljIElzWGJveExpdmVVc2VyU2lnbmVkSW4oc3lzdGVtVXNlcjogV2luZG93cy5TeXN0ZW0uVXNlciA9IG51bGwsIHBsYXllcjpCQUJZTE9OLlBsYXllck51bWJlciA9IEJBQllMT04uUGxheWVyTnVtYmVyLk9uZSk6IGJvb2xlYW4ge1xyXG4gICAgICAgICAgICBpZiAoQkFCWUxPTi5TY2VuZU1hbmFnZXIuSXNXaW5kb3dzKCkpIHtcclxuICAgICAgICAgICAgICAgIGxldCB1c2VyOiBNaWNyb3NvZnQuWGJveC5TZXJ2aWNlcy5TeXN0ZW0uWGJveExpdmVVc2VyID0gKHN5c3RlbVVzZXIgIT0gbnVsbCkgPyBCQUJZTE9OLldpbmRvd3NQbGF0Zm9ybS5HZXRYYm94TGl2ZVN5c3RlbVVzZXIoc3lzdGVtVXNlciwgcGxheWVyKSA6IEJBQllMT04uV2luZG93c1BsYXRmb3JtLkdldFhib3hMaXZlVXNlcihwbGF5ZXIpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuICh1c2VyICE9IG51bGwgJiYgdXNlci5pc1NpZ25lZEluID09IHRydWUpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8qKiBWYWxpZGF0ZWQgc2lnbiBpbiB4Ym94IGxpdmUgdXNlciBpZiBwbGF0Zm9ybSBzZXJ2aWNlcyBhdmFpbGFibGUuIChXaW5SVCkgKi9cclxuICAgICAgICBwdWJsaWMgc3RhdGljIFhib3hMaXZlVXNlclNpZ25JbihwbGF5ZXI6QkFCWUxPTi5QbGF5ZXJOdW1iZXIgPSBCQUJZTE9OLlBsYXllck51bWJlci5PbmUsIG9uY29tcGxldGU/OiAocmVzdWx0OiBNaWNyb3NvZnQuWGJveC5TZXJ2aWNlcy5TeXN0ZW0uU2lnbkluUmVzdWx0KSA9PiB2b2lkLCBvbmVycm9yPzogKGVycm9yOiBhbnkpID0+IHZvaWQsIG9ucHJvZ3Jlc3M/OiAocHJvZ3Jlc3M6IGFueSkgPT4gdm9pZCk6IHZvaWQge1xyXG4gICAgICAgICAgICBpZiAoQkFCWUxPTi5TY2VuZU1hbmFnZXIuSXNXaW5kb3dzKCkpIHtcclxuICAgICAgICAgICAgICAgIEJBQllMT04uV2luZG93c1BsYXRmb3JtLlhib3hMaXZlVXNlclNpbGVudFNpZ25JbihwbGF5ZXIsIChmaXJzdDogTWljcm9zb2Z0Llhib3guU2VydmljZXMuU3lzdGVtLlNpZ25JblJlc3VsdCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChmaXJzdC5zdGF0dXMgPT09IE1pY3Jvc29mdC5YYm94LlNlcnZpY2VzLlN5c3RlbS5TaWduSW5TdGF0dXMudXNlckludGVyYWN0aW9uUmVxdWlyZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgQkFCWUxPTi5XaW5kb3dzUGxhdGZvcm0uWGJveExpdmVVc2VyRGlhbG9nU2lnbkluKHBsYXllciwgKHNlY29uZDogTWljcm9zb2Z0Llhib3guU2VydmljZXMuU3lzdGVtLlNpZ25JblJlc3VsdCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9uY29tcGxldGUpIG9uY29tcGxldGUoc2Vjb25kKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgb25lcnJvciwgb25wcm9ncmVzcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9uY29tcGxldGUpIG9uY29tcGxldGUoZmlyc3QpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sIG9uZXJyb3IsIG9ucHJvZ3Jlc3MpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8qKiBTaWxlbnQgc2lnbiBpbiB4Ym94IGxpdmUgdXNlciBpZiBwbGF0Zm9ybSBzZXJ2aWNlcyBhdmFpbGFibGUuIChXaW5SVCkgKi9cclxuICAgICAgICBwdWJsaWMgc3RhdGljIFhib3hMaXZlVXNlclNpbGVudFNpZ25JbihwbGF5ZXI6QkFCWUxPTi5QbGF5ZXJOdW1iZXIgPSBCQUJZTE9OLlBsYXllck51bWJlci5PbmUsIG9uY29tcGxldGU/OiAocmVzdWx0OiBNaWNyb3NvZnQuWGJveC5TZXJ2aWNlcy5TeXN0ZW0uU2lnbkluUmVzdWx0KSA9PiB2b2lkLCBvbmVycm9yPzogKGVycm9yOiBhbnkpID0+IHZvaWQsIG9ucHJvZ3Jlc3M/OiAocHJvZ3Jlc3M6IGFueSkgPT4gdm9pZCk6IFdpbmRvd3MuRm91bmRhdGlvbi5Qcm9qZWN0aW9ucy5Qcm9taXNlPHZvaWQ+IHtcclxuICAgICAgICAgICAgcmV0dXJuIChCQUJZTE9OLlNjZW5lTWFuYWdlci5Jc1dpbmRvd3MoKSkgPyBCQUJZTE9OLldpbmRvd3NQbGF0Zm9ybS5HZXRYYm94TGl2ZVVzZXIocGxheWVyKS5zaWduSW5TaWxlbnRseUFzeW5jKG51bGwpLnRoZW4ob25jb21wbGV0ZSwgb25lcnJvciwgb25wcm9ncmVzcykgOiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvKiogRGlhbG9nIHNpZ24gaW4geGJveCBsaXZlIHVzZXIgaWYgcGxhdGZvcm0gc2VydmljZXMgYXZhaWxhYmxlLiAoV2luUlQpICovXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBYYm94TGl2ZVVzZXJEaWFsb2dTaWduSW4ocGxheWVyOkJBQllMT04uUGxheWVyTnVtYmVyID0gQkFCWUxPTi5QbGF5ZXJOdW1iZXIuT25lLCBvbmNvbXBsZXRlPzogKHJlc3VsdDogTWljcm9zb2Z0Llhib3guU2VydmljZXMuU3lzdGVtLlNpZ25JblJlc3VsdCkgPT4gdm9pZCwgb25lcnJvcj86IChlcnJvcjogYW55KSA9PiB2b2lkLCBvbnByb2dyZXNzPzogKHByb2dyZXNzOiBhbnkpID0+IHZvaWQpOiBXaW5kb3dzLkZvdW5kYXRpb24uUHJvamVjdGlvbnMuUHJvbWlzZTx2b2lkPiB7XHJcbiAgICAgICAgICAgIHJldHVybiAoQkFCWUxPTi5TY2VuZU1hbmFnZXIuSXNXaW5kb3dzKCkpID8gQkFCWUxPTi5XaW5kb3dzUGxhdGZvcm0uR2V0WGJveExpdmVVc2VyKHBsYXllcikuc2lnbkluQXN5bmMobnVsbCkudGhlbihvbmNvbXBsZXRlLCBvbmVycm9yLCBvbnByb2dyZXNzKSA6IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8qKiBMb2FkcyBhIHhib3ggbGl2ZSB1c2VyIHByb2ZpbGUgaWYgcGxhdGZvcm0gc2VydmljZXMgYXZhaWxhYmxlLiAoV2luUlQpICovXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBMb2FkWGJveExpdmVVc2VyUHJvZmlsZShwbGF5ZXI6QkFCWUxPTi5QbGF5ZXJOdW1iZXIgPSBCQUJZTE9OLlBsYXllck51bWJlci5PbmUsIG9uY29tcGxldGU/OiAocmVzdWx0OiBNaWNyb3NvZnQuWGJveC5TZXJ2aWNlcy5Tb2NpYWwuWGJveFVzZXJQcm9maWxlKSA9PiB2b2lkLCBvbmVycm9yPzogKGVycm9yOiBhbnkpID0+IHZvaWQsIG9ucHJvZ3Jlc3M/OiAocHJvZ3Jlc3M6IGFueSkgPT4gdm9pZCk6IFdpbmRvd3MuRm91bmRhdGlvbi5Qcm9qZWN0aW9ucy5Qcm9taXNlPHZvaWQ+IHtcclxuICAgICAgICAgICAgcmV0dXJuIChCQUJZTE9OLlNjZW5lTWFuYWdlci5Jc1dpbmRvd3MoKSkgPyBCQUJZTE9OLldpbmRvd3NQbGF0Zm9ybS5HZXRYYm94TGl2ZVVzZXJDb250ZXh0KHBsYXllcikucHJvZmlsZVNlcnZpY2UuZ2V0VXNlclByb2ZpbGVBc3luYyhCQUJZTE9OLldpbmRvd3NQbGF0Zm9ybS5HZXRYYm94TGl2ZVVzZXIocGxheWVyKS54Ym94VXNlcklkKS50aGVuKG9uY29tcGxldGUsIG9uZXJyb3IsIG9ucHJvZ3Jlc3MpIDogbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogLy9cclxuICAgICAgICAvLyAqIEJhYnlsb24gWGJveCBMaXZlIFBsYXllciBGdW5jdGlvbnMgKiAvL1xyXG4gICAgICAgIC8vICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqIC8vXHJcbiAgICAgICBcclxuICAgICAgICAvKiogR2V0IHhib3ggbGl2ZSB1c2VyIGlmIHBsYXRmb3JtIHNlcnZpY2VzIGF2YWlsYWJsZS4gKFdpblJUKSAqL1xyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgR2V0WGJveExpdmVVc2VyKHBsYXllcjpCQUJZTE9OLlBsYXllck51bWJlciA9IEJBQllMT04uUGxheWVyTnVtYmVyLk9uZSk6IE1pY3Jvc29mdC5YYm94LlNlcnZpY2VzLlN5c3RlbS5YYm94TGl2ZVVzZXIge1xyXG4gICAgICAgICAgICBsZXQgdXNlcjogTWljcm9zb2Z0Llhib3guU2VydmljZXMuU3lzdGVtLlhib3hMaXZlVXNlciA9IG51bGw7XHJcbiAgICAgICAgICAgIGlmIChCQUJZTE9OLlNjZW5lTWFuYWdlci5Jc1dpbmRvd3MoKSkge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChwbGF5ZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIEJBQllMT04uUGxheWVyTnVtYmVyLk9uZTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgdXNlciA9ICg8YW55PndpbmRvdykuQmFieWxvblRvb2xraXQuWGJveExpdmUuUGx1Z2luLmdldFhib3hMaXZlVXNlck9uZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIEJBQllMT04uUGxheWVyTnVtYmVyLlR3bzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgdXNlciA9ICg8YW55PndpbmRvdykuQmFieWxvblRvb2xraXQuWGJveExpdmUuUGx1Z2luLmdldFhib3hMaXZlVXNlclR3bygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIEJBQllMT04uUGxheWVyTnVtYmVyLlRocmVlOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB1c2VyID0gKDxhbnk+d2luZG93KS5CYWJ5bG9uVG9vbGtpdC5YYm94TGl2ZS5QbHVnaW4uZ2V0WGJveExpdmVVc2VyVGhyZWUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBCQUJZTE9OLlBsYXllck51bWJlci5Gb3VyOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB1c2VyID0gKDxhbnk+d2luZG93KS5CYWJ5bG9uVG9vbGtpdC5YYm94TGl2ZS5QbHVnaW4uZ2V0WGJveExpdmVVc2VyRm91cigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB1c2VyO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvKiogR2V0IHhib3ggbGl2ZSB1c2VyIGlmIHBsYXRmb3JtIHNlcnZpY2VzIGF2YWlsYWJsZS4gKFdpblJUKSAqL1xyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgR2V0WGJveExpdmVTeXN0ZW1Vc2VyKHN5c3RlbVVzZXI6IFdpbmRvd3MuU3lzdGVtLlVzZXIsIHBsYXllcjpCQUJZTE9OLlBsYXllck51bWJlciA9IEJBQllMT04uUGxheWVyTnVtYmVyLk9uZSk6IE1pY3Jvc29mdC5YYm94LlNlcnZpY2VzLlN5c3RlbS5YYm94TGl2ZVVzZXIge1xyXG4gICAgICAgICAgICBsZXQgdXNlcjogTWljcm9zb2Z0Llhib3guU2VydmljZXMuU3lzdGVtLlhib3hMaXZlVXNlciA9IG51bGw7XHJcbiAgICAgICAgICAgIGlmIChCQUJZTE9OLlNjZW5lTWFuYWdlci5Jc1dpbmRvd3MoKSkge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChwbGF5ZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIEJBQllMT04uUGxheWVyTnVtYmVyLk9uZTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgdXNlciA9ICg8YW55PndpbmRvdykuQmFieWxvblRvb2xraXQuWGJveExpdmUuUGx1Z2luLmdldFhib3hMaXZlU3lzdGVtVXNlck9uZShzeXN0ZW1Vc2VyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBCQUJZTE9OLlBsYXllck51bWJlci5Ud286XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVzZXIgPSAoPGFueT53aW5kb3cpLkJhYnlsb25Ub29sa2l0Llhib3hMaXZlLlBsdWdpbi5nZXRYYm94TGl2ZVN5c3RlbVVzZXJUd28oc3lzdGVtVXNlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgQkFCWUxPTi5QbGF5ZXJOdW1iZXIuVGhyZWU6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVzZXIgPSAoPGFueT53aW5kb3cpLkJhYnlsb25Ub29sa2l0Llhib3hMaXZlLlBsdWdpbi5nZXRYYm94TGl2ZVN5c3RlbVVzZXJUaHJlZShzeXN0ZW1Vc2VyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBCQUJZTE9OLlBsYXllck51bWJlci5Gb3VyOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB1c2VyID0gKDxhbnk+d2luZG93KS5CYWJ5bG9uVG9vbGtpdC5YYm94TGl2ZS5QbHVnaW4uZ2V0WGJveExpdmVTeXN0ZW1Vc2VyRm91cihzeXN0ZW1Vc2VyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdXNlcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgLyoqIEdldCB4Ym94IGxpdmUgdXNlciBjb250ZXh0IGlmIHBsYXRmb3JtIHNlcnZpY2VzIGF2YWlsYWJsZS4gKFdpblJUKSAqL1xyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgR2V0WGJveExpdmVVc2VyQ29udGV4dChwbGF5ZXI6QkFCWUxPTi5QbGF5ZXJOdW1iZXIgPSBCQUJZTE9OLlBsYXllck51bWJlci5PbmUpOiBNaWNyb3NvZnQuWGJveC5TZXJ2aWNlcy5YYm94TGl2ZUNvbnRleHQge1xyXG4gICAgICAgICAgICBsZXQgY29udGV4dDogTWljcm9zb2Z0Llhib3guU2VydmljZXMuWGJveExpdmVDb250ZXh0ID0gbnVsbDtcclxuICAgICAgICAgICAgaWYgKEJBQllMT04uU2NlbmVNYW5hZ2VyLklzV2luZG93cygpKSB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHBsYXllcikge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgQkFCWUxPTi5QbGF5ZXJOdW1iZXIuT25lOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0ID0gKDxhbnk+d2luZG93KS5CYWJ5bG9uVG9vbGtpdC5YYm94TGl2ZS5QbHVnaW4uZ2V0WGJveExpdmVDb250ZXh0T25lKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgQkFCWUxPTi5QbGF5ZXJOdW1iZXIuVHdvOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0ID0gKDxhbnk+d2luZG93KS5CYWJ5bG9uVG9vbGtpdC5YYm94TGl2ZS5QbHVnaW4uZ2V0WGJveExpdmVDb250ZXh0VHdvKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgQkFCWUxPTi5QbGF5ZXJOdW1iZXIuVGhyZWU6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQgPSAoPGFueT53aW5kb3cpLkJhYnlsb25Ub29sa2l0Llhib3hMaXZlLlBsdWdpbi5nZXRYYm94TGl2ZUNvbnRleHRUaHJlZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIEJBQllMT04uUGxheWVyTnVtYmVyLkZvdXI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQgPSAoPGFueT53aW5kb3cpLkJhYnlsb25Ub29sa2l0Llhib3hMaXZlLlBsdWdpbi5nZXRYYm94TGl2ZUNvbnRleHRGb3VyKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGNvbnRleHQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8qKiBSZXNldHMgeGJveCBsaXZlIHVzZXIgY29udGV4dCBpZiBwbGF0Zm9ybSBzZXJ2aWNlcyBhdmFpbGFibGUuIChXaW5SVCkgKi9cclxuICAgICAgICBwdWJsaWMgc3RhdGljIFJlc2V0WGJveExpdmVVc2VyQ29udGV4dChwbGF5ZXI6QkFCWUxPTi5QbGF5ZXJOdW1iZXIgPSBCQUJZTE9OLlBsYXllck51bWJlci5PbmUpOiB2b2lkIHtcclxuICAgICAgICAgICAgaWYgKEJBQllMT04uU2NlbmVNYW5hZ2VyLklzV2luZG93cygpKSB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHBsYXllcikge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgQkFCWUxPTi5QbGF5ZXJOdW1iZXIuT25lOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAoPGFueT53aW5kb3cpLkJhYnlsb25Ub29sa2l0Llhib3hMaXZlLlBsdWdpbi5yZXNldFhib3hMaXZlVXNlckNvbnRleHRPbmUoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIEJBQllMT04uUGxheWVyTnVtYmVyLlR3bzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgKDxhbnk+d2luZG93KS5CYWJ5bG9uVG9vbGtpdC5YYm94TGl2ZS5QbHVnaW4ucmVzZXRYYm94TGl2ZVVzZXJDb250ZXh0VHdvKClcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBCQUJZTE9OLlBsYXllck51bWJlci5UaHJlZTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgKDxhbnk+d2luZG93KS5CYWJ5bG9uVG9vbGtpdC5YYm94TGl2ZS5QbHVnaW4ucmVzZXRYYm94TGl2ZVVzZXJDb250ZXh0VGhyZWUoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIEJBQllMT04uUGxheWVyTnVtYmVyLkZvdXI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICg8YW55PndpbmRvdykuQmFieWxvblRvb2xraXQuWGJveExpdmUuUGx1Z2luLnJlc2V0WGJveExpdmVVc2VyQ29udGV4dEZvdXIoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqIC8vXHJcbiAgICAgICAgLy8gKiBCYWJ5bG9uIFhib3ggTGl2ZSBDb250ZXh0IEZ1bmN0aW9ucyAqIC8vXHJcbiAgICAgICAgLy8gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqIC8vXHJcblxyXG4gICAgICAgIC8qKiBHZXQgeGJveCBsaXZlIGNvbnRleHQgcHJvcGVydHkgaWYgcGxhdGZvcm0gc2VydmljZXMgYXZhaWxhYmxlLiAoV2luUlQpICovXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBHZXRYYm94TGl2ZUNvbnRleHRQcm9wZXJ0eShuYW1lOmFueSk6IGFueSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoQkFCWUxPTi5TY2VuZU1hbmFnZXIuSXNXaW5kb3dzKCkpID8gKDxhbnk+d2luZG93KS5CYWJ5bG9uVG9vbGtpdC5YYm94TGl2ZS5QbHVnaW4uZ2V0WGJveExpdmVDb250ZXh0UHJvcGVydHkobmFtZSkgOiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvKiogR2V0IHhib3ggbGl2ZSBjb250ZXh0IHByb3BlcnR5IGlmIHBsYXRmb3JtIHNlcnZpY2VzIGF2YWlsYWJsZS4gKFdpblJUKSAqL1xyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgU2V0WGJveExpdmVDb250ZXh0UHJvcGVydHkobmFtZTogYW55LCBwcm9wZXJ0eTogYW55KTogdm9pZCB7XHJcbiAgICAgICAgICAgIGlmIChCQUJZTE9OLlNjZW5lTWFuYWdlci5Jc1dpbmRvd3MoKSkge1xyXG4gICAgICAgICAgICAgICAgKDxhbnk+d2luZG93KS5CYWJ5bG9uVG9vbGtpdC5YYm94TGl2ZS5QbHVnaW4uc2V0WGJveExpdmVDb250ZXh0UHJvcGVydHkobmFtZSwgcHJvcGVydHkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8qKiBSZXNldHMgeGJveCBsaXZlIHByb3BlcnR5IGNvbnRleHQgYmFnIGlmIHBsYXRmb3JtIHNlcnZpY2VzIGF2YWlsYWJsZS4gKFdpblJUKSAqL1xyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgUmVzZXRYYm94TGl2ZVByb3BlcnR5Q29udGV4dHMoKTogdm9pZCB7XHJcbiAgICAgICAgICAgIGlmIChCQUJZTE9OLlNjZW5lTWFuYWdlci5Jc1dpbmRvd3MoKSkge1xyXG4gICAgICAgICAgICAgICAgKDxhbnk+d2luZG93KS5CYWJ5bG9uVG9vbGtpdC5YYm94TGl2ZS5QbHVnaW4ucmVzZXRYYm94TGl2ZVByb3BlcnR5Q29udGV4dHMoKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqIC8vXHJcbiAgICAgICAgLy8gKiBCYWJ5bG9uIFhib3ggTGl2ZSBTaWduIE91dCBGdW5jdGlvbnMgKiAvL1xyXG4gICAgICAgIC8vICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogLy9cclxuICAgICAgICBcclxuICAgICAgICAvKiogU2V0cyB0aGUgWGJveCBVc2VyIFNpZ24gT3V0IENvbXBsZXRlIEhhbmRsZXIgKFdpblJUKSAqL1xyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgU2V0WGJveExpdmVTaWduT3V0SGFuZGxlcihoYW5kbGVyOiAocmVzdWx0OiBNaWNyb3NvZnQuWGJveC5TZXJ2aWNlcy5TeXN0ZW0uU2lnbk91dENvbXBsZXRlZEV2ZW50QXJncykgPT4gdm9pZCA9IG51bGwpOiB2b2lkIHtcclxuICAgICAgICAgICAgaWYgKEJBQllMT04uU2NlbmVNYW5hZ2VyLklzV2luZG93cygpKSB7XHJcbiAgICAgICAgICAgICAgICAoPGFueT53aW5kb3cpLkJhYnlsb25Ub29sa2l0Llhib3hMaXZlLlBsdWdpbi5vbnVzZXJzaWdub3V0ID0gaGFuZGxlcjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsIm1vZHVsZSBQUk9KRUNUIHtcclxuICAgIC8qKlxyXG4gICAgKiBCYWJ5bG9uIFNjcmlwdCBDb21wb25lbnRcclxuICAgICogQGNsYXNzIERlYnVnZ2VyXHJcbiAgICAqL1xyXG4gICAgZXhwb3J0IGNsYXNzIERlYnVnZ2VyIGV4dGVuZHMgQkFCWUxPTi5TY3JpcHRDb21wb25lbnQge1xyXG4gICAgICAgIC8vIEV4YW1wbGU6IHByaXZhdGUgaGVsbG9Xb3JsZDpzdHJpbmcgPSBcIkhlbGxvIFdvcmxkXCI7XHJcblxyXG4gICAgICAgIHByb3RlY3RlZCBhd2FrZSgpOiB2b2lkIHtcclxuICAgICAgICAgICAgLyogSW5pdCBjb21wb25lbnQgZnVuY3Rpb24gKi9cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByb3RlY3RlZCBzdGFydCgpOiB2b2lkIHtcclxuICAgICAgICAgICAgLyogU3RhcnQgcmVuZGVyIGxvb3AgZnVuY3Rpb24gKi9cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByb3RlY3RlZCByZWFkeSgpOiB2b2lkIHtcclxuICAgICAgICAgICAgLyogRXhlY3V0ZSB3aGVuIHJlYWR5IGZ1bmN0aW9uICovXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcm90ZWN0ZWQgdXBkYXRlKCk6IHZvaWQge1xyXG4gICAgICAgICAgICAvKiBVcGRhdGUgcmVuZGVyIGxvb3AgZnVuY3Rpb24gKi9cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByb3RlY3RlZCBsYXRlKCk6IHZvaWQge1xyXG4gICAgICAgICAgICAvKiBMYXRlIHVwZGF0ZSByZW5kZXIgbG9vcCBmdW5jdGlvbiAqL1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJvdGVjdGVkIGFmdGVyKCk6IHZvaWQge1xyXG4gICAgICAgICAgICAvKiBBZnRlciB1cGRhdGUgcmVuZGVyIGxvb3AgZnVuY3Rpb24gKi9cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByb3RlY3RlZCBmaXhlZCgpOiB2b2lkIHtcclxuICAgICAgICAgICAgLyogRml4ZWQgdXBkYXRlIHBoeXNpY3Mgc3RlcCBmdW5jdGlvbiAqL1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJvdGVjdGVkIGRlc3Ryb3koKTogdm9pZCB7XHJcbiAgICAgICAgICAgIC8qIERlc3Ryb3kgY29tcG9uZW50IGZ1bmN0aW9uICovXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwibW9kdWxlIFBST0pFQ1Qge1xyXG4gIC8qKlxyXG4gICAqIEJhYnlsb24gU2NyaXB0IENvbXBvbmVudFxyXG4gICAqIEBjbGFzcyBGaXhUZXJyYWluXHJcbiAgICovXHJcbiAgZXhwb3J0IGNsYXNzIEZpeFRlcnJhaW4gZXh0ZW5kcyBCQUJZTE9OLlNjcmlwdENvbXBvbmVudCB7XHJcbiAgICAvLyBFeGFtcGxlOiBwcml2YXRlIGhlbGxvV29ybGQ6c3RyaW5nID0gXCJIZWxsbyBXb3JsZFwiO1xyXG5cclxuICAgIHByb3RlY3RlZCBhd2FrZSgpOiB2b2lkIHtcclxuICAgICAgLyogSW5pdCBjb21wb25lbnQgZnVuY3Rpb24gKi9cclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgc3RhcnQoKTogdm9pZCB7XHJcbiAgICAgIHRoaXMuc2NlbmUuZGVidWdMYXllci5zaG93KCk7XHJcbiAgICAgIC8qIFN0YXJ0IHJlbmRlciBsb29wIGZ1bmN0aW9uICovXHJcbiAgICAgIGNvbnNvbGUubG9nKHRoaXMpO1xyXG4gICAgICBsZXQgdGVycmFpbnMgPSB0aGlzLnNjZW5lLmdldE1lc2hCeU5hbWUoXCJUZXJyYWluX2NvbGxpZGVyc1wiKTtcclxuICAgICAgbGV0IHRlcnJhaW40ID0gdGhpcy5zY2VuZS5nZXRNZXNoQnlOYW1lKFwiVGVycmFpbl9tZXNoXzRcIik7XHJcbiAgICAgIHRlcnJhaW40LnBoeXNpY3NJbXBvc3RvciA9IG5ldyBCQUJZTE9OLlBoeXNpY3NJbXBvc3RvcihcclxuICAgICAgICB0ZXJyYWluNCxcclxuICAgICAgICBCQUJZTE9OLlBoeXNpY3NJbXBvc3Rvci5IZWlnaHRtYXBJbXBvc3RvcixcclxuICAgICAgICB7IG1hc3M6IDAsIHJlc3RpdHV0aW9uOiAwLCBmcmljdGlvbjogMCB9LFxyXG4gICAgICAgIHRoaXMuc2NlbmVcclxuICAgICAgKTtcclxuICAgICAgY29uc29sZS5sb2codGVycmFpbjQpO1xyXG4gICAgICB0aGlzLnNjZW5lLm1lc2hlcy5mb3JFYWNoKChtZXNoKSA9PiB7XHJcbiAgICAgICAgbWVzaC5jaGVja0NvbGxpc2lvbnMgPSB0cnVlO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIHZhciBncm91bmQgPSBCQUJZTE9OLk1lc2guQ3JlYXRlR3JvdW5kRnJvbUhlaWdodE1hcChcclxuICAgICAgICBcImdyb3VuZFwiLFxyXG4gICAgICAgIFwiaHR0cHM6Ly9wbGF5Z3JvdW5kLmJhYnlsb25qcy5jb20vdGV4dHVyZXMvd29ybGRIZWlnaHRNYXAuanBnXCIsXHJcbiAgICAgICAgMjAwLFxyXG4gICAgICAgIDIwMCxcclxuICAgICAgICAyNTAsXHJcbiAgICAgICAgMCxcclxuICAgICAgICA0MCxcclxuICAgICAgICB0aGlzLnNjZW5lLFxyXG4gICAgICAgIGZhbHNlLFxyXG4gICAgICAgIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgIGdyb3VuZC5waHlzaWNzSW1wb3N0b3IgPSBuZXcgQkFCWUxPTi5QaHlzaWNzSW1wb3N0b3IoXHJcbiAgICAgICAgICAgIGdyb3VuZCxcclxuICAgICAgICAgICAgQkFCWUxPTi5QaHlzaWNzSW1wb3N0b3IuSGVpZ2h0bWFwSW1wb3N0b3IsXHJcbiAgICAgICAgICAgIHsgbWFzczogMCB9XHJcbiAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgIHZhciBjcmVhdGVCYWxsID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgYiA9IEJBQllMT04uTWVzaC5DcmVhdGVTcGhlcmUoXCJzXCIsIDgsIDgsIHRoaXMuc2NlbmUpO1xyXG4gICAgICAgICAgICBiLnBvc2l0aW9uLnkgPSAzMDtcclxuICAgICAgICAgICAgYi5wb3NpdGlvbi54ID0gTWF0aC5yYW5kb20oKSAqIDEwMCAqIChNYXRoLnJhbmRvbSgpIDwgMC41ID8gLTEgOiAxKTtcclxuICAgICAgICAgICAgYi5wb3NpdGlvbi56ID0gTWF0aC5yYW5kb20oKSAqIDEwMCAqIChNYXRoLnJhbmRvbSgpIDwgMC41ID8gLTEgOiAxKTtcclxuICAgICAgICAgICAgYi5waHlzaWNzSW1wb3N0b3IgPSBuZXcgQkFCWUxPTi5QaHlzaWNzSW1wb3N0b3IoXHJcbiAgICAgICAgICAgICAgYixcclxuICAgICAgICAgICAgICBCQUJZTE9OLlBoeXNpY3NJbXBvc3Rvci5TcGhlcmVJbXBvc3RvcixcclxuICAgICAgICAgICAgICB7IG1hc3M6IDEsIGZyaWN0aW9uOiAwLCByZXN0aXR1dGlvbjogMCB9XHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgIGZvciAodmFyIGlpID0gMDsgaWkgPCAxMDsgaWkrKykge1xyXG4gICAgICAgICAgICBjcmVhdGVCYWxsKCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCByZWFkeSgpOiB2b2lkIHtcclxuICAgICAgLyogRXhlY3V0ZSB3aGVuIHJlYWR5IGZ1bmN0aW9uICovXHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIHVwZGF0ZSgpOiB2b2lkIHtcclxuICAgICAgdGhpcy5zY2VuZS5tZXNoZXMuZm9yRWFjaCgobWVzaCkgPT4ge1xyXG4gICAgICAgIC8vIGlmIChtZXNoLmludGVyc2VjdHNQb2ludChuZXcgQkFCWUxPTi5WZWN0b3IzKDUxMiwgMjUsIDUxMikpKSB7XHJcbiAgICAgICAgLy8gICBtZXNoLnBvc2l0aW9uLnkgKz0gMjU7XHJcbiAgICAgICAgLy8gICB9XHJcbiAgICAgICAgdGhpcy5zY2VuZS5tZXNoZXMuZm9yRWFjaCgobWVzaDEpID0+IHtcclxuICAgICAgICAgIGlmIChtZXNoMS5uYW1lLmluY2x1ZGVzKFwiU3BoZXJlXCIpICYmICFtZXNoLm5hbWUuaW5jbHVkZXMoXCJTcGhlcmVcIikpXHJcbiAgICAgICAgICAgIGlmIChtZXNoLmludGVyc2VjdHNNZXNoKG1lc2gxKSkge1xyXG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKFxyXG4gICAgICAgICAgICAgICAgbWVzaDEubmFtZSArIFwiIGludGVyc2VjdCB3aXRoIFwiICsgbWVzaC5uYW1lICsgXCIgd2l0aCBcIlxyXG4gICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIGxhdGUoKTogdm9pZCB7XHJcbiAgICAgIC8qIExhdGUgdXBkYXRlIHJlbmRlciBsb29wIGZ1bmN0aW9uICovXHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIGFmdGVyKCk6IHZvaWQge1xyXG4gICAgICAvKiBBZnRlciB1cGRhdGUgcmVuZGVyIGxvb3AgZnVuY3Rpb24gKi9cclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgZml4ZWQoKTogdm9pZCB7XHJcbiAgICAgIC8qIEZpeGVkIHVwZGF0ZSBwaHlzaWNzIHN0ZXAgZnVuY3Rpb24gKi9cclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgZGVzdHJveSgpOiB2b2lkIHtcclxuICAgICAgLyogRGVzdHJveSBjb21wb25lbnQgZnVuY3Rpb24gKi9cclxuICAgIH1cclxuICB9XHJcbn1cclxuIiwibW9kdWxlIEJBQllMT04ge1xyXG4gICAgLyoqXHJcbiAgICAgKiBCYWJ5bG9uIGFuaW1hdGlvbiBzdGF0ZSBwcm8gY2xhc3MgKFVuaXR5IFN0eWxlIE1lY2hhbmltIEFuaW1hdGlvbiBTeXN0ZW0pXHJcbiAgICAgKiBAY2xhc3MgQW5pbWF0aW9uU3RhdGUgLSBBbGwgcmlnaHRzIHJlc2VydmVkIChjKSAyMDIwIE1hY2tleSBLaW5hcmRcclxuICAgICAqL1xyXG4gICAgZXhwb3J0IGNsYXNzIEFuaW1hdGlvblN0YXRlIGV4dGVuZHMgQkFCWUxPTi5TY3JpcHRDb21wb25lbnQge1xyXG4gICAgICAgIHByaXZhdGUgc3RhdGljIEZQUzpudW1iZXIgPSAzMDtcclxuICAgICAgICBwcml2YXRlIHN0YXRpYyBFWElUOnN0cmluZyA9IFwiW0VYSVRdXCI7XHJcbiAgICAgICAgcHJpdmF0ZSBzdGF0aWMgVElNRTpudW1iZXIgPSAxOyAgICAgICAgICAgICAvLyBOb3RlOiBNdXN0IEJlIE9uZSBTZWNvbmQgTm9ybWFsaXplZCBUaW1lXHJcbiAgICAgICAgcHJpdmF0ZSBzdGF0aWMgU1BFRUQ6bnVtYmVyID0gMS4wMjU7ICAgICAgICAvLyBOb3RlOiBBbmltYXRpb24gU3RhdGUgQmxlbmQgU3BlZWQgRmFjdG9yXHJcblxyXG4gICAgICAgIHByaXZhdGUgX2ZyYW1ldGltZTpudW1iZXIgPSAwO1xyXG4gICAgICAgIHByaXZhdGUgX2xheWVyY291bnQ6bnVtYmVyID0gMDtcclxuICAgICAgICBwcml2YXRlIF91cGRhdGVtb2RlOm51bWJlciA9IDA7ICAgICAgICAgICAgIC8vIE5vdGU6IDAgLSBUcmFuc2Zvcm0gTm9kZSB8IDEgLSBDaGFjcmFjdGVyIENvbnRyb2xsZXIgfCAyIC0gVW5zY2FsZWQgVGltZSA/Pz9cclxuICAgICAgICBwcml2YXRlIF9oYXNyb290bW90aW9uOmJvb2xlYW4gPSBmYWxzZTtcclxuICAgICAgICBwcml2YXRlIF9hbmltYXRpb25wbGF5aW5nOmJvb2xlYW4gPSBmYWxzZTtcclxuICAgICAgICBwcml2YXRlIF9pbml0aWFsdGFyZ2V0YmxlbmRpbmc6Ym9vbGVhbiA9IGZhbHNlO1xyXG4gICAgICAgIHByaXZhdGUgX2hhc3RyYW5zZm9ybWhpZXJhcmNoeTpib29sZWFuID0gZmFsc2U7XHJcbiAgICAgICAgcHJpdmF0ZSBfbGVmdGZlZXRib3R0b21oZWlnaHQ6bnVtYmVyID0gMDtcclxuICAgICAgICBwcml2YXRlIF9yaWdodGZlZXRib3R0b21oZWlnaHQ6bnVtYmVyID0gMDtcclxuICAgICAgICBwcml2YXRlIF9pbml0aWFsUm9vdEJvbmVQb3NpdGlvbjpCQUJZTE9OLlZlY3RvcjMgPSBudWxsO1xyXG4gICAgICAgIHByaXZhdGUgX2luaXRpYWxSb290Qm9uZVJvdGF0aW9uOkJBQllMT04uVmVjdG9yMyA9IG51bGw7XHJcbiAgICAgICAgcHJpdmF0ZSBfcnVudGltZWNvbnRyb2xsZXI6c3RyaW5nID0gbnVsbDtcclxuICAgICAgICBwcml2YXRlIF9leGVjdXRlZDpib29sZWFuID0gZmFsc2U7XHJcbiAgICAgICAgcHJpdmF0ZSBfY2hlY2tlcnM6QkFCWUxPTi5UcmFuc2l0aW9uQ2hlY2sgPSBuZXcgQkFCWUxPTi5UcmFuc2l0aW9uQ2hlY2soKTtcclxuICAgICAgICBwcml2YXRlIF9zb3VyY2U6c3RyaW5nID0gXCJcIjtcclxuICAgICAgICBwcml2YXRlIF9tYWNoaW5lOmFueSA9IG51bGw7XHJcblxyXG4gICAgICAgIHByaXZhdGUgX2RlbHRhUG9zaXRpb246QkFCWUxPTi5WZWN0b3IzID0gbmV3IEJBQllMT04uVmVjdG9yMygwLDAsMCk7XHJcbiAgICAgICAgcHJpdmF0ZSBfZGVsdGFSb3RhdGlvbjpCQUJZTE9OLlF1YXRlcm5pb24gPSBuZXcgQkFCWUxPTi5RdWF0ZXJuaW9uKDAsMCwwLDEpO1xyXG4gICAgICAgIHByaXZhdGUgX3Bvc2l0aW9uV2VpZ2h0OmJvb2xlYW4gPSBmYWxzZTtcclxuICAgICAgICBwcml2YXRlIF9yb290Qm9uZVdlaWdodDpib29sZWFuID0gZmFsc2U7XHJcbiAgICAgICAgcHJpdmF0ZSBfcm90YXRpb25XZWlnaHQ6Ym9vbGVhbiA9IGZhbHNlO1xyXG4gICAgICAgIHByaXZhdGUgX3Jvb3RRdWF0V2VpZ2h0OmJvb2xlYW4gPSBmYWxzZTtcclxuICAgICAgICBwcml2YXRlIF9hbmd1bGFyVmVsb2NpdHk6QkFCWUxPTi5WZWN0b3IzID0gbmV3IEJBQllMT04uVmVjdG9yMygwLDAsMCk7XHJcbiAgICAgICAgcHJpdmF0ZSBfcG9zaXRpb25Ib2xkZXI6QkFCWUxPTi5WZWN0b3IzID0gbmV3IEJBQllMT04uVmVjdG9yMygwLDAsMCk7XHJcbiAgICAgICAgcHJpdmF0ZSBfcm9vdEJvbmVIb2xkZXI6QkFCWUxPTi5WZWN0b3IzID0gbmV3IEJBQllMT04uVmVjdG9yMygwLDAsMCk7XHJcbiAgICAgICAgcHJpdmF0ZSBfcm90YXRpb25Ib2xkZXI6QkFCWUxPTi5RdWF0ZXJuaW9uID0gbmV3IEJBQllMT04uUXVhdGVybmlvbigwLDAsMCwxKTtcclxuICAgICAgICBwcml2YXRlIF9yb290UXVhdEhvbGRlcjpCQUJZTE9OLlF1YXRlcm5pb24gPSBuZXcgQkFCWUxPTi5RdWF0ZXJuaW9uKDAsMCwwLDEpO1xyXG4gICAgICAgIHByaXZhdGUgX3Jvb3RNb3Rpb25NYXRyaXg6QkFCWUxPTi5NYXRyaXggPSBCQUJZTE9OLk1hdHJpeC5aZXJvKCk7XHJcbiAgICAgICAgcHJpdmF0ZSBfcm9vdE1vdGlvblNjYWxpbmc6QkFCWUxPTi5WZWN0b3IzID0gbmV3IEJBQllMT04uVmVjdG9yMygwLDAsMCk7XHJcbiAgICAgICAgcHJpdmF0ZSBfcm9vdE1vdGlvblJvdGF0aW9uOkJBQllMT04uUXVhdGVybmlvbiA9IG5ldyBCQUJZTE9OLlF1YXRlcm5pb24oMCwwLDAsMSk7XHJcbiAgICAgICAgcHJpdmF0ZSBfcm9vdE1vdGlvblBvc2l0aW9uOkJBQllMT04uVmVjdG9yMyA9IG5ldyBCQUJZTE9OLlZlY3RvcjMoMCwwLDApO1xyXG4gICAgICAgIHByaXZhdGUgX2xhc3RNb3Rpb25Sb3RhdGlvbjpCQUJZTE9OLlF1YXRlcm5pb24gPSBuZXcgQkFCWUxPTi5RdWF0ZXJuaW9uKDAsMCwwLDEpO1xyXG4gICAgICAgIHByaXZhdGUgX2xhc3RNb3Rpb25Qb3NpdGlvbjpCQUJZTE9OLlZlY3RvcjMgPSBuZXcgQkFCWUxPTi5WZWN0b3IzKDAsMCwwKTtcclxuICAgICAgICBwcml2YXRlIF9kZWx0YVBvc2l0aW9uRml4ZWQ6QkFCWUxPTi5WZWN0b3IzID0gbmV3IEJBQllMT04uVmVjdG9yMygwLDAsMCk7XHJcbiAgICAgICAgcHJpdmF0ZSBfZGVsdGFQb3NpdGlvbk1hdHJpeDpCQUJZTE9OLk1hdHJpeCA9IG5ldyBCQUJZTE9OLk1hdHJpeCgpO1xyXG4gICAgICAgIHByaXZhdGUgX3NhdmVEZWx0YVBvc2l0aW9uOkJBQllMT04uVmVjdG9yMyA9IG5ldyBCQUJZTE9OLlZlY3RvcjMoMCwwLDApO1xyXG4gICAgICAgIHByaXZhdGUgX3NhdmVEZWx0YVJvdGF0aW9uOkJBQllMT04uUXVhdGVybmlvbiA9IG5ldyBCQUJZTE9OLlF1YXRlcm5pb24oMCwwLDAsMSk7XHJcbiAgICAgICAgcHJpdmF0ZSBfZGlydHlNb3Rpb25NYXRyaXg6YW55ID0gbnVsbDtcclxuICAgICAgICBwcml2YXRlIF9kaXJ0eUJsZW5kZXJNYXRyaXg6YW55ID0gbnVsbDtcclxuICAgICAgICAvL3ByaXZhdGUgX2JvZHlPcmllbnRhdGlvbkFuZ2xlWTpudW1iZXIgPSAwO1xyXG5cclxuICAgICAgICAvL3ByaXZhdGUgdHJhbnNmb3JtRm9yd2FyZFZlY3RvcjpCQUJZTE9OLlZlY3RvcjMgPSBuZXcgQkFCWUxPTi5WZWN0b3IzKDAsMCwwKTtcclxuICAgICAgICAvL3ByaXZhdGUgdHJhbnNmb3JtUmlnaHRWZWN0b3I6QkFCWUxPTi5WZWN0b3IzID0gbmV3IEJBQllMT04uVmVjdG9yMygwLDAsMCk7XHJcbiAgICAgICAgLy9wcml2YXRlIGRlc2lyZWRGb3J3YXJkVmVjdG9yOkJBQllMT04uVmVjdG9yMyA9IG5ldyBCQUJZTE9OLlZlY3RvcjMoMCwwLDApO1xyXG4gICAgICAgIC8vcHJpdmF0ZSBkZXNpcmVkUmlnaHRWZWN0b3I6QkFCWUxPTi5WZWN0b3IzID0gbmV3IEJBQllMT04uVmVjdG9yMygwLDAsMCk7XHJcblxyXG4gICAgICAgIHByaXZhdGUgX3RhcmdldFBvc2l0aW9uOkJBQllMT04uVmVjdG9yMyA9IG5ldyBCQUJZTE9OLlZlY3RvcjMoMCwwLDApO1xyXG4gICAgICAgIHByaXZhdGUgX3RhcmdldFJvdGF0aW9uOkJBQllMT04uUXVhdGVybmlvbiA9IG5ldyBCQUJZTE9OLlF1YXRlcm5pb24oMCwwLDAsMSk7XHJcbiAgICAgICAgcHJpdmF0ZSBfdGFyZ2V0U2NhbGluZzpCQUJZTE9OLlZlY3RvcjMgPSBuZXcgQkFCWUxPTi5WZWN0b3IzKDEsMSwxKTtcclxuICAgICAgICBwcml2YXRlIF91cGRhdGVNYXRyaXg6QkFCWUxPTi5NYXRyaXggPSBCQUJZTE9OLk1hdHJpeC5aZXJvKCk7XHJcbiAgICAgICAgcHJpdmF0ZSBfYmxlbmRlck1hdHJpeDpCQUJZTE9OLk1hdHJpeCA9IEJBQllMT04uTWF0cml4Llplcm8oKTtcclxuICAgICAgICBwcml2YXRlIF9ibGVuZFdlaWdodHM6QkFCWUxPTi5CbGVuZGluZ1dlaWdodHMgPSBuZXcgQkFCWUxPTi5CbGVuZGluZ1dlaWdodHMoKTtcclxuICAgICAgICBwcml2YXRlIF9lbXB0eVNjYWxpbmc6QkFCWUxPTi5WZWN0b3IzID0gbmV3IEJBQllMT04uVmVjdG9yMygxLDEsMSk7XHJcbiAgICAgICAgcHJpdmF0ZSBfZW1wdHlQb3NpdGlvbjpCQUJZTE9OLlZlY3RvcjMgPSBuZXcgQkFCWUxPTi5WZWN0b3IzKDAsMCwwKTtcclxuICAgICAgICBwcml2YXRlIF9lbXB0eVJvdGF0aW9uOkJBQllMT04uUXVhdGVybmlvbiA9IG5ldyBCQUJZTE9OLlF1YXRlcm5pb24oMCwwLDAsMSk7XHJcbiAgICAgICAgcHJpdmF0ZSBfaWtGcmFtZUVhbmJsZWQ6Ym9vbGVhbiA9IGZhbHNlO1xyXG5cclxuICAgICAgICBwcml2YXRlIF9kYXRhOk1hcDxzdHJpbmcsIEJBQllMT04uTWFjaGluZVN0YXRlPiA9IG5ldyBNYXA8c3RyaW5nLCBCQUJZTE9OLk1hY2hpbmVTdGF0ZT4oKTtcclxuICAgICAgICBwcml2YXRlIF9hbmltczpNYXA8c3RyaW5nLCBCQUJZTE9OLkFuaW1hdGlvbkdyb3VwPiA9IG5ldyBNYXA8c3RyaW5nLCBCQUJZTE9OLkFuaW1hdGlvbkdyb3VwPigpO1xyXG4gICAgICAgIHByaXZhdGUgX251bWJlcnM6TWFwPHN0cmluZywgbnVtYmVyPiA9IG5ldyBNYXAoKTtcclxuICAgICAgICBwcml2YXRlIF9ib29sZWFuczpNYXA8c3RyaW5nLCBib29sZWFuPiA9IG5ldyBNYXAoKTtcclxuICAgICAgICBwcml2YXRlIF90cmlnZ2VyczpNYXA8c3RyaW5nLCBib29sZWFuPiA9IG5ldyBNYXAoKTtcclxuICAgICAgICBwcml2YXRlIF9wYXJhbWV0ZXJzOk1hcDxzdHJpbmcsIEJBQllMT04uQW5pbWF0b3JQYXJhbWV0ZXJUeXBlPiA9IG5ldyBNYXA8c3RyaW5nLCBCQUJZTE9OLkFuaW1hdG9yUGFyYW1ldGVyVHlwZT4oKTtcclxuICAgICAgICBcclxuICAgICAgICBwdWJsaWMgc3BlZWRSYXRpbzpudW1iZXIgPSAxLjA7XHJcbiAgICAgICAgcHVibGljIGFwcGx5Um9vdE1vdGlvbiA9IGZhbHNlO1xyXG4gICAgICAgIHB1YmxpYyBkZWxheVVwZGF0ZVVudGlsUmVhZHkgPSB0cnVlO1xyXG4gICAgICAgIHB1YmxpYyBlbmFibGVBbmltYXRpb246Ym9vbGVhbiA9IHRydWU7XHJcbiAgICAgICAgcHVibGljIHVwZGF0ZVJvb3RNb3Rpb25Qb3NpdGlvbiA9IGZhbHNlO1xyXG4gICAgICAgIHB1YmxpYyB1cGRhdGVSb290TW90aW9uUm90YXRpb24gPSBmYWxzZTtcclxuICAgICAgICBwdWJsaWMgaGFzUm9vdE1vdGlvbigpOmJvb2xlYW4geyByZXR1cm4gdGhpcy5faGFzcm9vdG1vdGlvbiB9XHJcbiAgICAgICAgcHVibGljIGlrRnJhbWVFbmFibGVkKCk6Ym9vbGVhbiB7IHJldHVybiB0aGlzLl9pa0ZyYW1lRWFuYmxlZDsgfVxyXG4gICAgICAgIHB1YmxpYyBnZXRBbmltYXRpb25UaW1lKCk6bnVtYmVyIHsgcmV0dXJuIHRoaXMuX2ZyYW1ldGltZTsgfVxyXG4gICAgICAgIHB1YmxpYyBnZXRBbmltYXRpb25QbGF5aW5nKCk6Ym9vbGVhbiB7IHJldHVybiB0aGlzLl9hbmltYXRpb25wbGF5aW5nOyB9XHJcbiAgICAgICAgcHVibGljIGdldFJvb3RNb3Rpb25BbmdsZSgpOm51bWJlciB7IHJldHVybiB0aGlzLl9hbmd1bGFyVmVsb2NpdHkueTsgfVxyXG4gICAgICAgIHB1YmxpYyBnZXRSb290TW90aW9uU3BlZWQoKTpudW1iZXIgeyByZXR1cm4gdGhpcy5fZGVsdGFQb3NpdGlvbi5sZW5ndGgoKTsgfVxyXG4gICAgICAgIHB1YmxpYyBnZXRSb290TW90aW9uUG9zaXRpb24oKTpCQUJZTE9OLlZlY3RvcjMgeyByZXR1cm4gdGhpcy5fZGVsdGFQb3NpdGlvbkZpeGVkOyB9XHJcbiAgICAgICAgcHVibGljIGdldFJvb3RNb3Rpb25Sb3RhdGlvbigpOkJBQllMT04uUXVhdGVybmlvbiB7IHJldHVybiB0aGlzLl9kZWx0YVJvdGF0aW9uOyB9XHJcbiAgICAgICAgcHVibGljIGdldENoYXJhY3RlckNvbnRyb2xsZXIoKTpCQUJZTE9OLkNoYXJhY3RlckNvbnRyb2xsZXIgeyByZXR1cm4gdGhpcy5tX2NoYXJhY3RlckNvbnRyb2xsZXI7IH1cclxuICAgICAgICBwdWJsaWMgZ2V0UnVudGltZUNvbnRyb2xsZXIoKTpzdHJpbmcgeyByZXR1cm4gdGhpcy5fcnVudGltZWNvbnRyb2xsZXI7IH1cclxuICAgICAgICAvKiogUmVnaXN0ZXIgaGFuZGxlciB0aGF0IGlzIHRyaWdnZXJlZCB3aGVuIHRoZSBhbmltYXRpb24gaWsgc2V0dXAgaGFzIGJlZW4gdHJpZ2dlcmVkICovXHJcbiAgICAgICAgcHVibGljIG9uQW5pbWF0aW9uSUtPYnNlcnZhYmxlID0gbmV3IEJBQllMT04uT2JzZXJ2YWJsZTxudW1iZXI+KCk7XHJcbiAgICAgICAgLyoqIFJlZ2lzdGVyIGhhbmRsZXIgdGhhdCBpcyB0cmlnZ2VyZWQgd2hlbiB0aGUgYW5pbWF0aW9uIGVuZCBoYXMgYmVlbiB0cmlnZ2VyZWQgKi9cclxuICAgICAgICBwdWJsaWMgb25BbmltYXRpb25FbmRPYnNlcnZhYmxlID0gbmV3IEJBQllMT04uT2JzZXJ2YWJsZTxudW1iZXI+KCk7XHJcbiAgICAgICAgLyoqIFJlZ2lzdGVyIGhhbmRsZXIgdGhhdCBpcyB0cmlnZ2VyZWQgd2hlbiB0aGUgYW5pbWF0aW9uIGxvb3AgaGFzIGJlZW4gdHJpZ2dlcmVkICovXHJcbiAgICAgICAgcHVibGljIG9uQW5pbWF0aW9uTG9vcE9ic2VydmFibGUgPSBuZXcgQkFCWUxPTi5PYnNlcnZhYmxlPG51bWJlcj4oKTtcclxuICAgICAgICAvKiogUmVnaXN0ZXIgaGFuZGxlciB0aGF0IGlzIHRyaWdnZXJlZCB3aGVuIHRoZSBhbmltYXRpb24gZXZlbnQgaGFzIGJlZW4gdHJpZ2dlcmVkICovXHJcbiAgICAgICAgcHVibGljIG9uQW5pbWF0aW9uRXZlbnRPYnNlcnZhYmxlID0gbmV3IEJBQllMT04uT2JzZXJ2YWJsZTxCQUJZTE9OLklBbmltYXRvckV2ZW50PigpO1xyXG4gICAgICAgIC8qKiBSZWdpc3RlciBoYW5kbGVyIHRoYXQgaXMgdHJpZ2dlcmVkIHdoZW4gdGhlIGFuaW1hdGlvbiBmcmFtZSBoYXMgYmVlbiB1cGRhdGVkICovXHJcbiAgICAgICAgcHVibGljIG9uQW5pbWF0aW9uVXBkYXRlT2JzZXJ2YWJsZSA9IG5ldyBCQUJZTE9OLk9ic2VydmFibGU8QkFCWUxPTi5UcmFuc2Zvcm1Ob2RlPigpO1xyXG5cclxuICAgICAgICBwcm90ZWN0ZWQgbV9kZWZhdWx0R3JvdXA6QkFCWUxPTi5BbmltYXRpb25Hcm91cCA9IG51bGw7XHJcbiAgICAgICAgcHJvdGVjdGVkIG1fYW5pbWF0aW9uVGFyZ2V0czpCQUJZTE9OLlRhcmdldGVkQW5pbWF0aW9uW10gPSBudWxsO1xyXG4gICAgICAgIHByb3RlY3RlZCBtX2NoYXJhY3RlckNvbnRyb2xsZXI6QkFCWUxPTi5DaGFyYWN0ZXJDb250cm9sbGVyID0gbnVsbDtcclxuICAgICAgICBcclxuICAgICAgICBwcm90ZWN0ZWQgYXdha2UoKTogdm9pZCB7IHRoaXMuYXdha2VTdGF0ZU1hY2hpbmUoKTsgfVxyXG4gICAgICAgIHByb3RlY3RlZCB1cGRhdGUoKTogdm9pZCB7IHRoaXMudXBkYXRlU3RhdGVNYWNoaW5lKCk7IH1cclxuICAgICAgICBwcm90ZWN0ZWQgZGVzdHJveSgpOiB2b2lkIHsgdGhpcy5kZXN0cm95U3RhdGVNYWNoaW5lKCk7IH1cclxuXHJcbiAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4gICAgICAgIC8vIFN0YXRlIE1hY2hpbmUgRnVuY3Rpb25zXHJcbiAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4gICAgICAgIFxyXG4gICAgICAgIHB1YmxpYyBwbGF5QW5pbWF0aW9uKHN0YXRlOnN0cmluZywgdHJhbnNpdGlvbkR1cmF0aW9uOm51bWJlciA9IDAsIGFuaW1hdGlvbkxheWVyOm51bWJlciA9IDAsIGZyYW1lUmF0ZTpudW1iZXIgPSBudWxsKTpib29sZWFuIHtcclxuICAgICAgICAgICAgbGV0IHJlc3VsdDpib29sZWFuID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9tYWNoaW5lLmxheWVycyAhPSBudWxsICYmIHRoaXMuX21hY2hpbmUubGF5ZXJzLmxlbmd0aCA+IGFuaW1hdGlvbkxheWVyKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBsYXllcjpCQUJZTE9OLklBbmltYXRpb25MYXllciA9IHRoaXMuX21hY2hpbmUubGF5ZXJzW2FuaW1hdGlvbkxheWVyXTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGJsZW5kRnJhbWVSYXRlOm51bWJlciA9IChsYXllci5hbmltYXRpb25TdGF0ZU1hY2hpbmUgIT0gbnVsbCkgPyAobGF5ZXIuYW5pbWF0aW9uU3RhdGVNYWNoaW5lLnJhdGUgfHwgQkFCWUxPTi5BbmltYXRpb25TdGF0ZS5GUFMpIDogQkFCWUxPTi5BbmltYXRpb25TdGF0ZS5GUFM7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBibGVuZGluZ1NwZWVkOm51bWJlciA9ICh0cmFuc2l0aW9uRHVyYXRpb24gPiAwKSA/IEJBQllMT04uVXRpbGl0aWVzLkNvbXB1dGVCbGVuZGluZ1NwZWVkKGZyYW1lUmF0ZSB8fCBibGVuZEZyYW1lUmF0ZSwgdHJhbnNpdGlvbkR1cmF0aW9uKSA6IDA7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBsYXlDdXJyZW50QW5pbWF0aW9uU3RhdGUobGF5ZXIsIHN0YXRlLCBibGVuZGluZ1NwZWVkKTtcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRydWU7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBCQUJZTE9OLlRvb2xzLldhcm4oXCJObyBhbmltYXRpb24gc3RhdGUgbGF5ZXJzIG9uIFwiICsgdGhpcy50cmFuc2Zvcm0ubmFtZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcHVibGljIHN0b3BBbmltYXRpb24oYW5pbWF0aW9uTGF5ZXI6bnVtYmVyID0gMCk6Ym9vbGVhbiB7XHJcbiAgICAgICAgICAgIGxldCByZXN1bHQ6Ym9vbGVhbiA9IGZhbHNlO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fbWFjaGluZS5sYXllcnMgIT0gbnVsbCAmJiB0aGlzLl9tYWNoaW5lLmxheWVycy5sZW5ndGggPiBhbmltYXRpb25MYXllcikge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbGF5ZXI6QkFCWUxPTi5JQW5pbWF0aW9uTGF5ZXIgPSB0aGlzLl9tYWNoaW5lLmxheWVyc1thbmltYXRpb25MYXllcl07XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0b3BDdXJyZW50QW5pbWF0aW9uU3RhdGUobGF5ZXIpO1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIEJBQllMT04uVG9vbHMuV2FybihcIk5vIGFuaW1hdGlvbiBzdGF0ZSBsYXllcnMgb24gXCIgKyB0aGlzLnRyYW5zZm9ybS5uYW1lKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4gICAgICAgIC8vIFN0YXRlIE1hY2hpbmUgRnVuY3Rpb25zXHJcbiAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG5cclxuICAgICAgICBwdWJsaWMgZ2V0Qm9vbChuYW1lOnN0cmluZyk6Ym9vbGVhbiB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9ib29sZWFucy5nZXQobmFtZSkgfHwgZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHB1YmxpYyBzZXRCb29sKG5hbWU6c3RyaW5nLCB2YWx1ZTpib29sZWFuKTp2b2lkIHtcclxuICAgICAgICAgICAgdGhpcy5fYm9vbGVhbnMuc2V0KG5hbWUsIHZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcHVibGljIGdldEZsb2F0KG5hbWU6c3RyaW5nKTpmbG9hdCB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9udW1iZXJzLmdldChuYW1lKSB8fCAwO1xyXG4gICAgICAgIH1cclxuICAgICAgICBwdWJsaWMgc2V0RmxvYXQobmFtZTpzdHJpbmcsIHZhbHVlOmZsb2F0KTp2b2lkIHtcclxuICAgICAgICAgICAgdGhpcy5fbnVtYmVycy5zZXQobmFtZSwgdmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBwdWJsaWMgZ2V0SW50ZWdlcihuYW1lOnN0cmluZyk6aW50IHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX251bWJlcnMuZ2V0KG5hbWUpIHx8IDA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHB1YmxpYyBzZXRJbnRlZ2VyKG5hbWU6c3RyaW5nLCB2YWx1ZTppbnQpOnZvaWQge1xyXG4gICAgICAgICAgICB0aGlzLl9udW1iZXJzLnNldChuYW1lLCB2YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHB1YmxpYyBnZXRUcmlnZ2VyKG5hbWU6c3RyaW5nKTpib29sZWFuIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3RyaWdnZXJzLmdldChuYW1lKSB8fCBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcHVibGljIHNldFRyaWdnZXIobmFtZTpzdHJpbmcpOnZvaWQge1xyXG4gICAgICAgICAgICB0aGlzLl90cmlnZ2Vycy5zZXQobmFtZSwgdHJ1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHB1YmxpYyByZXNldFRyaWdnZXIobmFtZTpzdHJpbmcpOnZvaWQge1xyXG4gICAgICAgICAgICB0aGlzLl90cmlnZ2Vycy5zZXQobmFtZSwgZmFsc2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBwdWJsaWMgc2V0U21vb3RoRmxvYXQobmFtZTpzdHJpbmcsIHRhcmdldFZhbHVlOmZsb2F0LCBkYW1wVGltZTpudW1iZXIsIGRlbHRhVGltZTpudW1iZXIpOnZvaWQge1xyXG4gICAgICAgICAgICBjb25zdCBjdXJyZW50VmFsdWU6bnVtYmVyID0gdGhpcy5nZXRGbG9hdChuYW1lKTtcclxuICAgICAgICAgICAgY29uc3QgZ3JhZGllbnRWYWx1ZTpudW1iZXIgPSBCQUJZTE9OLlNjYWxhci5MZXJwKGN1cnJlbnRWYWx1ZSwgdGFyZ2V0VmFsdWUsIChkYW1wVGltZSAqIGRlbHRhVGltZSkpO1xyXG4gICAgICAgICAgICB0aGlzLl9udW1iZXJzLnNldChuYW1lLCBncmFkaWVudFZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcHVibGljIHNldFNtb290aEludGVnZXIobmFtZTpzdHJpbmcsIHRhcmdldFZhbHVlOmludCwgZGFtcFRpbWU6bnVtYmVyLCBkZWx0YVRpbWU6bnVtYmVyKTp2b2lkIHtcclxuICAgICAgICAgICAgY29uc3QgY3VycmVudFZhbHVlOm51bWJlciA9IHRoaXMuZ2V0SW50ZWdlcihuYW1lKTtcclxuICAgICAgICAgICAgY29uc3QgZ3JhZGllbnRWYWx1ZTpudW1iZXIgPSBCQUJZTE9OLlNjYWxhci5MZXJwKGN1cnJlbnRWYWx1ZSwgdGFyZ2V0VmFsdWUsIChkYW1wVGltZSAqIGRlbHRhVGltZSkpO1xyXG4gICAgICAgICAgICB0aGlzLl9udW1iZXJzLnNldChuYW1lLCBncmFkaWVudFZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcHJpdmF0ZSBnZXRNYWNoaW5lU3RhdGUobmFtZTpzdHJpbmcpOkJBQllMT04uTWFjaGluZVN0YXRlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2RhdGEuZ2V0KG5hbWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBwcml2YXRlIHNldE1hY2hpbmVTdGF0ZShuYW1lOnN0cmluZywgdmFsdWU6QkFCWUxPTi5NYWNoaW5lU3RhdGUpOnZvaWQge1xyXG4gICAgICAgICAgICB0aGlzLl9kYXRhLnNldChuYW1lLCB2YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHB1YmxpYyBnZXRDdXJyZW50U3RhdGUobGF5ZXI6bnVtYmVyKTpCQUJZTE9OLk1hY2hpbmVTdGF0ZSB7XHJcbiAgICAgICAgICAgIHJldHVybiAodGhpcy5fbWFjaGluZS5sYXllcnMgIT0gbnVsbCAmJiB0aGlzLl9tYWNoaW5lLmxheWVycy5sZW5ndGggPiBsYXllcikgPyB0aGlzLl9tYWNoaW5lLmxheWVyc1tsYXllcl0uYW5pbWF0aW9uU3RhdGVNYWNoaW5lIDogbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcHVibGljIGdldEFuaW1hdGlvbkdyb3VwKG5hbWU6c3RyaW5nKTpCQUJZTE9OLkFuaW1hdGlvbkdyb3VwIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2FuaW1zLmdldChuYW1lKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcHVibGljIGdldEFuaW1hdGlvbkdyb3VwcygpOk1hcDxzdHJpbmcsIEJBQllMT04uQW5pbWF0aW9uR3JvdXA+e1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fYW5pbXM7XHJcbiAgICAgICAgfSAgICAgICAgXHJcbiAgICAgICAgcHVibGljIHNldEFuaW1hdGlvbkdyb3Vwcyhncm91cHM6QkFCWUxPTi5BbmltYXRpb25Hcm91cFtdLCByZW1hcFRhcmdldHM6Ym9vbGVhbiA9IGZhbHNlKTp2b2lkIHtcclxuICAgICAgICAgICAgLy8gLi5cclxuICAgICAgICAgICAgLy8gVE9ETyAtIEhhbmRsZSBSZW1hcCBBbmltYXRpb24gVGFyZ2V0c1xyXG4gICAgICAgICAgICAvLyAuLlxyXG4gICAgICAgICAgICBpZiAoZ3JvdXBzICE9IG51bGwgJiYgZ3JvdXBzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2FuaW1zID0gbmV3IE1hcDxzdHJpbmcsIEJBQllMT04uQW5pbWF0aW9uR3JvdXA+KCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1fYW5pbWF0aW9uVGFyZ2V0cyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tX2RlZmF1bHRHcm91cCA9IGdyb3Vwc1swXTtcclxuICAgICAgICAgICAgICAgIGdyb3Vwcy5mb3JFYWNoKChncm91cDpCQUJZTE9OLkFuaW1hdGlvbkdyb3VwKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYWdyb3VwOmFueSA9IGdyb3VwO1xyXG4gICAgICAgICAgICAgICAgICAgIHRyeSB7IGdyb3VwLnN0b3AoKTsgfSBjYXRjaCB7fVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChncm91cC50YXJnZXRlZEFuaW1hdGlvbnMgIT0gbnVsbCAmJiBncm91cC50YXJnZXRlZEFuaW1hdGlvbnMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBncm91cC50YXJnZXRlZEFuaW1hdGlvbnMuZm9yRWFjaCgodGFyZ2V0ZWRBbmltYXRpb24pID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5vdGU6IEZvciBMb29wIEZhc3RlciBUaGFuIEluZGV4T2ZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBpbmRleE9mVGFyZ2V0Om51bWJlciA9IC0xO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLm1fYW5pbWF0aW9uVGFyZ2V0cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm1fYW5pbWF0aW9uVGFyZ2V0c1tpXS50YXJnZXQgPT09IHRhcmdldGVkQW5pbWF0aW9uLnRhcmdldCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRleE9mVGFyZ2V0ID0gaTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5kZXhPZlRhcmdldCA8IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1fYW5pbWF0aW9uVGFyZ2V0cy5wdXNoKHRhcmdldGVkQW5pbWF0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGFyZ2V0ZWRBbmltYXRpb24udGFyZ2V0Lm1ldGFkYXRhID09IG51bGwpIHRhcmdldGVkQW5pbWF0aW9uLnRhcmdldC5tZXRhZGF0YSA9IHt9O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGFyZ2V0ZWRBbmltYXRpb24udGFyZ2V0IGluc3RhbmNlb2YgQkFCWUxPTi5UcmFuc2Zvcm1Ob2RlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJBQllMT04uVXRpbGl0aWVzLlZhbGlkYXRlVHJhbnNmb3JtUXVhdGVybmlvbih0YXJnZXRlZEFuaW1hdGlvbi50YXJnZXQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBsYXllck1peGVyczpCQUJZTE9OLkFuaW1hdGlvbk1peGVyW10gPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHRoaXMuX2xheWVyY291bnQ7IGluZGV4KyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGxheWVyTWl4ZXI6QkFCWUxPTi5BbmltYXRpb25NaXhlciA9IG5ldyBCQUJZTE9OLkFuaW1hdGlvbk1peGVyKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXllck1peGVyLnBvc2l0aW9uQnVmZmVyID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyTWl4ZXIucm90YXRpb25CdWZmZXIgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXJNaXhlci5zY2FsaW5nQnVmZmVyID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyTWl4ZXIub3JpZ2luYWxNYXRyaXggPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXJNaXhlci5ibGVuZGluZ0ZhY3RvciA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXllck1peGVyLmJsZW5kaW5nU3BlZWQgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXJNaXhlci5yb290UG9zaXRpb24gPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXJNaXhlci5yb290Um90YXRpb24gPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXJNaXhlcnMucHVzaChsYXllck1peGVyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRlZEFuaW1hdGlvbi50YXJnZXQubWV0YWRhdGEubWl4ZXIgPSBsYXllck1peGVycztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRhcmdldGVkQW5pbWF0aW9uLnRhcmdldCBpbnN0YW5jZW9mIEJBQllMT04uTW9ycGhUYXJnZXQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbW9ycGhMYXllck1peGVyczpCQUJZTE9OLkFuaW1hdGlvbk1peGVyW10gPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHRoaXMuX2xheWVyY291bnQ7IGluZGV4KyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1vcnBoTGF5ZXJNaXhlcjpCQUJZTE9OLkFuaW1hdGlvbk1peGVyID0gbmV3IEJBQllMT04uQW5pbWF0aW9uTWl4ZXIoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vcnBoTGF5ZXJNaXhlci5pbmZsdWVuY2VCdWZmZXIgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9ycGhMYXllck1peGVycy5wdXNoKG1vcnBoTGF5ZXJNaXhlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKDxhbnk+dGFyZ2V0ZWRBbmltYXRpb24udGFyZ2V0KS5tZXRhZGF0YS5taXhlciA9IG1vcnBoTGF5ZXJNaXhlcnM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFncm91cCAhPSBudWxsICYmIGFncm91cC5tZXRhZGF0YSAhPSBudWxsICYmIGFncm91cC5tZXRhZGF0YS51bml0eSAhPSBudWxsICYmIGFncm91cC5tZXRhZGF0YS51bml0eS5jbGlwICE9IG51bGwgJiYgYWdyb3VwLm1ldGFkYXRhLnVuaXR5LmNsaXAgIT09IFwiXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fYW5pbXMuc2V0KGFncm91cC5tZXRhZGF0YS51bml0eS5jbGlwLCBncm91cCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qIEFuaW1hdGlvbiBDb250cm9sbGVyIFN0YXRlIE1hY2hpbmUgRnVuY3Rpb25zICovXHJcbiAgICAgICAgXHJcbiAgICAgICAgcHJpdmF0ZSBhd2FrZVN0YXRlTWFjaGluZSgpOnZvaWQge1xyXG4gICAgICAgICAgICBCQUJZTE9OLlV0aWxpdGllcy5WYWxpZGF0ZVRyYW5zZm9ybVF1YXRlcm5pb24odGhpcy50cmFuc2Zvcm0pO1xyXG4gICAgICAgICAgICB0aGlzLm1fYW5pbWF0aW9uVGFyZ2V0cyA9IFtdO1xyXG4gICAgICAgICAgICB0aGlzLm1fZGVmYXVsdEdyb3VwID0gbnVsbDtcclxuICAgICAgICAgICAgdGhpcy5tX2NoYXJhY3RlckNvbnRyb2xsZXIgPSB0aGlzLmdldENvbXBvbmVudChcIkJBQllMT04uQ2hhcmFjdGVyQ29udHJvbGxlclwiKTtcclxuICAgICAgICAgICAgLy8gLi5cclxuICAgICAgICAgICAgdGhpcy5fc291cmNlID0gKHRoaXMudHJhbnNmb3JtLm1ldGFkYXRhICE9IG51bGwgJiYgdGhpcy50cmFuc2Zvcm0ubWV0YWRhdGEudW5pdHkgIT0gbnVsbCAmJiB0aGlzLnRyYW5zZm9ybS5tZXRhZGF0YS51bml0eS5hbmltYXRvciAhPSBudWxsICYmIHRoaXMudHJhbnNmb3JtLm1ldGFkYXRhLnVuaXR5LmFuaW1hdG9yICE9PSBcIlwiKSA/IHRoaXMudHJhbnNmb3JtLm1ldGFkYXRhLnVuaXR5LmFuaW1hdG9yIDogbnVsbDtcclxuICAgICAgICAgICAgdGhpcy5fbWFjaGluZSA9IHRoaXMuZ2V0UHJvcGVydHkoXCJtYWNoaW5lXCIsIHRoaXMuX21hY2hpbmUpO1xyXG4gICAgICAgICAgICB0aGlzLl91cGRhdGVtb2RlID0gdGhpcy5nZXRQcm9wZXJ0eShcInVwZGF0ZW1vZGVcIiwgdGhpcy5fdXBkYXRlbW9kZSk7XHJcbiAgICAgICAgICAgIHRoaXMuX2hhc3Jvb3Rtb3Rpb24gPSB0aGlzLmdldFByb3BlcnR5KFwiaGFzcm9vdG1vdGlvblwiLCB0aGlzLl9oYXNyb290bW90aW9uKTtcclxuICAgICAgICAgICAgdGhpcy5fcnVudGltZWNvbnRyb2xsZXIgPSB0aGlzLmdldFByb3BlcnR5KFwicnVudGltZWNvbnRyb2xsZXJcIiwgdGhpcy5fcnVudGltZWNvbnRyb2xsZXIpO1xyXG4gICAgICAgICAgICB0aGlzLl9oYXN0cmFuc2Zvcm1oaWVyYXJjaHkgPSB0aGlzLmdldFByb3BlcnR5KFwiaGFzdHJhbnNmb3JtaGllcmFyY2h5XCIsIHRoaXMuX2hhc3RyYW5zZm9ybWhpZXJhcmNoeSk7XHJcbiAgICAgICAgICAgIHRoaXMuX2xlZnRmZWV0Ym90dG9taGVpZ2h0ID0gdGhpcy5nZXRQcm9wZXJ0eShcImxlZnRmZWV0Ym90dG9taGVpZ2h0XCIsIHRoaXMuX2xlZnRmZWV0Ym90dG9taGVpZ2h0KTtcclxuICAgICAgICAgICAgdGhpcy5fcmlnaHRmZWV0Ym90dG9taGVpZ2h0ID0gdGhpcy5nZXRQcm9wZXJ0eShcInJpZ2h0ZmVldGJvdHRvbWhlaWdodFwiLCB0aGlzLl9yaWdodGZlZXRib3R0b21oZWlnaHQpO1xyXG4gICAgICAgICAgICB0aGlzLmFwcGx5Um9vdE1vdGlvbiA9IHRoaXMuZ2V0UHJvcGVydHkoXCJhcHBseXJvb3Rtb3Rpb25cIiwgdGhpcy5hcHBseVJvb3RNb3Rpb24pO1xyXG4gICAgICAgICAgICAvLyAuLlxyXG4gICAgICAgICAgICBpZiAodGhpcy5fbWFjaGluZSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fbWFjaGluZS5zcGVlZCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zcGVlZFJhdGlvID0gdGhpcy5fbWFjaGluZS5zcGVlZDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9tYWNoaW5lLnBhcmFtZXRlcnMgIT0gbnVsbCAmJiB0aGlzLl9tYWNoaW5lLnBhcmFtZXRlcnMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBsaXN0OmFueVtdID0gdGhpcy5fbWFjaGluZS5wYXJhbWV0ZXJzO1xyXG4gICAgICAgICAgICAgICAgICAgIHBsaXN0LmZvckVhY2goKHBhcmFtZXRlcikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBuYW1lOnN0cmluZyA9IHBhcmFtZXRlci5uYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0eXBlOkJBQllMT04uQW5pbWF0b3JQYXJhbWV0ZXJUeXBlID0gcGFyYW1ldGVyLnR5cGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGN1cnZlOmJvb2xlYW4gPSBwYXJhbWV0ZXIuY3VydmU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRlZmF1bHRGbG9hdDpudW1iZXIgPSBwYXJhbWV0ZXIuZGVmYXVsdEZsb2F0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkZWZhdWx0Qm9vbDpib29sZWFuID0gcGFyYW1ldGVyLmRlZmF1bHRCb29sO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkZWZhdWx0SW50Om51bWJlciA9IHBhcmFtZXRlci5kZWZhdWx0SW50O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9wYXJhbWV0ZXJzLnNldChuYW1lLCB0eXBlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGUgPT09IEJBQllMT04uQW5pbWF0b3JQYXJhbWV0ZXJUeXBlLkJvb2wpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0Qm9vbChuYW1lLCBkZWZhdWx0Qm9vbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gQkFCWUxPTi5BbmltYXRvclBhcmFtZXRlclR5cGUuRmxvYXQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0RmxvYXQobmFtZSwgZGVmYXVsdEZsb2F0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSBCQUJZTE9OLkFuaW1hdG9yUGFyYW1ldGVyVHlwZS5JbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0SW50ZWdlcihuYW1lLCBkZWZhdWx0SW50KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSBCQUJZTE9OLkFuaW1hdG9yUGFyYW1ldGVyVHlwZS5UcmlnZ2VyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlc2V0VHJpZ2dlcihuYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gLi5cclxuICAgICAgICAgICAgICAgIC8vIFByb2Nlc3MgTWFjaGluZSBTdGF0ZSBMYXllcnNcclxuICAgICAgICAgICAgICAgIC8vIC4uXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fbWFjaGluZS5sYXllcnMgIT0gbnVsbCAmJiB0aGlzLl9tYWNoaW5lLmxheWVycy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbGF5ZXJjb3VudCA9IHRoaXMuX21hY2hpbmUubGF5ZXJzLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICAvLyBTb3J0IEluIEFzY2VuZGluZyBPcmRlclxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX21hY2hpbmUubGF5ZXJzLnNvcnQoKGxlZnQsIHJpZ2h0KTogbnVtYmVyID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxlZnQuaW5kZXggPCByaWdodC5pbmRleCkgcmV0dXJuIC0xO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobGVmdC5pbmRleCA+IHJpZ2h0LmluZGV4KSByZXR1cm4gMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDA7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gUGFyc2UgU3RhdGUgTWFjaGluZSBMYXllcnNcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9tYWNoaW5lLmxheWVycy5mb3JFYWNoKChsYXllcjpCQUJZTE9OLklBbmltYXRpb25MYXllcikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBTZXQgTGF5ZXIgQXZhdGFyIE1hc2sgVHJhbnNmb3JtIFBhdGhcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXIuYW5pbWF0aW9uTWFza01hcCA9IG5ldyBNYXA8c3RyaW5nLCBudW1iZXI+KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYXllci5hdmF0YXJNYXNrICE9IG51bGwgJiYgbGF5ZXIuYXZhdGFyTWFzay50cmFuc2Zvcm1QYXRocyAhPSBudWxsICYmIGxheWVyLmF2YXRhck1hc2sudHJhbnNmb3JtUGF0aHMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsYXllci5hdmF0YXJNYXNrLnRyYW5zZm9ybVBhdGhzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXIuYW5pbWF0aW9uTWFza01hcC5zZXQobGF5ZXIuYXZhdGFyTWFzay50cmFuc2Zvcm1QYXRoc1tpXSwgaSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy5fc291cmNlICE9IG51bGwgJiYgdGhpcy5fc291cmNlICE9PSBcIlwiICYmIHRoaXMuc2NlbmUuYW5pbWF0aW9uR3JvdXBzICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIGxldCBzb3VyY2VhbmltczpCQUJZTE9OLkFuaW1hdGlvbkdyb3VwW10gPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgLy8gLi5cclxuICAgICAgICAgICAgICAgIC8vIFRPRE8gLSBPcHRpbWl6ZSBTZWFyY2hpbmcgR2xvYmFsIEFuaW1hdGlvbiBHcm91cHMgLSA/Pz9cclxuICAgICAgICAgICAgICAgIC8vIC4uXHJcbiAgICAgICAgICAgICAgICB0aGlzLnNjZW5lLmFuaW1hdGlvbkdyb3Vwcy5mb3JFYWNoKChncm91cDpCQUJZTE9OLkFuaW1hdGlvbkdyb3VwKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYWdyb3VwOmFueSA9IGdyb3VwO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChhZ3JvdXAgIT0gbnVsbCAmJiBhZ3JvdXAubWV0YWRhdGEgIT0gbnVsbCAmJiBhZ3JvdXAubWV0YWRhdGEudW5pdHkgIT0gbnVsbCAmJiBhZ3JvdXAubWV0YWRhdGEudW5pdHkuc291cmNlICE9IG51bGwgJiYgYWdyb3VwLm1ldGFkYXRhLnVuaXR5LnNvdXJjZSAhPT0gXCJcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWdyb3VwLm1ldGFkYXRhLnVuaXR5LnNvdXJjZSA9PT0gdGhpcy5fc291cmNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc291cmNlYW5pbXMgPT0gbnVsbCkgc291cmNlYW5pbXMgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZWFuaW1zLnB1c2goZ3JvdXApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoc291cmNlYW5pbXMgIT0gbnVsbCAmJiBzb3VyY2Vhbmltcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRBbmltYXRpb25Hcm91cHMoc291cmNlYW5pbXMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIC4uXHJcbiAgICAgICAgICAgIC8vIE1hcCBTdGF0ZSBNYWNoaW5lIFRyYWNrcyAoQW5pbWF0aW9uIEdyb3VwcylcclxuICAgICAgICAgICAgLy8gLi5cclxuICAgICAgICAgICAgaWYgKHRoaXMuX21hY2hpbmUgIT0gbnVsbCAmJiB0aGlzLl9tYWNoaW5lLnN0YXRlcyAhPSBudWxsICYmIHRoaXMuX21hY2hpbmUuc3RhdGVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX21hY2hpbmUuc3RhdGVzLmZvckVhY2goKHN0YXRlOkJBQllMT04uTWFjaGluZVN0YXRlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXRlICE9IG51bGwgJiYgc3RhdGUubmFtZSAhPSBudWxsICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBTZXQgQ3VzdG9tIEFuaW1hdGlvbiBDdXJ2ZXNcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXRlLmNjdXJ2ZXMgIT0gbnVsbCAmJiBzdGF0ZS5jY3VydmVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLmNjdXJ2ZXMuZm9yRWFjaCgoY3VydmU6QkFCWUxPTi5JVW5pdHlDdXJ2ZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdXJ2ZS5hbmltYXRpb24gIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhbmltOkJBQllMT04uQW5pbWF0aW9uID0gQkFCWUxPTi5BbmltYXRpb24uUGFyc2UoY3VydmUuYW5pbWF0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFuaW0gIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXRlLnRjdXJ2ZXMgPT0gbnVsbCkgc3RhdGUudGN1cnZlcyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUudGN1cnZlcy5wdXNoKGFuaW0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2V0dXAgQW5pbWF0aW9uIFN0YXRlIE1hY2hpbmVzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0dXBUcmVlQnJhbmNoZXMoc3RhdGUuYmxlbmR0cmVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRNYWNoaW5lU3RhdGUoc3RhdGUubmFtZSwgc3RhdGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIC4uIFxyXG4gICAgICAgICAgICAvLyBjb25zb2xlLndhcm4oXCJBbmltYXRpb24gU3RhdGUgTWFoaW5lOiBcIiArIHRoaXMudHJhbnNmb3JtLm5hbWUpO1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyh0aGlzKTtcclxuICAgICAgICAgICAgLy8gU00uU2V0V2luZG93U3RhdGUodGhpcy50cmFuc2Zvcm0ubmFtZSwgdGhpcyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIHVwZGF0ZVN0YXRlTWFjaGluZShkZWx0YVRpbWU6bnVtYmVyID0gbnVsbCk6dm9pZCB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmRlbGF5VXBkYXRlVW50aWxSZWFkeSA9PT0gZmFsc2UgfHwgKHRoaXMuZGVsYXlVcGRhdGVVbnRpbFJlYWR5ID09PSB0cnVlICYmIHRoaXMuZ2V0UmVhZHlTdGF0ZSgpID09PSB0cnVlKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2V4ZWN1dGVkID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2V4ZWN1dGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fbWFjaGluZS5sYXllcnMgIT0gbnVsbCAmJiB0aGlzLl9tYWNoaW5lLmxheWVycy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX21hY2hpbmUubGF5ZXJzLmZvckVhY2goKGxheWVyOkJBQllMT04uSUFuaW1hdGlvbkxheWVyKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsYXlDdXJyZW50QW5pbWF0aW9uU3RhdGUobGF5ZXIsIGxheWVyLmVudHJ5LCAwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZW5hYmxlQW5pbWF0aW9uID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZnJhbWVEZWx0YVRpbWU6bnVtYmVyID0gZGVsdGFUaW1lIHx8IHRoaXMuZ2V0RGVsdGFTZWNvbmRzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51cGRhdGVBbmltYXRpb25TdGF0ZShmcmFtZURlbHRhVGltZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51cGRhdGVBbmltYXRpb25UYXJnZXRzKGZyYW1lRGVsdGFUaW1lKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5vbkFuaW1hdGlvblVwZGF0ZU9ic2VydmFibGUuaGFzT2JzZXJ2ZXJzKCkgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vbkFuaW1hdGlvblVwZGF0ZU9ic2VydmFibGUubm90aWZ5T2JzZXJ2ZXJzKHRoaXMudHJhbnNmb3JtKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcHJpdmF0ZSBkZXN0cm95U3RhdGVNYWNoaW5lKCk6dm9pZCB7XHJcbiAgICAgICAgICAgIHRoaXMuX2RhdGEgPSBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLl9hbmltcyA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMuX251bWJlcnMgPSBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLl9ib29sZWFucyA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMuX3RyaWdnZXJzID0gbnVsbDtcclxuICAgICAgICAgICAgdGhpcy5fcGFyYW1ldGVycyA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMuX2NoZWNrZXJzID0gbnVsbDtcclxuICAgICAgICAgICAgdGhpcy5fbWFjaGluZSA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMub25BbmltYXRpb25JS09ic2VydmFibGUuY2xlYXIoKTtcclxuICAgICAgICAgICAgdGhpcy5vbkFuaW1hdGlvbklLT2JzZXJ2YWJsZSA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMub25BbmltYXRpb25FbmRPYnNlcnZhYmxlLmNsZWFyKCk7XHJcbiAgICAgICAgICAgIHRoaXMub25BbmltYXRpb25FbmRPYnNlcnZhYmxlID0gbnVsbDtcclxuICAgICAgICAgICAgdGhpcy5vbkFuaW1hdGlvbkxvb3BPYnNlcnZhYmxlLmNsZWFyKCk7XHJcbiAgICAgICAgICAgIHRoaXMub25BbmltYXRpb25Mb29wT2JzZXJ2YWJsZSA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMub25BbmltYXRpb25FdmVudE9ic2VydmFibGUuY2xlYXIoKTtcclxuICAgICAgICAgICAgdGhpcy5vbkFuaW1hdGlvbkV2ZW50T2JzZXJ2YWJsZSA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMub25BbmltYXRpb25VcGRhdGVPYnNlcnZhYmxlLmNsZWFyKCk7XHJcbiAgICAgICAgICAgIHRoaXMub25BbmltYXRpb25VcGRhdGVPYnNlcnZhYmxlID0gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qIEFuaW1hdGlvbiBDb250cm9sbGVyIFByaXZhdGUgVXBkYXRlIEZ1bmN0aW9ucyAqL1xyXG5cclxuICAgICAgICBwcml2YXRlIHVwZGF0ZUFuaW1hdGlvblN0YXRlKGRlbHRhVGltZTpudW1iZXIpOnZvaWQge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fbWFjaGluZS5sYXllcnMgIT0gbnVsbCAmJiB0aGlzLl9tYWNoaW5lLmxheWVycy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9tYWNoaW5lLmxheWVycy5mb3JFYWNoKChsYXllcjpCQUJZTE9OLklBbmltYXRpb25MYXllcikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2hlY2tTdGF0ZU1hY2hpbmUobGF5ZXIsIGRlbHRhVGltZSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBwcml2YXRlIHVwZGF0ZUFuaW1hdGlvblRhcmdldHMoZGVsdGFUaW1lOm51bWJlcikgOnZvaWQge1xyXG4gICAgICAgICAgICB0aGlzLl9pa0ZyYW1lRWFuYmxlZCA9IGZhbHNlOyAgIC8vIFJlc2V0IEN1cnJlbnQgSW52ZXJzZSBLaW5lbWF0aWNzXHJcbiAgICAgICAgICAgIHRoaXMuX2FuaW1hdGlvbnBsYXlpbmcgPSBmYWxzZTsgLy8gUmVzZXQgQ3VycmVudCBBbmltYXRpb24gSXMgUGxheWluZ1xyXG4gICAgICAgICAgICAvL3RoaXMuX2JvZHlPcmllbnRhdGlvbkFuZ2xlWSA9IDA7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnRyYW5zZm9ybS5yb3RhdGlvblF1YXRlcm5pb24gIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgLy90aGlzLl9ib2R5T3JpZW50YXRpb25BbmdsZVkgPSB0aGlzLnRyYW5zZm9ybS5yb3RhdGlvblF1YXRlcm5pb24udG9FdWxlckFuZ2xlcygpLnk7IC8vIFRPRE8gLSBPUFRJTUlaRSBUSElTXHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy50cmFuc2Zvcm0ucm90YXRpb24gIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgLy90aGlzLl9ib2R5T3JpZW50YXRpb25BbmdsZVkgPSB0aGlzLnRyYW5zZm9ybS5yb3RhdGlvbi55O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9tYWNoaW5lLmxheWVycyAhPSBudWxsICYmIHRoaXMuX21hY2hpbmUubGF5ZXJzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX21hY2hpbmUubGF5ZXJzLmZvckVhY2goKGxheWVyOkJBQllMT04uSUFuaW1hdGlvbkxheWVyKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuICAgICAgICAgICAgICAgICAgICBpZiAobGF5ZXIuaW5kZXggPT09IDApIHRoaXMuX2ZyYW1ldGltZSA9IGxheWVyLmFuaW1hdGlvblRpbWU7ICAgLy8gTm90ZTogVXBkYXRlIE1hc3RlciBBbmltYXRpb24gRnJhbWUgVGltZVxyXG4gICAgICAgICAgICAgICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxheWVyLmFuaW1hdGlvblN0YXRlTWFjaGluZSAhPSBudWxsICYmIGxheWVyLmFuaW1hdGlvblN0YXRlTWFjaGluZS5ibGVuZHRyZWUgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobGF5ZXIuaUtQYXNzID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobGF5ZXIuYW5pbWF0aW9uU3RhdGVNYWNoaW5lLmlLT25GZWV0ID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5faWtGcmFtZUVhbmJsZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMub25BbmltYXRpb25JS09ic2VydmFibGUuaGFzT2JzZXJ2ZXJzKCkgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9uQW5pbWF0aW9uSUtPYnNlcnZhYmxlLm5vdGlmeU9ic2VydmVycyhsYXllci5pbmRleCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbGF5ZXJTdGF0ZTpCQUJZTE9OLk1hY2hpbmVTdGF0ZSA9IGxheWVyLmFuaW1hdGlvblN0YXRlTWFjaGluZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxheWVyU3RhdGUudHlwZSA9PT0gQkFCWUxPTi5Nb3Rpb25UeXBlLkNsaXAgJiYgbGF5ZXJTdGF0ZS5wbGF5ZWQgIT09IC0xKSBsYXllclN0YXRlLnBsYXllZCArPSBkZWx0YVRpbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYXllclN0YXRlLmJsZW5kdHJlZS5jaGlsZHJlbiAhPSBudWxsICYmIGxheWVyU3RhdGUuYmxlbmR0cmVlLmNoaWxkcmVuLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHByaW1hcnlCbGVuZFRyZWU6QkFCWUxPTi5JQmxlbmRUcmVlQ2hpbGQgPSBsYXllclN0YXRlLmJsZW5kdHJlZS5jaGlsZHJlblswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwcmltYXJ5QmxlbmRUcmVlICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobGF5ZXJTdGF0ZS5ibGVuZHRyZWUuYmxlbmRUeXBlID09IEJBQllMT04uQmxlbmRUcmVlVHlwZS5DbGlwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGFuaW1hdGlvblRyYWNrOkJBQllMT04uQW5pbWF0aW9uR3JvdXAgPSBwcmltYXJ5QmxlbmRUcmVlLnRyYWNrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYW5pbWF0aW9uVHJhY2sgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZnJhbWVSYXRpbzpudW1iZXIgPSAoQkFCWUxPTi5BbmltYXRpb25TdGF0ZS5USU1FIC8gYW5pbWF0aW9uVHJhY2sudG8pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBNb3Rpb24gQ2xpcCBBbmltYXRpb24gRGVsdGEgVGltZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXllci5hbmltYXRpb25UaW1lICs9IChkZWx0YVRpbWUgKiBmcmFtZVJhdGlvICogTWF0aC5hYnMobGF5ZXJTdGF0ZS5zcGVlZCkgKiBNYXRoLmFicyh0aGlzLnNwZWVkUmF0aW8pICogQkFCWUxPTi5BbmltYXRpb25TdGF0ZS5TUEVFRCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobGF5ZXIuYW5pbWF0aW9uVGltZSA+IEJBQllMT04uQW5pbWF0aW9uU3RhdGUuVElNRSkgbGF5ZXIuYW5pbWF0aW9uVGltZSA9IEJBQllMT04uQW5pbWF0aW9uU3RhdGUuVElNRTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTW90aW9uIENsaXAgQW5pbWF0aW9uIE5vcm1hbGl6ZWQgVGltZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXllci5hbmltYXRpb25Ob3JtYWwgPSAobGF5ZXIuYW5pbWF0aW9uVGltZSAvIEJBQllMT04uQW5pbWF0aW9uU3RhdGUuVElNRSk7ICAgICAgICAvLyBOb3RlOiBOb3JtYWxpemUgTGF5ZXIgRnJhbWUgVGltZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdmFsaWRhdGVUaW1lOm51bWJlciA9IChsYXllci5hbmltYXRpb25Ob3JtYWwgPiAwLjk5KSA/IDEgOiBsYXllci5hbmltYXRpb25Ob3JtYWw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBmb3JtYXR0ZWRUaW1lOm51bWJlciA9IE1hdGgucm91bmQodmFsaWRhdGVUaW1lICogMTAwKSAvIDEwMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYXllclN0YXRlLnNwZWVkIDwgMCkgbGF5ZXIuYW5pbWF0aW9uTm9ybWFsID0gKDEgLSBsYXllci5hbmltYXRpb25Ob3JtYWwpOyAgICAgIC8vIE5vdGU6IFJldmVyc2UgTm9ybWFsaXplZCBGcmFtZSBUaW1lXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhbmltYXRpb25GcmFtZVRpbWU6bnVtYmVyID0gKGFuaW1hdGlvblRyYWNrLnRvICogbGF5ZXIuYW5pbWF0aW9uTm9ybWFsKTsgICAgICAvLyBOb3RlOiBEZW5vcm1hbGl6ZSBBbmltYXRpb24gRnJhbWUgVGltZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBsZXQgYWRkaXRpdmVyZWZlcmVuY2Vwb3NlY2xpcDpudW1iZXIgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbGV0IGFkZGl0aXZlcmVmZXJlbmNlcG9zZXRpbWU6bnVtYmVyID0gMC4wO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbGV0IGhhc2FkZGl0aXZlcmVmZXJlbmNlcG9zZTpib29sZWFuID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBsZXQgc3RhcnR0aW1lOm51bWJlciA9IDAuMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGxldCBzdG9wdGltZTpudW1iZXIgPSAwLjA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBsZXQgbWlycm9yOmJvb2xlYW4gPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGxldmVsOm51bWJlciA9IDAuMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB4c3BlZWQ6bnVtYmVyID0gMC4wO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHpzcGVlZDpudW1iZXIgPSAwLjA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgbG9vcHRpbWU6Ym9vbGVhbiA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9sZXQgbG9vcGJsZW5kOmJvb2xlYW4gPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vbGV0IGN5Y2xlb2Zmc2V0Om51bWJlciA9IDAuMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vbGV0IGhlaWdodGZyb21mZWV0OmJvb2xlYW4gPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBvcmllbnRhdGlvbm9mZnNldHk6bnVtYmVyID0gMC4wO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9sZXQga2VlcG9yaWdpbmFsb3JpZW50YXRpb246Ym9vbGVhbiA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2xldCBrZWVwb3JpZ2luYWxwb3NpdGlvbnk6Ym9vbGVhbiA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2xldCBrZWVwb3JpZ2luYWxwb3NpdGlvbnh6OmJvb2xlYW4gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGxvb3BibGVuZG9yaWVudGF0aW9uOmJvb2xlYW4gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGxvb3BibGVuZHBvc2l0aW9ueTpib29sZWFuID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBsb29wYmxlbmRwb3NpdGlvbnh6OmJvb2xlYW4gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhZ3JvdXA6YW55ID0gYW5pbWF0aW9uVHJhY2s7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWdyb3VwLm1ldGFkYXRhICE9IG51bGwgJiYgYWdyb3VwLm1ldGFkYXRhLnVuaXR5ICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWdyb3VwLm1ldGFkYXRhLnVuaXR5LmF2ZXJhZ2VzcGVlZCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhzcGVlZCA9IChhZ3JvdXAubWV0YWRhdGEudW5pdHkuYXZlcmFnZXNwZWVkLnggIT0gbnVsbCkgPyBhZ3JvdXAubWV0YWRhdGEudW5pdHkuYXZlcmFnZXNwZWVkLnggOiAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB6c3BlZWQgPSAoYWdyb3VwLm1ldGFkYXRhLnVuaXR5LmF2ZXJhZ2VzcGVlZC56ICE9IG51bGwpID8gYWdyb3VwLm1ldGFkYXRhLnVuaXR5LmF2ZXJhZ2VzcGVlZC56IDogMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFncm91cC5tZXRhZGF0YS51bml0eS5zZXR0aW5ncyAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldmVsID0gKGFncm91cC5tZXRhZGF0YS51bml0eS5zZXR0aW5ncy5sZXZlbCAhPSBudWxsKSA/IGFncm91cC5tZXRhZGF0YS51bml0eS5zZXR0aW5ncy5sZXZlbCA6IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvb3B0aW1lID0gKGFncm91cC5tZXRhZGF0YS51bml0eS5zZXR0aW5ncy5sb29wdGltZSAhPSBudWxsKSA/IGFncm91cC5tZXRhZGF0YS51bml0eS5zZXR0aW5ncy5sb29wdGltZSA6IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBERVBSRUNJQVRFRDogbG9vcGJsZW5kID0gKGFncm91cC5tZXRhZGF0YS51bml0eS5zZXR0aW5ncy5sb29wYmxlbmQgIT0gbnVsbCkgPyBhZ3JvdXAubWV0YWRhdGEudW5pdHkuc2V0dGluZ3MubG9vcGJsZW5kIDogZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIERFUFJFQ0lBVEVEOiBjeWNsZW9mZnNldCA9IChhZ3JvdXAubWV0YWRhdGEudW5pdHkuc2V0dGluZ3MuY3ljbGVvZmZzZXQgIT0gbnVsbCkgPyBhZ3JvdXAubWV0YWRhdGEudW5pdHkuc2V0dGluZ3MuY3ljbGVvZmZzZXQgOiAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBERVBSRUNJQVRFRDogaGVpZ2h0ZnJvbWZlZXQgPSAoYWdyb3VwLm1ldGFkYXRhLnVuaXR5LnNldHRpbmdzLmhlaWdodGZyb21mZWV0ICE9IG51bGwpID8gYWdyb3VwLm1ldGFkYXRhLnVuaXR5LnNldHRpbmdzLmhlaWdodGZyb21mZWV0IDogZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yaWVudGF0aW9ub2Zmc2V0eSA9IChhZ3JvdXAubWV0YWRhdGEudW5pdHkuc2V0dGluZ3Mub3JpZW50YXRpb25vZmZzZXR5ICE9IG51bGwpID8gYWdyb3VwLm1ldGFkYXRhLnVuaXR5LnNldHRpbmdzLm9yaWVudGF0aW9ub2Zmc2V0eSA6IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIERFUFJFQ0lBVEVEOiBrZWVwb3JpZ2luYWxvcmllbnRhdGlvbiA9IChhZ3JvdXAubWV0YWRhdGEudW5pdHkuc2V0dGluZ3Mua2VlcG9yaWdpbmFsb3JpZW50YXRpb24gIT0gbnVsbCkgPyBhZ3JvdXAubWV0YWRhdGEudW5pdHkuc2V0dGluZ3Mua2VlcG9yaWdpbmFsb3JpZW50YXRpb24gOiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBERVBSRUNJQVRFRDoga2VlcG9yaWdpbmFscG9zaXRpb255ID0gKGFncm91cC5tZXRhZGF0YS51bml0eS5zZXR0aW5ncy5rZWVwb3JpZ2luYWxwb3NpdGlvbnkgIT0gbnVsbCkgPyBhZ3JvdXAubWV0YWRhdGEudW5pdHkuc2V0dGluZ3Mua2VlcG9yaWdpbmFscG9zaXRpb255IDogdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gREVQUkVDSUFURUQ6IGtlZXBvcmlnaW5hbHBvc2l0aW9ueHogPSAoYWdyb3VwLm1ldGFkYXRhLnVuaXR5LnNldHRpbmdzLmtlZXBvcmlnaW5hbHBvc2l0aW9ueHogIT0gbnVsbCkgPyBhZ3JvdXAubWV0YWRhdGEudW5pdHkuc2V0dGluZ3Mua2VlcG9yaWdpbmFscG9zaXRpb254eiA6IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvb3BibGVuZG9yaWVudGF0aW9uID0gKGFncm91cC5tZXRhZGF0YS51bml0eS5zZXR0aW5ncy5sb29wYmxlbmRvcmllbnRhdGlvbiAhPSBudWxsKSA/IGFncm91cC5tZXRhZGF0YS51bml0eS5zZXR0aW5ncy5sb29wYmxlbmRvcmllbnRhdGlvbiA6IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvb3BibGVuZHBvc2l0aW9ueSA9IChhZ3JvdXAubWV0YWRhdGEudW5pdHkuc2V0dGluZ3MubG9vcGJsZW5kcG9zaXRpb255ICE9IG51bGwpID8gYWdyb3VwLm1ldGFkYXRhLnVuaXR5LnNldHRpbmdzLmxvb3BibGVuZHBvc2l0aW9ueSA6IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvb3BibGVuZHBvc2l0aW9ueHogPSAoYWdyb3VwLm1ldGFkYXRhLnVuaXR5LnNldHRpbmdzLmxvb3BibGVuZHBvc2l0aW9ueHogIT0gbnVsbCkgPyBhZ3JvdXAubWV0YWRhdGEudW5pdHkuc2V0dGluZ3MubG9vcGJsZW5kcG9zaXRpb254eiA6IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBVbml0eSBJbnZlcnRzIFJvb3QgTW90aW9uIEFuaW1hdGlvbiBPZmZzZXRzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yaWVudGF0aW9ub2Zmc2V0eSA9IEJBQllMT04uVG9vbHMuVG9SYWRpYW5zKG9yaWVudGF0aW9ub2Zmc2V0eSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBERVBSRUNJQVRFRDogb3JpZW50YXRpb25vZmZzZXR5ICo9IC0xO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeHNwZWVkID0gTWF0aC5hYnMoeHNwZWVkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHpzcGVlZCA9IE1hdGguYWJzKHpzcGVlZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXZlbCAqPSAtMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxheWVyLmFuaW1hdGlvblRpbWUgPj0gQkFCWUxPTi5BbmltYXRpb25TdGF0ZS5USU1FKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXIuYW5pbWF0aW9uRmlyc3RSdW4gPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXllci5hbmltYXRpb25Mb29wRnJhbWUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsb29wdGltZSA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXllci5hbmltYXRpb25Mb29wQ291bnQrKztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMub25BbmltYXRpb25Mb29wT2JzZXJ2YWJsZS5oYXNPYnNlcnZlcnMoKSA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vbkFuaW1hdGlvbkxvb3BPYnNlcnZhYmxlLm5vdGlmeU9ic2VydmVycyhsYXllci5pbmRleCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobGF5ZXIuYW5pbWF0aW9uRW5kRnJhbWUgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXllci5hbmltYXRpb25FbmRGcmFtZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5vbkFuaW1hdGlvbkVuZE9ic2VydmFibGUuaGFzT2JzZXJ2ZXJzKCkgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9uQW5pbWF0aW9uRW5kT2JzZXJ2YWJsZS5ub3RpZnlPYnNlcnZlcnMobGF5ZXIuaW5kZXgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobGF5ZXIuYW5pbWF0aW9uRmlyc3RSdW4gPT09IHRydWUgfHwgbG9vcHRpbWUgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9hbmltYXRpb25wbGF5aW5nID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmltYXRpb25UcmFjay50YXJnZXRlZEFuaW1hdGlvbnMuZm9yRWFjaCgodGFyZ2V0ZWRBbmltOkJBQllMT04uVGFyZ2V0ZWRBbmltYXRpb24pID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRhcmdldGVkQW5pbS50YXJnZXQgaW5zdGFuY2VvZiBCQUJZTE9OLlRyYW5zZm9ybU5vZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNsaXBUYXJnZXQ6QkFCWUxPTi5UcmFuc2Zvcm1Ob2RlID0gdGFyZ2V0ZWRBbmltLnRhcmdldDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYXllci5pbmRleCA9PT0gMCB8fCBsYXllci5hdmF0YXJNYXNrID09IG51bGwgfHwgdGhpcy5maWx0ZXJUYXJnZXRBdmF0YXJNYXNrKGxheWVyLCBjbGlwVGFyZ2V0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRhcmdldFJvb3RCb25lOmJvb2xlYW4gPSAoY2xpcFRhcmdldC5tZXRhZGF0YSAhPSBudWxsICYmIGNsaXBUYXJnZXQubWV0YWRhdGEudW5pdHkgIT0gbnVsbCAmJiBjbGlwVGFyZ2V0Lm1ldGFkYXRhLnVuaXR5LnJvb3Rib25lICE9IG51bGwpID8gY2xpcFRhcmdldC5tZXRhZGF0YS51bml0eS5yb290Ym9uZSA6IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0YXJnZXRSb290Qm9uZSA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5faW5pdGlhbFJvb3RCb25lUG9zaXRpb24gPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGFyZ2V0Um9vdFBvczpudW1iZXJbXSA9IChjbGlwVGFyZ2V0Lm1ldGFkYXRhICE9IG51bGwgJiYgY2xpcFRhcmdldC5tZXRhZGF0YS51bml0eSAhPSBudWxsICYmIGNsaXBUYXJnZXQubWV0YWRhdGEudW5pdHkucm9vdHBvcyAhPSBudWxsKSA/IGNsaXBUYXJnZXQubWV0YWRhdGEudW5pdHkucm9vdHBvcyA6IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGFyZ2V0Um9vdFBvcyAhPSBudWxsKSB0aGlzLl9pbml0aWFsUm9vdEJvbmVQb3NpdGlvbiA9IEJBQllMT04uVmVjdG9yMy5Gcm9tQXJyYXkodGFyZ2V0Um9vdFBvcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5faW5pdGlhbFJvb3RCb25lUG9zaXRpb24gPT0gbnVsbCkgdGhpcy5faW5pdGlhbFJvb3RCb25lUG9zaXRpb24gPSBuZXcgQkFCWUxPTi5WZWN0b3IzKDAsMCwwKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUud2FybihcIkEgLSBJbml0IFJvb3QgQm9uZSBQb3NpdGlvbjogXCIgKyBjbGlwVGFyZ2V0Lm5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2codGhpcy5faW5pdGlhbFJvb3RCb25lUG9zaXRpb24pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9pbml0aWFsUm9vdEJvbmVSb3RhdGlvbiA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0YXJnZXRSb290Um90Om51bWJlcltdID0gKGNsaXBUYXJnZXQubWV0YWRhdGEgIT0gbnVsbCAmJiBjbGlwVGFyZ2V0Lm1ldGFkYXRhLnVuaXR5ICE9IG51bGwgJiYgY2xpcFRhcmdldC5tZXRhZGF0YS51bml0eS5yb290cm90ICE9IG51bGwpID8gY2xpcFRhcmdldC5tZXRhZGF0YS51bml0eS5yb290cm90IDogbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0YXJnZXRSb290Um90ICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBxdWF0OkJBQllMT04uUXVhdGVybmlvbiA9IEJBQllMT04uUXVhdGVybmlvbi5Gcm9tQXJyYXkodGFyZ2V0Um9vdFJvdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5faW5pdGlhbFJvb3RCb25lUm90YXRpb24gPSBxdWF0LnRvRXVsZXJBbmdsZXMoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9pbml0aWFsUm9vdEJvbmVSb3RhdGlvbiA9PSBudWxsKSB0aGlzLl9pbml0aWFsUm9vdEJvbmVSb3RhdGlvbiA9IG5ldyBCQUJZTE9OLlZlY3RvcjMoMCwwLDApOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS53YXJuKFwiQSAtIEluaXQgUm9vdCBCb25lIFJvdGF0aW9uOiBcIiArIGNsaXBUYXJnZXQubmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyh0aGlzLl9pbml0aWFsUm9vdEJvbmVSb3RhdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNsaXBUYXJnZXQubWV0YWRhdGEgIT0gbnVsbCAmJiBjbGlwVGFyZ2V0Lm1ldGFkYXRhLm1peGVyICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY2xpcFRhcmdldE1peGVyOkJBQllMT04uQW5pbWF0aW9uTWl4ZXIgPSBjbGlwVGFyZ2V0Lm1ldGFkYXRhLm1peGVyW2xheWVyLmluZGV4XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNsaXBUYXJnZXRNaXhlciAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGFyZ2V0ZWRBbmltLmFuaW1hdGlvbi50YXJnZXRQcm9wZXJ0eSA9PT0gXCJwb3NpdGlvblwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fdGFyZ2V0UG9zaXRpb24gPSBCQUJZTE9OLlV0aWxpdGllcy5TYW1wbGVBbmltYXRpb25WZWN0b3IzKHRhcmdldGVkQW5pbS5hbmltYXRpb24sIGFuaW1hdGlvbkZyYW1lVGltZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gLi5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBIYW5kbGUgUm9vdCBNb3Rpb24gKFBvc2l0aW9uKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIC4uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRhcmdldFJvb3RCb25lID09PSB0cnVlICYmIHRoaXMuX2luaXRpYWxSb290Qm9uZVBvc2l0aW9uICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcG9zaXRpb25XZWlnaHQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9wb3NpdGlvbkhvbGRlci5jb3B5RnJvbSh0aGlzLl9pbml0aWFsUm9vdEJvbmVQb3NpdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3Jvb3RCb25lV2VpZ2h0ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3Jvb3RCb25lSG9sZGVyLnNldCgwLDAsMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIC4uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFwcGx5IFJvb3QgTW90aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIC4uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmFwcGx5Um9vdE1vdGlvbiA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxvb3BibGVuZHBvc2l0aW9ueSA9PT0gdHJ1ZSAmJiBsb29wYmxlbmRwb3NpdGlvbnh6ID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcG9zaXRpb25XZWlnaHQgPSB0cnVlOyAgICAgICAgLy8gQmFrZSBYWVogSW50byBQb3NlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcG9zaXRpb25Ib2xkZXIuc2V0KHRoaXMuX3RhcmdldFBvc2l0aW9uLngsICh0aGlzLl90YXJnZXRQb3NpdGlvbi55ICsgbGV2ZWwpLCB0aGlzLl90YXJnZXRQb3NpdGlvbi56KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobG9vcGJsZW5kcG9zaXRpb255ID09PSBmYWxzZSAmJiBsb29wYmxlbmRwb3NpdGlvbnh6ID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3Jvb3RCb25lV2VpZ2h0ID0gdHJ1ZTsgICAgICAgIC8vIFVzZSBYWVogQXMgUm9vdCBNb3Rpb25cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9yb290Qm9uZUhvbGRlci5zZXQodGhpcy5fdGFyZ2V0UG9zaXRpb24ueCwgKHRoaXMuX3RhcmdldFBvc2l0aW9uLnkgKyBsZXZlbCksIHRoaXMuX3RhcmdldFBvc2l0aW9uLnopO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChsb29wYmxlbmRwb3NpdGlvbnkgPT09IHRydWUgJiYgbG9vcGJsZW5kcG9zaXRpb254eiA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9wb3NpdGlvbldlaWdodCA9IHRydWU7ICAgICAgICAvLyBCYWtlIFkgSW50byBQb3NlIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3Bvc2l0aW9uSG9sZGVyLnNldCh0aGlzLl9pbml0aWFsUm9vdEJvbmVQb3NpdGlvbi54LCAodGhpcy5fdGFyZ2V0UG9zaXRpb24ueSArIGxldmVsKSwgdGhpcy5faW5pdGlhbFJvb3RCb25lUG9zaXRpb24ueik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcm9vdEJvbmVXZWlnaHQgPSB0cnVlOyAgICAgICAgLy8gVXNlIFhaIEFzIFJvb3QgTW90aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcm9vdEJvbmVIb2xkZXIuc2V0KHRoaXMuX3RhcmdldFBvc2l0aW9uLngsIDAsIHRoaXMuX3RhcmdldFBvc2l0aW9uLnopOyAvLyBNQVlCRTogVXNlIHRoaXMudHJhbnNmb3JtLnBvc2l0aW9uLnkgLSA/Pz9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobG9vcGJsZW5kcG9zaXRpb254eiA9PT0gdHJ1ZSAmJiBsb29wYmxlbmRwb3NpdGlvbnkgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcG9zaXRpb25XZWlnaHQgPSB0cnVlOyAgICAgICAgLy8gQmFrZSBYWiBJbnRvIFBvc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9wb3NpdGlvbkhvbGRlci5zZXQodGhpcy5fdGFyZ2V0UG9zaXRpb24ueCwgdGhpcy5faW5pdGlhbFJvb3RCb25lUG9zaXRpb24ueSwgdGhpcy5fdGFyZ2V0UG9zaXRpb24ueik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcm9vdEJvbmVXZWlnaHQgPSB0cnVlOyAgICAgICAgLy8gVXNlIFkgQXMgUm9vdCBNb3Rpb25cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9yb290Qm9uZUhvbGRlci5zZXQoMCwgKHRoaXMuX3RhcmdldFBvc2l0aW9uLnkgKyBsZXZlbCksIDApOyAvLyBNQVlCRTogVXNlIHRoaXMudHJhbnNmb3JtLnBvc2l0aW9uLnh6IC0gPz8/XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9wb3NpdGlvbldlaWdodCA9IHRydWU7ICAgICAgICAgICAgLy8gQmFrZSBYWVogT3JpZ2luYWwgTW90aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9wb3NpdGlvbkhvbGRlci5zZXQodGhpcy5fdGFyZ2V0UG9zaXRpb24ueCwgKHRoaXMuX3RhcmdldFBvc2l0aW9uLnkgKyBsZXZlbCksIHRoaXMuX3RhcmdldFBvc2l0aW9uLnopO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEJha2UgUG9zaXRpb24gSG9sZGVyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9wb3NpdGlvbldlaWdodCA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNsaXBUYXJnZXRNaXhlci5wb3NpdGlvbkJ1ZmZlciA9PSBudWxsKSBjbGlwVGFyZ2V0TWl4ZXIucG9zaXRpb25CdWZmZXIgPSBuZXcgQkFCWUxPTi5WZWN0b3IzKDAsMCwwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJBQllMT04uVXRpbGl0aWVzLkJsZW5kVmVjdG9yM1ZhbHVlKGNsaXBUYXJnZXRNaXhlci5wb3NpdGlvbkJ1ZmZlciwgdGhpcy5fcG9zaXRpb25Ib2xkZXIsIDEuMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQmFrZSBSb290IEJvbmUgSG9sZGVyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9yb290Qm9uZVdlaWdodCA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNsaXBUYXJnZXRNaXhlci5yb290UG9zaXRpb24gPT0gbnVsbCkgY2xpcFRhcmdldE1peGVyLnJvb3RQb3NpdGlvbiA9IG5ldyBCQUJZTE9OLlZlY3RvcjMoMCwwLDApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQkFCWUxPTi5VdGlsaXRpZXMuQmxlbmRWZWN0b3IzVmFsdWUoY2xpcFRhcmdldE1peGVyLnJvb3RQb3NpdGlvbiwgdGhpcy5fcm9vdEJvbmVIb2xkZXIsIDEuMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBCYWtlIE5vcm1hbCBQb3NlIFBvc2l0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjbGlwVGFyZ2V0TWl4ZXIucG9zaXRpb25CdWZmZXIgPT0gbnVsbCkgY2xpcFRhcmdldE1peGVyLnBvc2l0aW9uQnVmZmVyID0gbmV3IEJBQllMT04uVmVjdG9yMygwLDAsMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJBQllMT04uVXRpbGl0aWVzLkJsZW5kVmVjdG9yM1ZhbHVlKGNsaXBUYXJnZXRNaXhlci5wb3NpdGlvbkJ1ZmZlciwgdGhpcy5fdGFyZ2V0UG9zaXRpb24sIDEuMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0YXJnZXRlZEFuaW0uYW5pbWF0aW9uLnRhcmdldFByb3BlcnR5ID09PSBcInJvdGF0aW9uUXVhdGVybmlvblwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fdGFyZ2V0Um90YXRpb24gPSBCQUJZTE9OLlV0aWxpdGllcy5TYW1wbGVBbmltYXRpb25RdWF0ZXJuaW9uKHRhcmdldGVkQW5pbS5hbmltYXRpb24sIGFuaW1hdGlvbkZyYW1lVGltZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gLi5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBIYW5kbGUgUm9vdCBNb3Rpb24gKFJvdGF0aW9uKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIC4uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRhcmdldFJvb3RCb25lID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3JvdGF0aW9uV2VpZ2h0ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3JvdGF0aW9uSG9sZGVyLnNldCgwLDAsMCwwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcm9vdFF1YXRXZWlnaHQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcm9vdFF1YXRIb2xkZXIuc2V0KDAsMCwwLDApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUT0RPIC0gT1BUSU1JWkUgVE8gRVVMRVIgQU5HTEVTXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGV1bGVyQW5nbGU6QkFCWUxPTi5WZWN0b3IzID0gdGhpcy5fdGFyZ2V0Um90YXRpb24udG9FdWxlckFuZ2xlcygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBvcmllbnRhdGlvbkFuZ2xlWTpudW1iZXIgPSBldWxlckFuZ2xlLnk7IC8vKGtlZXBvcmlnaW5hbG9yaWVudGF0aW9uID09PSB0cnVlKSA/IGV1bGVyQW5nbGUueSA6IHRoaXMuX2JvZHlPcmllbnRhdGlvbkFuZ2xlWTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gLi5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQXBwbHkgUm9vdCBNb3Rpb25cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gLi5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuYXBwbHlSb290TW90aW9uID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobG9vcGJsZW5kb3JpZW50YXRpb24gPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9yb3RhdGlvbldlaWdodCA9IHRydWU7ICAgICAgICAvLyBCYWtlIFhZWiBJbnRvIFBvc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBCQUJZTE9OLlF1YXRlcm5pb24uRnJvbUV1bGVyQW5nbGVzVG9SZWYoZXVsZXJBbmdsZS54LCAob3JpZW50YXRpb25BbmdsZVkgKyBvcmllbnRhdGlvbm9mZnNldHkpLCBldWxlckFuZ2xlLnosIHRoaXMuX3JvdGF0aW9uSG9sZGVyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcm90YXRpb25XZWlnaHQgPSB0cnVlOyAgICAgICAgLy8gQmFrZSBYWiBJbnRvIFBvc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBCQUJZTE9OLlF1YXRlcm5pb24uRnJvbUV1bGVyQW5nbGVzVG9SZWYoZXVsZXJBbmdsZS54LCB0aGlzLl9pbml0aWFsUm9vdEJvbmVSb3RhdGlvbi55LCBldWxlckFuZ2xlLnosIHRoaXMuX3JvdGF0aW9uSG9sZGVyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9yb290UXVhdFdlaWdodCA9IHRydWU7ICAgICAgICAvLyBVc2UgWSBBcyBSb290IE1vdGlvblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJBQllMT04uUXVhdGVybmlvbi5Gcm9tRXVsZXJBbmdsZXNUb1JlZigwLCAob3JpZW50YXRpb25BbmdsZVkgKyBvcmllbnRhdGlvbm9mZnNldHkpLCAwLCB0aGlzLl9yb290UXVhdEhvbGRlcik7IC8vIE1BWUJFOiBVc2UgdGhpcy50cmFuc2Zvcm0ucm90YXRpb24ueHogLSA/Pz9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3JvdGF0aW9uV2VpZ2h0ID0gdHJ1ZTsgICAgICAgICAgICAvLyBCYWtlIFhZWiBJbnRvIFBvc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJBQllMT04uUXVhdGVybmlvbi5Gcm9tRXVsZXJBbmdsZXNUb1JlZihldWxlckFuZ2xlLngsIChvcmllbnRhdGlvbkFuZ2xlWSArIG9yaWVudGF0aW9ub2Zmc2V0eSksIGV1bGVyQW5nbGUueiwgdGhpcy5fcm90YXRpb25Ib2xkZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEJha2UgUm90YXRpb24gSG9sZGVyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9yb3RhdGlvbldlaWdodCA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNsaXBUYXJnZXRNaXhlci5yb3RhdGlvbkJ1ZmZlciA9PSBudWxsKSBjbGlwVGFyZ2V0TWl4ZXIucm90YXRpb25CdWZmZXIgPSBuZXcgQkFCWUxPTi5RdWF0ZXJuaW9uKDAsMCwwLDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQkFCWUxPTi5VdGlsaXRpZXMuQmxlbmRRdWF0ZXJuaW9uVmFsdWUoY2xpcFRhcmdldE1peGVyLnJvdGF0aW9uQnVmZmVyLCB0aGlzLl9yb3RhdGlvbkhvbGRlciwgMS4wKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBCYWtlIFJvb3QgQm9uZSBSb3RhdGlvblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fcm9vdFF1YXRXZWlnaHQgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjbGlwVGFyZ2V0TWl4ZXIucm9vdFJvdGF0aW9uID09IG51bGwpIGNsaXBUYXJnZXRNaXhlci5yb290Um90YXRpb24gPSBuZXcgQkFCWUxPTi5RdWF0ZXJuaW9uKDAsMCwwLDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQkFCWUxPTi5VdGlsaXRpZXMuQmxlbmRRdWF0ZXJuaW9uVmFsdWUoY2xpcFRhcmdldE1peGVyLnJvb3RSb3RhdGlvbiwgdGhpcy5fcm9vdFF1YXRIb2xkZXIsIDEuMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBCYWtlIE5vcm1hbCBQb3NlIFJvdGF0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjbGlwVGFyZ2V0TWl4ZXIucm90YXRpb25CdWZmZXIgPT0gbnVsbCkgY2xpcFRhcmdldE1peGVyLnJvdGF0aW9uQnVmZmVyID0gbmV3IEJBQllMT04uUXVhdGVybmlvbigwLDAsMCwxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQkFCWUxPTi5VdGlsaXRpZXMuQmxlbmRRdWF0ZXJuaW9uVmFsdWUoY2xpcFRhcmdldE1peGVyLnJvdGF0aW9uQnVmZmVyLCB0aGlzLl90YXJnZXRSb3RhdGlvbiwgMS4wKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRhcmdldGVkQW5pbS5hbmltYXRpb24udGFyZ2V0UHJvcGVydHkgPT09IFwic2NhbGluZ1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fdGFyZ2V0U2NhbGluZyA9IEJBQllMT04uVXRpbGl0aWVzLlNhbXBsZUFuaW1hdGlvblZlY3RvcjModGFyZ2V0ZWRBbmltLmFuaW1hdGlvbiwgYW5pbWF0aW9uRnJhbWVUaW1lKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2xpcFRhcmdldE1peGVyLnNjYWxpbmdCdWZmZXIgPT0gbnVsbCkgY2xpcFRhcmdldE1peGVyLnNjYWxpbmdCdWZmZXIgPSBuZXcgQkFCWUxPTi5WZWN0b3IzKDEsMSwxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBCQUJZTE9OLlV0aWxpdGllcy5CbGVuZFZlY3RvcjNWYWx1ZShjbGlwVGFyZ2V0TWl4ZXIuc2NhbGluZ0J1ZmZlciwgdGhpcy5fdGFyZ2V0U2NhbGluZywgMS4wKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0YXJnZXRlZEFuaW0udGFyZ2V0IGluc3RhbmNlb2YgQkFCWUxPTi5Nb3JwaFRhcmdldCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbW9ycGhUYXJnZXQ6YW55ID0gdGFyZ2V0ZWRBbmltLnRhcmdldDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtb3JwaFRhcmdldC5tZXRhZGF0YSAhPSBudWxsICYmIG1vcnBoVGFyZ2V0Lm1ldGFkYXRhLm1peGVyICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtb3JwaFRhcmdldE1peGVyOkJBQllMT04uQW5pbWF0aW9uTWl4ZXIgPSBtb3JwaFRhcmdldC5tZXRhZGF0YS5taXhlcltsYXllci5pbmRleF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRhcmdldGVkQW5pbS5hbmltYXRpb24udGFyZ2V0UHJvcGVydHkgPT09IFwiaW5mbHVlbmNlXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZmxvYXRWYWx1ZSA9IEJBQllMT04uVXRpbGl0aWVzLlNhbXBsZUFuaW1hdGlvbkZsb2F0KHRhcmdldGVkQW5pbS5hbmltYXRpb24sIGFuaW1hdGlvbkZyYW1lVGltZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtb3JwaFRhcmdldE1peGVyLmluZmx1ZW5jZUJ1ZmZlciA9PSBudWxsKSBtb3JwaFRhcmdldE1peGVyLmluZmx1ZW5jZUJ1ZmZlciA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vcnBoVGFyZ2V0TWl4ZXIuaW5mbHVlbmNlQnVmZmVyID0gQkFCWUxPTi5VdGlsaXRpZXMuQmxlbmRGbG9hdFZhbHVlKG1vcnBoVGFyZ2V0TWl4ZXIuaW5mbHVlbmNlQnVmZmVyLCBmbG9hdFZhbHVlLCAxLjApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBQYXJzZSBMYXllciBBbmltYXRpb24gQ3VydmVzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYXllci5hbmltYXRpb25TdGF0ZU1hY2hpbmUudGN1cnZlcyAhPSBudWxsICYmIGxheWVyLmFuaW1hdGlvblN0YXRlTWFjaGluZS50Y3VydmVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXllci5hbmltYXRpb25TdGF0ZU1hY2hpbmUudGN1cnZlcy5mb3JFYWNoKChhbmltYXRpb246QkFCWUxPTi5BbmltYXRpb24pID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFuaW1hdGlvbi50YXJnZXRQcm9wZXJ0eSAhPSBudWxsICYmIGFuaW1hdGlvbi50YXJnZXRQcm9wZXJ0eSAhPT0gXCJcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2FtcGxlOm51bWJlciA9IEJBQllMT04uVXRpbGl0aWVzLlNhbXBsZUFuaW1hdGlvbkZsb2F0KGFuaW1hdGlvbiwgbGF5ZXIuYW5pbWF0aW9uTm9ybWFsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0RmxvYXQoYW5pbWF0aW9uLnRhcmdldFByb3BlcnR5LCBzYW1wbGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFZhbGlkYXRlIExheWVyIEFuaW1hdGlvbiBFdmVudHMgKFRPRE8gLSBQYXNzIExheWVyIEluZGV4IFByb3BlcnRpZXMgVG8gT2JzZXJ2ZXJzKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobGF5ZXIuYW5pbWF0aW9uU3RhdGVNYWNoaW5lLmV2ZW50cyAhPSBudWxsICYmIGxheWVyLmFuaW1hdGlvblN0YXRlTWFjaGluZS5ldmVudHMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyLmFuaW1hdGlvblN0YXRlTWFjaGluZS5ldmVudHMuZm9yRWFjaCgoYW5pbWF0b3JFdmVudDpCQUJZTE9OLklBbmltYXRvckV2ZW50KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbmltYXRvckV2ZW50LnRpbWUgPT09IGZvcm1hdHRlZFRpbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGFuaW1FdmVudEtleTpzdHJpbmcgPSBhbmltYXRvckV2ZW50LmZ1bmN0aW9uICsgXCJfXCIgKyBhbmltYXRvckV2ZW50LnRpbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobGF5ZXIuYW5pbWF0aW9uTG9vcEV2ZW50cyA9PSBudWxsKSBsYXllci5hbmltYXRpb25Mb29wRXZlbnRzID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWxheWVyLmFuaW1hdGlvbkxvb3BFdmVudHNbYW5pbUV2ZW50S2V5XSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyLmFuaW1hdGlvbkxvb3BFdmVudHNbYW5pbUV2ZW50S2V5XSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCJCbGVuZCBUcmVlIEFuaW1hdGlvbiBFdmVudDogXCIgKyBhbmltYXRvckV2ZW50LnRpbWUgKyBcIiA+PiBcIiArIGFuaW1hdG9yRXZlbnQuY2xpcCArIFwiID4+IFwiICsgYW5pbWF0b3JFdmVudC5mdW5jdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMub25BbmltYXRpb25FdmVudE9ic2VydmFibGUuaGFzT2JzZXJ2ZXJzKCkgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vbkFuaW1hdGlvbkV2ZW50T2JzZXJ2YWJsZS5ub3RpZnlPYnNlcnZlcnMoYW5pbWF0b3JFdmVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFN0ZXAgTW90aW9uIENsaXAgQW5pbWF0aW9uIFRpbWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxheWVyLmFuaW1hdGlvbkxvb3BGcmFtZSA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyLmFuaW1hdGlvblRpbWUgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyLmFuaW1hdGlvbk5vcm1hbCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXIuYW5pbWF0aW9uTG9vcEZyYW1lID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXIuYW5pbWF0aW9uTG9vcEV2ZW50cyA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLndhcm4oXCI+Pj4gTm8gTW90aW9uIENsaXAgQW5pbWF0aW9uIFRyYWNrIEZvdW5kIEZvcjogXCIgKyB0aGlzLnRyYW5zZm9ybS5uYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2FuaW1hdGlvbnBsYXlpbmcgPSB0cnVlOyAvLyBOb3RlOiBCbGVuZCBUcmVlIEFyZSBBbHdheXMgUGxheWluZ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGlzLl9ibGVuZE1lc3NhZ2UgPSBcIlwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9ibGVuZFdlaWdodHMucHJpbWFyeSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2JsZW5kV2VpZ2h0cy5zZWNvbmRhcnkgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzY2FsZWRXZWlnaHRMaXN0OkJBQllMT04uSUJsZW5kVHJlZUNoaWxkW10gPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJpbWFyeUJsZW5kVHJlZTpCQUJZTE9OLklCbGVuZFRyZWUgPSBsYXllclN0YXRlLmJsZW5kdHJlZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wYXJzZVRyZWVCcmFuY2hlcyhsYXllciwgcHJpbWFyeUJsZW5kVHJlZSwgMS4wLCBzY2FsZWRXZWlnaHRMaXN0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZnJhbWVSYXRpbzpudW1iZXIgPSB0aGlzLmNvbXB1dGVXZWlnaHRlZEZyYW1lUmF0aW8oc2NhbGVkV2VpZ2h0TGlzdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBCbGVuZCBUcmVlIEFuaW1hdGlvbiBEZWx0YSBUaW1lXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXllci5hbmltYXRpb25UaW1lICs9IChkZWx0YVRpbWUgKiBmcmFtZVJhdGlvICogTWF0aC5hYnMobGF5ZXJTdGF0ZS5zcGVlZCkgKiBNYXRoLmFicyh0aGlzLnNwZWVkUmF0aW8pICogQkFCWUxPTi5BbmltYXRpb25TdGF0ZS5TUEVFRCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYXllci5hbmltYXRpb25UaW1lID4gQkFCWUxPTi5BbmltYXRpb25TdGF0ZS5USU1FKSBsYXllci5hbmltYXRpb25UaW1lID0gQkFCWUxPTi5BbmltYXRpb25TdGF0ZS5USU1FO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQmxlbmQgVHJlZSBBbmltYXRpb24gTm9ybWFsaXplZCBUaW1lXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXllci5hbmltYXRpb25Ob3JtYWwgPSAobGF5ZXIuYW5pbWF0aW9uVGltZSAvIEJBQllMT04uQW5pbWF0aW9uU3RhdGUuVElNRSk7ICAgICAgICAvLyBOb3RlOiBOb3JtYWxpemUgTGF5ZXIgRnJhbWUgVGltZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB2YWxpZGF0ZVRpbWU6bnVtYmVyID0gKGxheWVyLmFuaW1hdGlvbk5vcm1hbCA+IDAuOTkpID8gMSA6IGxheWVyLmFuaW1hdGlvbk5vcm1hbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZm9ybWF0dGVkVGltZTpudW1iZXIgPSBNYXRoLnJvdW5kKHZhbGlkYXRlVGltZSAqIDEwMCkgLyAxMDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYXllclN0YXRlLnNwZWVkIDwgMCkgbGF5ZXIuYW5pbWF0aW9uTm9ybWFsID0gKDEgLSBsYXllci5hbmltYXRpb25Ob3JtYWwpOyAgICAgIC8vIE5vdGU6IFJldmVyc2UgTm9ybWFsaXplZCBGcmFtZSBUaW1lXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGJsZW5kaW5nTm9ybWFsVGltZTpudW1iZXIgPSBsYXllci5hbmltYXRpb25Ob3JtYWw7ICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5vdGU6IERlbm9ybWFsaXplIEFuaW1hdGlvbiBGcmFtZSBUaW1lXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobGF5ZXIuYW5pbWF0aW9uVGltZSA+PSBCQUJZTE9OLkFuaW1hdGlvblN0YXRlLlRJTUUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyLmFuaW1hdGlvbkZpcnN0UnVuID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXllci5hbmltYXRpb25Mb29wRnJhbWUgPSB0cnVlOyAvLyBOb3RlOiBObyBMb29wIE9yIEVuZCBFdmVudHMgRm9yIEJsZW5kIFRyZWVzIC0gPz8/XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXllci5hbmltYXRpb25Mb29wQ291bnQrKztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWFzdGVyQW5pbWF0aW9uVHJhY2s6QkFCWUxPTi5BbmltYXRpb25Hcm91cCA9IChzY2FsZWRXZWlnaHRMaXN0ICE9IG51bGwgJiYgc2NhbGVkV2VpZ2h0TGlzdC5sZW5ndGggPiAwICYmIHNjYWxlZFdlaWdodExpc3RbMF0udHJhY2sgIT0gbnVsbCkgPyBzY2FsZWRXZWlnaHRMaXN0WzBdLnRyYWNrIDogbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1hc3RlckFuaW1hdGlvblRyYWNrICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRhcmdldENvdW50Om51bWJlciA9IG1hc3RlckFuaW1hdGlvblRyYWNrLnRhcmdldGVkQW5pbWF0aW9ucy5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCB0YXJnZXRJbmRleDpudW1iZXIgPSAwOyB0YXJnZXRJbmRleCA8IHRhcmdldENvdW50OyB0YXJnZXRJbmRleCsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWFzdGVyQW5pbWltYXRpb246QkFCWUxPTi5UYXJnZXRlZEFuaW1hdGlvbiA9IG1hc3RlckFuaW1hdGlvblRyYWNrLnRhcmdldGVkQW5pbWF0aW9uc1t0YXJnZXRJbmRleF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1hc3RlckFuaW1pbWF0aW9uLnRhcmdldCBpbnN0YW5jZW9mIEJBQllMT04uVHJhbnNmb3JtTm9kZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBibGVuZFRhcmdldDpCQUJZTE9OLlRyYW5zZm9ybU5vZGUgPSBtYXN0ZXJBbmltaW1hdGlvbi50YXJnZXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYXllci5pbmRleCA9PT0gMCB8fCBsYXllci5hdmF0YXJNYXNrID09IG51bGwgfHwgdGhpcy5maWx0ZXJUYXJnZXRBdmF0YXJNYXNrKGxheWVyLCBibGVuZFRhcmdldCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRhcmdldFJvb3RCb25lOmJvb2xlYW4gPSAoYmxlbmRUYXJnZXQubWV0YWRhdGEgIT0gbnVsbCAmJiBibGVuZFRhcmdldC5tZXRhZGF0YS51bml0eSAhPSBudWxsICYmIGJsZW5kVGFyZ2V0Lm1ldGFkYXRhLnVuaXR5LnJvb3Rib25lICE9IG51bGwpID8gYmxlbmRUYXJnZXQubWV0YWRhdGEudW5pdHkucm9vdGJvbmUgOiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0YXJnZXRSb290Qm9uZSA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9pbml0aWFsUm9vdEJvbmVQb3NpdGlvbiA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRhcmdldFJvb3RQb3M6bnVtYmVyW10gPSAoYmxlbmRUYXJnZXQubWV0YWRhdGEgIT0gbnVsbCAmJiBibGVuZFRhcmdldC5tZXRhZGF0YS51bml0eSAhPSBudWxsICYmIGJsZW5kVGFyZ2V0Lm1ldGFkYXRhLnVuaXR5LnJvb3Rwb3MgIT0gbnVsbCkgPyBibGVuZFRhcmdldC5tZXRhZGF0YS51bml0eS5yb290cG9zIDogbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRhcmdldFJvb3RQb3MgIT0gbnVsbCkgdGhpcy5faW5pdGlhbFJvb3RCb25lUG9zaXRpb24gPSBCQUJZTE9OLlZlY3RvcjMuRnJvbUFycmF5KHRhcmdldFJvb3RQb3MpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5faW5pdGlhbFJvb3RCb25lUG9zaXRpb24gPT0gbnVsbCkgdGhpcy5faW5pdGlhbFJvb3RCb25lUG9zaXRpb24gPSBuZXcgQkFCWUxPTi5WZWN0b3IzKDAsMCwwKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS53YXJuKFwiQiAtIEluaXQgUm9vdCBCb25lIFBvc2l0aW9uOiBcIiArIGJsZW5kVGFyZ2V0Lm5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyh0aGlzLl9pbml0aWFsUm9vdEJvbmVQb3NpdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9pbml0aWFsUm9vdEJvbmVSb3RhdGlvbiA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRhcmdldFJvb3RSb3Q6bnVtYmVyW10gPSAoYmxlbmRUYXJnZXQubWV0YWRhdGEgIT0gbnVsbCAmJiBibGVuZFRhcmdldC5tZXRhZGF0YS51bml0eSAhPSBudWxsICYmIGJsZW5kVGFyZ2V0Lm1ldGFkYXRhLnVuaXR5LnJvb3Ryb3QgIT0gbnVsbCkgPyBibGVuZFRhcmdldC5tZXRhZGF0YS51bml0eS5yb290cm90IDogbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRhcmdldFJvb3RSb3QgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcXVhdDpCQUJZTE9OLlF1YXRlcm5pb24gPSBCQUJZTE9OLlF1YXRlcm5pb24uRnJvbUFycmF5KHRhcmdldFJvb3RSb3QpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5faW5pdGlhbFJvb3RCb25lUm90YXRpb24gPSBxdWF0LnRvRXVsZXJBbmdsZXMoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5faW5pdGlhbFJvb3RCb25lUm90YXRpb24gPT0gbnVsbCkgdGhpcy5faW5pdGlhbFJvb3RCb25lUm90YXRpb24gPSBuZXcgQkFCWUxPTi5WZWN0b3IzKDAsMCwwKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS53YXJuKFwiQiAtIEluaXQgUm9vdCBCb25lIFJvdGF0aW9uOiBcIiArIGJsZW5kVGFyZ2V0Lm5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyh0aGlzLl9pbml0aWFsUm9vdEJvbmVSb3RhdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJsZW5kVGFyZ2V0Lm1ldGFkYXRhICE9IG51bGwgJiYgYmxlbmRUYXJnZXQubWV0YWRhdGEubWl4ZXIgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2luaXRpYWx0YXJnZXRibGVuZGluZyA9IHRydWU7IC8vIE5vdGU6IFJlc2V0IEZpcnN0IFRhcmdldCBCbGVuZGluZyBCdWZmZXJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBibGVuZFRhcmdldE1peGVyOkJBQllMT04uQW5pbWF0aW9uTWl4ZXIgPSBibGVuZFRhcmdldC5tZXRhZGF0YS5taXhlcltsYXllci5pbmRleF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy51cGRhdGVCbGVuZGFibGVUYXJnZXRzKGRlbHRhVGltZSwgbGF5ZXIsIHByaW1hcnlCbGVuZFRyZWUsIG1hc3RlckFuaW1pbWF0aW9uLCB0YXJnZXRJbmRleCwgYmxlbmRUYXJnZXRNaXhlciwgYmxlbmRpbmdOb3JtYWxUaW1lLCB0YXJnZXRSb290Qm9uZSwgYmxlbmRUYXJnZXQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS53YXJuKFwiPj4+IE5vIEJsZW5kIFRyZWUgTWFzdGVyIEFuaW1hdGlvbiBUcmFjayBGb3VuZCBGb3I6IFwiICsgdGhpcy50cmFuc2Zvcm0ubmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFBhcnNlIExheWVyIEFuaW1hdGlvbiBDdXJ2ZXNcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYXllci5hbmltYXRpb25TdGF0ZU1hY2hpbmUudGN1cnZlcyAhPSBudWxsICYmIGxheWVyLmFuaW1hdGlvblN0YXRlTWFjaGluZS50Y3VydmVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyLmFuaW1hdGlvblN0YXRlTWFjaGluZS50Y3VydmVzLmZvckVhY2goKGFuaW1hdGlvbjpCQUJZTE9OLkFuaW1hdGlvbikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbmltYXRpb24udGFyZ2V0UHJvcGVydHkgIT0gbnVsbCAmJiBhbmltYXRpb24udGFyZ2V0UHJvcGVydHkgIT09IFwiXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2FtcGxlOm51bWJlciA9IEJBQllMT04uVXRpbGl0aWVzLlNhbXBsZUFuaW1hdGlvbkZsb2F0KGFuaW1hdGlvbiwgbGF5ZXIuYW5pbWF0aW9uTm9ybWFsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRGbG9hdChhbmltYXRpb24udGFyZ2V0UHJvcGVydHksIHNhbXBsZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFZhbGlkYXRlIExheWVyIEFuaW1hdGlvbiBFdmVudHMgKFRPRE8gLSBQYXNzIExheWVyIEluZGV4IEFuZCBDbGlwIEJsZW5kZWQgV2VpZ2h0IFByb3BlcnRpZXMgVG8gT2JzZXJ2ZXJzKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxheWVyLmFuaW1hdGlvblN0YXRlTWFjaGluZS5ldmVudHMgIT0gbnVsbCAmJiBsYXllci5hbmltYXRpb25TdGF0ZU1hY2hpbmUuZXZlbnRzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyLmFuaW1hdGlvblN0YXRlTWFjaGluZS5ldmVudHMuZm9yRWFjaCgoYW5pbWF0b3JFdmVudDpCQUJZTE9OLklBbmltYXRvckV2ZW50KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFuaW1hdG9yRXZlbnQudGltZSA9PT0gZm9ybWF0dGVkVGltZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhbmltRXZlbnRLZXk6c3RyaW5nID0gYW5pbWF0b3JFdmVudC5mdW5jdGlvbiArIFwiX1wiICsgYW5pbWF0b3JFdmVudC50aW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobGF5ZXIuYW5pbWF0aW9uTG9vcEV2ZW50cyA9PSBudWxsKSBsYXllci5hbmltYXRpb25Mb29wRXZlbnRzID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbGF5ZXIuYW5pbWF0aW9uTG9vcEV2ZW50c1thbmltRXZlbnRLZXldKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXllci5hbmltYXRpb25Mb29wRXZlbnRzW2FuaW1FdmVudEtleV0gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCJCbGVuZCBUcmVlIEFuaW1hdGlvbiBFdmVudDogXCIgKyBhbmltYXRvckV2ZW50LnRpbWUgKyBcIiA+PiBcIiArIGFuaW1hdG9yRXZlbnQuY2xpcCArIFwiID4+IFwiICsgYW5pbWF0b3JFdmVudC5mdW5jdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5vbkFuaW1hdGlvbkV2ZW50T2JzZXJ2YWJsZS5oYXNPYnNlcnZlcnMoKSA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub25BbmltYXRpb25FdmVudE9ic2VydmFibGUubm90aWZ5T2JzZXJ2ZXJzKGFuaW1hdG9yRXZlbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFN0ZXAgQmxlbmQgVHJlZSBBbmltYXRpb24gVGltZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxheWVyLmFuaW1hdGlvbkxvb3BGcmFtZSA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXIuYW5pbWF0aW9uVGltZSA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXllci5hbmltYXRpb25Ob3JtYWwgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXIuYW5pbWF0aW9uTG9vcEZyYW1lID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXllci5hbmltYXRpb25Mb29wRXZlbnRzID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuZmluYWxpemVBbmltYXRpb25UYXJnZXRzKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBwcml2YXRlIF9ibGVuZE1lc3NhZ2U6c3RyaW5nID0gXCJcIjtcclxuICAgICAgICBwcml2YXRlIHVwZGF0ZUJsZW5kYWJsZVRhcmdldHMoZGVsdGFUaW1lOm51bWJlciwgbGF5ZXI6QkFCWUxPTi5JQW5pbWF0aW9uTGF5ZXIsIHRyZWU6QkFCWUxPTi5JQmxlbmRUcmVlLCBtYXN0ZXJBbmltYXRpb246QkFCWUxPTi5UYXJnZXRlZEFuaW1hdGlvbiwgdGFyZ2V0SW5kZXg6bnVtYmVyLCB0YXJnZXRNaXhlcjpCQUJZTE9OLkFuaW1hdGlvbk1peGVyLCBub3JtYWxpemVkRnJhbWVUaW1lOm51bWJlciwgdGFyZ2V0Um9vdEJvbmU6Ym9vbGVhbiwgYmxlbmRUYXJnZXQ6QkFCWUxPTi5UcmFuc2Zvcm1Ob2RlKTp2b2lkIHtcclxuICAgICAgICAgICAgaWYgKHRhcmdldE1peGVyICE9IG51bGwgJiYgdHJlZS5jaGlsZHJlbiAhPSBudWxsICYmIHRyZWUuY2hpbGRyZW4ubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHRyZWUuY2hpbGRyZW4ubGVuZ3RoOyBpbmRleCsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY2hpbGQ6QkFCWUxPTi5JQmxlbmRUcmVlQ2hpbGQgPSB0cmVlLmNoaWxkcmVuW2luZGV4XTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY2hpbGQud2VpZ2h0ID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hpbGQudHlwZSA9PT0gQkFCWUxPTi5Nb3Rpb25UeXBlLkNsaXApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaGlsZC50cmFjayAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbGV0IGFkZGl0aXZlcmVmZXJlbmNlcG9zZWNsaXA6bnVtYmVyID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBsZXQgYWRkaXRpdmVyZWZlcmVuY2Vwb3NldGltZTpudW1iZXIgPSAwLjA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbGV0IGhhc2FkZGl0aXZlcmVmZXJlbmNlcG9zZTpib29sZWFuID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbGV0IHN0YXJ0dGltZTpudW1iZXIgPSAwLjA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbGV0IHN0b3B0aW1lOm51bWJlciA9IDAuMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBsZXQgbWlycm9yOmJvb2xlYW4gPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBsZXQgbG9vcHRpbWU6Ym9vbGVhbiA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGxldmVsOm51bWJlciA9IDAuMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgeHNwZWVkOm51bWJlciA9IDAuMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgenNwZWVkOm51bWJlciA9IDAuMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2xldCBsb29wYmxlbmQ6Ym9vbGVhbiA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vbGV0IGN5Y2xlb2Zmc2V0Om51bWJlciA9IDAuMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2xldCBoZWlnaHRmcm9tZmVldDpib29sZWFuID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG9yaWVudGF0aW9ub2Zmc2V0eTpudW1iZXIgPSAwLjA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9sZXQga2VlcG9yaWdpbmFsb3JpZW50YXRpb246Ym9vbGVhbiA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9sZXQga2VlcG9yaWdpbmFscG9zaXRpb255OmJvb2xlYW4gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vbGV0IGtlZXBvcmlnaW5hbHBvc2l0aW9ueHo6Ym9vbGVhbiA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGxvb3BibGVuZG9yaWVudGF0aW9uOmJvb2xlYW4gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBsb29wYmxlbmRwb3NpdGlvbnk6Ym9vbGVhbiA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGxvb3BibGVuZHBvc2l0aW9ueHo6Ym9vbGVhbiA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYWdyb3VwOmFueSA9IGNoaWxkLnRyYWNrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhZ3JvdXAubWV0YWRhdGEgIT0gbnVsbCAmJiBhZ3JvdXAubWV0YWRhdGEudW5pdHkgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWdyb3VwLm1ldGFkYXRhLnVuaXR5LmF2ZXJhZ2VzcGVlZCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4c3BlZWQgPSAoYWdyb3VwLm1ldGFkYXRhLnVuaXR5LmF2ZXJhZ2VzcGVlZC54ICE9IG51bGwpID8gYWdyb3VwLm1ldGFkYXRhLnVuaXR5LmF2ZXJhZ2VzcGVlZC54IDogMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHpzcGVlZCA9IChhZ3JvdXAubWV0YWRhdGEudW5pdHkuYXZlcmFnZXNwZWVkLnogIT0gbnVsbCkgPyBhZ3JvdXAubWV0YWRhdGEudW5pdHkuYXZlcmFnZXNwZWVkLnogOiAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhZ3JvdXAubWV0YWRhdGEudW5pdHkuc2V0dGluZ3MgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV2ZWwgPSAoYWdyb3VwLm1ldGFkYXRhLnVuaXR5LnNldHRpbmdzLmxldmVsICE9IG51bGwpID8gYWdyb3VwLm1ldGFkYXRhLnVuaXR5LnNldHRpbmdzLmxldmVsIDogMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIERFUFJFQ0lBVEVEOiBsb29wYmxlbmQgPSAoYWdyb3VwLm1ldGFkYXRhLnVuaXR5LnNldHRpbmdzLmxvb3BibGVuZCAhPSBudWxsKSA/IGFncm91cC5tZXRhZGF0YS51bml0eS5zZXR0aW5ncy5sb29wYmxlbmQgOiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIERFUFJFQ0lBVEVEOiBjeWNsZW9mZnNldCA9IChhZ3JvdXAubWV0YWRhdGEudW5pdHkuc2V0dGluZ3MuY3ljbGVvZmZzZXQgIT0gbnVsbCkgPyBhZ3JvdXAubWV0YWRhdGEudW5pdHkuc2V0dGluZ3MuY3ljbGVvZmZzZXQgOiAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gREVQUkVDSUFURUQ6IGhlaWdodGZyb21mZWV0ID0gKGFncm91cC5tZXRhZGF0YS51bml0eS5zZXR0aW5ncy5oZWlnaHRmcm9tZmVldCAhPSBudWxsKSA/IGFncm91cC5tZXRhZGF0YS51bml0eS5zZXR0aW5ncy5oZWlnaHRmcm9tZmVldCA6IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3JpZW50YXRpb25vZmZzZXR5ID0gKGFncm91cC5tZXRhZGF0YS51bml0eS5zZXR0aW5ncy5vcmllbnRhdGlvbm9mZnNldHkgIT0gbnVsbCkgPyBhZ3JvdXAubWV0YWRhdGEudW5pdHkuc2V0dGluZ3Mub3JpZW50YXRpb25vZmZzZXR5IDogMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIERFUFJFQ0lBVEVEOiBrZWVwb3JpZ2luYWxvcmllbnRhdGlvbiA9IChhZ3JvdXAubWV0YWRhdGEudW5pdHkuc2V0dGluZ3Mua2VlcG9yaWdpbmFsb3JpZW50YXRpb24gIT0gbnVsbCkgPyBhZ3JvdXAubWV0YWRhdGEudW5pdHkuc2V0dGluZ3Mua2VlcG9yaWdpbmFsb3JpZW50YXRpb24gOiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gREVQUkVDSUFURUQ6IGtlZXBvcmlnaW5hbHBvc2l0aW9ueSA9IChhZ3JvdXAubWV0YWRhdGEudW5pdHkuc2V0dGluZ3Mua2VlcG9yaWdpbmFscG9zaXRpb255ICE9IG51bGwpID8gYWdyb3VwLm1ldGFkYXRhLnVuaXR5LnNldHRpbmdzLmtlZXBvcmlnaW5hbHBvc2l0aW9ueSA6IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBERVBSRUNJQVRFRDoga2VlcG9yaWdpbmFscG9zaXRpb254eiA9IChhZ3JvdXAubWV0YWRhdGEudW5pdHkuc2V0dGluZ3Mua2VlcG9yaWdpbmFscG9zaXRpb254eiAhPSBudWxsKSA/IGFncm91cC5tZXRhZGF0YS51bml0eS5zZXR0aW5ncy5rZWVwb3JpZ2luYWxwb3NpdGlvbnh6IDogdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvb3BibGVuZG9yaWVudGF0aW9uID0gKGFncm91cC5tZXRhZGF0YS51bml0eS5zZXR0aW5ncy5sb29wYmxlbmRvcmllbnRhdGlvbiAhPSBudWxsKSA/IGFncm91cC5tZXRhZGF0YS51bml0eS5zZXR0aW5ncy5sb29wYmxlbmRvcmllbnRhdGlvbiA6IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb29wYmxlbmRwb3NpdGlvbnkgPSAoYWdyb3VwLm1ldGFkYXRhLnVuaXR5LnNldHRpbmdzLmxvb3BibGVuZHBvc2l0aW9ueSAhPSBudWxsKSA/IGFncm91cC5tZXRhZGF0YS51bml0eS5zZXR0aW5ncy5sb29wYmxlbmRwb3NpdGlvbnkgOiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9vcGJsZW5kcG9zaXRpb254eiA9IChhZ3JvdXAubWV0YWRhdGEudW5pdHkuc2V0dGluZ3MubG9vcGJsZW5kcG9zaXRpb254eiAhPSBudWxsKSA/IGFncm91cC5tZXRhZGF0YS51bml0eS5zZXR0aW5ncy5sb29wYmxlbmRwb3NpdGlvbnh6IDogdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBVbml0eSBJbnZlcnRzIFJvb3QgTW90aW9uIEFuaW1hdGlvbiBPZmZzZXRzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3JpZW50YXRpb25vZmZzZXR5ID0gQkFCWUxPTi5Ub29scy5Ub1JhZGlhbnMob3JpZW50YXRpb25vZmZzZXR5KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBERVBSRUNJQVRFRDogb3JpZW50YXRpb25vZmZzZXR5ICo9IC0xO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhzcGVlZCA9IE1hdGguYWJzKHhzcGVlZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgenNwZWVkID0gTWF0aC5hYnMoenNwZWVkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXZlbCAqPSAtMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGlzLl9ibGVuZE1lc3NhZ2UgKz0gKFwiID4+PiBcIiArIGNoaWxkLm1vdGlvbiArIFwiOiBcIiArIGNoaWxkLndlaWdodC50b0ZpeGVkKDIpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUT0RPIC0gR2V0IGJsZW5kYWJsZSBhbmltYXRpb24gZnJvbSB0YXJnZXQgbWFwIC0gPz8/XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYmxlbmRhYmxlQW5pbTpCQUJZTE9OLlRhcmdldGVkQW5pbWF0aW9uID0gY2hpbGQudHJhY2sudGFyZ2V0ZWRBbmltYXRpb25zW3RhcmdldEluZGV4XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBibGVuZGFibGVXZWlnaHQ6bnVtYmVyID0gKHRoaXMuX2luaXRpYWx0YXJnZXRibGVuZGluZyA9PT0gdHJ1ZSkgPyAxLjAgOiBwYXJzZUZsb2F0KGNoaWxkLndlaWdodC50b0ZpeGVkKDIpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9pbml0aWFsdGFyZ2V0YmxlbmRpbmcgPSBmYWxzZTsgLy8gTm90ZTogQ2xlYXIgRmlyc3QgVGFyZ2V0IEJsZW5kaW5nIEJ1ZmZlclxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChibGVuZGFibGVBbmltLnRhcmdldCA9PT0gbWFzdGVyQW5pbWF0aW9uLnRhcmdldCAmJiBibGVuZGFibGVBbmltLmFuaW1hdGlvbi50YXJnZXRQcm9wZXJ0eSA9PT0gbWFzdGVyQW5pbWF0aW9uLmFuaW1hdGlvbi50YXJnZXRQcm9wZXJ0eSApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGFkanVzdGVkRnJhbWVUaW1lOm51bWJlciA9IG5vcm1hbGl6ZWRGcmFtZVRpbWU7ICAgICAgICAgICAgICAgICAgICAgLy8gTm90ZTogQWRqdXN0IE5vcm1hbGl6ZWQgRnJhbWUgVGltZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hpbGQudGltZXNjYWxlIDwgMCkgYWRqdXN0ZWRGcmFtZVRpbWUgPSAoMSAtIGFkanVzdGVkRnJhbWVUaW1lKTsgICAvLyBOb3RlOiBSZXZlcnNlIE5vcm1hbGl6ZWQgRnJhbWUgVGltZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhbmltYXRpb25GcmFtZVRpbWU6bnVtYmVyID0gKGNoaWxkLnRyYWNrLnRvICogYWRqdXN0ZWRGcmFtZVRpbWUpOyAvLyBOb3RlOiBEZW5vcm1hbGl6ZSBBbmltYXRpb24gRnJhbWUgVGltZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2NvbnN0IGFuaW1hdGlvbkZyYW1lVGltZTpudW1iZXIgPSAoTWF0aC5yb3VuZCgoY2hpbGQudHJhY2sudG8gKiBhZGp1c3RlZEZyYW1lVGltZSkgKiAxMDApIC8gMTAwKTsgIC8vIE5vdGU6IERlbm9ybWFsaXplIEFuaW1hdGlvbiBGcmFtZSBUaW1lXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXN0ZXJBbmltYXRpb24uYW5pbWF0aW9uLnRhcmdldFByb3BlcnR5ID09PSBcInBvc2l0aW9uXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3RhcmdldFBvc2l0aW9uID0gQkFCWUxPTi5VdGlsaXRpZXMuU2FtcGxlQW5pbWF0aW9uVmVjdG9yMyhibGVuZGFibGVBbmltLmFuaW1hdGlvbiwgYW5pbWF0aW9uRnJhbWVUaW1lKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIC4uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBSb290IFRyYW5zZm9ybSBQb3NpdGlvblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gLi5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0YXJnZXRSb290Qm9uZSA9PT0gdHJ1ZSAmJiB0aGlzLl9pbml0aWFsUm9vdEJvbmVQb3NpdGlvbiAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcG9zaXRpb25XZWlnaHQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3Bvc2l0aW9uSG9sZGVyLmNvcHlGcm9tKHRoaXMuX2luaXRpYWxSb290Qm9uZVBvc2l0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9yb290Qm9uZVdlaWdodCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3Jvb3RCb25lSG9sZGVyLnNldCgwLDAsMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gLi5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBcHBseSBSb290IE1vdGlvblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIC4uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuYXBwbHlSb290TW90aW9uID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsb29wYmxlbmRwb3NpdGlvbnkgPT09IHRydWUgJiYgbG9vcGJsZW5kcG9zaXRpb254eiA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcG9zaXRpb25XZWlnaHQgPSB0cnVlOyAgICAgICAgLy8gQmFrZSBYWVogSW50byBQb3NlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9wb3NpdGlvbkhvbGRlci5zZXQodGhpcy5fdGFyZ2V0UG9zaXRpb24ueCwgKHRoaXMuX3RhcmdldFBvc2l0aW9uLnkgKyBsZXZlbCksIHRoaXMuX3RhcmdldFBvc2l0aW9uLnopO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGxvb3BibGVuZHBvc2l0aW9ueSA9PT0gZmFsc2UgJiYgbG9vcGJsZW5kcG9zaXRpb254eiA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3Jvb3RCb25lV2VpZ2h0ID0gdHJ1ZTsgICAgICAgIC8vIFVzZSBYWVogQXMgUm9vdCBNb3Rpb25cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3Jvb3RCb25lSG9sZGVyLnNldCh0aGlzLl90YXJnZXRQb3NpdGlvbi54LCAodGhpcy5fdGFyZ2V0UG9zaXRpb24ueSArIGxldmVsKSwgdGhpcy5fdGFyZ2V0UG9zaXRpb24ueik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobG9vcGJsZW5kcG9zaXRpb255ID09PSB0cnVlICYmIGxvb3BibGVuZHBvc2l0aW9ueHogPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9wb3NpdGlvbldlaWdodCA9IHRydWU7ICAgICAgICAvLyBCYWtlIFkgSW50byBQb3NlIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcG9zaXRpb25Ib2xkZXIuc2V0KHRoaXMuX2luaXRpYWxSb290Qm9uZVBvc2l0aW9uLngsICh0aGlzLl90YXJnZXRQb3NpdGlvbi55ICsgbGV2ZWwpLCB0aGlzLl9pbml0aWFsUm9vdEJvbmVQb3NpdGlvbi56KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3Jvb3RCb25lV2VpZ2h0ID0gdHJ1ZTsgICAgICAgIC8vIFVzZSBYWiBBcyBSb290IE1vdGlvblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcm9vdEJvbmVIb2xkZXIuc2V0KHRoaXMuX3RhcmdldFBvc2l0aW9uLngsIDAsIHRoaXMuX3RhcmdldFBvc2l0aW9uLnopOyAvLyBNQVlCRTogVXNlIHRoaXMudHJhbnNmb3JtLnBvc2l0aW9uLnkgLSA/Pz9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChsb29wYmxlbmRwb3NpdGlvbnh6ID09PSB0cnVlICYmIGxvb3BibGVuZHBvc2l0aW9ueSA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3Bvc2l0aW9uV2VpZ2h0ID0gdHJ1ZTsgICAgICAgIC8vIEJha2UgWFogSW50byBQb3NlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9wb3NpdGlvbkhvbGRlci5zZXQodGhpcy5fdGFyZ2V0UG9zaXRpb24ueCwgdGhpcy5faW5pdGlhbFJvb3RCb25lUG9zaXRpb24ueSwgdGhpcy5fdGFyZ2V0UG9zaXRpb24ueik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9yb290Qm9uZVdlaWdodCA9IHRydWU7ICAgICAgICAvLyBVc2UgWSBBcyBSb290IE1vdGlvblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcm9vdEJvbmVIb2xkZXIuc2V0KDAsICh0aGlzLl90YXJnZXRQb3NpdGlvbi55ICsgbGV2ZWwpLCAwKTsgLy8gTUFZQkU6IFVzZSB0aGlzLnRyYW5zZm9ybS5wb3NpdGlvbi54eiAtID8/P1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcG9zaXRpb25XZWlnaHQgPSB0cnVlOyAgICAgICAgLy8gQmFrZSBYWVogT3JpZ2luYWwgTW90aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3Bvc2l0aW9uSG9sZGVyLnNldCh0aGlzLl90YXJnZXRQb3NpdGlvbi54LCAodGhpcy5fdGFyZ2V0UG9zaXRpb24ueSArIGxldmVsKSwgdGhpcy5fdGFyZ2V0UG9zaXRpb24ueik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEJha2UgUG9zaXRpb24gSG9sZGVyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX3Bvc2l0aW9uV2VpZ2h0ID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0YXJnZXRNaXhlci5wb3NpdGlvbkJ1ZmZlciA9PSBudWxsKSB0YXJnZXRNaXhlci5wb3NpdGlvbkJ1ZmZlciA9IG5ldyBCQUJZTE9OLlZlY3RvcjMoMCwwLDApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBCQUJZTE9OLlV0aWxpdGllcy5CbGVuZFZlY3RvcjNWYWx1ZSh0YXJnZXRNaXhlci5wb3NpdGlvbkJ1ZmZlciwgdGhpcy5fcG9zaXRpb25Ib2xkZXIsIGJsZW5kYWJsZVdlaWdodCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEJha2UgUm9vdCBCb25lIEhvbGRlclxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9yb290Qm9uZVdlaWdodCA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGFyZ2V0TWl4ZXIucm9vdFBvc2l0aW9uID09IG51bGwpIHRhcmdldE1peGVyLnJvb3RQb3NpdGlvbiA9IG5ldyBCQUJZTE9OLlZlY3RvcjMoMCwwLDApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBCQUJZTE9OLlV0aWxpdGllcy5CbGVuZFZlY3RvcjNWYWx1ZSh0YXJnZXRNaXhlci5yb290UG9zaXRpb24sIHRoaXMuX3Jvb3RCb25lSG9sZGVyLCBibGVuZGFibGVXZWlnaHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQmFrZSBOb3JtYWwgUG9zZSBQb3NpdGlvblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0YXJnZXRNaXhlci5wb3NpdGlvbkJ1ZmZlciA9PSBudWxsKSB0YXJnZXRNaXhlci5wb3NpdGlvbkJ1ZmZlciA9IG5ldyBCQUJZTE9OLlZlY3RvcjMoMCwwLDApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJBQllMT04uVXRpbGl0aWVzLkJsZW5kVmVjdG9yM1ZhbHVlKHRhcmdldE1peGVyLnBvc2l0aW9uQnVmZmVyLCB0aGlzLl90YXJnZXRQb3NpdGlvbiwgYmxlbmRhYmxlV2VpZ2h0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChtYXN0ZXJBbmltYXRpb24uYW5pbWF0aW9uLnRhcmdldFByb3BlcnR5ID09PSBcInJvdGF0aW9uUXVhdGVybmlvblwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl90YXJnZXRSb3RhdGlvbiA9IEJBQllMT04uVXRpbGl0aWVzLlNhbXBsZUFuaW1hdGlvblF1YXRlcm5pb24oYmxlbmRhYmxlQW5pbS5hbmltYXRpb24sIGFuaW1hdGlvbkZyYW1lVGltZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAuLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gUm9vdCBUcmFuc2Zvcm0gUm90YXRpb25cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIC4uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGFyZ2V0Um9vdEJvbmUgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9yb3RhdGlvbldlaWdodCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3JvdGF0aW9uSG9sZGVyLnNldCgwLDAsMCwwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9yb290UXVhdFdlaWdodCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3Jvb3RRdWF0SG9sZGVyLnNldCgwLDAsMCwwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBldWxlckFuZ2xlOkJBQllMT04uVmVjdG9yMyA9IHRoaXMuX3RhcmdldFJvdGF0aW9uLnRvRXVsZXJBbmdsZXMoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBvcmllbnRhdGlvbkFuZ2xlWTpudW1iZXIgPSBldWxlckFuZ2xlLnk7IC8vKGtlZXBvcmlnaW5hbG9yaWVudGF0aW9uID09PSB0cnVlKSA/IGV1bGVyQW5nbGUueSA6IHRoaXMuX2JvZHlPcmllbnRhdGlvbkFuZ2xlWTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAuLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFwcGx5IFJvb3QgTW90aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gLi5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5hcHBseVJvb3RNb3Rpb24gPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxvb3BibGVuZG9yaWVudGF0aW9uID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9yb3RhdGlvbldlaWdodCA9IHRydWU7ICAgICAgICAvLyBCYWtlIFhZWiBJbnRvIFBvc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJBQllMT04uUXVhdGVybmlvbi5Gcm9tRXVsZXJBbmdsZXNUb1JlZihldWxlckFuZ2xlLngsIChvcmllbnRhdGlvbkFuZ2xlWSArIG9yaWVudGF0aW9ub2Zmc2V0eSksIGV1bGVyQW5nbGUueiwgdGhpcy5fcm90YXRpb25Ib2xkZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcm90YXRpb25XZWlnaHQgPSB0cnVlOyAgICAgICAgLy8gQmFrZSBYWiBJbnRvIFBvc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJBQllMT04uUXVhdGVybmlvbi5Gcm9tRXVsZXJBbmdsZXNUb1JlZihldWxlckFuZ2xlLngsIHRoaXMuX2luaXRpYWxSb290Qm9uZVJvdGF0aW9uLnksIGV1bGVyQW5nbGUueiwgdGhpcy5fcm90YXRpb25Ib2xkZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcm9vdFF1YXRXZWlnaHQgPSB0cnVlOyAgICAgICAgLy8gVXNlIFkgQXMgUm9vdCBNb3Rpb25cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJBQllMT04uUXVhdGVybmlvbi5Gcm9tRXVsZXJBbmdsZXNUb1JlZigwLCAob3JpZW50YXRpb25BbmdsZVkgKyBvcmllbnRhdGlvbm9mZnNldHkpLCAwLCB0aGlzLl9yb290UXVhdEhvbGRlcik7IC8vIE1BWUJFOiBVc2UgdGhpcy50cmFuc2Zvcm0ucm90YXRpb24ueHogLSA/Pz9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3JvdGF0aW9uV2VpZ2h0ID0gdHJ1ZTsgICAgICAgICAgICAvLyBCYWtlIFhZWiBJbnRvIFBvc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQkFCWUxPTi5RdWF0ZXJuaW9uLkZyb21FdWxlckFuZ2xlc1RvUmVmKGV1bGVyQW5nbGUueCwgKG9yaWVudGF0aW9uQW5nbGVZICsgb3JpZW50YXRpb25vZmZzZXR5KSwgZXVsZXJBbmdsZS56LCB0aGlzLl9yb3RhdGlvbkhvbGRlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEJha2UgUm90YXRpb24gSG9sZGVyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX3JvdGF0aW9uV2VpZ2h0ID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0YXJnZXRNaXhlci5yb3RhdGlvbkJ1ZmZlciA9PSBudWxsKSB0YXJnZXRNaXhlci5yb3RhdGlvbkJ1ZmZlciA9IG5ldyBCQUJZTE9OLlF1YXRlcm5pb24oMCwwLDAsMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJBQllMT04uVXRpbGl0aWVzLkJsZW5kUXVhdGVybmlvblZhbHVlKHRhcmdldE1peGVyLnJvdGF0aW9uQnVmZmVyLCB0aGlzLl9yb3RhdGlvbkhvbGRlciwgYmxlbmRhYmxlV2VpZ2h0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQmFrZSBSb290IEJvbmUgUm90YXRpb25cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fcm9vdFF1YXRXZWlnaHQgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRhcmdldE1peGVyLnJvb3RSb3RhdGlvbiA9PSBudWxsKSB0YXJnZXRNaXhlci5yb290Um90YXRpb24gPSBuZXcgQkFCWUxPTi5RdWF0ZXJuaW9uKDAsMCwwLDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBCQUJZTE9OLlV0aWxpdGllcy5CbGVuZFF1YXRlcm5pb25WYWx1ZSh0YXJnZXRNaXhlci5yb290Um90YXRpb24sIHRoaXMuX3Jvb3RRdWF0SG9sZGVyLCBibGVuZGFibGVXZWlnaHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQmFrZSBOb3JtYWwgUG9zZSBSb3RhdGlvblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0YXJnZXRNaXhlci5yb3RhdGlvbkJ1ZmZlciA9PSBudWxsKSB0YXJnZXRNaXhlci5yb3RhdGlvbkJ1ZmZlciA9IG5ldyBCQUJZTE9OLlF1YXRlcm5pb24oMCwwLDAsMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQkFCWUxPTi5VdGlsaXRpZXMuQmxlbmRRdWF0ZXJuaW9uVmFsdWUodGFyZ2V0TWl4ZXIucm90YXRpb25CdWZmZXIsIHRoaXMuX3RhcmdldFJvdGF0aW9uLCBibGVuZGFibGVXZWlnaHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG1hc3RlckFuaW1hdGlvbi5hbmltYXRpb24udGFyZ2V0UHJvcGVydHkgPT09IFwic2NhbGluZ1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl90YXJnZXRTY2FsaW5nID0gQkFCWUxPTi5VdGlsaXRpZXMuU2FtcGxlQW5pbWF0aW9uVmVjdG9yMyhibGVuZGFibGVBbmltLmFuaW1hdGlvbiwgYW5pbWF0aW9uRnJhbWVUaW1lKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0YXJnZXRNaXhlci5zY2FsaW5nQnVmZmVyID09IG51bGwpIHRhcmdldE1peGVyLnNjYWxpbmdCdWZmZXIgPSBuZXcgQkFCWUxPTi5WZWN0b3IzKDEsMSwxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJBQllMT04uVXRpbGl0aWVzLkJsZW5kVmVjdG9yM1ZhbHVlKHRhcmdldE1peGVyLnNjYWxpbmdCdWZmZXIsIHRoaXMuX3RhcmdldFNjYWxpbmcsIGJsZW5kYWJsZVdlaWdodCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBCQUJZTE9OLlRvb2xzLldhcm4odHJlZS5uYW1lICsgXCIgLSBcIiArIGNoaWxkLnRyYWNrLm5hbWUgICsgXCIgYmxlbmQgdHJlZSBtaXNtYXRjaCAoXCIgKyB0YXJnZXRJbmRleCArIFwiKTogXCIgKyBtYXN0ZXJBbmltYXRpb24udGFyZ2V0Lm5hbWUgKyBcIiA+Pj4gXCIgKyBibGVuZGFibGVBbmltLnRhcmdldC5uYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY2hpbGQudHlwZSA9PT0gQkFCWUxPTi5Nb3Rpb25UeXBlLlRyZWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlQmxlbmRhYmxlVGFyZ2V0cyhkZWx0YVRpbWUsIGxheWVyLCBjaGlsZC5zdWJ0cmVlLCBtYXN0ZXJBbmltYXRpb24sIHRhcmdldEluZGV4LCB0YXJnZXRNaXhlciwgbm9ybWFsaXplZEZyYW1lVGltZSwgdGFyZ2V0Um9vdEJvbmUsIGJsZW5kVGFyZ2V0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvL2lmICh0YXJnZXRJbmRleCA9PT0gMCkgQkFCWUxPTi5VdGlsaXRpZXMuUHJpbnRUb1NjcmVlbih0aGlzLl9ibGVuZE1lc3NhZ2UsIFwicmVkXCIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSBmaW5hbGl6ZUFuaW1hdGlvblRhcmdldHMoKTp2b2lkIHtcclxuICAgICAgICAgICAgdGhpcy5fZGVsdGFQb3NpdGlvbi5zZXQoMCwwLDApO1xyXG4gICAgICAgICAgICB0aGlzLl9kZWx0YVJvdGF0aW9uLnNldCgwLDAsMCwxKTtcclxuICAgICAgICAgICAgdGhpcy5fZGVsdGFQb3NpdGlvbkZpeGVkLnNldCgwLDAsMCk7XHJcbiAgICAgICAgICAgIHRoaXMuX2RpcnR5TW90aW9uTWF0cml4ID0gbnVsbDtcclxuICAgICAgICAgICAgaWYgKHRoaXMubV9hbmltYXRpb25UYXJnZXRzICE9IG51bGwgJiYgdGhpcy5tX2FuaW1hdGlvblRhcmdldHMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tX2FuaW1hdGlvblRhcmdldHMuZm9yRWFjaCgodGFyZ2V0ZWRBbmltOkJBQllMT04uVGFyZ2V0ZWRBbmltYXRpb24pID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBhbmltYXRpb25UYXJnZXQ6YW55ID0gdGFyZ2V0ZWRBbmltLnRhcmdldDtcclxuICAgICAgICAgICAgICAgICAgICAvLyAuLlxyXG4gICAgICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSBEaXJlY3QgVHJhbnNmb3JtIFRhcmdldHMgRm9yIEVhY2ggTGF5ZXJcclxuICAgICAgICAgICAgICAgICAgICAvLyAuLlxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChhbmltYXRpb25UYXJnZXQubWV0YWRhdGEgIT0gbnVsbCAmJiBhbmltYXRpb25UYXJnZXQubWV0YWRhdGEubWl4ZXIgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fbWFjaGluZS5sYXllcnMgIT0gbnVsbCAmJiB0aGlzLl9tYWNoaW5lLmxheWVycy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9ibGVuZGVyTWF0cml4LnJlc2V0KCk7ICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9kaXJ0eUJsZW5kZXJNYXRyaXggPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbWFjaGluZS5sYXllcnMuZm9yRWFjaCgobGF5ZXI6QkFCWUxPTi5JQW5pbWF0aW9uTGF5ZXIpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhbmltYXRpb25UYXJnZXRNaXhlcjpCQUJZTE9OLkFuaW1hdGlvbk1peGVyID0gYW5pbWF0aW9uVGFyZ2V0Lm1ldGFkYXRhLm1peGVyW2xheWVyLmluZGV4XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYW5pbWF0aW9uVGFyZ2V0TWl4ZXIgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYW5pbWF0aW9uVGFyZ2V0IGluc3RhbmNlb2YgQkFCWUxPTi5UcmFuc2Zvcm1Ob2RlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAuLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVXBkYXRlIERpcnR5IFRyYW5zZm9ybSBNYXRyaXhcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIC4uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYW5pbWF0aW9uVGFyZ2V0TWl4ZXIucG9zaXRpb25CdWZmZXIgIT0gbnVsbCB8fCBhbmltYXRpb25UYXJnZXRNaXhlci5yb3RhdGlvbkJ1ZmZlciAhPSBudWxsIHx8IGFuaW1hdGlvblRhcmdldE1peGVyLnNjYWxpbmdCdWZmZXIgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJBQllMT04uTWF0cml4LkNvbXBvc2VUb1JlZihcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGFuaW1hdGlvblRhcmdldE1peGVyLnNjYWxpbmdCdWZmZXIgfHwgYW5pbWF0aW9uVGFyZ2V0LnNjYWxpbmcpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoYW5pbWF0aW9uVGFyZ2V0TWl4ZXIucm90YXRpb25CdWZmZXIgfHwgYW5pbWF0aW9uVGFyZ2V0LnJvdGF0aW9uUXVhdGVybmlvbiksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChhbmltYXRpb25UYXJnZXRNaXhlci5wb3NpdGlvbkJ1ZmZlciB8fCBhbmltYXRpb25UYXJnZXQucG9zaXRpb24pLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl91cGRhdGVNYXRyaXhcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbmltYXRpb25UYXJnZXRNaXhlci5ibGVuZGluZ1NwZWVkID4gMC4wKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbmltYXRpb25UYXJnZXRNaXhlci5ibGVuZGluZ0ZhY3RvciA8PSAxLjAgJiYgYW5pbWF0aW9uVGFyZ2V0TWl4ZXIub3JpZ2luYWxNYXRyaXggPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uVGFyZ2V0TWl4ZXIub3JpZ2luYWxNYXRyaXggPSBCQUJZTE9OLk1hdHJpeC5Db21wb3NlKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChhbmltYXRpb25UYXJnZXQuc2NhbGluZyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGFuaW1hdGlvblRhcmdldC5yb3RhdGlvblF1YXRlcm5pb24pLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChhbmltYXRpb25UYXJnZXQucG9zaXRpb24pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbmltYXRpb25UYXJnZXRNaXhlci5ibGVuZGluZ0ZhY3RvciA8PSAxLjAgJiYgYW5pbWF0aW9uVGFyZ2V0TWl4ZXIub3JpZ2luYWxNYXRyaXggIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQkFCWUxPTi5VdGlsaXRpZXMuRmFzdE1hdHJpeFNsZXJwKGFuaW1hdGlvblRhcmdldE1peGVyLm9yaWdpbmFsTWF0cml4LCB0aGlzLl91cGRhdGVNYXRyaXgsIGFuaW1hdGlvblRhcmdldE1peGVyLmJsZW5kaW5nRmFjdG9yLCB0aGlzLl91cGRhdGVNYXRyaXgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uVGFyZ2V0TWl4ZXIuYmxlbmRpbmdGYWN0b3IgKz0gYW5pbWF0aW9uVGFyZ2V0TWl4ZXIuYmxlbmRpbmdTcGVlZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBCQUJZTE9OLlV0aWxpdGllcy5GYXN0TWF0cml4U2xlcnAodGhpcy5fYmxlbmRlck1hdHJpeCwgdGhpcy5fdXBkYXRlTWF0cml4LCBsYXllci5kZWZhdWx0V2VpZ2h0LCB0aGlzLl9ibGVuZGVyTWF0cml4KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9kaXJ0eUJsZW5kZXJNYXRyaXggPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvblRhcmdldE1peGVyLnBvc2l0aW9uQnVmZmVyID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmltYXRpb25UYXJnZXRNaXhlci5yb3RhdGlvbkJ1ZmZlciA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uVGFyZ2V0TWl4ZXIuc2NhbGluZ0J1ZmZlciA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAuLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVXBkYXRlIERpcnR5IFJvb3QgTW90aW9uIE1hdHJpeFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gLi5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbmltYXRpb25UYXJnZXRNaXhlci5yb290UG9zaXRpb24gIT0gbnVsbCB8fCBhbmltYXRpb25UYXJnZXRNaXhlci5yb290Um90YXRpb24gIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJBQllMT04uTWF0cml4LkNvbXBvc2VUb1JlZihcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMuX2VtcHR5U2NhbGluZyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChhbmltYXRpb25UYXJnZXRNaXhlci5yb290Um90YXRpb24gfHwgdGhpcy5fZW1wdHlSb3RhdGlvbiksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChhbmltYXRpb25UYXJnZXRNaXhlci5yb290UG9zaXRpb24gfHwgdGhpcy5fZW1wdHlQb3NpdGlvbiksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3VwZGF0ZU1hdHJpeFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gLi5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUT0RPIC0gTWF5IE5lZWQgU2VwZXJhdGUgQmxlbmRpbmcgU3BlZWQgUHJvcGVydGllc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5vdGU6IE1pZ2h0IEZpeCBMYXJnZSBSb290IE1vdGlvbiBEZWx0YSBJc3N1ZSAtID8/P1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIC4uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLypcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYW5pbWF0aW9uVGFyZ2V0TWl4ZXIuYmxlbmRpbmdTcGVlZCA+IDAuMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYW5pbWF0aW9uVGFyZ2V0TWl4ZXIuYmxlbmRpbmdGYWN0b3IgPD0gMS4wICYmIGFuaW1hdGlvblRhcmdldE1peGVyLm9yaWdpbmFsTWF0cml4ID09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvblRhcmdldE1peGVyLm9yaWdpbmFsTWF0cml4ID0gQkFCWUxPTi5NYXRyaXguQ29tcG9zZShcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAodGhpcy50cmFuc2Zvcm0uc2NhbGluZyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMudHJhbnNmb3JtLnJvdGF0aW9uUXVhdGVybmlvbiksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMudHJhbnNmb3JtLnBvc2l0aW9uKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYW5pbWF0aW9uVGFyZ2V0TWl4ZXIuYmxlbmRpbmdGYWN0b3IgPD0gMS4wICYmIGFuaW1hdGlvblRhcmdldE1peGVyLm9yaWdpbmFsTWF0cml4ICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJBQllMT04uVXRpbGl0aWVzLkZhc3RNYXRyaXhTbGVycChhbmltYXRpb25UYXJnZXRNaXhlci5vcmlnaW5hbE1hdHJpeCwgdGhpcy5fdXBkYXRlTWF0cml4LCBhbmltYXRpb25UYXJnZXRNaXhlci5ibGVuZGluZ0ZhY3RvciwgdGhpcy5fdXBkYXRlTWF0cml4KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvblRhcmdldE1peGVyLmJsZW5kaW5nRmFjdG9yICs9IGFuaW1hdGlvblRhcmdldE1peGVyLmJsZW5kaW5nU3BlZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBCQUJZTE9OLlV0aWxpdGllcy5GYXN0TWF0cml4U2xlcnAodGhpcy5fcm9vdE1vdGlvbk1hdHJpeCwgdGhpcy5fdXBkYXRlTWF0cml4LCBsYXllci5kZWZhdWx0V2VpZ2h0LCB0aGlzLl9yb290TW90aW9uTWF0cml4KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9kaXJ0eU1vdGlvbk1hdHJpeCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uVGFyZ2V0TWl4ZXIucm9vdFBvc2l0aW9uID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmltYXRpb25UYXJnZXRNaXhlci5yb290Um90YXRpb24gPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGFuaW1hdGlvblRhcmdldCBpbnN0YW5jZW9mIEJBQllMT04uTW9ycGhUYXJnZXQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbmltYXRpb25UYXJnZXRNaXhlci5pbmZsdWVuY2VCdWZmZXIgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvblRhcmdldC5pbmZsdWVuY2UgPSBCQUJZTE9OLlNjYWxhci5MZXJwKGFuaW1hdGlvblRhcmdldC5pbmZsdWVuY2UsIGFuaW1hdGlvblRhcmdldE1peGVyLmluZmx1ZW5jZUJ1ZmZlciwgbGF5ZXIuZGVmYXVsdFdlaWdodCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uVGFyZ2V0TWl4ZXIuaW5mbHVlbmNlQnVmZmVyID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX2RpcnR5QmxlbmRlck1hdHJpeCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fYmxlbmRlck1hdHJpeC5kZWNvbXBvc2UoYW5pbWF0aW9uVGFyZ2V0LnNjYWxpbmcsIGFuaW1hdGlvblRhcmdldC5yb3RhdGlvblF1YXRlcm5pb24sIGFuaW1hdGlvblRhcmdldC5wb3NpdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyAuLlxyXG4gICAgICAgICAgICBpZiAodGhpcy5hcHBseVJvb3RNb3Rpb24gPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9kaXJ0eU1vdGlvbk1hdHJpeCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcm9vdE1vdGlvbk1hdHJpeC5kZWNvbXBvc2UodGhpcy5fcm9vdE1vdGlvblNjYWxpbmcsIHRoaXMuX3Jvb3RNb3Rpb25Sb3RhdGlvbiwgdGhpcy5fcm9vdE1vdGlvblBvc2l0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fZnJhbWV0aW1lID09PSAwKSB7IFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9sYXN0TW90aW9uUG9zaXRpb24uY29weUZyb20odGhpcy5fcm9vdE1vdGlvblBvc2l0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbGFzdE1vdGlvblJvdGF0aW9uLmNvcHlGcm9tKHRoaXMuX3Jvb3RNb3Rpb25Sb3RhdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIC4uXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gVXBkYXRlIEN1cnJlbnQgRGVsdGEgUG9zaXRpb25cclxuICAgICAgICAgICAgICAgICAgICAvLyAuLlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3Jvb3RNb3Rpb25Qb3NpdGlvbi5zdWJ0cmFjdFRvUmVmKHRoaXMuX2xhc3RNb3Rpb25Qb3NpdGlvbiwgdGhpcy5fZGVsdGFQb3NpdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gLi5cclxuICAgICAgICAgICAgICAgICAgICAvLyBVcGRhdGUgQ3VycmVudCBEZWx0YSBSb3RhdGlvblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIC4uXHJcbiAgICAgICAgICAgICAgICAgICAgQkFCWUxPTi5VdGlsaXRpZXMuUXVhdGVybmlvbkRpZmZUb1JlZih0aGlzLl9yb290TW90aW9uUm90YXRpb24sIHRoaXMuX2xhc3RNb3Rpb25Sb3RhdGlvbiwgdGhpcy5fZGVsdGFSb3RhdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZGVsdGFSb3RhdGlvbi50b0V1bGVyQW5nbGVzVG9SZWYodGhpcy5fYW5ndWxhclZlbG9jaXR5KTtcclxuICAgICAgICAgICAgICAgICAgICAvLyAuLlxyXG4gICAgICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSBMYXN0IFJvb3QgTW90aW9uIERlbHRhc1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIC4uXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2F2ZURlbHRhUG9zaXRpb24uY29weUZyb20odGhpcy5fZGVsdGFQb3NpdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2F2ZURlbHRhUm90YXRpb24uY29weUZyb20odGhpcy5fZGVsdGFSb3RhdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbGFzdE1vdGlvblBvc2l0aW9uLmFkZEluUGxhY2UodGhpcy5fZGVsdGFQb3NpdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbGFzdE1vdGlvblJvdGF0aW9uLm11bHRpcGx5SW5QbGFjZSh0aGlzLl9kZWx0YVJvdGF0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICAvLyAuLlxyXG4gICAgICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSBSb290IE1vdGlvbiBUcmFuc2Zvcm1hdGlvblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIC4uXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50cmFuc2Zvcm0ucm90YXRpb25RdWF0ZXJuaW9uLnRvUm90YXRpb25NYXRyaXgodGhpcy5fZGVsdGFQb3NpdGlvbk1hdHJpeCk7IC8vIFRPRE86IE9wdGltaXplIFJvdGF0aW9uIE1hdHJpeCBJcyBEaXJ0eSAtID8/P1xyXG4gICAgICAgICAgICAgICAgICAgIEJBQllMT04uVmVjdG9yMy5UcmFuc2Zvcm1Db29yZGluYXRlc1RvUmVmKHRoaXMuX2RlbHRhUG9zaXRpb24sIHRoaXMuX2RlbHRhUG9zaXRpb25NYXRyaXgsIHRoaXMuX2RlbHRhUG9zaXRpb25GaXhlZCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyAuLlxyXG4gICAgICAgICAgICAgICAgLy8gVXBkYXRlIFRyYW5zZm9ybSBEZWx0YSBSb3RhdGlvblxyXG4gICAgICAgICAgICAgICAgLy8gLi5cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnVwZGF0ZVJvb3RNb3Rpb25Sb3RhdGlvbiA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudHJhbnNmb3JtLmFkZFJvdGF0aW9uKDAsIHRoaXMuX2FuZ3VsYXJWZWxvY2l0eS55LCAwKTsgLy8gTm90ZTogQWx3YXlzIFJvdGF0ZSBUaGUgVHJhbnNmb3JtIE5vZGVcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIC4uXHJcbiAgICAgICAgICAgICAgICAvLyBVcGRhdGUgVHJhbnNmb3JtIERlbHRhIFBvc2l0aW9uXHJcbiAgICAgICAgICAgICAgICAvLyAuLlxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMudXBkYXRlUm9vdE1vdGlvblBvc2l0aW9uID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX3VwZGF0ZW1vZGUgPT09IDEgJiYgdGhpcy5tX2NoYXJhY3RlckNvbnRyb2xsZXIgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUT0RPOiBVc2UgQ2hhcmFjdGVyIENvbnRyb2xsZXIgVG8gTW92ZSBFbnRpdHkgLSA/Pz9cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5tX2NoYXJhY3RlckNvbnRyb2xsZXIgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVE9ETzogU2V0IENoYXJhY3RlciBDb250cm9sbGVyIFVwZGF0ZSBQb3NpdGlvbiBBbmQgU3luYyBXaXRoIFRyYW5zZm9ybSAoSWYgRXhpc3RzKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudHJhbnNmb3JtLnBvc2l0aW9uLmFkZEluUGxhY2UodGhpcy5fZGVsdGFQb3NpdGlvbkZpeGVkKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgY2hlY2tTdGF0ZU1hY2hpbmUobGF5ZXI6QkFCWUxPTi5JQW5pbWF0aW9uTGF5ZXIsIGRlbHRhVGltZTpudW1iZXIpOnZvaWQge1xyXG4gICAgICAgICAgICB0aGlzLl9jaGVja2Vycy5yZXN1bHQgPSBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLl9jaGVja2Vycy5vZmZlc3QgPSAwO1xyXG4gICAgICAgICAgICB0aGlzLl9jaGVja2Vycy5ibGVuZGluZyA9IDA7XHJcbiAgICAgICAgICAgIHRoaXMuX2NoZWNrZXJzLnRyaWdnZXJlZCA9IFtdO1xyXG4gICAgICAgICAgICAvLyAuLlxyXG4gICAgICAgICAgICAvLyBDaGVjayBBbmltYXRpb24gU3RhdGUgVHJhbnNpdGlvbnNcclxuICAgICAgICAgICAgLy8gLi5cclxuICAgICAgICAgICAgaWYgKGxheWVyLmFuaW1hdGlvblN0YXRlTWFjaGluZSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBsYXllci5hbmltYXRpb25TdGF0ZU1hY2hpbmUudGltZSArPSBkZWx0YVRpbWU7IC8vIFVwZGF0ZSBTdGF0ZSBUaW1lclxyXG4gICAgICAgICAgICAgICAgLy8gQ2hlY2sgTG9jYWwgVHJhbnNpdGlvbiBDb25kaXRpb25zXHJcbiAgICAgICAgICAgICAgICB0aGlzLmNoZWNrU3RhdGVUcmFuc2l0aW9ucyhsYXllciwgbGF5ZXIuYW5pbWF0aW9uU3RhdGVNYWNoaW5lLnRyYW5zaXRpb25zKTtcclxuICAgICAgICAgICAgICAgIC8vIENoZWNrIEFueSBTdGF0ZSBUcmFuc2l0aW9uIENvbmRpdGlvbnNcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9jaGVja2Vycy5yZXN1bHQgPT0gbnVsbCAmJiB0aGlzLl9tYWNoaW5lLnRyYW5zaXRpb25zICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNoZWNrU3RhdGVUcmFuc2l0aW9ucyhsYXllciwgdGhpcy5fbWFjaGluZS50cmFuc2l0aW9ucyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gLi5cclxuICAgICAgICAgICAgLy8gUmVzZXQgVHJhbnNpdGlvbiBDb25kaXRpb24gVHJpZ2dlcnNcclxuICAgICAgICAgICAgLy8gLi5cclxuICAgICAgICAgICAgaWYgKHRoaXMuX2NoZWNrZXJzLnRyaWdnZXJlZCAhPSBudWxsICYmIHRoaXMuX2NoZWNrZXJzLnRyaWdnZXJlZC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jaGVja2Vycy50cmlnZ2VyZWQuZm9yRWFjaCgodHJpZ2dlcikgPT4geyB0aGlzLnJlc2V0VHJpZ2dlcih0cmlnZ2VyKTsgfSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jaGVja2Vycy50cmlnZ2VyZWQgPSBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIC4uXHJcbiAgICAgICAgICAgIC8vIFNldCBDdXJyZW50IE1hY2hpbmUgU3RhdGUgUmVzdWx0XHJcbiAgICAgICAgICAgIC8vIC4uXHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9jaGVja2Vycy5yZXN1bHQgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wbGF5Q3VycmVudEFuaW1hdGlvblN0YXRlKGxheWVyLCB0aGlzLl9jaGVja2Vycy5yZXN1bHQsIHRoaXMuX2NoZWNrZXJzLmJsZW5kaW5nLCB0aGlzLl9jaGVja2Vycy5vZmZlc3QpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHByaXZhdGUgY2hlY2tTdGF0ZVRyYW5zaXRpb25zKGxheWVyOkJBQllMT04uSUFuaW1hdGlvbkxheWVyLCB0cmFuc2l0aW9uczpCQUJZTE9OLklUcmFuc2l0aW9uW10pOmFueSB7XHJcbiAgICAgICAgICAgIGxldCBjdXJyZW50QW5pbWF0aW9uUmF0ZTpudW1iZXIgPSBsYXllci5hbmltYXRpb25TdGF0ZU1hY2hpbmUucmF0ZTtcclxuICAgICAgICAgICAgbGV0IGN1cnJlbnRBbmltYXRpb25MZW5ndGg6bnVtYmVyID0gbGF5ZXIuYW5pbWF0aW9uU3RhdGVNYWNoaW5lLmxlbmd0aDtcclxuICAgICAgICAgICAgaWYgKHRyYW5zaXRpb25zICE9IG51bGwgJiYgdHJhbnNpdGlvbnMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgbGV0IGk6bnVtYmVyID0gMDsgbGV0IGlpOm51bWJlciA9IDA7IGxldCBzb2xvOm51bWJlciA9IC0xO1xyXG4gICAgICAgICAgICAgICAgLy8gLi5cclxuICAgICAgICAgICAgICAgIC8vIENoZWNrIEhhcyBTb2xvIFRyYW5zaXRpb25zXHJcbiAgICAgICAgICAgICAgICAvLyAuLlxyXG4gICAgICAgICAgICAgICAgZm9yKGkgPSAwOyBpIDwgdHJhbnNpdGlvbnMubGVuZ3RoOyBpKysgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRyYW5zaXRpb25zW2ldLnNvbG8gPT09IHRydWUgJiYgdHJhbnNpdGlvbnNbaV0ubXV0ZSA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc29sbyA9IGk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIC4uXHJcbiAgICAgICAgICAgICAgICAvLyBDaGVjayBTdGF0ZSBNYWNoaW5lIFRyYW5zaXRpb25zXHJcbiAgICAgICAgICAgICAgICAvLyAuLlxyXG4gICAgICAgICAgICAgICAgZm9yKGkgPSAwOyBpIDwgdHJhbnNpdGlvbnMubGVuZ3RoOyBpKysgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdHJhbnNpdGlvbjpCQUJZTE9OLklUcmFuc2l0aW9uID0gdHJhbnNpdGlvbnNbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRyYW5zaXRpb24ubGF5ZXJJbmRleCAhPT0gbGF5ZXIuaW5kZXgpIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0cmFuc2l0aW9uLm11dGUgPT09IHRydWUpIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzb2xvID49IDAgJiYgc29sbyAhPT0gaSkgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRyYW5zaXRpb25Pazpib29sZWFuID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gLi5cclxuICAgICAgICAgICAgICAgICAgICAvLyBDaGVjayBIYXMgVHJhbnNpdGlvbiBFeGl0IFRpbWVcclxuICAgICAgICAgICAgICAgICAgICAvLyAuLlxyXG4gICAgICAgICAgICAgICAgICAgIGxldCBleGl0VGltZVNlY3M6bnVtYmVyID0gMDtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgZXhpdFRpbWVFeHBpcmVkOmJvb2xlYW4gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0cmFuc2l0aW9uLmV4aXRUaW1lID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBleGl0VGltZVNlY3MgPSAoY3VycmVudEFuaW1hdGlvbkxlbmd0aCAqIHRyYW5zaXRpb24uZXhpdFRpbWUpOyAvLyBOb3RlOiBJcyBOb3JtYWxpemVkIFRyYW5zaXRpb24gRXhpdCBUaW1lXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4aXRUaW1lRXhwaXJlZCA9ICh0cmFuc2l0aW9uLmhhc0V4aXRUaW1lID09PSB0cnVlKSA/IChsYXllci5hbmltYXRpb25TdGF0ZU1hY2hpbmUudGltZSA+PSBleGl0VGltZVNlY3MpIDogdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRyYW5zaXRpb24uaGFzRXhpdFRpbWUgPT09IHRydWUgJiYgdHJhbnNpdGlvbi5pbnRTb3VyY2UgPT0gQkFCWUxPTi5JbnRlcnJ1cHRpb25Tb3VyY2UuTm9uZSAmJiBleGl0VGltZUV4cGlyZWQgPT09IGZhbHNlKSBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICAvLyAuLlxyXG4gICAgICAgICAgICAgICAgICAgIC8vIENoZWNrIEFsbCBUcmFuc2l0aW9uIENvbmRpdGlvbnNcclxuICAgICAgICAgICAgICAgICAgICAvLyAuLlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0cmFuc2l0aW9uLmNvbmRpdGlvbnMgIT0gbnVsbCAmJiB0cmFuc2l0aW9uLmNvbmRpdGlvbnMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcGFzc2VkOm51bWJlciA9IDA7IGxldCBjaGVja3M6bnVtYmVyID0gdHJhbnNpdGlvbi5jb25kaXRpb25zLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbi5jb25kaXRpb25zLmZvckVhY2goKGNvbmRpdGlvbikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcHR5cGU6QkFCWUxPTi5BbmltYXRvclBhcmFtZXRlclR5cGUgPSB0aGlzLl9wYXJhbWV0ZXJzLmdldChjb25kaXRpb24ucGFyYW1ldGVyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwdHlwZSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHB0eXBlID09IEJBQllMT04uQW5pbWF0b3JQYXJhbWV0ZXJUeXBlLkZsb2F0IHx8IHB0eXBlID09IEJBQllMT04uQW5pbWF0b3JQYXJhbWV0ZXJUeXBlLkludCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBudW1WYWx1ZTpudW1iZXIgPSBwYXJzZUZsb2F0KHRoaXMuZ2V0RmxvYXQoY29uZGl0aW9uLnBhcmFtZXRlcikudG9GaXhlZCgyKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb25kaXRpb24ubW9kZSA9PT0gQkFCWUxPTi5Db25kaXRpb25Nb2RlLkdyZWF0ZXIgJiYgbnVtVmFsdWUgPiBjb25kaXRpb24udGhyZXNob2xkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXNzZWQrKztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjb25kaXRpb24ubW9kZSA9PT0gQkFCWUxPTi5Db25kaXRpb25Nb2RlLkxlc3MgJiYgbnVtVmFsdWUgPCBjb25kaXRpb24udGhyZXNob2xkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXNzZWQrKztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjb25kaXRpb24ubW9kZSA9PT0gQkFCWUxPTi5Db25kaXRpb25Nb2RlLkVxdWFscyAmJiBudW1WYWx1ZSA9PT0gY29uZGl0aW9uLnRocmVzaG9sZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFzc2VkKys7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY29uZGl0aW9uLm1vZGUgPT09IEJBQllMT04uQ29uZGl0aW9uTW9kZS5Ob3RFcXVhbCAmJiBudW1WYWx1ZSAhPT0gY29uZGl0aW9uLnRocmVzaG9sZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFzc2VkKys7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHB0eXBlID09IEJBQllMT04uQW5pbWF0b3JQYXJhbWV0ZXJUeXBlLkJvb2wpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYm9vbFZhbHVlOmJvb2xlYW4gPSB0aGlzLmdldEJvb2woY29uZGl0aW9uLnBhcmFtZXRlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb25kaXRpb24ubW9kZSA9PT0gQkFCWUxPTi5Db25kaXRpb25Nb2RlLklmICYmIGJvb2xWYWx1ZSA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFzc2VkKys7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY29uZGl0aW9uLm1vZGUgPT09IEJBQllMT04uQ29uZGl0aW9uTW9kZS5JZk5vdCAmJiBib29sVmFsdWUgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXNzZWQrKztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocHR5cGUgPT0gQkFCWUxPTi5BbmltYXRvclBhcmFtZXRlclR5cGUuVHJpZ2dlcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0cmlnZ2VyVmFsdWU6Ym9vbGVhbiA9IHRoaXMuZ2V0VHJpZ2dlcihjb25kaXRpb24ucGFyYW1ldGVyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRyaWdnZXJWYWx1ZSA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFzc2VkKys7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBOb3RlOiBGb3IgTG9vcCBGYXN0ZXIgVGhhbiBJbmRleE9mXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgaW5kZXhPZlRyaWdnZXI6bnVtYmVyID0gLTE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX2NoZWNrZXJzLnRyaWdnZXJlZC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9jaGVja2Vycy50cmlnZ2VyZWRbaV0gPT09IGNvbmRpdGlvbi5wYXJhbWV0ZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXhPZlRyaWdnZXIgPSBpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVha1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbmRleE9mVHJpZ2dlciA8IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jaGVja2Vycy50cmlnZ2VyZWQucHVzaChjb25kaXRpb24ucGFyYW1ldGVyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0cmFuc2l0aW9uLmhhc0V4aXRUaW1lID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAuLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVE9ETyAtIENIRUNLIFRSQU5TSVRJT04gSU5URVJVUFRJT04gU09VUkNFIFNUQVRVU1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gLi5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFZhbGlkYXRlIFRyYW5zaXRpb24gSGFzIEV4aXQgVGltZSBBbmQgQWxsIENvbmRpdGlvbnMgUGFzc2VkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uT2sgPSAoZXhpdFRpbWVFeHBpcmVkID09PSB0cnVlICYmIHBhc3NlZCA9PT0gY2hlY2tzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFZhbGlkYXRlIEFsbCBUcmFuc2l0aW9uIENvbmRpdGlvbnMgUGFzc2VkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uT2sgPSAocGFzc2VkID09PSBjaGVja3MpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVmFsaWRhdGUgVHJhbnNpdGlvbiBIYXMgRXhwaXJlZCBFeGl0IFRpbWUgT25seVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uT2sgPSAodHJhbnNpdGlvbi5oYXNFeGl0VGltZSA9PT0gdHJ1ZSAmJiBleGl0VGltZUV4cGlyZWQgPT09IHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAvLyBWYWxpZGF0ZSBDdXJyZW50IFRyYW5zaXRpb24gRGVzdGluYXRpb24gQ2hhbmdlXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRyYW5zaXRpb25PayA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBibGVuZFJhdGU6bnVtYmVyID0gKGN1cnJlbnRBbmltYXRpb25SYXRlID4gMCkgPyBjdXJyZW50QW5pbWF0aW9uUmF0ZSA6IEJBQllMT04uQW5pbWF0aW9uU3RhdGUuRlBTO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkZXN0U3RhdGU6c3RyaW5nID0gKHRyYW5zaXRpb24uaXNFeGl0ID09PSBmYWxzZSkgPyB0cmFuc2l0aW9uLmRlc3RpbmF0aW9uIDogQkFCWUxPTi5BbmltYXRpb25TdGF0ZS5FWElUO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkdXJhdGlvblNlY3M6bnVtYmVyID0gKHRyYW5zaXRpb24uZml4ZWREdXJhdGlvbiA9PT0gdHJ1ZSkgPyB0cmFuc2l0aW9uLmR1cmF0aW9uIDogQkFCWUxPTi5TY2FsYXIuRGVub3JtYWxpemUodHJhbnNpdGlvbi5kdXJhdGlvbiwgMCwgY3VycmVudEFuaW1hdGlvbkxlbmd0aCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGJsZW5kaW5nU3BlZWQ6bnVtYmVyID0gQkFCWUxPTi5VdGlsaXRpZXMuQ29tcHV0ZUJsZW5kaW5nU3BlZWQoYmxlbmRSYXRlLCBkdXJhdGlvblNlY3MpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBub3JtYWxpemVkT2Zmc2V0Om51bWJlciA9IHRyYW5zaXRpb24ub2Zmc2V0OyAgLy8gTm90ZTogSXMgTm9ybWFsaXplZCBUcmFuc2l0aW9uIE9mZnNldCBUaW1lXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2NoZWNrZXJzLnJlc3VsdCA9IGRlc3RTdGF0ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2hlY2tlcnMub2ZmZXN0ID0gbm9ybWFsaXplZE9mZnNldDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2hlY2tlcnMuYmxlbmRpbmcgPSBibGVuZGluZ1NwZWVkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcHJpdmF0ZSBwbGF5Q3VycmVudEFuaW1hdGlvblN0YXRlKGxheWVyOkJBQllMT04uSUFuaW1hdGlvbkxheWVyLCBuYW1lOnN0cmluZywgYmxlbmRpbmc6bnVtYmVyLCBub3JtYWxpemVkT2Zmc2V0Om51bWJlciA9IDApOnZvaWQge1xyXG4gICAgICAgICAgICBpZiAobGF5ZXIgPT0gbnVsbCkgcmV0dXJuO1xyXG4gICAgICAgICAgICBpZiAobmFtZSA9PSBudWxsIHx8IG5hbWUgPT09IFwiXCIgfHwgbmFtZSA9PT0gQkFCWUxPTi5BbmltYXRpb25TdGF0ZS5FWElUKSByZXR1cm47XHJcbiAgICAgICAgICAgIGlmIChsYXllci5hbmltYXRpb25TdGF0ZU1hY2hpbmUgIT0gbnVsbCAmJiBsYXllci5hbmltYXRpb25TdGF0ZU1hY2hpbmUubmFtZSA9PT0gbmFtZSkgcmV0dXJuO1xyXG4gICAgICAgICAgICBjb25zdCBzdGF0ZTpCQUJZTE9OLk1hY2hpbmVTdGF0ZSA9IHRoaXMuZ2V0TWFjaGluZVN0YXRlKG5hbWUpO1xyXG4gICAgICAgICAgICAvLyAuLlxyXG4gICAgICAgICAgICAvLyBSZXNldCBBbmltYXRpb24gVGFyZ2V0IE1peGVyc1xyXG4gICAgICAgICAgICAvLyAuLlxyXG4gICAgICAgICAgICBpZiAodGhpcy5tX2FuaW1hdGlvblRhcmdldHMgIT0gbnVsbCAmJiB0aGlzLm1fYW5pbWF0aW9uVGFyZ2V0cy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1fYW5pbWF0aW9uVGFyZ2V0cy5mb3JFYWNoKCh0YXJnZXRlZEFuaW06QkFCWUxPTi5UYXJnZXRlZEFuaW1hdGlvbikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGFuaW1hdGlvblRhcmdldDphbnkgPSB0YXJnZXRlZEFuaW0udGFyZ2V0O1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChhbmltYXRpb25UYXJnZXQubWV0YWRhdGEgIT0gbnVsbCAmJiBhbmltYXRpb25UYXJnZXQubWV0YWRhdGEubWl4ZXIgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhbmltYXRpb25UYXJnZXRNaXhlcjpCQUJZTE9OLkFuaW1hdGlvbk1peGVyID0gYW5pbWF0aW9uVGFyZ2V0Lm1ldGFkYXRhLm1peGVyW2xheWVyLmluZGV4XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFuaW1hdGlvblRhcmdldE1peGVyICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvblRhcmdldE1peGVyLm9yaWdpbmFsTWF0cml4ID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvblRhcmdldE1peGVyLmJsZW5kaW5nRmFjdG9yID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvblRhcmdldE1peGVyLmJsZW5kaW5nU3BlZWQgPSBibGVuZGluZztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIC4uXHJcbiAgICAgICAgICAgIC8vIFBsYXkgQ3VycmVudCBMYXllciBBbmltYXRpb24gU3RhdGVcclxuICAgICAgICAgICAgLy8gLi5cclxuICAgICAgICAgICAgaWYgKHN0YXRlICE9IG51bGwgJiYgc3RhdGUubGF5ZXJJbmRleCA9PT0gbGF5ZXIuaW5kZXgpIHtcclxuICAgICAgICAgICAgICAgIHN0YXRlLnRpbWUgPSAwO1xyXG4gICAgICAgICAgICAgICAgc3RhdGUucGxheWVkID0gMDtcclxuICAgICAgICAgICAgICAgIHN0YXRlLmludGVycnVwdGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBsYXllci5hbmltYXRpb25UaW1lID0gQkFCWUxPTi5TY2FsYXIuQ2xhbXAobm9ybWFsaXplZE9mZnNldCk7XHJcbiAgICAgICAgICAgICAgICBsYXllci5hbmltYXRpb25Ob3JtYWwgPSAwO1xyXG4gICAgICAgICAgICAgICAgbGF5ZXIuYW5pbWF0aW9uRmlyc3RSdW4gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgbGF5ZXIuYW5pbWF0aW9uRW5kRnJhbWUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIGxheWVyLmFuaW1hdGlvbkxvb3BGcmFtZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgbGF5ZXIuYW5pbWF0aW9uTG9vcENvdW50ID0gMDtcclxuICAgICAgICAgICAgICAgIGxheWVyLmFuaW1hdGlvbkxvb3BFdmVudHMgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgbGF5ZXIuYW5pbWF0aW9uU3RhdGVNYWNoaW5lID0gc3RhdGU7XHJcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLndhcm4oXCI+Pj4gUGxheSBBbmltYXRpb24gU3RhdGU6IFwiICsgdGhpcy50cmFuc2Zvcm0ubmFtZSArIFwiIC0tPiBcIiArIG5hbWUgKyBcIiAtLT4gRm9vdCBJSzogXCIgKyBsYXllci5hbmltYXRpb25TdGF0ZU1hY2hpbmUuaUtPbkZlZXQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHByaXZhdGUgc3RvcEN1cnJlbnRBbmltYXRpb25TdGF0ZShsYXllcjpCQUJZTE9OLklBbmltYXRpb25MYXllcik6dm9pZCB7XHJcbiAgICAgICAgICAgIGlmIChsYXllciA9PSBudWxsKSByZXR1cm47XHJcbiAgICAgICAgICAgIC8vIC4uXHJcbiAgICAgICAgICAgIC8vIFJlc2V0IEFuaW1hdGlvbiBUYXJnZXQgTWl4ZXJzXHJcbiAgICAgICAgICAgIC8vIC4uXHJcbiAgICAgICAgICAgIGlmICh0aGlzLm1fYW5pbWF0aW9uVGFyZ2V0cyAhPSBudWxsICYmIHRoaXMubV9hbmltYXRpb25UYXJnZXRzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubV9hbmltYXRpb25UYXJnZXRzLmZvckVhY2goKHRhcmdldGVkQW5pbTpCQUJZTE9OLlRhcmdldGVkQW5pbWF0aW9uKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYW5pbWF0aW9uVGFyZ2V0OmFueSA9IHRhcmdldGVkQW5pbS50YXJnZXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFuaW1hdGlvblRhcmdldC5tZXRhZGF0YSAhPSBudWxsICYmIGFuaW1hdGlvblRhcmdldC5tZXRhZGF0YS5taXhlciAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGFuaW1hdGlvblRhcmdldE1peGVyOkJBQllMT04uQW5pbWF0aW9uTWl4ZXIgPSBhbmltYXRpb25UYXJnZXQubWV0YWRhdGEubWl4ZXJbbGF5ZXIuaW5kZXhdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYW5pbWF0aW9uVGFyZ2V0TWl4ZXIgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uVGFyZ2V0TWl4ZXIub3JpZ2luYWxNYXRyaXggPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uVGFyZ2V0TWl4ZXIuYmxlbmRpbmdGYWN0b3IgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uVGFyZ2V0TWl4ZXIuYmxlbmRpbmdTcGVlZCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyAuLlxyXG4gICAgICAgICAgICAvLyBTdG9wIEN1cnJlbnQgTGF5ZXIgQW5pbWF0aW9uIFN0YXRlXHJcbiAgICAgICAgICAgIC8vIC4uXHJcbiAgICAgICAgICAgIGxheWVyLmFuaW1hdGlvblRpbWUgPSAwO1xyXG4gICAgICAgICAgICBsYXllci5hbmltYXRpb25Ob3JtYWwgPSAwO1xyXG4gICAgICAgICAgICBsYXllci5hbmltYXRpb25GaXJzdFJ1biA9IHRydWU7XHJcbiAgICAgICAgICAgIGxheWVyLmFuaW1hdGlvbkVuZEZyYW1lID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGxheWVyLmFuaW1hdGlvbkxvb3BGcmFtZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICBsYXllci5hbmltYXRpb25Mb29wQ291bnQgPSAwO1xyXG4gICAgICAgICAgICBsYXllci5hbmltYXRpb25Mb29wRXZlbnRzID0gbnVsbDtcclxuICAgICAgICAgICAgbGF5ZXIuYW5pbWF0aW9uU3RhdGVNYWNoaW5lID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcHJpdmF0ZSBjaGVja0F2YXRhclRyYW5zZm9ybVBhdGgobGF5ZXI6QkFCWUxPTi5JQW5pbWF0aW9uTGF5ZXIsIHRyYW5zZm9ybVBhdGg6c3RyaW5nKTpib29sZWFuIHtcclxuICAgICAgICAgICAgbGV0IHJlc3VsdDpib29sZWFuID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGlmIChsYXllci5hbmltYXRpb25NYXNrTWFwICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHRyYW5zZm9ybUluZGV4Om51bWJlciA9IGxheWVyLmFuaW1hdGlvbk1hc2tNYXAuZ2V0KHRyYW5zZm9ybVBhdGgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRyYW5zZm9ybUluZGV4ICE9IG51bGwgJiYgdHJhbnNmb3JtSW5kZXggPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcHJpdmF0ZSBmaWx0ZXJUYXJnZXRBdmF0YXJNYXNrKGxheWVyOkJBQllMT04uSUFuaW1hdGlvbkxheWVyLCB0YXJnZXQ6QkFCWUxPTi5UcmFuc2Zvcm1Ob2RlKTpib29sZWFuIHtcclxuICAgICAgICAgICAgbGV0IHJlc3VsdDpib29sZWFuID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGlmICh0YXJnZXQubWV0YWRhdGEgIT0gbnVsbCAmJiB0YXJnZXQubWV0YWRhdGEudW5pdHkgIT0gbnVsbCAmJiB0YXJnZXQubWV0YWRhdGEudW5pdHkuYm9uZSAhPSBudWxsICYmIHRhcmdldC5tZXRhZGF0YS51bml0eS5ib25lICE9PSBcIlwiKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0cmFuc2Zvcm1QYXRoOnN0cmluZyA9IHRhcmdldC5tZXRhZGF0YS51bml0eS5ib25lO1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5jaGVja0F2YXRhclRyYW5zZm9ybVBhdGgobGF5ZXIsIHRyYW5zZm9ybVBhdGgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHByaXZhdGUgc29ydFdlaWdodGVkQmxlbmRpbmdMaXN0KHdlaWdodExpc3Q6QkFCWUxPTi5JQmxlbmRUcmVlQ2hpbGRbXSk6dm9pZCB7XHJcbiAgICAgICAgICAgIGlmICh3ZWlnaHRMaXN0ICE9IG51bGwgJiYgd2VpZ2h0TGlzdC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBTb3J0IEluIERlc2NlbmRpbmcgT3JkZXJcclxuICAgICAgICAgICAgICAgIHdlaWdodExpc3Quc29ydCgobGVmdCwgcmlnaHQpOiBudW1iZXIgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChsZWZ0LndlaWdodCA8IHJpZ2h0LndlaWdodCkgcmV0dXJuIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxlZnQud2VpZ2h0ID4gcmlnaHQud2VpZ2h0KSByZXR1cm4gLTE7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDA7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBwcml2YXRlIGNvbXB1dGVXZWlnaHRlZEZyYW1lUmF0aW8od2VpZ2h0TGlzdDpCQUJZTE9OLklCbGVuZFRyZWVDaGlsZFtdKTpudW1iZXIge1xyXG4gICAgICAgICAgICBsZXQgcmVzdWx0Om51bWJlciA9IDEuMDtcclxuICAgICAgICAgICAgaWYgKHdlaWdodExpc3QgIT0gbnVsbCAmJiB3ZWlnaHRMaXN0Lmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc29ydFdlaWdodGVkQmxlbmRpbmdMaXN0KHdlaWdodExpc3QpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fYmxlbmRXZWlnaHRzLnByaW1hcnkgPSB3ZWlnaHRMaXN0WzBdO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcHJpbWFyeVdlaWdodDpudW1iZXIgPSB0aGlzLl9ibGVuZFdlaWdodHMucHJpbWFyeS53ZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICBpZiAocHJpbWFyeVdlaWdodCA8IDEuMCAmJiB3ZWlnaHRMaXN0Lmxlbmd0aCA+IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9ibGVuZFdlaWdodHMuc2Vjb25kYXJ5ID0gd2VpZ2h0TGlzdFsxXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIC4uXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fYmxlbmRXZWlnaHRzLnByaW1hcnkgIT0gbnVsbCAmJiB0aGlzLl9ibGVuZFdlaWdodHMuc2Vjb25kYXJ5ICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBmcmFtZVdlaWdodERlbHRhOm51bWJlciA9IEJBQllMT04uU2NhbGFyLkNsYW1wKHRoaXMuX2JsZW5kV2VpZ2h0cy5wcmltYXJ5LndlaWdodCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gQkFCWUxPTi5TY2FsYXIuTGVycCh0aGlzLl9ibGVuZFdlaWdodHMuc2Vjb25kYXJ5LnJhdGlvLCB0aGlzLl9ibGVuZFdlaWdodHMucHJpbWFyeS5yYXRpbywgZnJhbWVXZWlnaHREZWx0YSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX2JsZW5kV2VpZ2h0cy5wcmltYXJ5ICE9IG51bGwgJiYgdGhpcy5fYmxlbmRXZWlnaHRzLnNlY29uZGFyeSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5fYmxlbmRXZWlnaHRzLnByaW1hcnkucmF0aW87XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbiAgICAgICAgLy8gQmxlbmQgVHJlZSBCcmFuY2hlcyAtICBIZWxwZXIgRnVuY3Rpb25zXHJcbiAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuXHJcbiAgICAgICAgcHJpdmF0ZSBzZXR1cFRyZWVCcmFuY2hlcyh0cmVlOkJBQllMT04uSUJsZW5kVHJlZSk6dm9pZCB7XHJcbiAgICAgICAgICAgIGlmICh0cmVlICE9IG51bGwgJiYgdHJlZS5jaGlsZHJlbiAhPSBudWxsICYmIHRyZWUuY2hpbGRyZW4ubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgdHJlZS5jaGlsZHJlbi5mb3JFYWNoKChjaGlsZCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjaGlsZC50eXBlID09PSBCQUJZTE9OLk1vdGlvblR5cGUuVHJlZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldHVwVHJlZUJyYW5jaGVzKGNoaWxkLnN1YnRyZWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY2hpbGQudHlwZSA9PT0gQkFCWUxPTi5Nb3Rpb25UeXBlLkNsaXApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNoaWxkLm1vdGlvbiAhPSBudWxsICYmIGNoaWxkLm1vdGlvbiAhPT0gXCJcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQud2VpZ2h0ID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkLnJhdGlvID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkLnRyYWNrID0gdGhpcy5nZXRBbmltYXRpb25Hcm91cChjaGlsZC5tb3Rpb24pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNoaWxkLnRyYWNrICE9IG51bGwpIGNoaWxkLnJhdGlvID0gKEJBQllMT04uQW5pbWF0aW9uU3RhdGUuVElNRSAvIGNoaWxkLnRyYWNrLnRvKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHByaXZhdGUgcGFyc2VUcmVlQnJhbmNoZXMobGF5ZXI6QkFCWUxPTi5JQW5pbWF0aW9uTGF5ZXIsIHRyZWU6QkFCWUxPTi5JQmxlbmRUcmVlLCBwYXJlbnRXZWlnaHQ6bnVtYmVyLCB3ZWlnaHRMaXN0OkJBQllMT04uSUJsZW5kVHJlZUNoaWxkW10pOnZvaWQge1xyXG4gICAgICAgICAgICBpZiAodHJlZSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICB0cmVlLnZhbHVlUGFyYW1ldGVyWCA9ICh0cmVlLmJsZW5kUGFyYW1ldGVyWCAhPSBudWxsKSA/IHBhcnNlRmxvYXQodGhpcy5nZXRGbG9hdCh0cmVlLmJsZW5kUGFyYW1ldGVyWCkudG9GaXhlZCgyKSkgOiAwO1xyXG4gICAgICAgICAgICAgICAgdHJlZS52YWx1ZVBhcmFtZXRlclkgPSAodHJlZS5ibGVuZFBhcmFtZXRlclkgIT0gbnVsbCkgPyBwYXJzZUZsb2F0KHRoaXMuZ2V0RmxvYXQodHJlZS5ibGVuZFBhcmFtZXRlclkpLnRvRml4ZWQoMikpIDogMDtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCh0cmVlLmJsZW5kVHlwZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgQkFCWUxPTi5CbGVuZFRyZWVUeXBlLlNpbXBsZTFEOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBhcnNlMURTaW1wbGVUcmVlQnJhbmNoZXMobGF5ZXIsIHRyZWUsIHBhcmVudFdlaWdodCwgd2VpZ2h0TGlzdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgQkFCWUxPTi5CbGVuZFRyZWVUeXBlLlNpbXBsZURpcmVjdGlvbmFsMkQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGFyc2UyRFNpbXBsZURpcmVjdGlvbmFsVHJlZUJyYW5jaGVzKGxheWVyLCB0cmVlLCBwYXJlbnRXZWlnaHQsIHdlaWdodExpc3QpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIEJBQllMT04uQmxlbmRUcmVlVHlwZS5GcmVlZm9ybURpcmVjdGlvbmFsMkQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGFyc2UyREZyZWVmb3JtRGlyZWN0aW9uYWxUcmVlQnJhbmNoZXMobGF5ZXIsIHRyZWUsIHBhcmVudFdlaWdodCwgd2VpZ2h0TGlzdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgQkFCWUxPTi5CbGVuZFRyZWVUeXBlLkZyZWVmb3JtQ2FydGVzaWFuMkQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGFyc2UyREZyZWVmb3JtQ2FydGVzaWFuVHJlZUJyYW5jaGVzKGxheWVyLCB0cmVlLCBwYXJlbnRXZWlnaHQsIHdlaWdodExpc3QpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBwcml2YXRlIHBhcnNlMURTaW1wbGVUcmVlQnJhbmNoZXMobGF5ZXI6QkFCWUxPTi5JQW5pbWF0aW9uTGF5ZXIsIHRyZWU6QkFCWUxPTi5JQmxlbmRUcmVlLCBwYXJlbnRXZWlnaHQ6bnVtYmVyLCB3ZWlnaHRMaXN0OkJBQllMT04uSUJsZW5kVHJlZUNoaWxkW10pOnZvaWQge1xyXG4gICAgICAgICAgICBpZiAodHJlZSAhPSBudWxsICYmIHRyZWUuY2hpbGRyZW4gIT0gbnVsbCAmJiB0cmVlLmNoaWxkcmVuLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGJsZW5kVHJlZUFycmF5IDogQkFCWUxPTi5CbGVuZFRyZWVWYWx1ZVtdID0gW107XHJcbiAgICAgICAgICAgICAgICB0cmVlLmNoaWxkcmVuLmZvckVhY2goKGNoaWxkOkJBQllMT04uSUJsZW5kVHJlZUNoaWxkKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2hpbGQud2VpZ2h0ID0gMDsgLy8gTm90ZTogUmVzZXQgV2VpZ2h0IFZhbHVlXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaXRlbSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlOiBjaGlsZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbW90aW9uOiBjaGlsZC5tb3Rpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvc1g6IGNoaWxkLnRocmVzaG9sZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcG9zWTogY2hpbGQudGhyZXNob2xkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB3ZWlnaHQ6IGNoaWxkLndlaWdodFxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgYmxlbmRUcmVlQXJyYXkucHVzaChpdGVtKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgQkFCWUxPTi5CbGVuZFRyZWVTeXN0ZW0uQ2FsY3VsYXRlMURTaW1wbGVCbGVuZFRyZWUodHJlZS52YWx1ZVBhcmFtZXRlclgsIGJsZW5kVHJlZUFycmF5KTtcclxuICAgICAgICAgICAgICAgIGJsZW5kVHJlZUFycmF5LmZvckVhY2goKGVsZW1lbnQ6QkFCWUxPTi5CbGVuZFRyZWVWYWx1ZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChlbGVtZW50LnNvdXJjZSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuc291cmNlLndlaWdodCA9IGVsZW1lbnQud2VpZ2h0O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgdHJlZS5jaGlsZHJlbi5mb3JFYWNoKChjaGlsZDpCQUJZTE9OLklCbGVuZFRyZWVDaGlsZCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNoaWxkLndlaWdodCAqPSBwYXJlbnRXZWlnaHQ7IC8vIE5vdGU6IFNjYWxlIFdlaWdodCBWYWx1ZVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjaGlsZC50eXBlID09PSBCQUJZTE9OLk1vdGlvblR5cGUuQ2xpcCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hpbGQud2VpZ2h0ID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2VpZ2h0TGlzdC5wdXNoKGNoaWxkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoY2hpbGQudHlwZSA9PT0gQkFCWUxPTi5Nb3Rpb25UeXBlLlRyZWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wYXJzZVRyZWVCcmFuY2hlcyhsYXllciwgY2hpbGQuc3VidHJlZSwgY2hpbGQud2VpZ2h0LCB3ZWlnaHRMaXN0KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBwcml2YXRlIHBhcnNlMkRTaW1wbGVEaXJlY3Rpb25hbFRyZWVCcmFuY2hlcyhsYXllcjpCQUJZTE9OLklBbmltYXRpb25MYXllciwgdHJlZTpCQUJZTE9OLklCbGVuZFRyZWUsIHBhcmVudFdlaWdodDpudW1iZXIsIHdlaWdodExpc3Q6QkFCWUxPTi5JQmxlbmRUcmVlQ2hpbGRbXSk6dm9pZCB7XHJcbiAgICAgICAgICAgIGlmICh0cmVlICE9IG51bGwgJiYgdHJlZS5jaGlsZHJlbiAhPSBudWxsICYmIHRyZWUuY2hpbGRyZW4ubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYmxlbmRUcmVlQXJyYXkgOiBCQUJZTE9OLkJsZW5kVHJlZVZhbHVlW10gPSBbXTtcclxuICAgICAgICAgICAgICAgIHRyZWUuY2hpbGRyZW4uZm9yRWFjaCgoY2hpbGQ6QkFCWUxPTi5JQmxlbmRUcmVlQ2hpbGQpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjaGlsZC53ZWlnaHQgPSAwOyAvLyBOb3RlOiBSZXNldCBXZWlnaHQgVmFsdWVcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBpdGVtID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2U6IGNoaWxkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb3Rpb246IGNoaWxkLm1vdGlvbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgcG9zWDogY2hpbGQucG9zaXRpb25YLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwb3NZOiBjaGlsZC5wb3NpdGlvblksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdlaWdodDogY2hpbGQud2VpZ2h0XHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICBibGVuZFRyZWVBcnJheS5wdXNoKGl0ZW0pO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBCQUJZTE9OLkJsZW5kVHJlZVN5c3RlbS5DYWxjdWxhdGUyREZyZWVmb3JtRGlyZWN0aW9uYWwodHJlZS52YWx1ZVBhcmFtZXRlclgsIHRyZWUudmFsdWVQYXJhbWV0ZXJZLCBibGVuZFRyZWVBcnJheSk7XHJcbiAgICAgICAgICAgICAgICBibGVuZFRyZWVBcnJheS5mb3JFYWNoKChlbGVtZW50OkJBQllMT04uQmxlbmRUcmVlVmFsdWUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZWxlbWVudC5zb3VyY2UgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnNvdXJjZS53ZWlnaHQgPSBlbGVtZW50LndlaWdodDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHRyZWUuY2hpbGRyZW4uZm9yRWFjaCgoY2hpbGQ6QkFCWUxPTi5JQmxlbmRUcmVlQ2hpbGQpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjaGlsZC53ZWlnaHQgKj0gcGFyZW50V2VpZ2h0OyAvLyBOb3RlOiBTY2FsZSBXZWlnaHQgVmFsdWVcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY2hpbGQudHlwZSA9PT0gQkFCWUxPTi5Nb3Rpb25UeXBlLkNsaXApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNoaWxkLndlaWdodCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdlaWdodExpc3QucHVzaChjaGlsZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoaWxkLnR5cGUgPT09IEJBQllMT04uTW90aW9uVHlwZS5UcmVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGFyc2VUcmVlQnJhbmNoZXMobGF5ZXIsIGNoaWxkLnN1YnRyZWUsIGNoaWxkLndlaWdodCwgd2VpZ2h0TGlzdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcHJpdmF0ZSBwYXJzZTJERnJlZWZvcm1EaXJlY3Rpb25hbFRyZWVCcmFuY2hlcyhsYXllcjpCQUJZTE9OLklBbmltYXRpb25MYXllciwgdHJlZTpCQUJZTE9OLklCbGVuZFRyZWUsIHBhcmVudFdlaWdodDpudW1iZXIsIHdlaWdodExpc3Q6QkFCWUxPTi5JQmxlbmRUcmVlQ2hpbGRbXSk6dm9pZCB7XHJcbiAgICAgICAgICAgIGlmICh0cmVlICE9IG51bGwgJiYgdHJlZS5jaGlsZHJlbiAhPSBudWxsICYmIHRyZWUuY2hpbGRyZW4ubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYmxlbmRUcmVlQXJyYXkgOiBCQUJZTE9OLkJsZW5kVHJlZVZhbHVlW10gPSBbXTtcclxuICAgICAgICAgICAgICAgIHRyZWUuY2hpbGRyZW4uZm9yRWFjaCgoY2hpbGQ6QkFCWUxPTi5JQmxlbmRUcmVlQ2hpbGQpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjaGlsZC53ZWlnaHQgPSAwOyAvLyBOb3RlOiBSZXNldCBXZWlnaHQgVmFsdWVcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBpdGVtID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2U6IGNoaWxkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb3Rpb246IGNoaWxkLm1vdGlvbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgcG9zWDogY2hpbGQucG9zaXRpb25YLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwb3NZOiBjaGlsZC5wb3NpdGlvblksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdlaWdodDogY2hpbGQud2VpZ2h0XHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICBibGVuZFRyZWVBcnJheS5wdXNoKGl0ZW0pO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBCQUJZTE9OLkJsZW5kVHJlZVN5c3RlbS5DYWxjdWxhdGUyREZyZWVmb3JtRGlyZWN0aW9uYWwodHJlZS52YWx1ZVBhcmFtZXRlclgsIHRyZWUudmFsdWVQYXJhbWV0ZXJZLCBibGVuZFRyZWVBcnJheSk7XHJcbiAgICAgICAgICAgICAgICBibGVuZFRyZWVBcnJheS5mb3JFYWNoKChlbGVtZW50OkJBQllMT04uQmxlbmRUcmVlVmFsdWUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZWxlbWVudC5zb3VyY2UgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnNvdXJjZS53ZWlnaHQgPSBlbGVtZW50LndlaWdodDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHRyZWUuY2hpbGRyZW4uZm9yRWFjaCgoY2hpbGQ6QkFCWUxPTi5JQmxlbmRUcmVlQ2hpbGQpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjaGlsZC53ZWlnaHQgKj0gcGFyZW50V2VpZ2h0OyAvLyBOb3RlOiBTY2FsZSBXZWlnaHQgVmFsdWVcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY2hpbGQudHlwZSA9PT0gQkFCWUxPTi5Nb3Rpb25UeXBlLkNsaXApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNoaWxkLndlaWdodCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdlaWdodExpc3QucHVzaChjaGlsZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoaWxkLnR5cGUgPT09IEJBQllMT04uTW90aW9uVHlwZS5UcmVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGFyc2VUcmVlQnJhbmNoZXMobGF5ZXIsIGNoaWxkLnN1YnRyZWUsIGNoaWxkLndlaWdodCwgd2VpZ2h0TGlzdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcHJpdmF0ZSBwYXJzZTJERnJlZWZvcm1DYXJ0ZXNpYW5UcmVlQnJhbmNoZXMobGF5ZXI6QkFCWUxPTi5JQW5pbWF0aW9uTGF5ZXIsIHRyZWU6QkFCWUxPTi5JQmxlbmRUcmVlLCBwYXJlbnRXZWlnaHQ6bnVtYmVyLCB3ZWlnaHRMaXN0OkJBQllMT04uSUJsZW5kVHJlZUNoaWxkW10pOnZvaWQge1xyXG4gICAgICAgICAgICBpZiAodHJlZSAhPSBudWxsICYmIHRyZWUuY2hpbGRyZW4gIT0gbnVsbCAmJiB0cmVlLmNoaWxkcmVuLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGJsZW5kVHJlZUFycmF5IDogQkFCWUxPTi5CbGVuZFRyZWVWYWx1ZVtdID0gW107XHJcbiAgICAgICAgICAgICAgICB0cmVlLmNoaWxkcmVuLmZvckVhY2goKGNoaWxkOkJBQllMT04uSUJsZW5kVHJlZUNoaWxkKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2hpbGQud2VpZ2h0ID0gMDsgLy8gTm90ZTogUmVzZXQgV2VpZ2h0IFZhbHVlXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaXRlbSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlOiBjaGlsZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbW90aW9uOiBjaGlsZC5tb3Rpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvc1g6IGNoaWxkLnBvc2l0aW9uWCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcG9zWTogY2hpbGQucG9zaXRpb25ZLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB3ZWlnaHQ6IGNoaWxkLndlaWdodFxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgYmxlbmRUcmVlQXJyYXkucHVzaChpdGVtKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgQkFCWUxPTi5CbGVuZFRyZWVTeXN0ZW0uQ2FsY3VsYXRlMkRGcmVlZm9ybUNhcnRlc2lhbih0cmVlLnZhbHVlUGFyYW1ldGVyWCwgdHJlZS52YWx1ZVBhcmFtZXRlclksIGJsZW5kVHJlZUFycmF5KTtcclxuICAgICAgICAgICAgICAgIGJsZW5kVHJlZUFycmF5LmZvckVhY2goKGVsZW1lbnQ6QkFCWUxPTi5CbGVuZFRyZWVWYWx1ZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChlbGVtZW50LnNvdXJjZSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuc291cmNlLndlaWdodCA9IGVsZW1lbnQud2VpZ2h0O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgdHJlZS5jaGlsZHJlbi5mb3JFYWNoKChjaGlsZDpCQUJZTE9OLklCbGVuZFRyZWVDaGlsZCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNoaWxkLndlaWdodCAqPSBwYXJlbnRXZWlnaHQ7IC8vIE5vdGU6IFNjYWxlIFdlaWdodCBWYWx1ZVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjaGlsZC50eXBlID09PSBCQUJZTE9OLk1vdGlvblR5cGUuQ2xpcCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hpbGQud2VpZ2h0ID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2VpZ2h0TGlzdC5wdXNoKGNoaWxkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoY2hpbGQudHlwZSA9PT0gQkFCWUxPTi5Nb3Rpb25UeXBlLlRyZWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wYXJzZVRyZWVCcmFuY2hlcyhsYXllciwgY2hpbGQuc3VidHJlZSwgY2hpbGQud2VpZ2h0LCB3ZWlnaHRMaXN0KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbiAgICAvLyBTdXBwb3J0IENsYXNzZXMsIEJsZW5kIFRyZWUgVXRpbGl0aWVzXHJcbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcblxyXG4gICAgZXhwb3J0IGNsYXNzIEJsZW5kVHJlZVZhbHVlIHtcclxuICAgICAgICBwdWJsaWMgc291cmNlOkJBQllMT04uSUJsZW5kVHJlZUNoaWxkO1xyXG4gICAgICAgIHB1YmxpYyBtb3Rpb246IHN0cmluZztcclxuICAgICAgICBwdWJsaWMgcG9zWDogbnVtYmVyO1xyXG4gICAgICAgIHB1YmxpYyBwb3NZOiBudW1iZXI7XHJcbiAgICAgICAgcHVibGljIHdlaWdodDogbnVtYmVyO1xyXG4gICAgICAgIGNvbnN0cnVjdG9yKGNvbmZpZzogeyBzb3VyY2U6IEJBQllMT04uSUJsZW5kVHJlZUNoaWxkLCBtb3Rpb246IHN0cmluZywgcG9zWD86IG51bWJlciwgcG9zWT86IG51bWJlciwgd2VpZ2h0PzogbnVtYmVyIH0pIHtcclxuICAgICAgICAgICAgdGhpcy5zb3VyY2UgPSBjb25maWcuc291cmNlO1xyXG4gICAgICAgICAgICB0aGlzLm1vdGlvbiA9IGNvbmZpZy5tb3Rpb247XHJcbiAgICAgICAgICAgIHRoaXMucG9zWCA9IGNvbmZpZy5wb3NYIHx8IDA7XHJcbiAgICAgICAgICAgIHRoaXMucG9zWSA9IGNvbmZpZy5wb3NZIHx8IDA7XHJcbiAgICAgICAgICAgIHRoaXMud2VpZ2h0ID0gY29uZmlnLndlaWdodCB8fCAwO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGV4cG9ydCBjbGFzcyBCbGVuZFRyZWVVdGlscyB7XHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBDbGFtcFZhbHVlKG51bTogbnVtYmVyLCBtaW46IG51bWJlciwgbWF4OiBudW1iZXIpOm51bWJlciB7XHJcbiAgICAgICAgICAgIHJldHVybiBudW0gPD0gbWluID8gbWluIDogbnVtID49IG1heCA/IG1heCA6IG51bTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBHZXRTaWduZWRBbmdsZShhOiBCQUJZTE9OLlZlY3RvcjIsIGI6IEJBQllMT04uVmVjdG9yMik6bnVtYmVyIHtcclxuICAgICAgICAgICAgcmV0dXJuIE1hdGguYXRhbjIoYS54ICogYi55IC0gYS55ICogYi54LCBhLnggKiBiLnggKyBhLnkgKiBiLnkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBwdWJsaWMgc3RhdGljIEdldExpbmVhckludGVycG9sYXRpb24oeDA6IG51bWJlciwgeTA6IG51bWJlciwgeDE6IG51bWJlciwgeTE6IG51bWJlciwgeDogbnVtYmVyKTpudW1iZXIge1xyXG4gICAgICAgICAgICByZXR1cm4geTAgKyAoeCAtIHgwKSAqICgoeTEgLSB5MCkgLyAoeDEgLSB4MCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBwdWJsaWMgc3RhdGljIEdldFJpZ2h0TmVpZ2hib3VySW5kZXgoaW5wdXRYOiBudW1iZXIsIGJsZW5kVHJlZUFycmF5OiBCQUJZTE9OLkJsZW5kVHJlZVZhbHVlW10pOiBudW1iZXIge1xyXG4gICAgICAgICAgICBibGVuZFRyZWVBcnJheS5zb3J0KChhOiBCQUJZTE9OLkJsZW5kVHJlZVZhbHVlLCBiOiBCQUJZTE9OLkJsZW5kVHJlZVZhbHVlKSA9PiB7IHJldHVybiAoYS5wb3NYIC0gYi5wb3NYKTsgfSk7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYmxlbmRUcmVlQXJyYXkubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICAgICAgICAgIGlmIChibGVuZFRyZWVBcnJheVtpXS5wb3NYID4gaW5wdXRYKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIC0xO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGV4cG9ydCBjbGFzcyBCbGVuZFRyZWVTeXN0ZW0ge1xyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgQ2FsY3VsYXRlMURTaW1wbGVCbGVuZFRyZWUoaW5wdXRYOiBudW1iZXIsIGJsZW5kVHJlZUFycmF5OiBCQUJZTE9OLkJsZW5kVHJlZVZhbHVlW10pOnZvaWQge1xyXG4gICAgICAgICAgICBjb25zdCBmaXJzdEJsZW5kVHJlZTpCQUJZTE9OLkJsZW5kVHJlZVZhbHVlID0gYmxlbmRUcmVlQXJyYXlbMF07XHJcbiAgICAgICAgICAgIGNvbnN0IGxhc3RCbGVuZFRyZWU6QkFCWUxPTi5CbGVuZFRyZWVWYWx1ZSA9IGJsZW5kVHJlZUFycmF5W2JsZW5kVHJlZUFycmF5Lmxlbmd0aCAtIDFdO1xyXG4gICAgICAgICAgICBpZiAoaW5wdXRYIDw9IGZpcnN0QmxlbmRUcmVlLnBvc1gpIHtcclxuICAgICAgICAgICAgICAgIGZpcnN0QmxlbmRUcmVlLndlaWdodCA9IDE7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaW5wdXRYID49IGxhc3RCbGVuZFRyZWUucG9zWCkge1xyXG4gICAgICAgICAgICAgICAgbGFzdEJsZW5kVHJlZS53ZWlnaHQgPSAxO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcmlnaHROZWlnaGJvdXJCbGVuZFRyZWVJbmRleDpudW1iZXIgPSBCQUJZTE9OLkJsZW5kVHJlZVV0aWxzLkdldFJpZ2h0TmVpZ2hib3VySW5kZXgoaW5wdXRYLCBibGVuZFRyZWVBcnJheSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBsZWZ0TmVpZ2hib3VyOkJBQllMT04uQmxlbmRUcmVlVmFsdWUgPSBibGVuZFRyZWVBcnJheVtyaWdodE5laWdoYm91ckJsZW5kVHJlZUluZGV4IC0gMV07XHJcbiAgICAgICAgICAgICAgICBjb25zdCByaWdodE5laWdoYm91cjpCQUJZTE9OLkJsZW5kVHJlZVZhbHVlID0gYmxlbmRUcmVlQXJyYXlbcmlnaHROZWlnaGJvdXJCbGVuZFRyZWVJbmRleF07XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpbnRlcnBvbGF0ZWRWYWx1ZTpudW1iZXIgPSBCQUJZTE9OLkJsZW5kVHJlZVV0aWxzLkdldExpbmVhckludGVycG9sYXRpb24obGVmdE5laWdoYm91ci5wb3NYLCAxLCByaWdodE5laWdoYm91ci5wb3NYLCAwLCBpbnB1dFgpO1xyXG4gICAgICAgICAgICAgICAgbGVmdE5laWdoYm91ci53ZWlnaHQgPSBpbnRlcnBvbGF0ZWRWYWx1ZTtcclxuICAgICAgICAgICAgICAgIHJpZ2h0TmVpZ2hib3VyLndlaWdodCA9IDEgLSBsZWZ0TmVpZ2hib3VyLndlaWdodDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBwdWJsaWMgc3RhdGljIENhbGN1bGF0ZTJERnJlZWZvcm1EaXJlY3Rpb25hbChpbnB1dFg6IG51bWJlciwgaW5wdXRZOiBudW1iZXIsIGJsZW5kVHJlZUFycmF5OiBCQUJZTE9OLkJsZW5kVHJlZVZhbHVlW10pOnZvaWQge1xyXG4gICAgICAgICAgICBCQUJZTE9OLkJsZW5kVHJlZVN5c3RlbS5UZW1wVmVjdG9yMl9JUC5zZXQoaW5wdXRYLCBpbnB1dFkpO1xyXG4gICAgICAgICAgICBCQUJZTE9OLkJsZW5kVHJlZVN5c3RlbS5UZW1wVmVjdG9yMl9QT1NJLnNldCgwLDApO1xyXG4gICAgICAgICAgICBCQUJZTE9OLkJsZW5kVHJlZVN5c3RlbS5UZW1wVmVjdG9yMl9QT1NKLnNldCgwLDApO1xyXG4gICAgICAgICAgICBCQUJZTE9OLkJsZW5kVHJlZVN5c3RlbS5UZW1wVmVjdG9yMl9QT1NJUC5zZXQoMCwwKTtcclxuICAgICAgICAgICAgQkFCWUxPTi5CbGVuZFRyZWVTeXN0ZW0uVGVtcFZlY3RvcjJfUE9TSUouc2V0KDAsMCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGtEaXJTY2FsZTpudW1iZXIgPSAyO1xyXG4gICAgICAgICAgICBsZXQgdG90YWxXZWlnaHQ6bnVtYmVyID0gMDtcclxuICAgICAgICAgICAgbGV0IGlucHV0TGVuZ3RoOm51bWJlciA9IEJBQllMT04uQmxlbmRUcmVlU3lzdGVtLlRlbXBWZWN0b3IyX0lQLmxlbmd0aCgpO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJsZW5kVHJlZUFycmF5Lmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBibGVuZFRyZWU6QkFCWUxPTi5CbGVuZFRyZWVWYWx1ZSA9IGJsZW5kVHJlZUFycmF5W2ldO1xyXG4gICAgICAgICAgICAgICAgQkFCWUxPTi5CbGVuZFRyZWVTeXN0ZW0uVGVtcFZlY3RvcjJfUE9TSS5zZXQoYmxlbmRUcmVlLnBvc1gsIGJsZW5kVHJlZS5wb3NZKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHBvc0lMZW5ndGg6bnVtYmVyID0gQkFCWUxPTi5CbGVuZFRyZWVTeXN0ZW0uVGVtcFZlY3RvcjJfUE9TSS5sZW5ndGgoKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGlucHV0VG9Qb3NJTGVuZ3RoOm51bWJlciA9IChpbnB1dExlbmd0aCAtIHBvc0lMZW5ndGgpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcG9zSVRvSW5wdXRBbmdsZTpudW1iZXIgPSBCQUJZTE9OLkJsZW5kVHJlZVV0aWxzLkdldFNpZ25lZEFuZ2xlKEJBQllMT04uQmxlbmRUcmVlU3lzdGVtLlRlbXBWZWN0b3IyX1BPU0ksIEJBQllMT04uQmxlbmRUcmVlU3lzdGVtLlRlbXBWZWN0b3IyX0lQKTtcclxuICAgICAgICAgICAgICAgIGxldCB3ZWlnaHQ6bnVtYmVyID0gMTtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgYmxlbmRUcmVlQXJyYXkubGVuZ3RoOyArK2opIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaiA9PT0gaSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBCQUJZTE9OLkJsZW5kVHJlZVN5c3RlbS5UZW1wVmVjdG9yMl9QT1NKLnNldChibGVuZFRyZWVBcnJheVtqXS5wb3NYLCBibGVuZFRyZWVBcnJheVtqXS5wb3NZKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcG9zSkxlbmd0aDpudW1iZXIgPSBCQUJZTE9OLkJsZW5kVHJlZVN5c3RlbS5UZW1wVmVjdG9yMl9QT1NKLmxlbmd0aCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhdmVyYWdlTGVuZ3RoT2ZJSjpudW1iZXIgPSAocG9zSUxlbmd0aCArIHBvc0pMZW5ndGgpIC8gMjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWFnT2ZQb3NJVG9JbnB1dFBvczpudW1iZXIgPSAoaW5wdXRUb1Bvc0lMZW5ndGggLyBhdmVyYWdlTGVuZ3RoT2ZJSik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1hZ09mSUo6bnVtYmVyID0gKHBvc0pMZW5ndGggLSBwb3NJTGVuZ3RoKSAvIGF2ZXJhZ2VMZW5ndGhPZklKO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhbmdsZUlKOm51bWJlciA9IEJBQllMT04uQmxlbmRUcmVlVXRpbHMuR2V0U2lnbmVkQW5nbGUoQkFCWUxPTi5CbGVuZFRyZWVTeXN0ZW0uVGVtcFZlY3RvcjJfUE9TSSwgQkFCWUxPTi5CbGVuZFRyZWVTeXN0ZW0uVGVtcFZlY3RvcjJfUE9TSik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIEJBQllMT04uQmxlbmRUcmVlU3lzdGVtLlRlbXBWZWN0b3IyX1BPU0lQLnNldChtYWdPZlBvc0lUb0lucHV0UG9zLCBwb3NJVG9JbnB1dEFuZ2xlICoga0RpclNjYWxlKTsgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgQkFCWUxPTi5CbGVuZFRyZWVTeXN0ZW0uVGVtcFZlY3RvcjJfUE9TSUouc2V0KG1hZ09mSUosIGFuZ2xlSUogKiBrRGlyU2NhbGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBsZW5TcUlKOm51bWJlciA9IEJBQllMT04uQmxlbmRUcmVlU3lzdGVtLlRlbXBWZWN0b3IyX1BPU0lKLmxlbmd0aFNxdWFyZWQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG5ld1dlaWdodDpudW1iZXIgPSBCQUJZTE9OLlZlY3RvcjIuRG90KEJBQllMT04uQmxlbmRUcmVlU3lzdGVtLlRlbXBWZWN0b3IyX1BPU0lQLCBCQUJZTE9OLkJsZW5kVHJlZVN5c3RlbS5UZW1wVmVjdG9yMl9QT1NJSikgLyBsZW5TcUlKO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdXZWlnaHQgPSAxIC0gbmV3V2VpZ2h0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdXZWlnaHQgPSBCQUJZTE9OLkJsZW5kVHJlZVV0aWxzLkNsYW1wVmFsdWUobmV3V2VpZ2h0LCAwLCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2VpZ2h0ID0gTWF0aC5taW4obmV3V2VpZ2h0LCB3ZWlnaHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJsZW5kVHJlZS53ZWlnaHQgPSB3ZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICB0b3RhbFdlaWdodCArPSB3ZWlnaHQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZm9yIChjb25zdCBibGVuZFRyZWUgb2YgYmxlbmRUcmVlQXJyYXkpIHtcclxuICAgICAgICAgICAgICAgIGJsZW5kVHJlZS53ZWlnaHQgLz0gdG90YWxXZWlnaHQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBDYWxjdWxhdGUyREZyZWVmb3JtQ2FydGVzaWFuKGlucHV0WDogbnVtYmVyLCBpbnB1dFk6IG51bWJlciwgYmxlbmRUcmVlQXJyYXk6IEJBQllMT04uQmxlbmRUcmVlVmFsdWVbXSk6dm9pZCB7XHJcbiAgICAgICAgICAgIEJBQllMT04uQmxlbmRUcmVlU3lzdGVtLlRlbXBWZWN0b3IyX0lQLnNldChpbnB1dFgsIGlucHV0WSk7XHJcbiAgICAgICAgICAgIEJBQllMT04uQmxlbmRUcmVlU3lzdGVtLlRlbXBWZWN0b3IyX1BPU0kuc2V0KDAsMCk7XHJcbiAgICAgICAgICAgIEJBQllMT04uQmxlbmRUcmVlU3lzdGVtLlRlbXBWZWN0b3IyX1BPU0ouc2V0KDAsMCk7XHJcbiAgICAgICAgICAgIEJBQllMT04uQmxlbmRUcmVlU3lzdGVtLlRlbXBWZWN0b3IyX1BPU0lQLnNldCgwLDApO1xyXG4gICAgICAgICAgICBCQUJZTE9OLkJsZW5kVHJlZVN5c3RlbS5UZW1wVmVjdG9yMl9QT1NJSi5zZXQoMCwwKTtcclxuICAgICAgICAgICAgbGV0IHRvdGFsV2VpZ2h0Om51bWJlciA9IDA7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYmxlbmRUcmVlQXJyYXkubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGJsZW5kVHJlZTpCQUJZTE9OLkJsZW5kVHJlZVZhbHVlID0gYmxlbmRUcmVlQXJyYXlbaV07XHJcbiAgICAgICAgICAgICAgICBCQUJZTE9OLkJsZW5kVHJlZVN5c3RlbS5UZW1wVmVjdG9yMl9QT1NJLnNldChibGVuZFRyZWUucG9zWCwgYmxlbmRUcmVlLnBvc1kpO1xyXG4gICAgICAgICAgICAgICAgQkFCWUxPTi5CbGVuZFRyZWVTeXN0ZW0uVGVtcFZlY3RvcjJfSVAuc3VidHJhY3RUb1JlZihCQUJZTE9OLkJsZW5kVHJlZVN5c3RlbS5UZW1wVmVjdG9yMl9QT1NJLCBCQUJZTE9OLkJsZW5kVHJlZVN5c3RlbS5UZW1wVmVjdG9yMl9QT1NJUCk7XHJcbiAgICAgICAgICAgICAgICBsZXQgd2VpZ2h0Om51bWJlciA9IDE7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGJsZW5kVHJlZUFycmF5Lmxlbmd0aDsgKytqKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGogPT09IGkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgQkFCWUxPTi5CbGVuZFRyZWVTeXN0ZW0uVGVtcFZlY3RvcjJfUE9TSi5zZXQoYmxlbmRUcmVlQXJyYXlbal0ucG9zWCwgYmxlbmRUcmVlQXJyYXlbal0ucG9zWSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIEJBQllMT04uQmxlbmRUcmVlU3lzdGVtLlRlbXBWZWN0b3IyX1BPU0ouc3VidHJhY3RUb1JlZihCQUJZTE9OLkJsZW5kVHJlZVN5c3RlbS5UZW1wVmVjdG9yMl9QT1NJLCBCQUJZTE9OLkJsZW5kVHJlZVN5c3RlbS5UZW1wVmVjdG9yMl9QT1NJSik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGxlblNxSUo6bnVtYmVyID0gQkFCWUxPTi5CbGVuZFRyZWVTeXN0ZW0uVGVtcFZlY3RvcjJfUE9TSUoubGVuZ3RoU3F1YXJlZCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgbmV3V2VpZ2h0Om51bWJlciA9IEJBQllMT04uVmVjdG9yMi5Eb3QoQkFCWUxPTi5CbGVuZFRyZWVTeXN0ZW0uVGVtcFZlY3RvcjJfUE9TSVAsIEJBQllMT04uQmxlbmRUcmVlU3lzdGVtLlRlbXBWZWN0b3IyX1BPU0lKKSAvIGxlblNxSUo7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld1dlaWdodCA9IDEgLSBuZXdXZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld1dlaWdodCA9IEJBQllMT04uQmxlbmRUcmVlVXRpbHMuQ2xhbXBWYWx1ZShuZXdXZWlnaHQsIDAsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3ZWlnaHQgPSBNYXRoLm1pbih3ZWlnaHQsIG5ld1dlaWdodCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYmxlbmRUcmVlLndlaWdodCA9IHdlaWdodDtcclxuICAgICAgICAgICAgICAgIHRvdGFsV2VpZ2h0ICs9IHdlaWdodDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGJsZW5kVHJlZSBvZiBibGVuZFRyZWVBcnJheSkge1xyXG4gICAgICAgICAgICAgICAgYmxlbmRUcmVlLndlaWdodCAvPSB0b3RhbFdlaWdodDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBwcml2YXRlIHN0YXRpYyBUZW1wVmVjdG9yMl9JUDpCQUJZTE9OLlZlY3RvcjIgPSBuZXcgQkFCWUxPTi5WZWN0b3IyKDAsMCk7XHJcbiAgICAgICAgcHJpdmF0ZSBzdGF0aWMgVGVtcFZlY3RvcjJfUE9TSTpCQUJZTE9OLlZlY3RvcjIgPSBuZXcgQkFCWUxPTi5WZWN0b3IyKDAsMCk7XHJcbiAgICAgICAgcHJpdmF0ZSBzdGF0aWMgVGVtcFZlY3RvcjJfUE9TSjpCQUJZTE9OLlZlY3RvcjIgPSBuZXcgQkFCWUxPTi5WZWN0b3IyKDAsMCk7XHJcbiAgICAgICAgcHJpdmF0ZSBzdGF0aWMgVGVtcFZlY3RvcjJfUE9TSVA6QkFCWUxPTi5WZWN0b3IyID0gbmV3IEJBQllMT04uVmVjdG9yMigwLDApO1xyXG4gICAgICAgIHByaXZhdGUgc3RhdGljIFRlbXBWZWN0b3IyX1BPU0lKOkJBQllMT04uVmVjdG9yMiA9IG5ldyBCQUJZTE9OLlZlY3RvcjIoMCwwKTtcclxuICAgIH1cclxuXHJcbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbiAgICAvLyBTdXBwb3J0IENsYXNzZXMsIEVudW1zIEFuZCBJbnRlcmZhY2VzXHJcbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcblxyXG4gICAgZXhwb3J0IGNsYXNzIE1hY2hpbmVTdGF0ZSB7XHJcbiAgICAgICAgcHVibGljIGhhc2g6bnVtYmVyO1xyXG4gICAgICAgIHB1YmxpYyBuYW1lOnN0cmluZztcclxuICAgICAgICBwdWJsaWMgdGFnOnN0cmluZztcclxuICAgICAgICBwdWJsaWMgdGltZTpudW1iZXI7XHJcbiAgICAgICAgcHVibGljIHR5cGU6QkFCWUxPTi5Nb3Rpb25UeXBlO1xyXG4gICAgICAgIHB1YmxpYyByYXRlOm51bWJlcjtcclxuICAgICAgICBwdWJsaWMgbGVuZ3RoOm51bWJlcjtcclxuICAgICAgICBwdWJsaWMgbGF5ZXI6c3RyaW5nO1xyXG4gICAgICAgIHB1YmxpYyBsYXllckluZGV4Om51bWJlcjtcclxuICAgICAgICBwdWJsaWMgcGxheWVkOm51bWJlcjtcclxuICAgICAgICBwdWJsaWMgbWFjaGluZTpzdHJpbmc7XHJcbiAgICAgICAgcHVibGljIG1vdGlvbmlkOm51bWJlcjtcclxuICAgICAgICBwdWJsaWMgaW50ZXJydXB0ZWQ6Ym9vbGVhbjtcclxuICAgICAgICBwdWJsaWMgYXBwYXJlbnRTcGVlZDpudW1iZXI7XHJcbiAgICAgICAgcHVibGljIGF2ZXJhZ2VBbmd1bGFyU3BlZWQ6bnVtYmVyO1xyXG4gICAgICAgIHB1YmxpYyBhdmVyYWdlRHVyYXRpb246bnVtYmVyO1xyXG4gICAgICAgIHB1YmxpYyBhdmVyYWdlU3BlZWQ6bnVtYmVyW107XHJcbiAgICAgICAgcHVibGljIGN5Y2xlT2Zmc2V0Om51bWJlcjtcclxuICAgICAgICBwdWJsaWMgY3ljbGVPZmZzZXRQYXJhbWV0ZXI6c3RyaW5nO1xyXG4gICAgICAgIHB1YmxpYyBjeWNsZU9mZnNldFBhcmFtZXRlckFjdGl2ZTpib29sZWFuO1xyXG4gICAgICAgIHB1YmxpYyBpS09uRmVldDpib29sZWFuO1xyXG4gICAgICAgIHB1YmxpYyBtaXJyb3I6Ym9vbGVhbjtcclxuICAgICAgICBwdWJsaWMgbWlycm9yUGFyYW1ldGVyOnN0cmluZztcclxuICAgICAgICBwdWJsaWMgbWlycm9yUGFyYW1ldGVyQWN0aXZlOmJvb2xlYW47XHJcbiAgICAgICAgcHVibGljIHNwZWVkOm51bWJlcjtcclxuICAgICAgICBwdWJsaWMgc3BlZWRQYXJhbWV0ZXI6c3RyaW5nO1xyXG4gICAgICAgIHB1YmxpYyBzcGVlZFBhcmFtZXRlckFjdGl2ZTpib29sZWFuO1xyXG4gICAgICAgIHB1YmxpYyBibGVuZHRyZWU6QkFCWUxPTi5JQmxlbmRUcmVlO1xyXG4gICAgICAgIHB1YmxpYyB0cmFuc2l0aW9uczpCQUJZTE9OLklUcmFuc2l0aW9uW107XHJcbiAgICAgICAgcHVibGljIGJlaGF2aW91cnM6QkFCWUxPTi5JQmVoYXZpb3VyW107XHJcbiAgICAgICAgcHVibGljIGV2ZW50czpCQUJZTE9OLklBbmltYXRvckV2ZW50W107XHJcbiAgICAgICAgcHVibGljIGNjdXJ2ZXM6QkFCWUxPTi5JVW5pdHlDdXJ2ZVtdO1xyXG4gICAgICAgIHB1YmxpYyB0Y3VydmVzOkJBQllMT04uQW5pbWF0aW9uW107XHJcbiAgICAgICAgcHVibGljIGNvbnN0cnVjdG9yKCkge31cclxuICAgIH1cclxuICAgIGV4cG9ydCBjbGFzcyBUcmFuc2l0aW9uQ2hlY2sge1xyXG4gICAgICAgIHB1YmxpYyByZXN1bHQ6c3RyaW5nO1xyXG4gICAgICAgIHB1YmxpYyBvZmZlc3Q6bnVtYmVyO1xyXG4gICAgICAgIHB1YmxpYyBibGVuZGluZzpudW1iZXI7XHJcbiAgICAgICAgcHVibGljIHRyaWdnZXJlZDpzdHJpbmdbXTtcclxuICAgIH1cclxuICAgIGV4cG9ydCBjbGFzcyBBbmltYXRpb25NaXhlciB7XHJcbiAgICAgICAgcHVibGljIGluZmx1ZW5jZUJ1ZmZlcjpudW1iZXI7XHJcbiAgICAgICAgcHVibGljIHBvc2l0aW9uQnVmZmVyOkJBQllMT04uVmVjdG9yMztcclxuICAgICAgICBwdWJsaWMgcm90YXRpb25CdWZmZXI6QkFCWUxPTi5RdWF0ZXJuaW9uO1xyXG4gICAgICAgIHB1YmxpYyBzY2FsaW5nQnVmZmVyOkJBQllMT04uVmVjdG9yMztcclxuICAgICAgICBwdWJsaWMgb3JpZ2luYWxNYXRyaXg6QkFCWUxPTi5NYXRyaXg7XHJcbiAgICAgICAgcHVibGljIGJsZW5kaW5nRmFjdG9yOm51bWJlcjtcclxuICAgICAgICBwdWJsaWMgYmxlbmRpbmdTcGVlZDpudW1iZXI7XHJcbiAgICAgICAgcHVibGljIHJvb3RQb3NpdGlvbjpCQUJZTE9OLlZlY3RvcjM7XHJcbiAgICAgICAgcHVibGljIHJvb3RSb3RhdGlvbjpCQUJZTE9OLlF1YXRlcm5pb247XHJcbiAgICB9XHJcbiAgICBleHBvcnQgY2xhc3MgQmxlbmRpbmdXZWlnaHRzIHtcclxuICAgICAgICBwdWJsaWMgcHJpbWFyeTpCQUJZTE9OLklCbGVuZFRyZWVDaGlsZDtcclxuICAgICAgICBwdWJsaWMgc2Vjb25kYXJ5OkJBQllMT04uSUJsZW5kVHJlZUNoaWxkO1xyXG4gICAgfVxyXG4gICAgZXhwb3J0IGVudW0gTW90aW9uVHlwZSB7XHJcbiAgICAgICAgQ2xpcCA9IDAsXHJcbiAgICAgICAgVHJlZSA9IDFcclxuICAgIH1cclxuICAgIGV4cG9ydCBlbnVtIENvbmRpdGlvbk1vZGUge1xyXG4gICAgICAgIElmID0gMSxcclxuICAgICAgICBJZk5vdCA9IDIsXHJcbiAgICAgICAgR3JlYXRlciA9IDMsXHJcbiAgICAgICAgTGVzcyA9IDQsXHJcbiAgICAgICAgRXF1YWxzID0gNixcclxuICAgICAgICBOb3RFcXVhbCA9IDdcclxuICAgIH1cclxuICAgIGV4cG9ydCBlbnVtIEludGVycnVwdGlvblNvdXJjZSB7XHJcbiAgICAgICAgTm9uZSA9IDAsXHJcbiAgICAgICAgU291cmNlID0gMSxcclxuICAgICAgICBEZXN0aW5hdGlvbiA9IDIsXHJcbiAgICAgICAgU291cmNlVGhlbkRlc3RpbmF0aW9uID0gMyxcclxuICAgICAgICBEZXN0aW5hdGlvblRoZW5Tb3VyY2UgPSA0XHJcbiAgICB9XHJcbiAgICBleHBvcnQgZW51bSBCbGVuZFRyZWVUeXBlIHtcclxuICAgICAgICBTaW1wbGUxRCA9IDAsXHJcbiAgICAgICAgU2ltcGxlRGlyZWN0aW9uYWwyRCA9IDEsXHJcbiAgICAgICAgRnJlZWZvcm1EaXJlY3Rpb25hbDJEID0gMixcclxuICAgICAgICBGcmVlZm9ybUNhcnRlc2lhbjJEID0gMyxcclxuICAgICAgICBEaXJlY3QgPSA0LFxyXG4gICAgICAgIENsaXAgPSA1XHJcbiAgICB9XHJcbiAgICBleHBvcnQgZW51bSBCbGVuZFRyZWVQb3NpdGlvbiB7XHJcbiAgICAgICAgTG93ZXIgPSAwLFxyXG4gICAgICAgIFVwcGVyID0gMSxcclxuICAgIH1cclxuICAgIGV4cG9ydCBlbnVtIEFuaW1hdG9yUGFyYW1ldGVyVHlwZSB7XHJcbiAgICAgICAgRmxvYXQgPSAxLFxyXG4gICAgICAgIEludCA9IDMsXHJcbiAgICAgICAgQm9vbCA9IDQsXHJcbiAgICAgICAgVHJpZ2dlciA9IDlcclxuICAgIH1cclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSUFuaW1hdG9yRXZlbnQge1xyXG4gICAgICAgIGlkOiBudW1iZXI7XHJcbiAgICAgICAgY2xpcDogc3RyaW5nO1xyXG4gICAgICAgIHRpbWU6IG51bWJlcjtcclxuICAgICAgICBmdW5jdGlvbjogc3RyaW5nO1xyXG4gICAgICAgIGludFBhcmFtZXRlcjogbnVtYmVyO1xyXG4gICAgICAgIGZsb2F0UGFyYW1ldGVyOiBudW1iZXI7XHJcbiAgICAgICAgc3RyaW5nUGFyYW1ldGVyOiBzdHJpbmc7XHJcbiAgICAgICAgb2JqZWN0SWRQYXJhbWV0ZXI6IHN0cmluZztcclxuICAgICAgICBvYmplY3ROYW1lUGFyYW1ldGVyOiBzdHJpbmc7XHJcbiAgICB9ICAgIFxyXG4gICAgZXhwb3J0IGludGVyZmFjZSBJQXZhdGFyTWFzayB7XHJcbiAgICAgICAgaGFzaDpudW1iZXI7XHJcbiAgICAgICAgbWFza05hbWU6c3RyaW5nO1xyXG4gICAgICAgIG1hc2tUeXBlOnN0cmluZztcclxuICAgICAgICB0cmFuc2Zvcm1Db3VudDpudW1iZXI7XHJcbiAgICAgICAgdHJhbnNmb3JtUGF0aHM6c3RyaW5nW107XHJcbiAgICB9XHJcbiAgICBleHBvcnQgaW50ZXJmYWNlIElBbmltYXRpb25MYXllciB7XHJcbiAgICAgICAgaGFzaDpudW1iZXI7XHJcbiAgICAgICAgbmFtZTpzdHJpbmc7XHJcbiAgICAgICAgaW5kZXg6bnVtYmVyO1xyXG4gICAgICAgIGVudHJ5OnN0cmluZztcclxuICAgICAgICBtYWNoaW5lOnN0cmluZztcclxuICAgICAgICBpS1Bhc3M6Ym9vbGVhbjtcclxuICAgICAgICBhdmF0YXJNYXNrOkJBQllMT04uSUF2YXRhck1hc2s7XHJcbiAgICAgICAgYmxlbmRpbmdNb2RlOm51bWJlcjtcclxuICAgICAgICBkZWZhdWx0V2VpZ2h0Om51bWJlcjtcclxuICAgICAgICBzeW5jZWRMYXllckluZGV4Om51bWJlcjtcclxuICAgICAgICBzeW5jZWRMYXllckFmZmVjdHNUaW1pbmc6Ym9vbGVhbjtcclxuICAgICAgICBhbmltYXRpb25UaW1lOm51bWJlcjtcclxuICAgICAgICBhbmltYXRpb25Ob3JtYWw6bnVtYmVyO1xyXG4gICAgICAgIGFuaW1hdGlvbk1hc2tNYXA6TWFwPHN0cmluZywgbnVtYmVyPjtcclxuICAgICAgICBhbmltYXRpb25GaXJzdFJ1bjpib29sZWFuO1xyXG4gICAgICAgIGFuaW1hdGlvbkVuZEZyYW1lOmJvb2xlYW47XHJcbiAgICAgICAgYW5pbWF0aW9uTG9vcEZyYW1lOmJvb2xlYW47XHJcbiAgICAgICAgYW5pbWF0aW9uTG9vcENvdW50Om51bWJlcjsgICAgICAgIFxyXG4gICAgICAgIGFuaW1hdGlvbkxvb3BFdmVudHM6YW55O1xyXG4gICAgICAgIGFuaW1hdGlvblN0YXRlTWFjaGluZTpCQUJZTE9OLk1hY2hpbmVTdGF0ZTtcclxuICAgIH1cclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSUFuaW1hdGlvbkN1cnZlIHtcclxuICAgICAgICBsZW5ndGg6bnVtYmVyO1xyXG4gICAgICAgIHByZVdyYXBNb2RlOnN0cmluZztcclxuICAgICAgICBwb3N0V3JhcE1vZGU6c3RyaW5nO1xyXG4gICAgICAgIGtleWZyYW1lczpCQUJZTE9OLklBbmltYXRpb25LZXlmcmFtZVtdO1xyXG4gICAgfVxyXG4gICAgZXhwb3J0IGludGVyZmFjZSBJQW5pbWF0aW9uS2V5ZnJhbWUge1xyXG4gICAgICAgIHRpbWU6bnVtYmVyO1xyXG4gICAgICAgIHZhbHVlOm51bWJlcjtcclxuICAgICAgICBpblRhbmdlbnQ6bnVtYmVyO1xyXG4gICAgICAgIG91dFRhbmdlbnQ6bnVtYmVyO1xyXG4gICAgICAgIHRhbmdlbnRNb2RlOm51bWJlcjtcclxuICAgIH1cclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSUJlaGF2aW91ciB7XHJcbiAgICAgICAgaGFzaDpudW1iZXI7XHJcbiAgICAgICAgbmFtZTpzdHJpbmc7XHJcbiAgICAgICAgbGF5ZXJJbmRleDpudW1iZXI7XHJcbiAgICAgICAgcHJvcGVydGllczphbnk7XHJcbiAgICB9XHJcbiAgICBleHBvcnQgaW50ZXJmYWNlIElUcmFuc2l0aW9uIHtcclxuICAgICAgICBoYXNoOm51bWJlcjtcclxuICAgICAgICBhbnlTdGF0ZTpib29sZWFuO1xyXG4gICAgICAgIGxheWVySW5kZXg6bnVtYmVyO1xyXG4gICAgICAgIG1hY2hpbmVMYXllcjpzdHJpbmc7ICAgICAgICBcclxuICAgICAgICBtYWNoaW5lTmFtZTpzdHJpbmc7ICAgICAgICBcclxuICAgICAgICBjYW5UcmFuc2l0aW9uVG9TZWxmOmJvb2xlYW47XHJcbiAgICAgICAgZGVzdGluYXRpb246c3RyaW5nO1xyXG4gICAgICAgIGR1cmF0aW9uOm51bWJlcjtcclxuICAgICAgICBleGl0VGltZTpudW1iZXI7XHJcbiAgICAgICAgaGFzRXhpdFRpbWU6Ym9vbGVhbjtcclxuICAgICAgICBmaXhlZER1cmF0aW9uOmJvb2xlYW47XHJcbiAgICAgICAgaW50U291cmNlOkJBQllMT04uSW50ZXJydXB0aW9uU291cmNlO1xyXG4gICAgICAgIGlzRXhpdDpib29sZWFuO1xyXG4gICAgICAgIG11dGU6Ym9vbGVhbjtcclxuICAgICAgICBuYW1lOnN0cmluZztcclxuICAgICAgICBvZmZzZXQ6bnVtYmVyO1xyXG4gICAgICAgIG9yZGVyZWRJbnQ6Ym9vbGVhbjtcclxuICAgICAgICBzb2xvOmJvb2xlYW47XHJcbiAgICAgICAgY29uZGl0aW9uczpCQUJZTE9OLklDb25kaXRpb25bXTtcclxuICAgIH1cclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSUNvbmRpdGlvbiB7XHJcbiAgICAgICAgaGFzaDpudW1iZXI7XHJcbiAgICAgICAgbW9kZTpCQUJZTE9OLkNvbmRpdGlvbk1vZGU7XHJcbiAgICAgICAgcGFyYW1ldGVyOnN0cmluZztcclxuICAgICAgICB0aHJlc2hvbGQ6bnVtYmVyO1xyXG4gICAgfVxyXG4gICAgZXhwb3J0IGludGVyZmFjZSBJQmxlbmRUcmVlIHtcclxuICAgICAgICBoYXNoOm51bWJlcjtcclxuICAgICAgICBuYW1lOnN0cmluZztcclxuICAgICAgICBzdGF0ZTpzdHJpbmc7XHJcbiAgICAgICAgY2hpbGRyZW46QkFCWUxPTi5JQmxlbmRUcmVlQ2hpbGRbXTtcclxuICAgICAgICBsYXllckluZGV4Om51bWJlcjtcclxuICAgICAgICBhcHBhcmVudFNwZWVkOm51bWJlcjtcclxuICAgICAgICBhdmVyYWdlQW5ndWxhclNwZWVkOm51bWJlcjtcclxuICAgICAgICBhdmVyYWdlRHVyYXRpb246bnVtYmVyO1xyXG4gICAgICAgIGF2ZXJhZ2VTcGVlZDpudW1iZXJbXTtcclxuICAgICAgICBibGVuZFBhcmFtZXRlclg6c3RyaW5nO1xyXG4gICAgICAgIGJsZW5kUGFyYW1ldGVyWTpzdHJpbmc7XHJcbiAgICAgICAgYmxlbmRUeXBlOkJBQllMT04uQmxlbmRUcmVlVHlwZTtcclxuICAgICAgICBpc0FuaW1hdG9yTW90aW9uOmJvb2xlYW47XHJcbiAgICAgICAgaXNIdW1hbk1vdGlvbjpib29sZWFuO1xyXG4gICAgICAgIGlzTG9vcGluZzpib29sZWFuO1xyXG4gICAgICAgIG1pblRocmVzaG9sZDpudW1iZXI7XHJcbiAgICAgICAgbWF4VGhyZXNob2xkOm51bWJlcjtcclxuICAgICAgICB1c2VBdXRvbWF0aWNUaHJlc2hvbGRzOmJvb2xlYW47XHJcbiAgICAgICAgdmFsdWVQYXJhbWV0ZXJYOm51bWJlcjtcclxuICAgICAgICB2YWx1ZVBhcmFtZXRlclk6bnVtYmVyO1xyXG4gICAgfVxyXG4gICAgZXhwb3J0IGludGVyZmFjZSBJQmxlbmRUcmVlQ2hpbGQge1xyXG4gICAgICAgIGhhc2g6bnVtYmVyO1xyXG4gICAgICAgIGxheWVySW5kZXg6bnVtYmVyO1xyXG4gICAgICAgIGN5Y2xlT2Zmc2V0Om51bWJlcjtcclxuICAgICAgICBkaXJlY3RCbGVuZFBhcmFtZXRlcjpzdHJpbmc7XHJcbiAgICAgICAgYXBwYXJlbnRTcGVlZDpudW1iZXI7XHJcbiAgICAgICAgYXZlcmFnZUFuZ3VsYXJTcGVlZDpudW1iZXI7XHJcbiAgICAgICAgYXZlcmFnZUR1cmF0aW9uOm51bWJlcjtcclxuICAgICAgICBhdmVyYWdlU3BlZWQ6bnVtYmVyW107XHJcbiAgICAgICAgbWlycm9yOmJvb2xlYW47XHJcbiAgICAgICAgdHlwZTpCQUJZTE9OLk1vdGlvblR5cGU7XHJcbiAgICAgICAgbW90aW9uOnN0cmluZztcclxuICAgICAgICBwb3NpdGlvblg6bnVtYmVyO1xyXG4gICAgICAgIHBvc2l0aW9uWTpudW1iZXI7XHJcbiAgICAgICAgdGhyZXNob2xkOm51bWJlcjtcclxuICAgICAgICB0aW1lc2NhbGU6bnVtYmVyO1xyXG4gICAgICAgIHN1YnRyZWU6IEJBQllMT04uSUJsZW5kVHJlZTtcclxuICAgICAgICB3ZWlnaHQ6bnVtYmVyO1xyXG4gICAgICAgIHJhdGlvOm51bWJlcjtcclxuICAgICAgICB0cmFjazpCQUJZTE9OLkFuaW1hdGlvbkdyb3VwO1xyXG4gICAgfVxyXG59IiwibW9kdWxlIEJBQllMT04ge1xyXG4gICAgLyoqXHJcbiAgICAgKiBCYWJ5bG9uIGF1ZGlvIHNvdXJjZSBtYW5hZ2VyIHBybyBjbGFzc1xyXG4gICAgICogQGNsYXNzIEF1ZGlvU291cmNlIC0gQWxsIHJpZ2h0cyByZXNlcnZlZCAoYykgMjAyMCBNYWNrZXkgS2luYXJkXHJcbiAgICAgKi9cclxuICAgIGV4cG9ydCBjbGFzcyBBdWRpb1NvdXJjZSBleHRlbmRzIEJBQllMT04uU2NyaXB0Q29tcG9uZW50IGltcGxlbWVudHMgQkFCWUxPTi5JQXNzZXRQcmVsb2FkZXIge1xyXG4gICAgICAgIHByaXZhdGUgX2F1ZGlvOkJBQllMT04uU291bmQgPSBudWxsO1xyXG4gICAgICAgIHByaXZhdGUgX25hbWU6c3RyaW5nID0gbnVsbDtcclxuICAgICAgICBwcml2YXRlIF9sb29wOmJvb2xlYW4gPSBmYWxzZTtcclxuICAgICAgICBwcml2YXRlIF9tdXRlOmJvb2xlYW4gPSBmYWxzZTtcclxuICAgICAgICBwcml2YXRlIF9waXRjaDpudW1iZXIgPSAxO1xyXG4gICAgICAgIHByaXZhdGUgX3ZvbHVtZTpudW1iZXIgPSAxO1xyXG4gICAgICAgIHByaXZhdGUgX3ByZWxvYWQ6Ym9vbGVhbiA9IGZhbHNlO1xyXG4gICAgICAgIHByaXZhdGUgX3ByaW9yaXR5Om51bWJlciA9IDEyODtcclxuICAgICAgICBwcml2YXRlIF9wYW5zdGVyZW86bnVtYmVyID0gMDtcclxuICAgICAgICBwcml2YXRlIF9taW5kaXN0YW5jZTpudW1iZXIgPSAxO1xyXG4gICAgICAgIHByaXZhdGUgX21heGRpc3RhbmNlOm51bWJlciA9IDUwO1xyXG4gICAgICAgIHByaXZhdGUgX3JvbGxvZmZtb2RlOnN0cmluZyA9IFwibGluZWFyXCI7XHJcbiAgICAgICAgcHJpdmF0ZSBfcm9sbG9mZmZhY3RvcjpudW1iZXIgPSAxO1xyXG4gICAgICAgIHByaXZhdGUgX3BsYXlvbmF3YWtlOmJvb2xlYW4gPSB0cnVlO1xyXG4gICAgICAgIHByaXZhdGUgX3NwYXRpYWxibGVuZDpudW1iZXIgPSAwO1xyXG4gICAgICAgIHByaXZhdGUgX3ByZWxvYWRlclVybDpzdHJpbmcgPSBudWxsO1xyXG4gICAgICAgIHByaXZhdGUgX3JldmVyYnpvbmVtaXg6bnVtYmVyID0gMTtcclxuICAgICAgICBwcml2YXRlIF9sYXN0bXV0ZWR2b2x1bWU6bnVtYmVyID0gbnVsbDtcclxuICAgICAgICBwcml2YXRlIF9ieXBhc3NlZmZlY3RzOmJvb2xlYW4gPSBmYWxzZTtcclxuICAgICAgICBwcml2YXRlIF9ieXBhc3NyZXZlcmJ6b25lczpib29sZWFuID0gZmFsc2U7XHJcbiAgICAgICAgcHJpdmF0ZSBfYnlwYXNzbGlzdGVuZXJlZmZlY3RzOmJvb2xlYW4gPSBmYWxzZTtcclxuICAgICAgICBwcml2YXRlIF9pbml0aWFsaXplZFJlYWR5SW5zdGFuY2U6Ym9vbGVhbiA9IGZhbHNlO1xyXG4gICAgICAgIHB1YmxpYyBnZXRTb3VuZENsaXAoKTpCQUJZTE9OLlNvdW5kIHsgcmV0dXJuIHRoaXMuX2F1ZGlvOyB9XHJcbiAgICAgICAgcHVibGljIGdldEF1ZGlvRWxlbWVudCgpOkhUTUxBdWRpb0VsZW1lbnQgeyByZXR1cm4gKHRoaXMuX2F1ZGlvICE9IG51bGwpID8gKDxhbnk+dGhpcy5fYXVkaW8pLl9odG1sQXVkaW9FbGVtZW50IDogbnVsbCB9XHJcbiAgICAgICAgLyoqIFJlZ2lzdGVyIGhhbmRsZXIgdGhhdCBpcyB0cmlnZ2VyZWQgd2hlbiB0aGUgYXVkaW8gY2xpcCBpcyByZWFkeSAqL1xyXG4gICAgICAgIHB1YmxpYyBvblJlYWR5T2JzZXJ2YWJsZSA9IG5ldyBCQUJZTE9OLk9ic2VydmFibGU8QkFCWUxPTi5Tb3VuZD4oKTtcclxuXHJcbiAgICAgICAgcHJvdGVjdGVkIGF3YWtlKCk6dm9pZCB7IHRoaXMuYXdha2VBdWRpb1NvdXJjZSgpOyB9XHJcbiAgICAgICAgcHJvdGVjdGVkIGRlc3Ryb3koKTogdm9pZCB7IHRoaXMuZGVzdHJveUF1ZGlvU291cmNlKCk7IH1cclxuICAgICAgICBcclxuICAgICAgICBwcm90ZWN0ZWQgYXdha2VBdWRpb1NvdXJjZSgpOnZvaWQge1xyXG4gICAgICAgICAgICB0aGlzLl9uYW1lID0gdGhpcy5nZXRQcm9wZXJ0eShcIm5hbWVcIiwgdGhpcy5fbmFtZSk7XHJcbiAgICAgICAgICAgIHRoaXMuX2xvb3AgPSB0aGlzLmdldFByb3BlcnR5KFwibG9vcFwiLCB0aGlzLl9sb29wKTtcclxuICAgICAgICAgICAgdGhpcy5fbXV0ZSA9IHRoaXMuZ2V0UHJvcGVydHkoXCJtdXRlXCIsIHRoaXMuX211dGUpO1xyXG4gICAgICAgICAgICB0aGlzLl9waXRjaCA9IHRoaXMuZ2V0UHJvcGVydHkoXCJwaXRjaFwiLCB0aGlzLl9waXRjaCk7XHJcbiAgICAgICAgICAgIHRoaXMuX3ZvbHVtZSA9IHRoaXMuZ2V0UHJvcGVydHkoXCJ2b2x1bWVcIiwgdGhpcy5fdm9sdW1lKTtcclxuICAgICAgICAgICAgdGhpcy5fcHJlbG9hZCA9IHRoaXMuZ2V0UHJvcGVydHkoXCJwcmVsb2FkXCIsIHRoaXMuX3ByZWxvYWQpO1xyXG4gICAgICAgICAgICB0aGlzLl9wcmlvcml0eSA9IHRoaXMuZ2V0UHJvcGVydHkoXCJwcmlvcml0eVwiLCB0aGlzLl9wcmlvcml0eSk7XHJcbiAgICAgICAgICAgIHRoaXMuX3BhbnN0ZXJlbyA9IHRoaXMuZ2V0UHJvcGVydHkoXCJwYW5zdGVyZW9cIiwgdGhpcy5fcGFuc3RlcmVvKTtcclxuICAgICAgICAgICAgdGhpcy5fcGxheW9uYXdha2UgPSB0aGlzLmdldFByb3BlcnR5KFwicGxheW9uYXdha2VcIiwgdGhpcy5fcGxheW9uYXdha2UpO1xyXG4gICAgICAgICAgICB0aGlzLl9taW5kaXN0YW5jZSA9IHRoaXMuZ2V0UHJvcGVydHkoXCJtaW5kaXN0YW5jZVwiLCB0aGlzLl9taW5kaXN0YW5jZSk7XHJcbiAgICAgICAgICAgIHRoaXMuX21heGRpc3RhbmNlID0gdGhpcy5nZXRQcm9wZXJ0eShcIm1heGRpc3RhbmNlXCIsIHRoaXMuX21heGRpc3RhbmNlKTtcclxuICAgICAgICAgICAgdGhpcy5fcm9sbG9mZm1vZGUgPSB0aGlzLmdldFByb3BlcnR5KFwicm9sbG9mZm1vZGVcIiwgdGhpcy5fcm9sbG9mZm1vZGUpO1xyXG4gICAgICAgICAgICB0aGlzLl9yb2xsb2ZmZmFjdG9yID0gdGhpcy5nZXRQcm9wZXJ0eShcInJvbGxvZmZmYWN0b3JcIiwgdGhpcy5fcm9sbG9mZmZhY3Rvcik7XHJcbiAgICAgICAgICAgIHRoaXMuX3NwYXRpYWxibGVuZCA9IHRoaXMuZ2V0UHJvcGVydHkoXCJzcGF0aWFsYmxlbmRcIiwgdGhpcy5fc3BhdGlhbGJsZW5kKTtcclxuICAgICAgICAgICAgdGhpcy5fcmV2ZXJiem9uZW1peCA9IHRoaXMuZ2V0UHJvcGVydHkoXCJyZXZlcmJ6b25lbWl4XCIsIHRoaXMuX3JldmVyYnpvbmVtaXgpO1xyXG4gICAgICAgICAgICB0aGlzLl9ieXBhc3NlZmZlY3RzID0gdGhpcy5nZXRQcm9wZXJ0eShcImJ5cGFzc2VmZmVjdHNcIiwgdGhpcy5fYnlwYXNzZWZmZWN0cyk7XHJcbiAgICAgICAgICAgIHRoaXMuX2J5cGFzc3JldmVyYnpvbmVzID0gdGhpcy5nZXRQcm9wZXJ0eShcImJ5cGFzc3JldmVyYnpvbmVzXCIsIHRoaXMuX2J5cGFzc3JldmVyYnpvbmVzKTtcclxuICAgICAgICAgICAgdGhpcy5fYnlwYXNzbGlzdGVuZXJlZmZlY3RzID0gdGhpcy5nZXRQcm9wZXJ0eShcImJ5cGFzc2xpc3RlbmVyZWZmZWN0c1wiLCB0aGlzLl9ieXBhc3NsaXN0ZW5lcmVmZmVjdHMpO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fbmFtZSA9PSBudWxsIHx8IHRoaXMuX25hbWUgPT09IFwiXCIpIHRoaXMuX25hbWUgPSBcIlVua25vd25cIjtcclxuICAgICAgICAgICAgLy8gLi5cclxuICAgICAgICAgICAgY29uc3QgZmlsZW5hbWU6c3RyaW5nID0gdGhpcy5nZXRQcm9wZXJ0eShcImZpbGVcIik7XHJcbiAgICAgICAgICAgIGlmIChmaWxlbmFtZSAhPSBudWxsICYmIGZpbGVuYW1lICE9PSBcIlwiKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCByb290VXJsOnN0cmluZyA9IEJBQllMT04uU2NlbmVNYW5hZ2VyLkdldFJvb3RVcmwodGhpcy5zY2VuZSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBwbGF5VXJsID0gKHJvb3RVcmwgKyBmaWxlbmFtZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAocGxheVVybCAhPSBudWxsICYmIHBsYXlVcmwgIT09IFwiXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fcHJlbG9hZCA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9wcmVsb2FkZXJVcmwgPSBwbGF5VXJsO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0RGF0YVNvdXJjZShwbGF5VXJsKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcHJvdGVjdGVkIGRlc3Ryb3lBdWRpb1NvdXJjZSgpOnZvaWQge1xyXG4gICAgICAgICAgICB0aGlzLm9uUmVhZHlPYnNlcnZhYmxlLmNsZWFyKCk7XHJcbiAgICAgICAgICAgIHRoaXMub25SZWFkeU9ic2VydmFibGUgPSBudWxsO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fYXVkaW8gIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fYXVkaW8uZGlzcG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fYXVkaW8gPSBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEdldHMgdGhlIHJlYWR5IHN0YXR1cyBmb3IgdHJhY2tcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgaXNSZWFkeSgpOmJvb2xlYW4ge1xyXG4gICAgICAgICAgICBsZXQgcmVzdWx0OmJvb2xlYW4gPSBmYWxzZTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX2F1ZGlvICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMuX2F1ZGlvLmlzUmVhZHkoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH1cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBHZXRzIHRoZSBwbGF5aW5nIHN0YXR1cyBmb3IgdHJhY2tcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgaXNQbGF5aW5nKCk6Ym9vbGVhbiB7XHJcbiAgICAgICAgICAgIGxldCByZXN1bHQ6Ym9vbGVhbiA9IGZhbHNlO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fYXVkaW8gIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5fYXVkaW8uaXNQbGF5aW5nO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEdldHMgdGhlIHBhdXNlZCBzdGF0dXMgZm9yIHRyYWNrXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGlzUGF1c2VkKCk6Ym9vbGVhbiB7XHJcbiAgICAgICAgICAgIGxldCByZXN1bHQ6Ym9vbGVhbiA9IGZhbHNlO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fYXVkaW8gIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5fYXVkaW8uaXNQYXVzZWQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogUGxheSB0aGUgc291bmQgdHJhY2tcclxuICAgICAgICAgKiBAcGFyYW0gdGltZSAob3B0aW9uYWwpIFN0YXJ0IHRoZSBzb3VuZCBhZnRlciBYIHNlY29uZHMuIFN0YXJ0IGltbWVkaWF0ZWx5ICgwKSBieSBkZWZhdWx0LlxyXG4gICAgICAgICAqIEBwYXJhbSBvZmZzZXQgKG9wdGlvbmFsKSBTdGFydCB0aGUgc291bmQgYXQgYSBzcGVjaWZpYyB0aW1lIGluIHNlY29uZHNcclxuICAgICAgICAgKiBAcGFyYW0gbGVuZ3RoIChvcHRpb25hbCkgU291bmQgZHVyYXRpb24gKGluIHNlY29uZHMpXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIHBsYXkodGltZT86IG51bWJlciwgb2Zmc2V0PzogbnVtYmVyLCBsZW5ndGg/OiBudW1iZXIpOmJvb2xlYW4ge1xyXG4gICAgICAgICAgICBpZiAoQkFCWUxPTi5TY2VuZU1hbmFnZXIuSGFzQXVkaW9Db250ZXh0KCkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuaW50ZXJuYWxQbGF5KHRpbWUsIG9mZnNldCwgbGVuZ3RoKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIEJBQllMT04uRW5naW5lLmF1ZGlvRW5naW5lLm9uQXVkaW9VbmxvY2tlZE9ic2VydmFibGUuYWRkT25jZSgoKT0+eyB0aGlzLmludGVybmFsUGxheSh0aW1lLCBvZmZzZXQsIGxlbmd0aCk7IH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBwcml2YXRlIGludGVybmFsUGxheSh0aW1lPzogbnVtYmVyLCBvZmZzZXQ/OiBudW1iZXIsIGxlbmd0aD86IG51bWJlcik6dm9pZCB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9hdWRpbyAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5faW5pdGlhbGl6ZWRSZWFkeUluc3RhbmNlID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYXVkaW8ucGxheSh0aW1lLCBvZmZzZXQsIGxlbmd0aCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMub25SZWFkeU9ic2VydmFibGUuYWRkT25jZSgoKT0+eyB0aGlzLl9hdWRpby5wbGF5KHRpbWUsIG9mZnNldCwgbGVuZ3RoKTsgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogUGF1c2UgdGhlIHNvdW5kIHRyYWNrXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIHBhdXNlKCk6Ym9vbGVhbiB7XHJcbiAgICAgICAgICAgIGxldCByZXN1bHQ6Ym9vbGVhbiA9IGZhbHNlO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fYXVkaW8gIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fYXVkaW8ucGF1c2UoKTtcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogU3RvcCB0aGUgc291bmQgdHJhY2tcclxuICAgICAgICAgKiBAcGFyYW0gdGltZSAob3B0aW9uYWwpIFN0YXJ0IHRoZSBzb3VuZCBhZnRlciBYIHNlY29uZHMuIFN0YXJ0IGltbWVkaWF0ZWx5ICgwKSBieSBkZWZhdWx0LlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBzdG9wKHRpbWU/OiBudW1iZXIpOmJvb2xlYW4ge1xyXG4gICAgICAgICAgICBsZXQgcmVzdWx0OmJvb2xlYW4gPSBmYWxzZTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX2F1ZGlvICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2F1ZGlvLnN0b3AodGltZSk7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIE11dGUgdGhlIHNvdW5kIHRyYWNrXHJcbiAgICAgICAgICogQHBhcmFtIHRpbWUgKG9wdGlvbmFsKSBNdXRlIHRoZSBzb3VuZCBhZnRlciBYIHNlY29uZHMuIFN0YXJ0IGltbWVkaWF0ZWx5ICgwKSBieSBkZWZhdWx0LlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBtdXRlKHRpbWU/OiBudW1iZXIpOmJvb2xlYW4ge1xyXG4gICAgICAgICAgICBsZXQgcmVzdWx0OmJvb2xlYW4gPSBmYWxzZTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX2F1ZGlvICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2xhc3RtdXRlZHZvbHVtZSA9IHRoaXMuX2F1ZGlvLmdldFZvbHVtZSgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fYXVkaW8uc2V0Vm9sdW1lKDAsIHRpbWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFVubXV0ZSB0aGUgc291bmQgdHJhY2tcclxuICAgICAgICAgKiBAcGFyYW0gdGltZSAob3B0aW9uYWwpIFVubXV0ZSB0aGUgc291bmQgYWZ0ZXIgWCBzZWNvbmRzLiBTdGFydCBpbW1lZGlhdGVseSAoMCkgYnkgZGVmYXVsdC5cclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgdW5tdXRlKHRpbWU/OiBudW1iZXIpOmJvb2xlYW4ge1xyXG4gICAgICAgICAgICBsZXQgcmVzdWx0OmJvb2xlYW4gPSBmYWxzZTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX2F1ZGlvICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9sYXN0bXV0ZWR2b2x1bWUgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2F1ZGlvLnNldFZvbHVtZSh0aGlzLl9sYXN0bXV0ZWR2b2x1bWUsIHRpbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2xhc3RtdXRlZHZvbHVtZSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogR2V0cyB0aGUgdm9sdW1lIG9mIHRoZSB0cmFja1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBnZXRWb2x1bWUoKTogbnVtYmVyIHtcclxuICAgICAgICAgICAgbGV0IHJlc3VsdDpudW1iZXIgPSAwO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fYXVkaW8gIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5fYXVkaW8uZ2V0Vm9sdW1lKCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQgPSB0aGlzLl92b2x1bWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogU2V0cyB0aGUgdm9sdW1lIG9mIHRoZSB0cmFja1xyXG4gICAgICAgICAqIEBwYXJhbSB2b2x1bWUgRGVmaW5lIHRoZSBuZXcgdm9sdW1lIG9mIHRoZSBzb3VuZFxyXG4gICAgICAgICAqIEBwYXJhbSB0aW1lIERlZmluZSB0aW1lIGZvciBncmFkdWFsIGNoYW5nZSB0byBuZXcgdm9sdW1lXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIHNldFZvbHVtZSh2b2x1bWU6IG51bWJlciwgdGltZT86IG51bWJlcik6IGJvb2xlYW4ge1xyXG4gICAgICAgICAgICBsZXQgcmVzdWx0OmJvb2xlYW4gPSBmYWxzZTtcclxuICAgICAgICAgICAgdGhpcy5fdm9sdW1lID0gdm9sdW1lO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fYXVkaW8gIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fYXVkaW8uc2V0Vm9sdW1lKHRoaXMuX3ZvbHVtZSwgdGltZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmVzdWx0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogR2V0cyB0aGUgc3BhdGlhbCBzb3VuZCBvcHRpb24gb2YgdGhlIHRyYWNrXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGdldFNwYXRpYWxTb3VuZCgpOiBib29sZWFuIHtcclxuICAgICAgICAgICAgbGV0IHJlc3VsdDpib29sZWFuID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9hdWRpbyAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQgPSB0aGlzLl9hdWRpby5zcGF0aWFsU291bmQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogR2V0cyB0aGUgc3BhdGlhbCBzb3VuZCBvcHRpb24gb2YgdGhlIHRyYWNrXHJcbiAgICAgICAgICogQHBhcmFtIHZhbHVlIERlZmluZSB0aGUgdmFsdWUgb2YgdGhlIHNwYXRpYWwgc291bmRcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgc2V0U3BhdGlhbFNvdW5kKHZhbHVlOmJvb2xlYW4pOiB2b2lkIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX2F1ZGlvICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2F1ZGlvLnNwYXRpYWxTb3VuZCA9IHZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFNldHMgdGhlIHNvdW5kIHRyYWNrIHBsYXliYWNrIHNwZWVkXHJcbiAgICAgICAgICogQHBhcmFtIHJhdGUgdGhlIGF1ZGlvIHBsYXliYWNrIHJhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgc2V0UGxheWJhY2tTcGVlZChyYXRlOiBudW1iZXIpOnZvaWQge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fYXVkaW8gIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fYXVkaW8uc2V0UGxheWJhY2tSYXRlKHJhdGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEdldHMgdGhlIGN1cnJlbnQgdGltZSBvZiB0aGUgdHJhY2tcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgZ2V0Q3VycmVudFRyYWNrVGltZSgpOiBudW1iZXIge1xyXG4gICAgICAgICAgICBsZXQgcmVzdWx0Om51bWJlciA9IDA7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9hdWRpbyAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQgPSB0aGlzLl9hdWRpby5jdXJyZW50VGltZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH1cclxuICAgICAgICAvKiogU2V0IGF1ZGlvIGRhdGEgc291cmNlICovXHJcbiAgICAgICAgcHVibGljIHNldERhdGFTb3VyY2Uoc291cmNlOnN0cmluZ3xBcnJheUJ1ZmZlcnxNZWRpYVN0cmVhbSk6dm9pZCB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9hdWRpbyAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9hdWRpby5kaXNwb3NlKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9hdWRpbyA9IG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3Qgc3BhdGlhbEJsZW5kOmJvb2xlYW4gPSAodGhpcy5fc3BhdGlhbGJsZW5kID49IDAuMSk7XHJcbiAgICAgICAgICAgIGNvbnN0IGRpc3RhbmNlTW9kZWw6c3RyaW5nID0gKHRoaXMuX3JvbGxvZmZtb2RlID09PSBcImxvZ2FyaXRobWljXCIpID8gXCJleHBvbmVudGlhbFwiIDogXCJsaW5lYXJcIjtcclxuICAgICAgICAgICAgY29uc3QgaHRtbEF1ZGlvRWxlbWVudFJlcXVpcmVkOmJvb2xlYW4gPSAodGhpcy50cmFuc2Zvcm0ubWV0YWRhdGEgIT0gbnVsbCAmJiB0aGlzLnRyYW5zZm9ybS5tZXRhZGF0YS52dHQgIT0gbnVsbCAmJiB0aGlzLnRyYW5zZm9ybS5tZXRhZGF0YS52dHQgPT09IHRydWUpO1xyXG4gICAgICAgICAgICB0aGlzLl9pbml0aWFsaXplZFJlYWR5SW5zdGFuY2UgPSBmYWxzZTtcclxuICAgICAgICAgICAgdGhpcy5fYXVkaW8gPSBuZXcgQkFCWUxPTi5Tb3VuZCh0aGlzLl9uYW1lLCBzb3VyY2UsIHRoaXMuc2NlbmUsICgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2xhc3RtdXRlZHZvbHVtZSA9IHRoaXMuX3ZvbHVtZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2F1ZGlvLnNldFZvbHVtZSgodGhpcy5fbXV0ZSA9PT0gdHJ1ZSkgPyAwIDogdGhpcy5fdm9sdW1lKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2F1ZGlvLnNldFBsYXliYWNrUmF0ZSh0aGlzLl9waXRjaCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9pbml0aWFsaXplZFJlYWR5SW5zdGFuY2UgPSB0cnVlOyAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5vblJlYWR5T2JzZXJ2YWJsZS5oYXNPYnNlcnZlcnMoKSA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMub25SZWFkeU9ic2VydmFibGUubm90aWZ5T2JzZXJ2ZXJzKHRoaXMuX2F1ZGlvKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIC4uXHJcbiAgICAgICAgICAgICAgICAvLyBTdXBwb3J0IEF1dG8gUGxheSBPbiBBd2FrZVxyXG4gICAgICAgICAgICAgICAgLy8gLi5cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9wbGF5b25hd2FrZSA9PT0gdHJ1ZSkgdGhpcy5wbGF5KCk7XHJcbiAgICAgICAgICAgIH0sIHsgXHJcbiAgICAgICAgICAgICAgICBsb29wOiB0aGlzLl9sb29wLCBcclxuICAgICAgICAgICAgICAgIGF1dG9wbGF5OiBmYWxzZSwgLy8gTm90ZTogTmV2ZXIgQXV0byBQbGF5IEhlcmUgXHJcbiAgICAgICAgICAgICAgICByZWZEaXN0YW5jZTogdGhpcy5fbWluZGlzdGFuY2UsIFxyXG4gICAgICAgICAgICAgICAgbWF4RGlzdGFuY2U6IHRoaXMuX21heGRpc3RhbmNlLFxyXG4gICAgICAgICAgICAgICAgcm9sbG9mZkZhY3RvcjogdGhpcy5fcm9sbG9mZmZhY3RvcixcclxuICAgICAgICAgICAgICAgIHNwYXRpYWxTb3VuZDogc3BhdGlhbEJsZW5kLFxyXG4gICAgICAgICAgICAgICAgZGlzdGFuY2VNb2RlbDogZGlzdGFuY2VNb2RlbCxcclxuICAgICAgICAgICAgICAgIHN0cmVhbWluZzogaHRtbEF1ZGlvRWxlbWVudFJlcXVpcmVkXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB0aGlzLl9hdWRpby5zZXRQb3NpdGlvbih0aGlzLnRyYW5zZm9ybS5wb3NpdGlvbi5jbG9uZSgpKTtcclxuICAgICAgICAgICAgaWYgKHNwYXRpYWxCbGVuZCA9PT0gdHJ1ZSkgdGhpcy5fYXVkaW8uYXR0YWNoVG9NZXNoKHRoaXMudHJhbnNmb3JtKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLyoqIEFkZCBhdWRpbyBwcmVsb2FkZXIgYXNzZXQgdGFza3MgKGh0dHBzOi8vZG9jLmJhYnlsb25qcy5jb20vZGl2aW5nRGVlcGVyL2ltcG9ydGVycy9hc3NldE1hbmFnZXIpICovXHJcbiAgICAgICAgcHVibGljIGFkZFByZWxvYWRlclRhc2tzKGFzc2V0c01hbmFnZXI6QkFCWUxPTi5QcmVsb2FkQXNzZXRzTWFuYWdlcik6dm9pZCB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9wcmVsb2FkID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBhc3NldFRhc2s6QkFCWUxPTi5CaW5hcnlGaWxlQXNzZXRUYXNrID0gYXNzZXRzTWFuYWdlci5hZGRCaW5hcnlGaWxlVGFzaygodGhpcy50cmFuc2Zvcm0ubmFtZSArIFwiLkF1ZGlvVGFza1wiKSwgdGhpcy5fcHJlbG9hZGVyVXJsKTtcclxuICAgICAgICAgICAgICAgIGFzc2V0VGFzay5vblN1Y2Nlc3MgPSAodGFzazpCQUJZTE9OLkJpbmFyeUZpbGVBc3NldFRhc2spID0+IHsgdGhpcy5zZXREYXRhU291cmNlKHRhc2suZGF0YSk7IH07XHJcbiAgICAgICAgICAgICAgICBhc3NldFRhc2sub25FcnJvciA9ICh0YXNrOiBCQUJZTE9OLkJpbmFyeUZpbGVBc3NldFRhc2ssIG1lc3NhZ2U/OiBzdHJpbmcsIGV4Y2VwdGlvbj86IGFueSkgPT4geyBjb25zb2xlLmVycm9yKG1lc3NhZ2UsIGV4Y2VwdGlvbik7IH07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJtb2R1bGUgQkFCWUxPTiB7XHJcbiAgICAvKipcclxuICAgICAqIEJhYnlsb24ga2luZW1hdGljIGNoYXJhY3RlciBjb250cm9sbGVyIHBybyBjbGFzcyAoTmF0aXZlIEJ1bGxldCBQaHlzaWNzIDIuODIpXHJcbiAgICAgKiBAY2xhc3MgQ2hhcmFjdGVyQ29udHJvbGxlciAtIEFsbCByaWdodHMgcmVzZXJ2ZWQgKGMpIDIwMjAgTWFja2V5IEtpbmFyZFxyXG4gICAgICovXHJcbiAgICBleHBvcnQgY2xhc3MgQ2hhcmFjdGVyQ29udHJvbGxlciBleHRlbmRzIEJBQllMT04uU2NyaXB0Q29tcG9uZW50IHtcclxuICAgICAgICBwcml2YXRlIF9hYnN0cmFjdE1lc2g6QkFCWUxPTi5BYnN0cmFjdE1lc2ggPSBudWxsO1xyXG4gICAgICAgIHByaXZhdGUgX2F2YXRhclJhZGl1czpudW1iZXIgPSAwLjU7XHJcbiAgICAgICAgcHJpdmF0ZSBfYXZhdGFySGVpZ2h0Om51bWJlciA9IDI7XHJcbiAgICAgICAgcHJpdmF0ZSBfY2VudGVyT2Zmc2V0OkJBQllMT04uVmVjdG9yMyA9IG5ldyBCQUJZTE9OLlZlY3RvcjMoMCwwLDApO1xyXG4gICAgICAgIHByaXZhdGUgX3Nsb3BlTGltaXQ6bnVtYmVyID0gNDU7XHJcbiAgICAgICAgcHJpdmF0ZSBfc2tpbldpZHRoOm51bWJlciA9IDAuMDg7XHJcbiAgICAgICAgcHJpdmF0ZSBfc3RlcE9mZnNldDpudW1iZXIgPSAwLjM7ICAgLy8gU2VlIGh0dHBzOi8vZGlzY291cnNlLnRocmVlanMub3JnL3QvYW1tby1qcy13aXRoLXRocmVlLWpzLzEyNTMwLzQ3IChXb3JrcyBCZXN0IFdpdGggMC41MzUgYW5kIEJveCBPciBDeWxpbmRlciBTaGFwZSAtID8/PylcclxuICAgICAgICBwcml2YXRlIF9jYXBzdWxlU2VnbWVudHM6bnVtYmVyID0gMTY7XHJcbiAgICAgICAgcHJpdmF0ZSBfbWluTW92ZURpc3RhbmNlOm51bWJlciA9IDAuMDAxO1xyXG4gICAgICAgIHByaXZhdGUgX2lzUGh5c2ljc1JlYWR5OmJvb2xlYW4gPSBmYWxzZTtcclxuICAgICAgICBwcml2YXRlIF9tYXhDb2xsaXNpb25zOm51bWJlciA9IDQ7XHJcbiAgICAgICAgcHJpdmF0ZSBfY3JlYXRlQ3lsaW5kZXJTaGFwZTpib29sZWFuID0gZmFsc2U7XHJcbiAgICAgICAgcHJpdmF0ZSBfbW92ZW1lbnRWZWxvY2l0eTpCQUJZTE9OLlZlY3RvcjMgPSBuZXcgQkFCWUxPTi5WZWN0b3IzKDAsMCwwKTtcclxuICAgICAgICBwcml2YXRlIF90bXBQb3NpdGlvbkJ1ZmZlcjpCQUJZTE9OLlZlY3RvcjMgPSBuZXcgQkFCWUxPTi5WZWN0b3IzKDAsMCwwKTtcclxuICAgICAgICBwcml2YXRlIF90bXBDb2xsaXNpb25Db250YWN0czpDb2xsaXNpb25Db250YWN0SW5mb1tdID0gbnVsbDtcclxuXHJcbiAgICAgICAgcHVibGljIHVwZGF0ZVBvc2l0aW9uOmJvb2xlYW4gPSB0cnVlO1xyXG4gICAgICAgIHB1YmxpYyBzeW5jR2hvc3RUb1RyYW5zZm9ybTpib29sZWFuID0gdHJ1ZTtcclxuICAgICAgICBwdWJsaWMgcHJlQ3JlYXRlQ3lsaW5kZXJTaGFwZSgpOnZvaWQgeyB0aGlzLl9jcmVhdGVDeWxpbmRlclNoYXBlID0gdHJ1ZTsgfVxyXG4gICAgICAgIHB1YmxpYyBnZXRJbnRlcm5hbENoYXJhY3RlcigpOmFueSB7IHJldHVybiB0aGlzLm1fY2hhcmFjdGVyOyB9XHJcbiAgICAgICAgcHVibGljIGdldENvbGxpc2lvblNoYXBlKCk6YW55IHsgcmV0dXJuIHRoaXMubV9naG9zdFNoYXBlOyB9XHJcbiAgICAgICAgcHVibGljIGdldEF2YXRhclJhZGl1cygpOm51bWJlciB7IHJldHVybiB0aGlzLl9hdmF0YXJSYWRpdXM7IH1cclxuICAgICAgICBwdWJsaWMgZ2V0QXZhdGFySGVpZ2h0KCk6bnVtYmVyIHsgcmV0dXJuIHRoaXMuX2F2YXRhckhlaWdodDsgfVxyXG4gICAgICAgIHB1YmxpYyBnZXRTa2luV2lkdGgoKTpudW1iZXIgeyByZXR1cm4gdGhpcy5fc2tpbldpZHRoOyB9XHJcbiAgICAgICAgcHVibGljIGdldFN0ZXBPZmZzZXQoKTpudW1iZXIgeyByZXR1cm4gdGhpcy5fc3RlcE9mZnNldDsgfVxyXG4gICAgICAgIHB1YmxpYyBnZXRDZW50ZXJPZmZzZXQoKTpCQUJZTE9OLlZlY3RvcjMgeyByZXR1cm4gdGhpcy5fY2VudGVyT2Zmc2V0OyB9XHJcbiAgICAgICAgcHVibGljIGdldENhcHN1bGVTaXplKCk6QkFCWUxPTi5WZWN0b3IzIHsgcmV0dXJuIHRoaXMubV9jYXBzdWxlU2l6ZTsgfVxyXG4gICAgICAgIHB1YmxpYyBnZXRNaW5Nb3ZlRGlzdGFuY2UoKTpudW1iZXIgeyByZXR1cm4gdGhpcy5fbWluTW92ZURpc3RhbmNlOyB9XHJcbiAgICAgICAgcHVibGljIHNldE1pbk1vdmVEaXN0YW5jZShkaXN0YW5jZTpudW1iZXIpOnZvaWQgeyB0aGlzLl9taW5Nb3ZlRGlzdGFuY2UgPSBkaXN0YW5jZTsgfVxyXG4gICAgICAgIHB1YmxpYyBnZXRWZXJ0aWNhbFZlbG9jaXR5KCk6bnVtYmVyIHsgcmV0dXJuICh0aGlzLm1fY2hhcmFjdGVyICE9IG51bGwgJiYgdGhpcy5tX2NoYXJhY3Rlci5nZXRWZXJ0aWNhbFZlbG9jaXR5KSA/IHRoaXMubV9jaGFyYWN0ZXIuZ2V0VmVydGljYWxWZWxvY2l0eSgpIDogMDsgfSAvLyBOb3RlOiBUb29sa2l0IEFkZG9uIEZ1bmN0aW9uXHJcbiAgICAgICAgcHVibGljIGdldEFkZGVkTWFyZ2luKCk6bnVtYmVyIHsgcmV0dXJuICh0aGlzLm1fY2hhcmFjdGVyICE9IG51bGwgJiYgdGhpcy5tX2NoYXJhY3Rlci5nZXRBZGRlZE1hcmdpbikgPyB0aGlzLm1fY2hhcmFjdGVyLmdldEFkZGVkTWFyZ2luKCkgOiAwOyB9IC8vIE5vdGU6IFRvb2xraXQgQWRkb24gRnVuY3Rpb25cclxuICAgICAgICBwdWJsaWMgc2V0QWRkZWRNYXJnaW4obWFyZ2luOm51bWJlcik6dm9pZCB7IGlmICh0aGlzLm1fY2hhcmFjdGVyICE9IG51bGwgJiYgdGhpcy5tX2NoYXJhY3Rlci5nZXRBZGRlZE1hcmdpbikgdGhpcy5tX2NoYXJhY3Rlci5zZXRBZGRlZE1hcmdpbihtYXJnaW4pOyB9IC8vIE5vdGU6IFRvb2xraXQgQWRkb24gRnVuY3Rpb25cclxuICAgICAgICBwdWJsaWMgc2V0TWF4SnVtcEhlaWdodChtYXhKdW1wSGVpZ2h0Om51bWJlcik6dm9pZCB7IGlmICh0aGlzLm1fY2hhcmFjdGVyICE9IG51bGwpIHRoaXMubV9jaGFyYWN0ZXIuc2V0TWF4SnVtcEhlaWdodChtYXhKdW1wSGVpZ2h0KTsgfVxyXG4gICAgICAgIHB1YmxpYyBzZXRGYWxsaW5nU3BlZWQoZmFsbFNwZWVkOm51bWJlcik6dm9pZCB7IGlmICh0aGlzLm1fY2hhcmFjdGVyICE9IG51bGwpIHRoaXMubV9jaGFyYWN0ZXIuc2V0RmFsbFNwZWVkKGZhbGxTcGVlZCk7IH1cclxuICAgICAgICBwdWJsaWMgZ2V0U2xvcGVMaW1pdCgpOm51bWJlciB7IHJldHVybiAodGhpcy5tX2NoYXJhY3RlciAhPSBudWxsKSA/IHRoaXMubV9jaGFyYWN0ZXIuZ2V0TWF4U2xvcGUoKSA6IDA7IH1cclxuICAgICAgICBwdWJsaWMgc2V0U2xvcGVMaW1pdChzbG9wZVJhZGlhbnM6bnVtYmVyKTp2b2lkIHsgaWYgKHRoaXMubV9jaGFyYWN0ZXIgIT0gbnVsbCkgdGhpcy5tX2NoYXJhY3Rlci5zZXRNYXhTbG9wZShzbG9wZVJhZGlhbnMpOyB9XHJcbiAgICAgICAgcHVibGljIHNldFVwQXhpcyhheGlzOm51bWJlcik6dm9pZCB7IGlmICh0aGlzLm1fY2hhcmFjdGVyICE9IG51bGwpIHRoaXMubV9jaGFyYWN0ZXIuc2V0VXBBeGlzKGF4aXMpOyB9XHJcbiAgICAgICAgcHVibGljIGdldEdyYXZpdHkoKTpudW1iZXIgeyByZXR1cm4gKHRoaXMubV9jaGFyYWN0ZXIgIT0gbnVsbCkgPyB0aGlzLm1fY2hhcmFjdGVyLmdldEdyYXZpdHkoKSA6IDA7IH1cclxuICAgICAgICBwdWJsaWMgc2V0R3Jhdml0eShncmF2aXR5Om51bWJlcik6dm9pZCB7IGlmICh0aGlzLm1fY2hhcmFjdGVyICE9IG51bGwpIHRoaXMubV9jaGFyYWN0ZXIuc2V0R3Jhdml0eShncmF2aXR5KTsgfVxyXG4gICAgICAgIHB1YmxpYyBpc0dyb3VuZGVkKCk6Ym9vbGVhbiB7IHJldHVybiAodGhpcy5tX2NoYXJhY3RlciAhPSBudWxsKSA/IHRoaXMubV9jaGFyYWN0ZXIub25Hcm91bmQoKSA6IGZhbHNlOyB9XHJcbiAgICAgICAgcHVibGljIGlzUmVhZHkoKTpib29sZWFuIHsgcmV0dXJuICh0aGlzLm1fY2hhcmFjdGVyICE9IG51bGwpOyB9XHJcbiAgICAgICAgcHVibGljIGNhbkp1bXAoKTpib29sZWFuIHsgcmV0dXJuICh0aGlzLm1fY2hhcmFjdGVyICE9IG51bGwpID8gdGhpcy5tX2NoYXJhY3Rlci5jYW5KdW1wKCkgOiBmYWxzZTsgfVxyXG5cclxuICAgICAgICAvKiogUmVnaXN0ZXIgaGFuZGxlciB0aGF0IGlzIHRyaWdnZXJlZCB3aGVuIHRoZSB0cmFuc2Zvcm0gcG9zaXRpb24gaGFzIGJlZW4gdXBkYXRlZCAqL1xyXG4gICAgICAgIHB1YmxpYyBvblVwZGF0ZVBvc2l0aW9uT2JzZXJ2YWJsZSA9IG5ldyBCQUJZTE9OLk9ic2VydmFibGU8QkFCWUxPTi5UcmFuc2Zvcm1Ob2RlPigpO1xyXG4gICAgICAgIC8qKiBSZWdpc3RlciBoYW5kbGVyIHRoYXQgaXMgdHJpZ2dlcmVkIHdoZW4gdGhlIGEgY29sbGlzaW9uIGNvbnRhY3QgaGFzIGVudGVyZWQgKi9cclxuICAgICAgICBwdWJsaWMgb25Db2xsaXNpb25FbnRlck9ic2VydmFibGUgPSBuZXcgQkFCWUxPTi5PYnNlcnZhYmxlPEJBQllMT04uQWJzdHJhY3RNZXNoPigpO1xyXG4gICAgICAgIC8qKiBSZWdpc3RlciBoYW5kbGVyIHRoYXQgaXMgdHJpZ2dlcmVkIHdoZW4gdGhlIGEgY29sbGlzaW9uIGNvbnRhY3QgaXMgYWN0aXZlICovXHJcbiAgICAgICAgcHVibGljIG9uQ29sbGlzaW9uU3RheU9ic2VydmFibGUgPSBuZXcgQkFCWUxPTi5PYnNlcnZhYmxlPEJBQllMT04uQWJzdHJhY3RNZXNoPigpO1xyXG4gICAgICAgIC8qKiBSZWdpc3RlciBoYW5kbGVyIHRoYXQgaXMgdHJpZ2dlcmVkIHdoZW4gdGhlIGEgY29sbGlzaW9uIGNvbnRhY3QgaGFzIGV4aXRlZCAqL1xyXG4gICAgICAgIHB1YmxpYyBvbkNvbGxpc2lvbkV4aXRPYnNlcnZhYmxlID0gbmV3IEJBQllMT04uT2JzZXJ2YWJsZTxCQUJZTE9OLkFic3RyYWN0TWVzaD4oKTtcclxuXHJcbiAgICAgICAgcHJvdGVjdGVkIG1fY2hhcmFjdGVyOmFueSA9IG51bGw7XHJcbiAgICAgICAgcHJvdGVjdGVkIG1fZ2hvc3RTaGFwZTphbnkgPSBudWxsO1xyXG4gICAgICAgIHByb3RlY3RlZCBtX2dob3N0T2JqZWN0OmFueSA9IG51bGw7XHJcbiAgICAgICAgcHJvdGVjdGVkIG1fZ2hvc3RDb2xsaXNpb246YW55ID0gbnVsbDtcclxuICAgICAgICBwcm90ZWN0ZWQgbV9naG9zdFRyYW5zZm9ybTphbnkgPSBudWxsO1xyXG4gICAgICAgIHByb3RlY3RlZCBtX2dob3N0UG9zaXRpb246YW55ID0gbnVsbDtcclxuICAgICAgICBwcm90ZWN0ZWQgbV9zdGFydFBvc2l0aW9uOmFueSA9IG51bGw7XHJcbiAgICAgICAgcHJvdGVjdGVkIG1fc3RhcnRUcmFuc2Zvcm06YW55ID0gbnVsbDtcclxuICAgICAgICBwcm90ZWN0ZWQgbV93YWxrRGlyZWN0aW9uOmFueSA9IG51bGw7XHJcbiAgICAgICAgcHJvdGVjdGVkIG1fd2FycFBvc2l0aW9uOmFueSA9IG51bGw7XHJcbiAgICAgICAgcHJvdGVjdGVkIG1fdHVybmluZ1JhdGU6bnVtYmVyID0gMDtcclxuICAgICAgICBwcm90ZWN0ZWQgbV9tb3ZlRGVsdGFYOm51bWJlciA9IDA7XHJcbiAgICAgICAgcHJvdGVjdGVkIG1fbW92ZURlbHRhWjpudW1iZXIgPSAwO1xyXG4gICAgICAgIHByb3RlY3RlZCBtX2NhcHN1bGVTaXplOkJBQllMT04uVmVjdG9yMyA9IEJBQllMT04uVmVjdG9yMy5aZXJvKCk7XHJcbiAgICAgICAgcHJvdGVjdGVkIG1fcGh5c2ljc0VuZ2luZTpCQUJZTE9OLklQaHlzaWNzRW5naW5lID0gbnVsbDtcclxuICAgICAgICBwcm90ZWN0ZWQgbV9jaGFyYWN0ZXJQb3NpdGlvbjpCQUJZTE9OLlZlY3RvcjMgPSBCQUJZTE9OLlZlY3RvcjMuWmVybygpO1xyXG4gICAgICAgIHByb3RlY3RlZCBpbnRlcm5hbFdhcnAocG9zaXRpb246YW55KTp2b2lkIHsgaWYgKHRoaXMubV9jaGFyYWN0ZXIgIT0gbnVsbCkgdGhpcy5tX2NoYXJhY3Rlci53YXJwKHBvc2l0aW9uKTsgfSAvLyBQb3NpdGlvbjogQW1tby5idFZlY3RvcjNcclxuICAgICAgICBwcm90ZWN0ZWQgaW50ZXJuYWxKdW1wKCk6dm9pZCB7IGlmICh0aGlzLm1fY2hhcmFjdGVyICE9IG51bGwpIHRoaXMubV9jaGFyYWN0ZXIuanVtcCgpOyB9XHJcbiAgICAgICAgcHJvdGVjdGVkIGludGVybmFsU2V0SnVtcFNwZWVkKHNwZWVkOm51bWJlcik6dm9pZCB7IGlmICh0aGlzLm1fY2hhcmFjdGVyICE9IG51bGwpIHRoaXMubV9jaGFyYWN0ZXIuc2V0SnVtcFNwZWVkKHNwZWVkKTsgfVxyXG4gICAgICAgIHByb3RlY3RlZCBpbnRlcm5hbFNldFdhbGtEaXJlY3Rpb24oZGlyZWN0aW9uOmFueSk6dm9pZCB7IGlmICh0aGlzLm1fY2hhcmFjdGVyICE9IG51bGwpIHRoaXMubV9jaGFyYWN0ZXIuc2V0V2Fsa0RpcmVjdGlvbihkaXJlY3Rpb24pOyB9IC8vIERpcmVjdGlvbjogQW1tby5idFZlY3RvcjNcclxuICAgICAgICBwcm90ZWN0ZWQgaW50ZXJuYWxTZXRWZWxvY2l0eUZvclRpbWVJbnRlcnZhbCh2ZWxvY2l0eTphbnksIGludGVydmFsOm51bWJlcik6IHZvaWQgeyBpZiAodGhpcy5tX2NoYXJhY3RlciAhPSBudWxsKSB0aGlzLm1fY2hhcmFjdGVyLnNldFZlbG9jaXR5Rm9yVGltZUludGVydmFsKHZlbG9jaXR5LCBpbnRlcnZhbCk7IH0gLy8gVmVsb2NpdHk6IEFtbW8uYnRWZWN0b3IzXHJcblxyXG4gICAgICAgIHByb3RlY3RlZCBhd2FrZSgpOnZvaWQgeyB0aGlzLmF3YWtlTW92ZW1lbnRTdGF0ZSgpOyB9XHJcbiAgICAgICAgcHJvdGVjdGVkIHN0YXJ0KCk6dm9pZCB7IHRoaXMuc3RhcnRNb3ZlbWVudFN0YXRlKCk7IH1cclxuICAgICAgICBwcm90ZWN0ZWQgdXBkYXRlKCkgOnZvaWQgeyAgdGhpcy51cGRhdGVNb3ZlbWVudFN0YXRlKCk7IH1cclxuICAgICAgICBwcm90ZWN0ZWQgZGVzdHJveSgpOiB2b2lkIHsgdGhpcy5kZXN0cm95TW92ZW1lbnRTdGF0ZSgpOyB9XHJcblxyXG4gICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbiAgICAgICAgLy8gUHJvdGVjdGVkIENoYXJhY3RlciBNb3ZlbWVudCBTdGF0ZSBGdW5jdGlvbnMgLy9cclxuICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4gICAgICAgIHByb3RlY3RlZCBhd2FrZU1vdmVtZW50U3RhdGUoKTp2b2lkIHtcclxuICAgICAgICAgICAgdGhpcy5fYWJzdHJhY3RNZXNoID0gdGhpcy5nZXRBYnN0cmFjdE1lc2goKTtcclxuICAgICAgICAgICAgdGhpcy5fYXZhdGFyUmFkaXVzID0gdGhpcy5nZXRQcm9wZXJ0eShcImF2YXRhclJhZGl1c1wiLCB0aGlzLl9hdmF0YXJSYWRpdXMpO1xyXG4gICAgICAgICAgICB0aGlzLl9hdmF0YXJIZWlnaHQgPSB0aGlzLmdldFByb3BlcnR5KFwiYXZhdGFySGVpZ2h0XCIsIHRoaXMuX2F2YXRhckhlaWdodCk7XHJcbiAgICAgICAgICAgIHRoaXMuX3Nsb3BlTGltaXQgPSB0aGlzLmdldFByb3BlcnR5KFwic2xvcGVMaW1pdFwiLCB0aGlzLl9zbG9wZUxpbWl0KTtcclxuICAgICAgICAgICAgdGhpcy5fc2tpbldpZHRoID0gdGhpcy5nZXRQcm9wZXJ0eShcInNraW5XaWR0aFwiLCB0aGlzLl9za2luV2lkdGgpO1xyXG4gICAgICAgICAgICB0aGlzLl9zdGVwT2Zmc2V0ID0gdGhpcy5nZXRQcm9wZXJ0eShcInN0ZXBPZmZzZXRcIiwgdGhpcy5fc3RlcE9mZnNldCk7XHJcbiAgICAgICAgICAgIHRoaXMuX21pbk1vdmVEaXN0YW5jZSA9IHRoaXMuZ2V0UHJvcGVydHkoXCJtaW5Nb3ZlRGlzdGFuY2VcIiwgdGhpcy5fbWluTW92ZURpc3RhbmNlKTtcclxuICAgICAgICAgICAgdGhpcy5fY2Fwc3VsZVNlZ21lbnRzID0gdGhpcy5nZXRQcm9wZXJ0eShcImNhcHN1bGVTZWdtZW50c1wiLCB0aGlzLl9jYXBzdWxlU2VnbWVudHMpO1xyXG4gICAgICAgICAgICB0aGlzLm1fd2FycFBvc2l0aW9uID0gbmV3IEFtbW8uYnRWZWN0b3IzKDAsIDAsIDApO1xyXG4gICAgICAgICAgICB0aGlzLm1fd2Fsa0RpcmVjdGlvbiA9IG5ldyBBbW1vLmJ0VmVjdG9yMygwLCAwLCAwKTtcclxuICAgICAgICAgICAgdGhpcy5tX3BoeXNpY3NFbmdpbmUgPSBCQUJZTE9OLlNjZW5lTWFuYWdlci5HZXRQaHlzaWNzRW5naW5lKHRoaXMuc2NlbmUpO1xyXG4gICAgICAgICAgICBjb25zdCBjZW50ZXJPZmZzZXREYXRhOkJBQllMT04uSVVuaXR5VmVjdG9yMyA9IHRoaXMuZ2V0UHJvcGVydHkoXCJjZW50ZXJPZmZzZXRcIik7XHJcbiAgICAgICAgICAgIGlmIChjZW50ZXJPZmZzZXREYXRhICE9IG51bGwpIHRoaXMuX2NlbnRlck9mZnNldCA9IEJBQllMT04uVXRpbGl0aWVzLlBhcnNlVmVjdG9yMyhjZW50ZXJPZmZzZXREYXRhKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByb3RlY3RlZCBzdGFydE1vdmVtZW50U3RhdGUoKTp2b2lkIHtcclxuICAgICAgICAgICAgdGhpcy5zZXR1cE1vdmVtZW50U3RhdGUoKTtcclxuICAgICAgICAgICAgdGhpcy51cGRhdGVNb3ZlbWVudFN0YXRlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHByb3RlY3RlZCBzZXR1cE1vdmVtZW50U3RhdGUoKTp2b2lkIHtcclxuICAgICAgICAgICAgdGhpcy5zZXRNYXhOb3RpZmljYXRpb25zKHRoaXMuX21heENvbGxpc2lvbnMpO1xyXG4gICAgICAgICAgICBjb25zdCB3b3JsZDphbnkgPSBCQUJZTE9OLlNjZW5lTWFuYWdlci5HZXRQaHlzaWNzV29ybGQodGhpcy5zY2VuZSk7XHJcbiAgICAgICAgICAgIGlmICh3b3JsZCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzdGFydGluZ1BvczpCQUJZTE9OLlZlY3RvcjMgPSBCQUJZTE9OLlV0aWxpdGllcy5HZXRBYnNvbHV0ZVBvc2l0aW9uKHRoaXMudHJhbnNmb3JtLCB0aGlzLl9jZW50ZXJPZmZzZXQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tX3N0YXJ0UG9zaXRpb24gPSBuZXcgQW1tby5idFZlY3RvcjMoc3RhcnRpbmdQb3MueCwgc3RhcnRpbmdQb3MueSwgc3RhcnRpbmdQb3Mueik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1fc3RhcnRUcmFuc2Zvcm0gPSBuZXcgQW1tby5idFRyYW5zZm9ybSgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tX3N0YXJ0VHJhbnNmb3JtLnNldElkZW50aXR5KCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1fc3RhcnRUcmFuc2Zvcm0uc2V0T3JpZ2luKHRoaXMubV9zdGFydFBvc2l0aW9uKTtcclxuICAgICAgICAgICAgICAgIC8vIC4uXHJcbiAgICAgICAgICAgICAgICBjb25zdCBjYXBzdWxlU2l6ZTpCQUJZTE9OLlZlY3RvcjMgPSBuZXcgQkFCWUxPTi5WZWN0b3IzKHRoaXMuX2F2YXRhclJhZGl1cywgdGhpcy5fYXZhdGFySGVpZ2h0LCAxKTtcclxuICAgICAgICAgICAgICAgIGNhcHN1bGVTaXplLnggKj0gTWF0aC5tYXgoTWF0aC5hYnModGhpcy50cmFuc2Zvcm0uc2NhbGluZy54KSwgTWF0aC5hYnModGhpcy50cmFuc2Zvcm0uc2NhbGluZy56KSk7XHJcbiAgICAgICAgICAgICAgICBjYXBzdWxlU2l6ZS55ICo9IHRoaXMudHJhbnNmb3JtLnNjYWxpbmcueTtcclxuICAgICAgICAgICAgICAgIHRoaXMubV9jYXBzdWxlU2l6ZS5jb3B5RnJvbShjYXBzdWxlU2l6ZSk7XHJcbiAgICAgICAgICAgICAgICAvLyAuLlxyXG4gICAgICAgICAgICAgICAgLy8gQ3JlYXRlIGEgZGVidWcgY29sbGlzaW9uIHNoYXBlXHJcbiAgICAgICAgICAgICAgICAvLyAuLlxyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2hvd0RlYnVnQ29sbGlkZXJzOmJvb2xlYW4gPSBCQUJZTE9OLlV0aWxpdGllcy5TaG93RGVidWdDb2xsaWRlcnMoKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNvbGxpZGVyVmlzaWJpbGl0eTpudW1iZXIgPSBCQUJZTE9OLlV0aWxpdGllcy5Db2xsaWRlclZpc2liaWxpdHkoKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNvbGxpZGVyUmVuZGVyR3JvdXA6bnVtYmVyID0gQkFCWUxPTi5VdGlsaXRpZXMuQ29sbGlkZXJSZW5kZXJHcm91cCgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHNob3dEZWJ1Z0NvbGxpZGVycyA9PT0gdHJ1ZSAmJiAoPGFueT50aGlzLnRyYW5zZm9ybSkuX2RlYnVnQ29sbGlkZXIgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRlYnVnTmFtZTpzdHJpbmcgPSB0aGlzLnRyYW5zZm9ybS5uYW1lICsgXCIuRGVidWdcIlxyXG4gICAgICAgICAgICAgICAgICAgIC8vIEVMTElQU0U6IGNvbnN0IGRlYnVnQ2Fwc3VsZTpCQUJZTE9OLk1lc2ggPSBCQUJZTE9OLk1lc2hCdWlsZGVyLkNyZWF0ZVNwaGVyZShkZWJ1Z05hbWUsIHsgc2VnbWVudHM6IDE2LCBkaWFtZXRlclg6IChjYXBzdWxlU2l6ZS54ICogMiksIGRpYW1ldGVyWTogKGNhcHN1bGVTaXplLnkgKiAxKSwgZGlhbWV0ZXJaOiAoY2Fwc3VsZVNpemUueCAqIDIpIH0sIHRoaXMuc2NlbmUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBkZWJ1Z0NhcHN1bGU6QkFCWUxPTi5NZXNoID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fY3JlYXRlQ3lsaW5kZXJTaGFwZSA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWJ1Z0NhcHN1bGUgPSBCQUJZTE9OLk1lc2hCdWlsZGVyLkNyZWF0ZUN5bGluZGVyKGRlYnVnTmFtZSwgeyB0ZXNzZWxsYXRpb246dGhpcy5fY2Fwc3VsZVNlZ21lbnRzLCBzdWJkaXZpc2lvbnM6IDgsIGhlaWdodDogY2Fwc3VsZVNpemUueSwgZGlhbWV0ZXI6IChjYXBzdWxlU2l6ZS54ICogMikgfSwgdGhpcy5zY2VuZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVidWdDYXBzdWxlID0gQkFCWUxPTi5NZXNoQnVpbGRlci5DcmVhdGVDYXBzdWxlKGRlYnVnTmFtZSwgeyB0ZXNzZWxsYXRpb246dGhpcy5fY2Fwc3VsZVNlZ21lbnRzLCBzdWJkaXZpc2lvbnM6IDgsIGNhcFN1YmRpdmlzaW9uczogOCwgaGVpZ2h0OiBjYXBzdWxlU2l6ZS55LCByYWRpdXM6IGNhcHN1bGVTaXplLnggfSwgdGhpcy5zY2VuZSk7ICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZGVidWdDYXBzdWxlLnBvc2l0aW9uLnNldCgwLDAsMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVidWdDYXBzdWxlLnJvdGF0aW9uUXVhdGVybmlvbiA9IHRoaXMudHJhbnNmb3JtLnJvdGF0aW9uUXVhdGVybmlvbi5jbG9uZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGRlYnVnQ2Fwc3VsZS5zZXRQYXJlbnQodGhpcy50cmFuc2Zvcm0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGRlYnVnQ2Fwc3VsZS5wb3NpdGlvbi5jb3B5RnJvbSh0aGlzLl9jZW50ZXJPZmZzZXQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGRlYnVnQ2Fwc3VsZS52aXNpYmlsaXR5ID0gY29sbGlkZXJWaXNpYmlsaXR5O1xyXG4gICAgICAgICAgICAgICAgICAgIGRlYnVnQ2Fwc3VsZS5yZW5kZXJpbmdHcm91cElkID0gY29sbGlkZXJSZW5kZXJHcm91cDtcclxuICAgICAgICAgICAgICAgICAgICBkZWJ1Z0NhcHN1bGUubWF0ZXJpYWwgPSBCQUJZTE9OLlV0aWxpdGllcy5HZXRDb2xsaWRlck1hdGVyaWFsKHRoaXMuc2NlbmUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGRlYnVnQ2Fwc3VsZS5jaGVja0NvbGxpc2lvbnMgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICBkZWJ1Z0NhcHN1bGUuaXNQaWNrYWJsZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICg8YW55PnRoaXMudHJhbnNmb3JtKS5fZGVidWdDb2xsaWRlciA9IGRlYnVnQ2Fwc3VsZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIEVMTElQU0U6IHRoaXMubV9naG9zdFNoYXBlID0gQkFCWUxPTi5TY2VuZU1hbmFnZXIuQ3JlYXRlUGh5c2ljc0VsbGlwc29pZFNoYXBlKG5ldyBBbW1vLmJ0VmVjdG9yMyh0aGlzLl9hdmF0YXJSYWRpdXMsICh0aGlzLl9hdmF0YXJIZWlnaHQgKiAwLjUpLCB0aGlzLl9hdmF0YXJSYWRpdXMpKTtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9jcmVhdGVDeWxpbmRlclNoYXBlID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tX2dob3N0U2hhcGUgPSBuZXcgQW1tby5idEN5bGluZGVyU2hhcGUobmV3IEFtbW8uYnRWZWN0b3IzKHRoaXMuX2F2YXRhclJhZGl1cywgKHRoaXMuX2F2YXRhckhlaWdodCAqIDAuNSksIHRoaXMuX2F2YXRhclJhZGl1cykpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1fZ2hvc3RTaGFwZSA9IG5ldyBBbW1vLmJ0Q2Fwc3VsZVNoYXBlKHRoaXMuX2F2YXRhclJhZGl1cywgKHRoaXMuX2F2YXRhckhlaWdodCAqIDAuNSkpOyAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIFNldCBnaG9zdCBzaGFwZSBtYXJnaW4gc2l6ZVxyXG4gICAgICAgICAgICAgICAgdGhpcy5tX2dob3N0U2hhcGUuc2V0TWFyZ2luKHRoaXMuX3NraW5XaWR0aCk7XHJcbiAgICAgICAgICAgICAgICAvLyBDcmVhdGUgYSBnaG9zdCBjb2xsaXNpb24gb2JqZWN0XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1fZ2hvc3RPYmplY3QgPSBuZXcgQW1tby5idFBhaXJDYWNoaW5nR2hvc3RPYmplY3QoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMubV9naG9zdE9iamVjdC5zZXRXb3JsZFRyYW5zZm9ybSh0aGlzLm1fc3RhcnRUcmFuc2Zvcm0pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tX2dob3N0T2JqZWN0LnNldENvbGxpc2lvblNoYXBlKHRoaXMubV9naG9zdFNoYXBlKTtcclxuICAgICAgICAgICAgICAgIHRoaXMubV9naG9zdE9iamVjdC5zZXRDb2xsaXNpb25GbGFncyhCQUJZTE9OLkNvbGxpc2lvbkZsYWdzLkNGX0NIQVJBQ1RFUl9PQkpFQ1QpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tX2dob3N0T2JqZWN0LnNldEFjdGl2YXRpb25TdGF0ZSg0KVxyXG4gICAgICAgICAgICAgICAgdGhpcy5tX2dob3N0T2JqZWN0LmFjdGl2YXRlKHRydWUpOyAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIC8vIENyZWF0ZSBhIGdob3N0IGNvbGxpc2lvbiBjYXN0aW5nXHJcbiAgICAgICAgICAgICAgICB0aGlzLm1fZ2hvc3RDb2xsaXNpb24gPSBBbW1vLmNhc3RPYmplY3QodGhpcy5tX2dob3N0T2JqZWN0LCBBbW1vLmJ0Q29sbGlzaW9uT2JqZWN0KTtcclxuICAgICAgICAgICAgICAgIHRoaXMubV9naG9zdENvbGxpc2lvbi5lbnRpdHkgPSB0aGlzLl9hYnN0cmFjdE1lc2g7XHJcbiAgICAgICAgICAgICAgICAvLyBDcmVhdGUga2luZW1hdGljIGNoYXJhY3RlciBjb250cm9sbGVyXHJcbiAgICAgICAgICAgICAgICB0aGlzLm1fY2hhcmFjdGVyID0gbmV3IEFtbW8uYnRLaW5lbWF0aWNDaGFyYWN0ZXJDb250cm9sbGVyKHRoaXMubV9naG9zdE9iamVjdCwgdGhpcy5tX2dob3N0U2hhcGUsIHRoaXMuX3N0ZXBPZmZzZXQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tX2NoYXJhY3Rlci5zZXRVc2VHaG9zdFN3ZWVwVGVzdCh0cnVlKTtcclxuICAgICAgICAgICAgICAgIHRoaXMubV9jaGFyYWN0ZXIuc2V0VXBJbnRlcnBvbGF0ZSh0cnVlKTtcclxuICAgICAgICAgICAgICAgIHRoaXMubV9jaGFyYWN0ZXIuc2V0R3Jhdml0eShCQUJZTE9OLlN5c3RlbS5HcmF2aXR5M0cpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tX2NoYXJhY3Rlci5zZXRNYXhTbG9wZShCQUJZTE9OLlRvb2xzLlRvUmFkaWFucyh0aGlzLl9zbG9wZUxpbWl0ICsgMSkpO1xyXG4gICAgICAgICAgICAgICAgLy8gQWRkIGdob3N0IG9iamVjdCBhbmQgY2hhcmFjdGVyIHRvIHdvcmxkXHJcbiAgICAgICAgICAgICAgICB3b3JsZC5hZGRDb2xsaXNpb25PYmplY3QodGhpcy5tX2dob3N0T2JqZWN0LCBCQUJZTE9OLkNvbGxpc2lvbkZpbHRlcnMuQ2hhcmFjdGVyRmlsdGVyLCBCQUJZTE9OLkNvbGxpc2lvbkZpbHRlcnMuU3RhdGljRmlsdGVyIHwgQkFCWUxPTi5Db2xsaXNpb25GaWx0ZXJzLkRlZmF1bHRGaWx0ZXIgfCBCQUJZTE9OLkNvbGxpc2lvbkZpbHRlcnMuQ2hhcmFjdGVyRmlsdGVyKTtcclxuICAgICAgICAgICAgICAgIHdvcmxkLmFkZEFjdGlvbih0aGlzLm1fY2hhcmFjdGVyKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIEJBQllMT04uVG9vbHMuV2FybihcIk51bGwgcGh5c2ljcyB3b3JsZCBkZXRlY3RlZC4gRmFpbGVkIHRvIGNyZWF0ZSBjaGFyYWN0ZXIgY29udHJvbGxlcjogXCIgKyB0aGlzLnRyYW5zZm9ybS5uYW1lKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLl9pc1BoeXNpY3NSZWFkeSA9ICh0aGlzLm1fcGh5c2ljc0VuZ2luZSAhPSBudWxsICYmIHRoaXMuX3RtcENvbGxpc2lvbkNvbnRhY3RzICE9IG51bGwgJiYgdGhpcy5tX2dob3N0T2JqZWN0ICE9IG51bGwgJiYgdGhpcy5fYWJzdHJhY3RNZXNoICE9IG51bGwpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBwcm90ZWN0ZWQgc3luY01vdmVtZW50U3RhdGUoKTp2b2lkIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX2lzUGh5c2ljc1JlYWR5ID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1fZ2hvc3RUcmFuc2Zvcm0gPSB0aGlzLm1fZ2hvc3RPYmplY3QuZ2V0V29ybGRUcmFuc2Zvcm0oKTtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLm1fZ2hvc3RUcmFuc2Zvcm0gIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubV9naG9zdFBvc2l0aW9uID0gdGhpcy5tX2dob3N0VHJhbnNmb3JtLmdldE9yaWdpbigpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1fZ2hvc3RQb3NpdGlvbiA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcHJvdGVjdGVkIHVwZGF0ZU1vdmVtZW50U3RhdGUoKTp2b2lkIHtcclxuICAgICAgICAgICAgdGhpcy5zeW5jTW92ZW1lbnRTdGF0ZSgpO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5faXNQaHlzaWNzUmVhZHkgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLm1fZ2hvc3RQb3NpdGlvbiAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMudXBkYXRlUG9zaXRpb24gPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gREVQUkVDSUFURUQ6IHRoaXMudHJhbnNmb3JtLnBvc2l0aW9uLnNldCh0aGlzLm1fZ2hvc3RQb3NpdGlvbi54KCksIHRoaXMubV9naG9zdFBvc2l0aW9uLnkoKSwgdGhpcy5tX2dob3N0UG9zaXRpb24ueigpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tX2NoYXJhY3RlclBvc2l0aW9uLnNldCh0aGlzLm1fZ2hvc3RQb3NpdGlvbi54KCksIHRoaXMubV9naG9zdFBvc2l0aW9uLnkoKSwgdGhpcy5tX2dob3N0UG9zaXRpb24ueigpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX2NlbnRlck9mZnNldCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBOb3RlOiBTdWJ0cmFjdCBDaGFyYWN0ZXIgQ29udHJvbGxlciBDZW50ZXIgT2Zmc2V0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1fY2hhcmFjdGVyUG9zaXRpb24uc3VidHJhY3RJblBsYWNlKHRoaXMuX2NlbnRlck9mZnNldCk7IFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudHJhbnNmb3JtLnBvc2l0aW9uLmNvcHlGcm9tKHRoaXMubV9jaGFyYWN0ZXJQb3NpdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuc3luY0dob3N0VG9UcmFuc2Zvcm0gPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0R2hvc3RXb3JsZFBvc2l0aW9uKHRoaXMudHJhbnNmb3JtLnBvc2l0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5vblVwZGF0ZVBvc2l0aW9uT2JzZXJ2YWJsZS5oYXNPYnNlcnZlcnMoKSA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9uVXBkYXRlUG9zaXRpb25PYnNlcnZhYmxlLm5vdGlmeU9ic2VydmVycyh0aGlzLnRyYW5zZm9ybSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMucGFyc2VHaG9zdENvbGxpc2lvbkNvbnRhY3RzKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHByb3RlY3RlZCBwYXJzZUdob3N0Q29sbGlzaW9uQ29udGFjdHMoKTp2b2lkIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX2lzUGh5c2ljc1JlYWR5ID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBoYXNFbnRlck9ic2VydmVyczpib29sZWFuID0gdGhpcy5vbkNvbGxpc2lvbkVudGVyT2JzZXJ2YWJsZS5oYXNPYnNlcnZlcnMoKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGhhc1N0YXlPYnNlcnZlcnM6Ym9vbGVhbiA9IHRoaXMub25Db2xsaXNpb25TdGF5T2JzZXJ2YWJsZS5oYXNPYnNlcnZlcnMoKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGhhc0V4aXRPYnNlcnZlcnM6Ym9vbGVhbiA9IHRoaXMub25Db2xsaXNpb25FeGl0T2JzZXJ2YWJsZS5oYXNPYnNlcnZlcnMoKTtcclxuICAgICAgICAgICAgICAgIGlmIChoYXNFbnRlck9ic2VydmVycyB8fCBoYXNTdGF5T2JzZXJ2ZXJzIHx8IGhhc0V4aXRPYnNlcnZlcnMpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgaW5kZXggPSAwOyAvLyBOb3RlOiBGbGFnIEFsbCBDb2xsaXNpb24gTGlzdCBJdGVtcyBGb3IgRW5kIENvbnRhY3QgU3RhdGVcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCB0aGlzLl90bXBDb2xsaXNpb25Db250YWN0cy5sZW5ndGg7IGluZGV4KyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fdG1wQ29sbGlzaW9uQ29udGFjdHNbaW5kZXhdLnJlc2V0ID0gdHJ1ZTsgXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIC4uXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gUGFyc2UgT3ZlcmxhcHBpbmcgR2hvc3QgQ29udGFjdCBPYmplY3RzXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gLi5cclxuICAgICAgICAgICAgICAgICAgICBsZXQgY29udGFjdHM6bnVtYmVyID0gdGhpcy5tX2dob3N0T2JqZWN0LmdldE51bU92ZXJsYXBwaW5nT2JqZWN0cygpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjb250YWN0cyA+IHRoaXMuX21heENvbGxpc2lvbnMpIGNvbnRhY3RzID0gdGhpcy5fbWF4Q29sbGlzaW9ucztcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY29udGFjdHMgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IGNvbnRhY3RzOyBpbmRleCsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjb250YWN0T2JqZWN0OmFueSA9IHRoaXMubV9naG9zdE9iamVjdC5nZXRPdmVybGFwcGluZ09iamVjdChpbmRleCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29udGFjdE9iamVjdCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY29udGFjdEJvZHk6YW55ID0gQW1tby5jYXN0T2JqZWN0KGNvbnRhY3RPYmplY3QsIEFtbW8uYnRDb2xsaXNpb25PYmplY3QpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb250YWN0Qm9keSAhPSBudWxsICYmIGNvbnRhY3RCb2R5LmVudGl0eSAhPSBudWxsICYmIGNvbnRhY3RCb2R5LmlzQWN0aXZlKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGZvdW5kaW5kZXg6bnVtYmVyID0gLTE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbnRhY3RNZXNoOkJBQllMT04uQWJzdHJhY3RNZXNoID0gY29udGFjdEJvZHkuZW50aXR5IGFzIEJBQllMT04uQWJzdHJhY3RNZXNoO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCB0aGlzLl90bXBDb2xsaXNpb25Db250YWN0cy5sZW5ndGg7IGluZGV4KyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNoZWNrOkJBQllMT04uQ29sbGlzaW9uQ29udGFjdEluZm8gPSB0aGlzLl90bXBDb2xsaXNpb25Db250YWN0c1tpbmRleF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hlY2subWVzaCAhPSBudWxsICYmIGNoZWNrLm1lc2ggPT09IGNvbnRhY3RNZXNoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2suc3RhdGUgPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrLnJlc2V0ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm91bmRpbmRleCA9IGluZGV4O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmb3VuZGluZGV4ID09PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgdGhpcy5fdG1wQ29sbGlzaW9uQ29udGFjdHMubGVuZ3RoOyBpbmRleCsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaW5zZXJ0OkJBQllMT04uQ29sbGlzaW9uQ29udGFjdEluZm8gPSB0aGlzLl90bXBDb2xsaXNpb25Db250YWN0c1tpbmRleF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGluc2VydC5tZXNoID09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zZXJ0Lm1lc2ggPSBjb250YWN0TWVzaDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zZXJ0LnN0YXRlID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zZXJ0LnJlc2V0ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAvLyAuLlxyXG4gICAgICAgICAgICAgICAgICAgIC8vIERpc3BhdGNoIEdob3N0IENvbGxpc2lvbiBDb250YWN0IFN0YXRlXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gLi5cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCB0aGlzLl90bXBDb2xsaXNpb25Db250YWN0cy5sZW5ndGg7IGluZGV4KyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaW5mbzpCQUJZTE9OLkNvbGxpc2lvbkNvbnRhY3RJbmZvID0gdGhpcy5fdG1wQ29sbGlzaW9uQ29udGFjdHNbaW5kZXhdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5mby5yZXNldCA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRGlzcGF0Y2ggT24gQ29sbGlzaW9uIEV4aXQgRXZlbnRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChoYXNFeGl0T2JzZXJ2ZXJzICYmIGluZm8ubWVzaCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vbkNvbGxpc2lvbkV4aXRPYnNlcnZhYmxlLm5vdGlmeU9ic2VydmVycyhpbmZvLm1lc2gpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gUmVzZXQgQ29sbGlzaW9uIENvbnRhY3QgSW5mbyBJdGVtXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmZvLm1lc2ggPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5mby5zdGF0ZSA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmZvLnJlc2V0ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5mby5zdGF0ZSA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIERpc3BhdGNoIE9uIENvbGxpc2lvbiBFbnRlciBFdmVudFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChoYXNFbnRlck9ic2VydmVycyAmJiBpbmZvLm1lc2ggIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9uQ29sbGlzaW9uRW50ZXJPYnNlcnZhYmxlLm5vdGlmeU9ic2VydmVycyhpbmZvLm1lc2gpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRGlzcGF0Y2ggT24gQ29sbGlzaW9uIFN0YXkgRXZlbnRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaGFzU3RheU9ic2VydmVycyAmJiBpbmZvLm1lc2ggIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9uQ29sbGlzaW9uU3RheU9ic2VydmFibGUubm90aWZ5T2JzZXJ2ZXJzKGluZm8ubWVzaCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHByb3RlY3RlZCBkZXN0cm95TW92ZW1lbnRTdGF0ZSgpOnZvaWQge1xyXG4gICAgICAgICAgICB0aGlzLm1fcGh5c2ljc0VuZ2luZSA9IG51bGw7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm1fY2hhcmFjdGVyICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIEFtbW8uZGVzdHJveSh0aGlzLm1fY2hhcmFjdGVyKTtcclxuICAgICAgICAgICAgICAgIHRoaXMubV9jaGFyYWN0ZXIgPSBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm1fZ2hvc3RPYmplY3QgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgQW1tby5kZXN0cm95KHRoaXMubV9naG9zdE9iamVjdCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1fZ2hvc3RPYmplY3QgPSBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm1fZ2hvc3RTaGFwZSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBBbW1vLmRlc3Ryb3kodGhpcy5tX2dob3N0U2hhcGUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tX2dob3N0U2hhcGUgPSBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm1fZ2hvc3RDb2xsaXNpb24gIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgQW1tby5kZXN0cm95KHRoaXMubV9naG9zdENvbGxpc2lvbik7IC8vID8/P1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tX2dob3N0Q29sbGlzaW9uID0gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy5tX2dob3N0UG9zaXRpb24gIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgQW1tby5kZXN0cm95KHRoaXMubV9naG9zdFBvc2l0aW9uKTsgLy8gPz8/XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1fZ2hvc3RQb3NpdGlvbiA9IG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMubV9naG9zdFRyYW5zZm9ybSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBBbW1vLmRlc3Ryb3kodGhpcy5tX2dob3N0VHJhbnNmb3JtKTsgLy8gPz8/XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1fZ2hvc3RUcmFuc2Zvcm0gPSBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm1fc3RhcnRQb3NpdGlvbiAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBBbW1vLmRlc3Ryb3kodGhpcy5tX3N0YXJ0UG9zaXRpb24pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tX3N0YXJ0UG9zaXRpb24gPSBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm1fc3RhcnRUcmFuc2Zvcm0gIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgQW1tby5kZXN0cm95KHRoaXMubV9zdGFydFRyYW5zZm9ybSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1fc3RhcnRUcmFuc2Zvcm0gPSBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm1fd2FycFBvc2l0aW9uICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIEFtbW8uZGVzdHJveSh0aGlzLm1fd2FycFBvc2l0aW9uKTtcclxuICAgICAgICAgICAgICAgIHRoaXMubV93YXJwUG9zaXRpb24gPSBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm1fd2Fsa0RpcmVjdGlvbiAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBBbW1vLmRlc3Ryb3kodGhpcy5tX3dhbGtEaXJlY3Rpb24pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tX3dhbGtEaXJlY3Rpb24gPSBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMub25VcGRhdGVQb3NpdGlvbk9ic2VydmFibGUuY2xlYXIoKTtcclxuICAgICAgICAgICAgdGhpcy5vblVwZGF0ZVBvc2l0aW9uT2JzZXJ2YWJsZSA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMub25Db2xsaXNpb25FbnRlck9ic2VydmFibGUuY2xlYXIoKTtcclxuICAgICAgICAgICAgdGhpcy5vbkNvbGxpc2lvbkVudGVyT2JzZXJ2YWJsZSA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMub25Db2xsaXNpb25TdGF5T2JzZXJ2YWJsZS5jbGVhcigpO1xyXG4gICAgICAgICAgICB0aGlzLm9uQ29sbGlzaW9uU3RheU9ic2VydmFibGUgPSBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLm9uQ29sbGlzaW9uRXhpdE9ic2VydmFibGUuY2xlYXIoKTtcclxuICAgICAgICAgICAgdGhpcy5vbkNvbGxpc2lvbkV4aXRPYnNlcnZhYmxlID0gbnVsbDtcclxuICAgICAgICAgICAgdGhpcy5fdG1wQ29sbGlzaW9uQ29udGFjdHMgPSBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLl90bXBQb3NpdGlvbkJ1ZmZlciA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMuX2Fic3RyYWN0TWVzaCA9IG51bGw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbiAgICAgICAgLy8gQ2hhcmFjdGVyIENvbnRyb2xsZXIgQWR2YW5jZWQgSGVscGVyIEZ1bmN0aW9ucyAvL1xyXG4gICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuXHJcbiAgICAgICAgLyoqIEdldHMgdGhlIGdob3N0IGNvbGxpc2lvbiBzaGFwZSBtYXJnaW4gdmFsdWUuIChBZHZhbnZlZCBVc2UgT25seSkgKi9cclxuICAgICAgICBwdWJsaWMgZ2V0R2hvc3RNYXJnaW4oKTpudW1iZXIge1xyXG4gICAgICAgICAgICBsZXQgcmVzdWx0Om51bWJlciA9IDA7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm1fZ2hvc3RTaGFwZSAhPSBudWxsICYmIHRoaXMubV9naG9zdFNoYXBlLmdldE1hcmdpbikge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5tX2dob3N0U2hhcGUuZ2V0TWFyZ2luKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9XHJcbiAgICAgICAgLyoqIFNldHMgZ2hvc3QgY29sbGlzaW9uIHNoYXBlIG1hcmdpbiB2YWx1ZS4gKEFkdmFudmVkIFVzZSBPbmx5KSAqL1xyXG4gICAgICAgIHB1YmxpYyBzZXRHaG9zdE1hcmdpbihtYXJnaW46bnVtYmVyKTp2b2lkIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMubV9naG9zdFNoYXBlICE9IG51bGwgJiYgdGhpcy5tX2dob3N0U2hhcGUuc2V0TWFyZ2luKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1fZ2hvc3RTaGFwZS5zZXRNYXJnaW4obWFyZ2luKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvKiogR2V0cyBjaGFyYWN0ZXIgc2xvcGUgc2xpZGUgcGF0Y2ggc3RhdGUgdXNpbmcgcGh5c2ljcyBnaG9zdCBvYmplY3QuIChBZHZhbnZlZCBVc2UgT25seSkgKi9cclxuICAgICAgICBwdWJsaWMgZ2V0VXNlU2xvcGVTbGlkZVBhdGNoKCk6Ym9vbGVhbiB7XHJcbiAgICAgICAgICAgIGxldCByZXN1bHQ6Ym9vbGVhbiA9IGZhbHNlO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5tX2NoYXJhY3RlciAhPSBudWxsICYmIHRoaXMubV9jaGFyYWN0ZXIuZ2V0X21fdXNlU2xvcGVTbGlkZVBhdGNoKSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQgPSB0aGlzLm1fY2hhcmFjdGVyLmdldF9tX3VzZVNsb3BlU2xpZGVQYXRjaCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8qKiBTZXRzIGNoYXJhY3RlciBzbG9wZSBzbGlkZSBwYXRjaCBzdGF0ZSB1c2luZyBwaHlzaWNzIGdob3N0IG9iamVjdC4gKEFkdmFudmVkIFVzZSBPbmx5KSAqL1xyXG4gICAgICAgIHB1YmxpYyBzZXRVc2VTbG9wZVNsaWRlUGF0Y2godXNlOmJvb2xlYW4pOnZvaWQge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5tX2NoYXJhY3RlciAhPSBudWxsICYmIHRoaXMubV9jaGFyYWN0ZXIuc2V0X21fdXNlU2xvcGVTbGlkZVBhdGNoKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1fY2hhcmFjdGVyLnNldF9tX3VzZVNsb3BlU2xpZGVQYXRjaCh1c2UpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8qKiBTZXRzIHRoZSBtYXhpbXVtIG51bWJlciBvZiBzaW11bHRhbmVvdXMgY29udGFjdCBub3RmaWNhdGlvbnMgdG8gZGlzcGF0Y2ggcGVyIGZyYW1lLiBEZWZhdWx0cyB2YWx1ZSBpcyA0LiAoQWR2YW52ZWQgVXNlIE9ubHkpICovXHJcbiAgICAgICAgcHVibGljIHNldE1heE5vdGlmaWNhdGlvbnMobWF4Om51bWJlcik6IHZvaWQge1xyXG4gICAgICAgICAgICB0aGlzLl9tYXhDb2xsaXNpb25zID0gbWF4O1xyXG4gICAgICAgICAgICB0aGlzLl90bXBDb2xsaXNpb25Db250YWN0cyA9IFtdOyAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgdGhpcy5fbWF4Q29sbGlzaW9uczsgaW5kZXgrKykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdG1wQ29sbGlzaW9uQ29udGFjdHMucHVzaChuZXcgQ29sbGlzaW9uQ29udGFjdEluZm8oKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLyoqIFNldHMgY2hhcmFjdGVyIGNvbGxpc2lvbiBhY3RpdmF0aW9uIHN0YXRlIHVzaW5nIHBoeXNpY3MgZ2hvc3Qgb2JqZWN0LiAoQWR2YW52ZWQgVXNlIE9ubHkpICovXHJcbiAgICAgICAgcHVibGljIHNldEFjdGl2YXRpb25TdGF0ZShzdGF0ZTpudW1iZXIpOnZvaWQge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5tX2dob3N0Q29sbGlzaW9uICE9IG51bGwgJiYgdGhpcy5tX2dob3N0Q29sbGlzaW9uLnNldEFjdGl2YXRpb25TdGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tX2dob3N0Q29sbGlzaW9uLnNldEFjdGl2YXRpb25TdGF0ZShzdGF0ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLyoqIEdldHMgY2hhcmFjdGVyIGNvbGxpc2lvbiBncm91cCBmaWx0ZXIgdXNpbmcgcGh5c2ljcyBnaG9zdCBvYmplY3QuIChBZHZhbnZlZCBVc2UgT25seSkgKi9cclxuICAgICAgICBwdWJsaWMgZ2V0Q29sbGlzaW9uRmlsdGVyR3JvdXAoKTpudW1iZXIge1xyXG4gICAgICAgICAgICBsZXQgcmVzdWx0Om51bWJlciA9IC0xO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5tX2dob3N0Q29sbGlzaW9uICE9IG51bGwgJiYgdGhpcy5tX2dob3N0Q29sbGlzaW9uLmdldEJyb2FkcGhhc2VIYW5kbGUpIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMubV9naG9zdENvbGxpc2lvbi5nZXRCcm9hZHBoYXNlSGFuZGxlKCkuZ2V0X21fY29sbGlzaW9uRmlsdGVyR3JvdXAoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH1cclxuICAgICAgICAvKiogU2V0cyBjaGFyYWN0ZXIgY29sbGlzaW9uIGdyb3VwIGZpbHRlciB1c2luZyBwaHlzaWNzIGdob3N0IG9iamVjdC4gKEFkdmFudmVkIFVzZSBPbmx5KSAqL1xyXG4gICAgICAgIHB1YmxpYyBzZXRDb2xsaXNpb25GaWx0ZXJHcm91cChncm91cDpudW1iZXIpOnZvaWQge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5tX2dob3N0Q29sbGlzaW9uICE9IG51bGwgJiYgdGhpcy5tX2dob3N0Q29sbGlzaW9uLmdldEJyb2FkcGhhc2VIYW5kbGUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubV9naG9zdENvbGxpc2lvbi5nZXRCcm9hZHBoYXNlSGFuZGxlKCkuc2V0X21fY29sbGlzaW9uRmlsdGVyR3JvdXAoZ3JvdXApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8qKiBHZXRzIGNoYXJhY3RlciBjb2xsaXNpb24gbWFzayBmaWx0ZXIgdXNpbmcgcGh5c2ljcyBnaG9zdCBvYmplY3QuIChBZHZhbnZlZCBVc2UgT25seSkgKi9cclxuICAgICAgICBwdWJsaWMgZ2V0Q29sbGlzaW9uRmlsdGVyTWFzaygpOm51bWJlciB7XHJcbiAgICAgICAgICAgIGxldCByZXN1bHQ6bnVtYmVyID0gLTE7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm1fZ2hvc3RDb2xsaXNpb24gIT0gbnVsbCAmJiB0aGlzLm1fZ2hvc3RDb2xsaXNpb24uZ2V0QnJvYWRwaGFzZUhhbmRsZSkge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5tX2dob3N0Q29sbGlzaW9uLmdldEJyb2FkcGhhc2VIYW5kbGUoKS5nZXRfbV9jb2xsaXNpb25GaWx0ZXJNYXNrKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9XHJcbiAgICAgICAgLyoqIFNldHMgdGhlIGNoYXJhY3RlciBjb2xsaXNpb24gbWFzayBmaWx0ZXIgdXNpbmcgcGh5c2ljcyBnaG9zdCBvYmplY3QuIChBZHZhbnZlZCBVc2UgT25seSkgKi9cclxuICAgICAgICBwdWJsaWMgc2V0Q29sbGlzaW9uRmlsdGVyTWFzayhtYXNrOm51bWJlcik6dm9pZCB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm1fZ2hvc3RDb2xsaXNpb24gIT0gbnVsbCAmJiB0aGlzLm1fZ2hvc3RDb2xsaXNpb24uZ2V0QnJvYWRwaGFzZUhhbmRsZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tX2dob3N0Q29sbGlzaW9uLmdldEJyb2FkcGhhc2VIYW5kbGUoKS5zZXRfbV9jb2xsaXNpb25GaWx0ZXJNYXNrKG1hc2spO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8qKiBHZXRzIHRoZSBjaHJhY3RlciBjb250YWN0IHByb2Nlc3NpbmcgdGhyZXNob2xkIHVzaW5nIHBoeXNpY3MgZ2hvc3Qgb2JqZWN0LiAoQWR2YW52ZWQgVXNlIE9ubHkpICovXHJcbiAgICAgICAgcHVibGljIGdldENvbnRhY3RQcm9jZXNzaW5nVGhyZXNob2xkKCk6bnVtYmVyIHtcclxuICAgICAgICAgICAgbGV0IHJlc3VsdDpudW1iZXIgPSAtMTtcclxuICAgICAgICAgICAgaWYgKHRoaXMubV9naG9zdENvbGxpc2lvbiAhPSBudWxsICYmIHRoaXMubV9naG9zdENvbGxpc2lvbi5nZXRDb250YWN0UHJvY2Vzc2luZ1RocmVzaG9sZCkge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5tX2dob3N0Q29sbGlzaW9uLmdldENvbnRhY3RQcm9jZXNzaW5nVGhyZXNob2xkKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9XHJcbiAgICAgICAgLyoqIFNldHMgY2hhcmFjdGVyIGNvbnRhY3QgcHJvY2Vzc2luZyB0aHJlc2hvbGQgdXNpbmcgcGh5c2ljcyBnaG9zdCBvYmplY3QuIChBZHZhbnZlZCBVc2UgT25seSkgKi9cclxuICAgICAgICBwdWJsaWMgc2V0Q29udGFjdFByb2Nlc3NpbmdUaHJlc2hvbGQodGhyZXNob2xkOm51bWJlcik6dm9pZCB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm1fZ2hvc3RDb2xsaXNpb24gIT0gbnVsbCAmJiB0aGlzLm1fZ2hvc3RDb2xsaXNpb24uc2V0Q29udGFjdFByb2Nlc3NpbmdUaHJlc2hvbGQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubV9naG9zdENvbGxpc2lvbi5zZXRDb250YWN0UHJvY2Vzc2luZ1RocmVzaG9sZCh0aHJlc2hvbGQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8qKiBHZXQgdGhlIGN1cnJlbnQgcG9zaXRpb24gb2YgdGhlIHBoeXNpY3MgZ2hvc3Qgb2JqZWN0IHdvcmxkIHRyYW5zZm9ybS4gKEFkdmFudmVkIFVzZSBPbmx5KSAqL1xyXG4gICAgICAgIHB1YmxpYyBnZXRHaG9zdFdvcmxkUG9zaXRpb24oKTpCQUJZTE9OLlZlY3RvcjMge1xyXG4gICAgICAgICAgICBjb25zdCByZXN1bHQ6QkFCWUxPTi5WZWN0b3IzID0gbmV3IEJBQllMT04uVmVjdG9yMygwLDAsMCk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm1fZ2hvc3RQb3NpdGlvbiAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQuc2V0KHRoaXMubV9naG9zdFBvc2l0aW9uLngoKSwgdGhpcy5tX2dob3N0UG9zaXRpb24ueSgpLCB0aGlzLm1fZ2hvc3RQb3NpdGlvbi56KCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8qKiBHZXQgdGhlIGN1cnJlbnQgcG9zaXRpb24gb2YgdGhlIHBoeXNpY3MgZ2hvc3Qgb2JqZWN0IHdvcmxkIHRyYW5zZm9ybS4gKEFkdmFudmVkIFVzZSBPbmx5KSAqL1xyXG4gICAgICAgIHB1YmxpYyBnZXRHaG9zdFdvcmxkUG9zaXRpb25Ub1JlZihyZXN1bHQ6QkFCWUxPTi5WZWN0b3IzKTp2b2lkIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMubV9naG9zdFBvc2l0aW9uICE9IG51bGwgJiYgcmVzdWx0ICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdC5zZXQodGhpcy5tX2dob3N0UG9zaXRpb24ueCgpLCB0aGlzLm1fZ2hvc3RQb3NpdGlvbi55KCksIHRoaXMubV9naG9zdFBvc2l0aW9uLnooKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLyoqIE1hbnVhbGx5IHNldCB0aGUgcG9zaXRpb24gb2YgdGhlIHBoeXNpY3MgZ2hvc3Qgb2JqZWN0IHdvcmxkIHRyYW5zZm9ybS4gKEFkdmFudmVkIFVzZSBPbmx5KSAqL1xyXG4gICAgICAgIHB1YmxpYyBzZXRHaG9zdFdvcmxkUG9zaXRpb24ocG9zaXRpb246QkFCWUxPTi5OdWxsYWJsZTxCQUJZTE9OLlZlY3RvcjM+KTp2b2lkIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMubV9naG9zdE9iamVjdCAhPSBudWxsICYmIHRoaXMubV9naG9zdFRyYW5zZm9ybSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5tX2dob3N0UG9zaXRpb24gIT0gbnVsbCAmJiBwb3NpdGlvbiAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tX2dob3N0UG9zaXRpb24uc2V0VmFsdWUocG9zaXRpb24ueCwgcG9zaXRpb24ueSwgcG9zaXRpb24ueik7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tX2dob3N0VHJhbnNmb3JtLnNldE9yaWdpbih0aGlzLm1fZ2hvc3RQb3NpdGlvbik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1fZ2hvc3RPYmplY3Quc2V0V29ybGRUcmFuc2Zvcm0odGhpcy5tX2dob3N0VHJhbnNmb3JtKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvKiogU2V0IGdob3N0IGNvbGxpc2lvbiBzaGFwZSBsb2NhbCBzY2FsaW5nLiAoQWR2YW52ZWQgVXNlIE9ubHkpICovXHJcbiAgICAgICAgcHVibGljIHNjYWxlR2hvc3RDb2xsaXNpb25TaGFwZSh4Om51bWJlciwgeTpudW1iZXIsIHo6bnVtYmVyKTp2b2lkIHtcclxuICAgICAgICAgICAgdGhpcy5tX2dob3N0U2hhcGUuc2V0TG9jYWxTY2FsaW5nKG5ldyBBbW1vLmJ0VmVjdG9yMyh4LCB5LCB6KSk7XHJcbiAgICAgICAgICAgIGlmICgoPGFueT50aGlzLnRyYW5zZm9ybSkuX2RlYnVnQ29sbGlkZXIgIT0gbnVsbCAmJiAoPGFueT50aGlzLnRyYW5zZm9ybSkuX2RlYnVnQ29sbGlkZXIuc2NhbGluZyAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAoPGFueT50aGlzLnRyYW5zZm9ybSkuX2RlYnVnQ29sbGlkZXIuc2NhbGluZy5zZXQoeCwgeSwgeik7ICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4gICAgICAgIC8vIFB1YmxpYyBDaGFyYWN0ZXIgQ29udHJvbGxlciBNb3ZlbWVudCBGdW5jdGlvbnMgLy9cclxuICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcblxyXG4gICAgICAgIC8qKiBTZXRzIHRoZSBraW5lbWF0aWMgY2hhcmFjdGVyIHBvc2l0aW9uIHRvIHRoZSBzcGVjaWZpZWQgbG9jYXRpb24uICovXHJcbiAgICAgICAgcHVibGljIHNldCh4Om51bWJlciwgeTpudW1iZXIsIHo6bnVtYmVyKTp2b2lkIHtcclxuICAgICAgICAgICAgdGhpcy5fdG1wUG9zaXRpb25CdWZmZXIuc2V0KHgseSx6KTtcclxuICAgICAgICAgICAgdGhpcy5zZXRHaG9zdFdvcmxkUG9zaXRpb24odGhpcy5fdG1wUG9zaXRpb25CdWZmZXIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvKiogVHJhbnNsYXRlcyB0aGUga2luZW1hdGljIGNoYXJhY3RlciB3aXRoIHRoZSBzcGVjZmllZCB2ZWxvY2l0eS4gKi9cclxuICAgICAgICBwdWJsaWMgbW92ZSh2ZWxvY2l0eTpCQUJZTE9OLlZlY3RvcjMpOnZvaWQge1xyXG4gICAgICAgICAgICBpZiAodmVsb2NpdHkgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tX21vdmVEZWx0YVggPSB2ZWxvY2l0eS54O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tX21vdmVEZWx0YVogPSB2ZWxvY2l0eS56O1xyXG4gICAgICAgICAgICAgICAgaWYgKE1hdGguYWJzKHZlbG9jaXR5LngpIDwgdGhpcy5fbWluTW92ZURpc3RhbmNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZlbG9jaXR5LnggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubV9tb3ZlRGVsdGFYID0gdGhpcy5fbWluTW92ZURpc3RhbmNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodmVsb2NpdHkueCA8IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tX21vdmVEZWx0YVggPSAtdGhpcy5fbWluTW92ZURpc3RhbmNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChNYXRoLmFicyh2ZWxvY2l0eS56KSA8IHRoaXMuX21pbk1vdmVEaXN0YW5jZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh2ZWxvY2l0eS56ID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1fbW92ZURlbHRhWiA9IHRoaXMuX21pbk1vdmVEaXN0YW5jZTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHZlbG9jaXR5LnogPCAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubV9tb3ZlRGVsdGFaID0gLXRoaXMuX21pbk1vdmVEaXN0YW5jZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5tX3dhbGtEaXJlY3Rpb24gIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX21vdmVtZW50VmVsb2NpdHkuc2V0KHRoaXMubV9tb3ZlRGVsdGFYLCAwLCB0aGlzLm1fbW92ZURlbHRhWik7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tX3dhbGtEaXJlY3Rpb24uc2V0VmFsdWUodGhpcy5fbW92ZW1lbnRWZWxvY2l0eS54LCB0aGlzLl9tb3ZlbWVudFZlbG9jaXR5LnksIHRoaXMuX21vdmVtZW50VmVsb2NpdHkueik7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnRlcm5hbFNldFdhbGtEaXJlY3Rpb24odGhpcy5tX3dhbGtEaXJlY3Rpb24pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8qKiBKdW1wcyB0aGUga2luZW1hdGljIGNoYWNyYWN0ZXIgd2l0aCB0aGUgc3BlY2lmaWVkIHNwZWVkLiAqL1xyXG4gICAgICAgIHB1YmxpYyBqdW1wKHNwZWVkOm51bWJlcik6dm9pZCB7XHJcbiAgICAgICAgICAgIHRoaXMuaW50ZXJuYWxTZXRKdW1wU3BlZWQoc3BlZWQpO1xyXG4gICAgICAgICAgICB0aGlzLmludGVybmFsSnVtcCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvKiogV2FycHMgdGhlIGtpbmVtYXRpYyBjaGFjcmFjdGVyIHRvIHRoZSBzcGVjaWZpZWQgcG9zaXRpb24uICovXHJcbiAgICAgICAgcHVibGljIHdhcnAocG9zaXRpb246QkFCWUxPTi5WZWN0b3IzKTp2b2lkIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMubV93YXJwUG9zaXRpb24gIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tX3dhcnBQb3NpdGlvbi5zZXRWYWx1ZShwb3NpdGlvbi54LCBwb3NpdGlvbi55LCBwb3NpdGlvbi56KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuaW50ZXJuYWxXYXJwKHRoaXMubV93YXJwUG9zaXRpb24pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwibW9kdWxlIEJBQllMT04ge1xyXG4gICAgLyoqXHJcbiAgICAgKiBCYWJ5bG9uIG5hdmlnYXRpb24gYWdlbnQgcHJvIGNsYXNzIChVbml0eSBTdHlsZSBOYXZpZ2F0aW9uIEFnZW50IFN5c3RlbSlcclxuICAgICAqIEBjbGFzcyBOYXZpZ2F0aW9uQWdlbnQgLSBBbGwgcmlnaHRzIHJlc2VydmVkIChjKSAyMDIwIE1hY2tleSBLaW5hcmRcclxuICAgICAqL1xyXG4gICAgZXhwb3J0IGNsYXNzIE5hdmlnYXRpb25BZ2VudCBleHRlbmRzIEJBQllMT04uU2NyaXB0Q29tcG9uZW50IHtcclxuICAgICAgICBwcml2YXRlIHN0YXRpYyBUQVJHRVRfQU5HTEVfRkFDVE9SOm51bWJlciA9IChNYXRoLlBJICogMC41KTtcclxuICAgICAgICBwcml2YXRlIHN0YXRpYyBBTkdVTEFSX1NQRUVEX1JBVElPOm51bWJlciA9IDAuMDU7XHJcbiAgICAgICAgcHJpdmF0ZSB0eXBlOiBudW1iZXI7XHJcbiAgICAgICAgcHJpdmF0ZSBzcGVlZDogbnVtYmVyXHJcbiAgICAgICAgcHJpdmF0ZSBiYXNlT2Zmc2V0OiBudW1iZXI7XHJcbiAgICAgICAgcHJpdmF0ZSBhdm9pZFJhZGl1czogbnVtYmVyO1xyXG4gICAgICAgIHByaXZhdGUgYXZvaWRIZWlnaHQ6IG51bWJlcjtcclxuICAgICAgICBwcml2YXRlIGFjY2VsZXJhdGlvbjogbnVtYmVyO1xyXG4gICAgICAgIHByaXZhdGUgYXJlYU1hc2s6IG51bWJlcjtcclxuICAgICAgICBwcml2YXRlIGF1dG9SZXBhdGg6IGJvb2xlYW47XHJcbiAgICAgICAgcHJpdmF0ZSBhdXRvQnJha2luZzogYm9vbGVhbjtcclxuICAgICAgICBwcml2YXRlIGF1dG9UcmF2ZXJzZU9mZk1lc2hMaW5rOiBib29sZWFuO1xyXG4gICAgICAgIHByaXZhdGUgYXZvaWRhbmNlUHJpb3JpdHk6IG51bWJlcjtcclxuICAgICAgICBwcml2YXRlIG9ic3RhY2xlQXZvaWRhbmNlVHlwZTogbnVtYmVyO1xyXG4gICAgICAgIHByaXZhdGUgZGlzdGFuY2VUb1RhcmdldDpudW1iZXIgPSAwO1xyXG4gICAgICAgIHByaXZhdGUgdGVsZXBvcnRpbmc6Ym9vbGVhbiA9IGZhbHNlO1xyXG4gICAgICAgIHByaXZhdGUgbW92ZURpcmVjdGlvbjpCQUJZTE9OLlZlY3RvcjMgPSBuZXcgQkFCWUxPTi5WZWN0b3IzKDAuMCwgMC4wLCAwLjApO1xyXG4gICAgICAgIHByaXZhdGUgcmVzZXRQb3NpdGlvbjpCQUJZTE9OLlZlY3RvcjMgPSBuZXcgQkFCWUxPTi5WZWN0b3IzKDAuMCwgMC4wLCAwLjApO1xyXG4gICAgICAgIHByaXZhdGUgbGFzdFBvc2l0aW9uOkJBQllMT04uVmVjdG9yMyA9IG5ldyBCQUJZTE9OLlZlY3RvcjMoMC4wLCAwLjAsIDAuMCk7XHJcbiAgICAgICAgcHJpdmF0ZSBkaXN0YW5jZVBvc2l0aW9uOkJBQllMT04uVmVjdG9yMyA9IG5ldyBCQUJZTE9OLlZlY3RvcjMoMC4wLCAwLjAsIDAuMCk7XHJcbiAgICAgICAgcHJpdmF0ZSBjdXJyZW50UG9zaXRpb246QkFCWUxPTi5WZWN0b3IzID0gbmV3IEJBQllMT04uVmVjdG9yMygwLjAsIDAuMCwgMC4wKTtcclxuICAgICAgICBwcml2YXRlIGN1cnJlbnRSb3RhdGlvbjpCQUJZTE9OLlF1YXRlcm5pb24gPSBuZXcgQkFCWUxPTi5RdWF0ZXJuaW9uKDAuMCwgMC4wLCAwLjAsIDEuMCk7XHJcbiAgICAgICAgcHJpdmF0ZSBjdXJyZW50VmVsb2NpdHk6QkFCWUxPTi5WZWN0b3IzID0gbmV3IEJBQllMT04uVmVjdG9yMygwLjAsIDAuMCwgMC4wKTtcclxuICAgICAgICBwcml2YXRlIGN1cnJlbnRXYXlwb2ludDpCQUJZTE9OLlZlY3RvcjMgPSBuZXcgQkFCWUxPTi5WZWN0b3IzKDAuMCwgMC4wLCAwLjApO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHB1YmxpYyBoZWlnaHRPZmZzZXQ6bnVtYmVyID0gMDtcclxuICAgICAgICBwdWJsaWMgYW5ndWxhclNwZWVkOiBudW1iZXIgPSAwO1xyXG4gICAgICAgIHB1YmxpYyB1cGRhdGVQb3NpdGlvbjpib29sZWFuID0gdHJ1ZTtcclxuICAgICAgICBwdWJsaWMgdXBkYXRlUm90YXRpb246Ym9vbGVhbiA9IHRydWU7XHJcbiAgICAgICAgcHVibGljIGRpc3RhbmNlRXBzaWxvbjpudW1iZXIgPSAwLjE7XHJcbiAgICAgICAgcHVibGljIHZlbG9jaXR5RXBzaWxvbjpudW1iZXIgPSAxLjE7XHJcbiAgICAgICAgcHVibGljIG9mZk1lc2hWZWxvY2l0eTogbnVtYmVyID0gMS41O1xyXG4gICAgICAgIHB1YmxpYyBzdG9wcGluZ0Rpc3RhbmNlOiBudW1iZXIgPSAwO1xyXG4gICAgICAgIHB1YmxpYyBpc1JlYWR5KCk6Ym9vbGVhbiB7IHJldHVybiB0aGlzLm1fYWdlbnRSZWFkeTsgfVxyXG4gICAgICAgIHB1YmxpYyBpc05hdmlnYXRpbmcoKTpib29sZWFuIHsgcmV0dXJuICh0aGlzLm1fYWdlbnREZXN0aW5hdGlvbiAhPSBudWxsKTsgfVxyXG4gICAgICAgIHB1YmxpYyBpc1RlbGVwb3J0aW5nKCk6Ym9vbGVhbiB7IHJldHVybiB0aGlzLnRlbGVwb3J0aW5nOyB9XHJcbiAgICAgICAgcHVibGljIGlzT25PZmZNZXNoTGluaygpOmJvb2xlYW4geyByZXR1cm4gKHRoaXMubV9hZ2VudFN0YXRlID09PSBCQUJZTE9OLkNyb3dkQWdlbnRTdGF0ZS5EVF9DUk9XREFHRU5UX1NUQVRFX09GRk1FU0gpOyB9XHJcbiAgICAgICAgcHVibGljIGdldEFnZW50VHlwZSgpOm51bWJlciB7IHJldHVybiB0aGlzLnR5cGU7IH1cclxuICAgICAgICBwdWJsaWMgZ2V0QWdlbnRTdGF0ZSgpOm51bWJlciB7IHJldHVybiB0aGlzLm1fYWdlbnRTdGF0ZTsgfVxyXG4gICAgICAgIHB1YmxpYyBnZXRBZ2VudEluZGV4KCk6bnVtYmVyIHsgcmV0dXJuIHRoaXMubV9hZ2VudEluZGV4OyB9XHJcbiAgICAgICAgcHVibGljIGdldEFnZW50T2Zmc2V0KCk6bnVtYmVyIHsgcmV0dXJuIHRoaXMuYmFzZU9mZnNldDsgfVxyXG4gICAgICAgIHB1YmxpYyBnZXRUYXJnZXREaXN0YW5jZSgpOm51bWJlciB7IHJldHVybiB0aGlzLmRpc3RhbmNlVG9UYXJnZXQ7IH1cclxuICAgICAgICBwdWJsaWMgZ2V0Q3VycmVudFBvc2l0aW9uKCk6QkFCWUxPTi5WZWN0b3IzIHsgcmV0dXJuIHRoaXMuY3VycmVudFBvc2l0aW9uOyB9XHJcbiAgICAgICAgcHVibGljIGdldEN1cnJlbnRSb3RhdGlvbigpOkJBQllMT04uUXVhdGVybmlvbiB7IHJldHVybiB0aGlzLmN1cnJlbnRSb3RhdGlvbjsgfVxyXG4gICAgICAgIHB1YmxpYyBnZXRDdXJyZW50VmVsb2NpdHkoKTpCQUJZTE9OLlZlY3RvcjMgeyByZXR1cm4gdGhpcy5jdXJyZW50VmVsb2NpdHk7IH1cclxuICAgICAgICBwdWJsaWMgZ2V0QWdlbnRQYXJhbWV0ZXJzKCk6QkFCWUxPTi5JQWdlbnRQYXJhbWV0ZXJzIHsgcmV0dXJuIHRoaXMubV9hZ2VudFBhcmFtczsgfVxyXG4gICAgICAgIHB1YmxpYyBzZXRBZ2VudFBhcmFtZXRlcnMocGFyYW1ldGVyczpCQUJZTE9OLklBZ2VudFBhcmFtZXRlcnMpOnZvaWQgeyB0aGlzLm1fYWdlbnRQYXJhbXMgPSBwYXJhbWV0ZXJzOyB0aGlzLnVwZGF0ZUFnZW50UGFyYW1ldGVycygpOyB9XHJcbiAgICAgICAgLyoqIFJlZ2lzdGVyIGhhbmRsZXIgdGhhdCBpcyB0cmlnZ2VyZWQgd2hlbiB0aGUgYWdlbnQgaXMgcmVhZHkgZm9yIG5hdmlnYXRpb24gKi9cclxuICAgICAgICBwdWJsaWMgb25SZWFkeU9ic2VydmFibGUgPSBuZXcgQkFCWUxPTi5PYnNlcnZhYmxlPEJBQllMT04uVHJhbnNmb3JtTm9kZT4oKTtcclxuICAgICAgICAvKiogUmVnaXN0ZXIgaGFuZGxlciB0aGF0IGlzIHRyaWdnZXJlZCBiZWZvcmUgdGhlIG5hdmlnYXRpb24gdXBkYXRlICovXHJcbiAgICAgICAgcHVibGljIG9uUHJlVXBkYXRlT2JzZXJ2YWJsZSA9IG5ldyBCQUJZTE9OLk9ic2VydmFibGU8QkFCWUxPTi5UcmFuc2Zvcm1Ob2RlPigpO1xyXG4gICAgICAgIC8qKiBSZWdpc3RlciBoYW5kbGVyIHRoYXQgaXMgdHJpZ2dlcmVkIGFmdGVyIHRoZSBuYXZpZ2F0aW9uIHVwZGF0ZSAqL1xyXG4gICAgICAgIHB1YmxpYyBvblBvc3RVcGRhdGVPYnNlcnZhYmxlID0gbmV3IEJBQllMT04uT2JzZXJ2YWJsZTxCQUJZTE9OLlRyYW5zZm9ybU5vZGU+KCk7XHJcbiAgICAgICAgLyoqIFJlZ2lzdGVyIGhhbmRsZXIgdGhhdCBpcyB0cmlnZ2VyZWQgd2hlbiB0aGUgbmF2aWdhdGlvbiBpcyBjb21wbGV0ZSAqL1xyXG4gICAgICAgIHB1YmxpYyBvbk5hdkNvbXBsZXRlT2JzZXJ2YWJsZSA9IG5ldyBCQUJZTE9OLk9ic2VydmFibGU8QkFCWUxPTi5UcmFuc2Zvcm1Ob2RlPigpO1xyXG5cclxuICAgICAgICBwcm90ZWN0ZWQgbV9hZ2VudFN0YXRlOm51bWJlciA9IDA7XHJcbiAgICAgICAgcHJvdGVjdGVkIG1fYWdlbnRJbmRleDpudW1iZXIgPSAtMTtcclxuICAgICAgICBwcm90ZWN0ZWQgbV9hZ2VudFJlYWR5OmJvb2xlYW4gPSBmYWxzZTtcclxuICAgICAgICBwcm90ZWN0ZWQgbV9hZ2VudEdob3N0OkJBQllMT04uVHJhbnNmb3JtTm9kZSA9IG51bGw7XHJcbiAgICAgICAgcHJvdGVjdGVkIG1fYWdlbnRQYXJhbXM6QkFCWUxPTi5JQWdlbnRQYXJhbWV0ZXJzID0gbnVsbDtcclxuICAgICAgICBwcm90ZWN0ZWQgbV9hZ2VudE1vdmVtZW50OkJBQllMT04uVmVjdG9yMyA9IG5ldyBCQUJZTE9OLlZlY3RvcjMoMC4wLCAwLjAsIDAuMCk7XHJcbiAgICAgICAgcHJvdGVjdGVkIG1fYWdlbnREaXJlY3Rpb246QkFCWUxPTi5WZWN0b3IzID0gbmV3IEJBQllMT04uVmVjdG9yMygwLjAsIDAuMCwgMS4wKTtcclxuICAgICAgICBwcm90ZWN0ZWQgbV9hZ2VudFF1YXRlcm5pb246QkFCWUxPTi5RdWF0ZXJuaW9uID0gbmV3IEJBQllMT04uUXVhdGVybmlvbigwLjAsIDAuMCwgMC4wLCAxLjApO1xyXG4gICAgICAgIHByb3RlY3RlZCBtX2FnZW50RGVzdGluYXRpb246QkFCWUxPTi5WZWN0b3IzID0gbnVsbDtcclxuICAgICAgICBcclxuICAgICAgICBwcm90ZWN0ZWQgYXdha2UoKTogdm9pZCB7IHRoaXMuYXdha2VOYXZpZ2F0aW9uQWdlbnQoKTsgfVxyXG4gICAgICAgIHByb3RlY3RlZCB1cGRhdGUoKTogdm9pZCB7IHRoaXMudXBkYXRlTmF2aWdhdGlvbkFnZW50KCk7IH1cclxuICAgICAgICBwcm90ZWN0ZWQgZGVzdHJveSgpOiB2b2lkIHsgdGhpcy5kZXN0cm95TmF2aWdhdGlvbkFnZW50KCk7IH1cclxuXHJcbiAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbiAgICAgICAgLy8gTmF2aWdhdGlvbiBQcml2YXRlIEZ1bmN0aW9ucyAgICAgICAgICAgICAgICAgICAgIC8vXHJcbiAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcblxyXG4gICAgICAgIHByaXZhdGUgYXdha2VOYXZpZ2F0aW9uQWdlbnQoKTp2b2lkIHtcclxuICAgICAgICAgICAgdGhpcy50eXBlID0gdGhpcy5nZXRQcm9wZXJ0eShcInR5cGVcIiwgdGhpcy50eXBlKTtcclxuICAgICAgICAgICAgdGhpcy5zcGVlZCA9IHRoaXMuZ2V0UHJvcGVydHkoXCJzcGVlZFwiLCB0aGlzLnNwZWVkKTtcclxuICAgICAgICAgICAgdGhpcy5iYXNlT2Zmc2V0ID0gdGhpcy5nZXRQcm9wZXJ0eShcIm9mZnNldFwiLCB0aGlzLmJhc2VPZmZzZXQpO1xyXG4gICAgICAgICAgICB0aGlzLmFuZ3VsYXJTcGVlZCA9IHRoaXMuZ2V0UHJvcGVydHkoXCJhbmd1bGFyc3BlZWRcIiwgdGhpcy5hbmd1bGFyU3BlZWQpO1xyXG4gICAgICAgICAgICB0aGlzLmFjY2VsZXJhdGlvbiA9IHRoaXMuZ2V0UHJvcGVydHkoXCJhY2NlbGVyYXRpb25cIiwgdGhpcy5hY2NlbGVyYXRpb24pO1xyXG4gICAgICAgICAgICB0aGlzLnN0b3BwaW5nRGlzdGFuY2UgPSB0aGlzLmdldFByb3BlcnR5KFwic3RvcHBpbmdkaXN0YW5jZVwiLCB0aGlzLnN0b3BwaW5nRGlzdGFuY2UpO1xyXG4gICAgICAgICAgICB0aGlzLmF1dG9CcmFraW5nID0gdGhpcy5nZXRQcm9wZXJ0eShcImF1dG9icmFraW5nXCIsIHRoaXMuYXV0b0JyYWtpbmcpO1xyXG4gICAgICAgICAgICB0aGlzLmF2b2lkUmFkaXVzID0gdGhpcy5nZXRQcm9wZXJ0eShcImF2b2lkcmFkaXVzXCIsIHRoaXMuYXZvaWRSYWRpdXMpO1xyXG4gICAgICAgICAgICB0aGlzLmF2b2lkSGVpZ2h0ID0gdGhpcy5nZXRQcm9wZXJ0eShcImF2b2lkaGVpZ2h0XCIsIHRoaXMuYXZvaWRIZWlnaHQpO1xyXG4gICAgICAgICAgICB0aGlzLm9ic3RhY2xlQXZvaWRhbmNlVHlwZSA9IHRoaXMuZ2V0UHJvcGVydHkoXCJhdm9pZHF1YWxpdHlcIiwgdGhpcy5vYnN0YWNsZUF2b2lkYW5jZVR5cGUpO1xyXG4gICAgICAgICAgICB0aGlzLmF2b2lkYW5jZVByaW9yaXR5ID0gdGhpcy5nZXRQcm9wZXJ0eShcImF2b2lkcHJpb3JpdHlcIiwgdGhpcy5hdm9pZGFuY2VQcmlvcml0eSk7XHJcbiAgICAgICAgICAgIHRoaXMuYXV0b1RyYXZlcnNlT2ZmTWVzaExpbmsgPSB0aGlzLmdldFByb3BlcnR5KFwiYXV0b3RyYXZlcnNlXCIsIHRoaXMuYXV0b1RyYXZlcnNlT2ZmTWVzaExpbmspO1xyXG4gICAgICAgICAgICB0aGlzLmF1dG9SZXBhdGggPSB0aGlzLmdldFByb3BlcnR5KFwiYXV0b3BlcGF0aFwiLCB0aGlzLmF1dG9SZXBhdGgpO1xyXG4gICAgICAgICAgICB0aGlzLmFyZWFNYXNrID0gdGhpcy5nZXRQcm9wZXJ0eShcImFyZWFtYXNrXCIsIHRoaXMuYXJlYU1hc2spO1xyXG4gICAgICAgICAgICAvLyAuLlxyXG4gICAgICAgICAgICBCQUJZTE9OLlV0aWxpdGllcy5WYWxpZGF0ZVRyYW5zZm9ybVF1YXRlcm5pb24odGhpcy50cmFuc2Zvcm0pO1xyXG4gICAgICAgICAgICAvLyBERUJVRzogdGhpcy5tX2FnZW50R2hvc3QgPSBCQUJZTE9OLk1lc2guQ3JlYXRlQm94KCh0aGlzLnRyYW5zZm9ybS5uYW1lICsgXCJBZ2VudFwiKSwgMSwgdGhpcy5zY2VuZSk7XHJcbiAgICAgICAgICAgIHRoaXMubV9hZ2VudEdob3N0ID0gbmV3IEJBQllMT04uVHJhbnNmb3JtTm9kZSgodGhpcy50cmFuc2Zvcm0ubmFtZSArIFwiLkFnZW50XCIpLCB0aGlzLnNjZW5lKTtcclxuICAgICAgICAgICAgdGhpcy5tX2FnZW50R2hvc3QucG9zaXRpb24gPSBuZXcgQkFCWUxPTi5WZWN0b3IzKDAuMCwgMC4wLCAwLjApO1xyXG4gICAgICAgICAgICB0aGlzLm1fYWdlbnRHaG9zdC5yb3RhdGlvbiA9IG5ldyBCQUJZTE9OLlZlY3RvcjMoMC4wLCAwLjAsIDAuMCk7XHJcbiAgICAgICAgICAgIEJBQllMT04uVXRpbGl0aWVzLlZhbGlkYXRlVHJhbnNmb3JtUXVhdGVybmlvbih0aGlzLm1fYWdlbnRHaG9zdCk7XHJcbiAgICAgICAgICAgIHRoaXMubV9hZ2VudEdob3N0LnBvc2l0aW9uLmNvcHlGcm9tKHRoaXMudHJhbnNmb3JtLnBvc2l0aW9uKTtcclxuICAgICAgICAgICAgdGhpcy5sYXN0UG9zaXRpb24uY29weUZyb20odGhpcy50cmFuc2Zvcm0ucG9zaXRpb24pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSB1cGRhdGVOYXZpZ2F0aW9uQWdlbnQoKTp2b2lkIHtcclxuICAgICAgICAgICAgY29uc3QgY3Jvd2Q6QkFCWUxPTi5JQ3Jvd2QgPSBCQUJZTE9OLlNjZW5lTWFuYWdlci5HZXRDcm93ZEludGVyZmFjZSh0aGlzLnNjZW5lKTtcclxuICAgICAgICAgICAgaWYgKGNyb3dkID09IG51bGwpIHJldHVybjsgLy8gTm90ZTogTm8gRGV0b3VyIE5hdmlnYXRpb24gTWVzaCBBdmFpbGFibGUgWWV0XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm1fYWdlbnRJbmRleCA8IDApIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubV9hZ2VudFBhcmFtcyA9IHtcclxuICAgICAgICAgICAgICAgICAgICByYWRpdXM6IHRoaXMuYXZvaWRSYWRpdXMsXHJcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiB0aGlzLmF2b2lkSGVpZ2h0LFxyXG4gICAgICAgICAgICAgICAgICAgIG1heFNwZWVkOiB0aGlzLnNwZWVkLFxyXG4gICAgICAgICAgICAgICAgICAgIG1heEFjY2VsZXJhdGlvbjogdGhpcy5hY2NlbGVyYXRpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgY29sbGlzaW9uUXVlcnlSYW5nZTogMi4wLFxyXG4gICAgICAgICAgICAgICAgICAgIHBhdGhPcHRpbWl6YXRpb25SYW5nZTogMjAuMCxcclxuICAgICAgICAgICAgICAgICAgICBzZXBhcmF0aW9uV2VpZ2h0OiAxLjBcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICBCQUJZTE9OLlV0aWxpdGllcy5HZXRBYnNvbHV0ZVBvc2l0aW9uVG9SZWYodGhpcy50cmFuc2Zvcm0sIHRoaXMucmVzZXRQb3NpdGlvbik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1fYWdlbnRJbmRleCA9IGNyb3dkLmFkZEFnZW50KHRoaXMucmVzZXRQb3NpdGlvbiwgdGhpcy5tX2FnZW50UGFyYW1zLCB0aGlzLm1fYWdlbnRHaG9zdCk7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5tX2FnZW50SW5kZXggPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubV9hZ2VudFJlYWR5ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5vblJlYWR5T2JzZXJ2YWJsZS5oYXNPYnNlcnZlcnMoKSA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9uUmVhZHlPYnNlcnZhYmxlLm5vdGlmeU9ic2VydmVycyh0aGlzLnRyYW5zZm9ybSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuOyAvLyBOb3RlOiBTdGFydCBVcGRhdGluZyBOYXZpZ2F0aW9uIEFnZW50IE5leHQgRnJhbWVcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyAuLlxyXG4gICAgICAgICAgICB0aGlzLm1fYWdlbnRTdGF0ZSA9IGNyb3dkLmdldEFnZW50U3RhdGUodGhpcy5tX2FnZW50SW5kZXgpO1xyXG4gICAgICAgICAgICB0aGlzLmdldEFnZW50V2F5cG9pbnRUb1JlZih0aGlzLmN1cnJlbnRXYXlwb2ludCk7XHJcbiAgICAgICAgICAgIHRoaXMuZ2V0QWdlbnRQb3NpdGlvblRvUmVmKHRoaXMuY3VycmVudFBvc2l0aW9uKTtcclxuICAgICAgICAgICAgdGhpcy5kaXN0YW5jZVBvc2l0aW9uLmNvcHlGcm9tKHRoaXMuY3VycmVudFBvc2l0aW9uKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuaXNPbk9mZk1lc2hMaW5rKCkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudFBvc2l0aW9uLnN1YnRyYWN0VG9SZWYodGhpcy5sYXN0UG9zaXRpb24sIHRoaXMuY3VycmVudFZlbG9jaXR5KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudFZlbG9jaXR5LnNjYWxlSW5QbGFjZSh0aGlzLnNwZWVkICogdGhpcy5vZmZNZXNoVmVsb2NpdHkpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5nZXRBZ2VudFZlbG9jaXR5VG9SZWYodGhpcy5jdXJyZW50VmVsb2NpdHkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9uUHJlVXBkYXRlT2JzZXJ2YWJsZS5oYXNPYnNlcnZlcnMoKSA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vblByZVVwZGF0ZU9ic2VydmFibGUubm90aWZ5T2JzZXJ2ZXJzKHRoaXMudHJhbnNmb3JtKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRQb3NpdGlvbi55ICs9ICh0aGlzLmJhc2VPZmZzZXQgKyB0aGlzLmhlaWdodE9mZnNldCk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmN1cnJlbnRWZWxvY2l0eS5sZW5ndGgoKSA+PSB0aGlzLnZlbG9jaXR5RXBzaWxvbikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50VmVsb2NpdHkubm9ybWFsaXplKCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCByb3RhdGVGYWN0b3I6bnVtYmVyID0gKHRoaXMuYW5ndWxhclNwZWVkICogQkFCWUxPTi5OYXZpZ2F0aW9uQWdlbnQuQU5HVUxBUl9TUEVFRF9SQVRJTyAqIHRoaXMuZ2V0RGVsdGFTZWNvbmRzKCkpO1xyXG4gICAgICAgICAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuICAgICAgICAgICAgICAgIC8vIEtFRVAgRk9SIFJFRkVSRU5DRTogQ29tcHV0ZSBBZ2VudCBPcmllbnRhdGlvblxyXG4gICAgICAgICAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuICAgICAgICAgICAgICAgIC8vIE5vdGU6IEludGVycG9sYXRlIHRoZSByb3RhdGlvbiBvbiBZIHRvIGdldCBhIHNtb290aGVyIG9yaWVudGF0aW9uIGNoYW5nZVxyXG4gICAgICAgICAgICAgICAgLy8gY29uc3QgZGVzaXJlZFJvdGF0aW9uOm51bWJlciA9IE1hdGguYXRhbjIodGhpcy5jdXJyZW50VmVsb2NpdHkueCwgdGhpcy5jdXJyZW50VmVsb2NpdHkueik7XHJcbiAgICAgICAgICAgICAgICAvLyB0aGlzLnRyYW5zZm9ybS5yb3RhdGlvbi55ID0gdGhpcy50cmFuc2Zvcm0ucm90YXRpb24ueSArIChkZXNpcmVkUm90YXRpb24gLSB0aGlzLnRyYW5zZm9ybS5yb3RhdGlvbi55KSAqIDAuMDU7XHJcbiAgICAgICAgICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNPbk9mZk1lc2hMaW5rKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBSb3RhdGUgVG93YXJkIFZlbG9jaXR5IERpcmVjdGlvblxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubW92ZURpcmVjdGlvbi5jb3B5RnJvbSh0aGlzLm1fYWdlbnREaXJlY3Rpb24pO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubV9hZ2VudERpcmVjdGlvbi5zZXQoKHRoaXMubW92ZURpcmVjdGlvbi54ICsgKHRoaXMuY3VycmVudFZlbG9jaXR5LnggLSB0aGlzLm1vdmVEaXJlY3Rpb24ueCkpLCAodGhpcy5tb3ZlRGlyZWN0aW9uLnkgKyAodGhpcy5jdXJyZW50VmVsb2NpdHkueSAtIHRoaXMubW92ZURpcmVjdGlvbi55KSksICh0aGlzLm1vdmVEaXJlY3Rpb24ueiArICh0aGlzLmN1cnJlbnRWZWxvY2l0eS56IC0gdGhpcy5tb3ZlRGlyZWN0aW9uLnopKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tX2FnZW50RGlyZWN0aW9uLm5vcm1hbGl6ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRhcmdldEFuZ2xlOm51bWJlciA9IChCQUJZTE9OLk5hdmlnYXRpb25BZ2VudC5UQVJHRVRfQU5HTEVfRkFDVE9SIC0gTWF0aC5hdGFuMih0aGlzLm1fYWdlbnREaXJlY3Rpb24ueCwgdGhpcy5tX2FnZW50RGlyZWN0aW9uLnopKTtcclxuICAgICAgICAgICAgICAgICAgICBCQUJZTE9OLlF1YXRlcm5pb24uRnJvbUV1bGVyQW5nbGVzVG9SZWYoMC4wLCB0YXJnZXRBbmdsZSwgMC4wLCB0aGlzLmN1cnJlbnRSb3RhdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gUm90YXRpb24gVXBkYXRlXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNOYXZpZ2F0aW5nKCkgJiYgdGhpcy51cGRhdGVSb3RhdGlvbiA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBCQUJZTE9OLlF1YXRlcm5pb24uU2xlcnBUb1JlZih0aGlzLnRyYW5zZm9ybS5yb3RhdGlvblF1YXRlcm5pb24sIHRoaXMuY3VycmVudFJvdGF0aW9uLCByb3RhdGVGYWN0b3IsIHRoaXMudHJhbnNmb3JtLnJvdGF0aW9uUXVhdGVybmlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBSb3RhdGUgVG93YXJkIE5leHQgVGFyZ2V0IFdheXBvaW50XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tX2FnZW50UXVhdGVybmlvbi5jb3B5RnJvbSh0aGlzLnRyYW5zZm9ybS5yb3RhdGlvblF1YXRlcm5pb24pO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzTmF2aWdhdGluZygpICYmIHRoaXMudXBkYXRlUm90YXRpb24gPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50cmFuc2Zvcm0ubG9va0F0KHRoaXMuY3VycmVudFdheXBvaW50KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gQ29ycmVjdCBUcmFuc2Zvcm0gTG9vayBBdCBSb3RhdGlvblxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudHJhbnNmb3JtLnJvdGF0aW9uUXVhdGVybmlvbi50b0V1bGVyQW5nbGVzVG9SZWYodGhpcy5tX2FnZW50RGlyZWN0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICBCQUJZTE9OLlF1YXRlcm5pb24uRnJvbUV1bGVyQW5nbGVzVG9SZWYoMC4wLCB0aGlzLm1fYWdlbnREaXJlY3Rpb24ueSwgMC4wLCB0aGlzLmN1cnJlbnRSb3RhdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gUm90YXRpb24gVXBkYXRlXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNOYXZpZ2F0aW5nKCkgJiYgdGhpcy51cGRhdGVSb3RhdGlvbiA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBCQUJZTE9OLlF1YXRlcm5pb24uU2xlcnBUb1JlZih0aGlzLm1fYWdlbnRRdWF0ZXJuaW9uLCB0aGlzLmN1cnJlbnRSb3RhdGlvbiwgcm90YXRlRmFjdG9yLCB0aGlzLnRyYW5zZm9ybS5yb3RhdGlvblF1YXRlcm5pb24pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBQb3NpdGlvbiBVcGRhdGVcclxuICAgICAgICAgICAgaWYgKHRoaXMuaXNOYXZpZ2F0aW5nKCkgJiYgdGhpcy51cGRhdGVQb3NpdGlvbiA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy50cmFuc2Zvcm0ucG9zaXRpb24uY29weUZyb20odGhpcy5jdXJyZW50UG9zaXRpb24pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIFRhcmdldCBEaXN0YW5jZVxyXG4gICAgICAgICAgICBpZiAodGhpcy5pc05hdmlnYXRpbmcoKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kaXN0YW5jZVRvVGFyZ2V0ID0gQkFCWUxPTi5WZWN0b3IzLkRpc3RhbmNlKHRoaXMuZGlzdGFuY2VQb3NpdGlvbiwgdGhpcy5tX2FnZW50RGVzdGluYXRpb24pO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZGlzdGFuY2VUb1RhcmdldCA8PSBNYXRoLm1heCh0aGlzLmRpc3RhbmNlRXBzaWxvbiwgdGhpcy5zdG9wcGluZ0Rpc3RhbmNlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2FuY2VsTmF2aWdhdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm9uTmF2Q29tcGxldGVPYnNlcnZhYmxlLmhhc09ic2VydmVycygpID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub25OYXZDb21wbGV0ZU9ic2VydmFibGUubm90aWZ5T2JzZXJ2ZXJzKHRoaXMudHJhbnNmb3JtKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRpc3RhbmNlVG9UYXJnZXQgPSAwOyAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBGaW5hbCBQb3N0IFVwZGF0ZVxyXG4gICAgICAgICAgICB0aGlzLmxhc3RQb3NpdGlvbi5jb3B5RnJvbSh0aGlzLmN1cnJlbnRQb3NpdGlvbik7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9uUG9zdFVwZGF0ZU9ic2VydmFibGUuaGFzT2JzZXJ2ZXJzKCkgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMub25Qb3N0VXBkYXRlT2JzZXJ2YWJsZS5ub3RpZnlPYnNlcnZlcnModGhpcy50cmFuc2Zvcm0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIFJlc2V0IFRlbGVwb3J0IEZsYWdcclxuICAgICAgICAgICAgdGhpcy50ZWxlcG9ydGluZyA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBwcml2YXRlIHVwZGF0ZUFnZW50UGFyYW1ldGVycygpOnZvaWQge1xyXG4gICAgICAgICAgICBjb25zdCBjcm93ZDpCQUJZTE9OLklDcm93ZCA9IEJBQllMT04uU2NlbmVNYW5hZ2VyLkdldENyb3dkSW50ZXJmYWNlKHRoaXMuc2NlbmUpO1xyXG4gICAgICAgICAgICBpZiAoY3Jvd2QgIT0gbnVsbCAmJiB0aGlzLm1fYWdlbnRJbmRleCA+PSAwKSBjcm93ZC51cGRhdGVBZ2VudFBhcmFtZXRlcnModGhpcy5tX2FnZW50SW5kZXgsIHRoaXMubV9hZ2VudFBhcmFtcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHByaXZhdGUgZGVzdHJveU5hdmlnYXRpb25BZ2VudCgpOnZvaWQge1xyXG4gICAgICAgICAgICB0aGlzLm1fYWdlbnRJbmRleCA9IC0xO1xyXG4gICAgICAgICAgICB0aGlzLm1fYWdlbnRSZWFkeSA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLm1fYWdlbnRNb3ZlbWVudCA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMubV9hZ2VudERpcmVjdGlvbiA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMubV9hZ2VudERlc3RpbmF0aW9uID0gbnVsbDtcclxuICAgICAgICAgICAgdGhpcy5tb3ZlRGlyZWN0aW9uID0gbnVsbDtcclxuICAgICAgICAgICAgdGhpcy5yZXNldFBvc2l0aW9uID0gbnVsbDtcclxuICAgICAgICAgICAgdGhpcy5sYXN0UG9zaXRpb24gPSBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRQb3NpdGlvbiA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMuY3VycmVudFJvdGF0aW9uID0gbnVsbDtcclxuICAgICAgICAgICAgdGhpcy5jdXJyZW50VmVsb2NpdHkgPSBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRXYXlwb2ludCA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMub25SZWFkeU9ic2VydmFibGUuY2xlYXIoKTtcclxuICAgICAgICAgICAgdGhpcy5vblJlYWR5T2JzZXJ2YWJsZSA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMub25QcmVVcGRhdGVPYnNlcnZhYmxlLmNsZWFyKCk7XHJcbiAgICAgICAgICAgIHRoaXMub25QcmVVcGRhdGVPYnNlcnZhYmxlID0gbnVsbDtcclxuICAgICAgICAgICAgdGhpcy5vblBvc3RVcGRhdGVPYnNlcnZhYmxlLmNsZWFyKCk7XHJcbiAgICAgICAgICAgIHRoaXMub25Qb3N0VXBkYXRlT2JzZXJ2YWJsZSA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMub25OYXZDb21wbGV0ZU9ic2VydmFibGUuY2xlYXIoKTtcclxuICAgICAgICAgICAgdGhpcy5vbk5hdkNvbXBsZXRlT2JzZXJ2YWJsZSA9IG51bGw7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm1fYWdlbnRHaG9zdCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1fYWdlbnRHaG9zdC5kaXNwb3NlKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1fYWdlbnRHaG9zdCA9IG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4gICAgICAgIC8vIE5hdmlnYXRpb24gUHVibGljIEZ1bmN0aW9ucyAgICAgICAgICAgICAgICAgICAgICAvL1xyXG4gICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG5cclxuICAgICAgICAvKiogTW92ZSBhZ2VudCByZWxhdGl2ZSB0byBjdXJyZW50IHBvc2l0aW9uLiAqL1xyXG4gICAgICAgIHB1YmxpYyBtb3ZlKG9mZnNldDogQkFCWUxPTi5WZWN0b3IzLCBjbG9zZXRQb2ludDpib29sZWFuID0gdHJ1ZSk6IHZvaWQge1xyXG4gICAgICAgICAgICBjb25zdCBwbHVnaW46QkFCWUxPTi5SZWNhc3RKU1BsdWdpbiA9IEJBQllMT04uU2NlbmVNYW5hZ2VyLkdldE5hdmlnYXRpb25Ub29scygpO1xyXG4gICAgICAgICAgICBjb25zdCBjcm93ZDpCQUJZTE9OLklDcm93ZCA9IEJBQllMT04uU2NlbmVNYW5hZ2VyLkdldENyb3dkSW50ZXJmYWNlKHRoaXMuc2NlbmUpO1xyXG4gICAgICAgICAgICBpZiAocGx1Z2luICE9IG51bGwgJiYgY3Jvd2QgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgY3Jvd2QuZ2V0QWdlbnRQb3NpdGlvbih0aGlzLm1fYWdlbnRJbmRleCkuYWRkVG9SZWYob2Zmc2V0LCB0aGlzLm1fYWdlbnRNb3ZlbWVudCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoY2xvc2V0UG9pbnQgPT09IHRydWUpIHRoaXMubV9hZ2VudERlc3RpbmF0aW9uID0gcGx1Z2luLmdldENsb3Nlc3RQb2ludCh0aGlzLm1fYWdlbnRNb3ZlbWVudCk7XHJcbiAgICAgICAgICAgICAgICBlbHNlIHRoaXMubV9hZ2VudERlc3RpbmF0aW9uID0gdGhpcy5tX2FnZW50TW92ZW1lbnQuY2xvbmUoKTtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLm1fYWdlbnRJbmRleCA+PSAwKSBjcm93ZC5hZ2VudEdvdG8odGhpcy5tX2FnZW50SW5kZXgsIHRoaXMubV9hZ2VudERlc3RpbmF0aW9uKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIEJBQllMT04uVG9vbHMuV2FybihcIk5vIHJlY2FzdCBuYXZpZ2F0aW9uIG1lc2ggb3IgY3Jvd2QgaW50ZXJmYWNlIGRhdGEgYXZhaWxhYmxlIVwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvKiogVGVsZXBvcnQgYWdlbnQgdG8gZGVzdGluYXRpb24gcG9pbnQuICovXHJcbiAgICAgICAgcHVibGljIHRlbGVwb3J0KGRlc3RpbmF0aW9uOiBCQUJZTE9OLlZlY3RvcjMsIGNsb3NldFBvaW50OmJvb2xlYW4gPSB0cnVlKTogdm9pZCB7XHJcbiAgICAgICAgICAgIGNvbnN0IHBsdWdpbjpCQUJZTE9OLlJlY2FzdEpTUGx1Z2luID0gQkFCWUxPTi5TY2VuZU1hbmFnZXIuR2V0TmF2aWdhdGlvblRvb2xzKCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGNyb3dkOkJBQllMT04uSUNyb3dkID0gQkFCWUxPTi5TY2VuZU1hbmFnZXIuR2V0Q3Jvd2RJbnRlcmZhY2UodGhpcy5zY2VuZSk7XHJcbiAgICAgICAgICAgIGlmIChwbHVnaW4gIT0gbnVsbCAmJiBjcm93ZCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRlbGVwb3J0aW5nID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGlmIChjbG9zZXRQb2ludCA9PT0gdHJ1ZSkgdGhpcy5tX2FnZW50RGVzdGluYXRpb24gPSBwbHVnaW4uZ2V0Q2xvc2VzdFBvaW50KGRlc3RpbmF0aW9uKTtcclxuICAgICAgICAgICAgICAgIGVsc2UgdGhpcy5tX2FnZW50RGVzdGluYXRpb24gPSBkZXN0aW5hdGlvbi5jbG9uZSgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMubV9hZ2VudEluZGV4ID49IDApIGNyb3dkLmFnZW50VGVsZXBvcnQodGhpcy5tX2FnZW50SW5kZXgsIHRoaXMubV9hZ2VudERlc3RpbmF0aW9uKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIEJBQllMT04uVG9vbHMuV2FybihcIk5vIHJlY2FzdCBuYXZpZ2F0aW9uIG1lc2ggb3IgY3Jvd2QgaW50ZXJmYWNlIGRhdGEgYXZhaWxhYmxlIVwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvKiogU2V0cyBhZ2VudCBjdXJyZW50IGRlc3RpbmF0aW9uIHBvaW50LiAqL1xyXG4gICAgICAgIHB1YmxpYyBzZXREZXN0aW5hdGlvbihkZXN0aW5hdGlvbjogQkFCWUxPTi5WZWN0b3IzLCBjbG9zZXRQb2ludDpib29sZWFuID0gdHJ1ZSk6IHZvaWQge1xyXG4gICAgICAgICAgICBjb25zdCBwbHVnaW46QkFCWUxPTi5SZWNhc3RKU1BsdWdpbiA9IEJBQllMT04uU2NlbmVNYW5hZ2VyLkdldE5hdmlnYXRpb25Ub29scygpO1xyXG4gICAgICAgICAgICBjb25zdCBjcm93ZDpCQUJZTE9OLklDcm93ZCA9IEJBQllMT04uU2NlbmVNYW5hZ2VyLkdldENyb3dkSW50ZXJmYWNlKHRoaXMuc2NlbmUpO1xyXG4gICAgICAgICAgICBpZiAocGx1Z2luICE9IG51bGwgJiYgY3Jvd2QgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGNsb3NldFBvaW50ID09PSB0cnVlKSB0aGlzLm1fYWdlbnREZXN0aW5hdGlvbiA9IHBsdWdpbi5nZXRDbG9zZXN0UG9pbnQoZGVzdGluYXRpb24pO1xyXG4gICAgICAgICAgICAgICAgZWxzZSB0aGlzLm1fYWdlbnREZXN0aW5hdGlvbiA9IGRlc3RpbmF0aW9uLmNsb25lKCk7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5tX2FnZW50SW5kZXggPj0gMCkgY3Jvd2QuYWdlbnRHb3RvKHRoaXMubV9hZ2VudEluZGV4LCB0aGlzLm1fYWdlbnREZXN0aW5hdGlvbik7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBCQUJZTE9OLlRvb2xzLldhcm4oXCJObyByZWNhc3QgbmF2aWdhdGlvbiBtZXNoIG9yIGNyb3dkIGludGVyZmFjZSBkYXRhIGF2YWlsYWJsZSFcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLyoqIEdldHMgYWdlbnQgY3VycmVudCB3b3JsZCBzcGFjZSB2ZWxvY2l0eS4gKi9cclxuICAgICAgICBwdWJsaWMgZ2V0QWdlbnRWZWxvY2l0eSgpOiBCQUJZTE9OLlZlY3RvcjMge1xyXG4gICAgICAgICAgICBjb25zdCBjcm93ZDpCQUJZTE9OLklDcm93ZCA9IEJBQllMT04uU2NlbmVNYW5hZ2VyLkdldENyb3dkSW50ZXJmYWNlKHRoaXMuc2NlbmUpO1xyXG4gICAgICAgICAgICByZXR1cm4gKGNyb3dkICE9IG51bGwgJiYgdGhpcy5tX2FnZW50SW5kZXggPj0gMCkgPyBjcm93ZC5nZXRBZ2VudFZlbG9jaXR5KHRoaXMubV9hZ2VudEluZGV4KSA6IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8qKiBHZXRzIGFnZW50IGN1cnJlbnQgd29ybGQgc3BhY2UgdmVsb2NpdHkuICovXHJcbiAgICAgICAgcHVibGljIGdldEFnZW50VmVsb2NpdHlUb1JlZihyZXN1bHQ6QkFCWUxPTi5WZWN0b3IzKTogdm9pZCB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNyb3dkOkJBQllMT04uSUNyb3dkID0gQkFCWUxPTi5TY2VuZU1hbmFnZXIuR2V0Q3Jvd2RJbnRlcmZhY2UodGhpcy5zY2VuZSk7XHJcbiAgICAgICAgICAgIGlmIChjcm93ZCAhPSBudWxsICYmIHRoaXMubV9hZ2VudEluZGV4ID49IDApIGNyb3dkLmdldEFnZW50VmVsb2NpdHlUb1JlZih0aGlzLm1fYWdlbnRJbmRleCwgcmVzdWx0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLyoqIEdldHMgYWdlbnQgY3VycmVudCB3b3JsZCBzcGFjZSBwb3NpdGlvbi4gKi9cclxuICAgICAgICBwdWJsaWMgZ2V0QWdlbnRQb3NpdGlvbigpOiBCQUJZTE9OLlZlY3RvcjMge1xyXG4gICAgICAgICAgICBjb25zdCBjcm93ZDpCQUJZTE9OLklDcm93ZCA9IEJBQllMT04uU2NlbmVNYW5hZ2VyLkdldENyb3dkSW50ZXJmYWNlKHRoaXMuc2NlbmUpO1xyXG4gICAgICAgICAgICByZXR1cm4gKGNyb3dkICE9IG51bGwgJiYgdGhpcy5tX2FnZW50SW5kZXggPj0gMCkgPyBjcm93ZC5nZXRBZ2VudFBvc2l0aW9uKHRoaXMubV9hZ2VudEluZGV4KSA6IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8qKiBHZXRzIGFnZW50IGN1cnJlbnQgd29ybGQgc3BhY2UgcG9zaXRpb24uICovXHJcbiAgICAgICAgcHVibGljIGdldEFnZW50UG9zaXRpb25Ub1JlZihyZXN1bHQ6QkFCWUxPTi5WZWN0b3IzKTogdm9pZCB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNyb3dkOkJBQllMT04uSUNyb3dkID0gQkFCWUxPTi5TY2VuZU1hbmFnZXIuR2V0Q3Jvd2RJbnRlcmZhY2UodGhpcy5zY2VuZSk7XHJcbiAgICAgICAgICAgIGlmIChjcm93ZCAhPSBudWxsICYmIHRoaXMubV9hZ2VudEluZGV4ID49IDApIGNyb3dkLmdldEFnZW50UG9zaXRpb25Ub1JlZih0aGlzLm1fYWdlbnRJbmRleCwgcmVzdWx0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLyoqIEdldHMgYWdlbnQgY3VycmVudCB3YXlwb2ludCBwb3NpdGlvbi4gKi9cclxuICAgICAgICBwdWJsaWMgZ2V0QWdlbnRXYXlwb2ludCgpOiBCQUJZTE9OLlZlY3RvcjMge1xyXG4gICAgICAgICAgICBjb25zdCBjcm93ZDpCQUJZTE9OLklDcm93ZCA9IEJBQllMT04uU2NlbmVNYW5hZ2VyLkdldENyb3dkSW50ZXJmYWNlKHRoaXMuc2NlbmUpO1xyXG4gICAgICAgICAgICByZXR1cm4gKGNyb3dkICE9IG51bGwgJiYgdGhpcy5tX2FnZW50SW5kZXggPj0gMCkgPyBjcm93ZC5nZXRBZ2VudE5leHRUYXJnZXRQYXRoKHRoaXMubV9hZ2VudEluZGV4KSA6IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8qKiBHZXRzIGFnZW50IGN1cnJlbnQgd2F5cG9pbnQgcG9zaXRpb24uICovXHJcbiAgICAgICAgcHVibGljIGdldEFnZW50V2F5cG9pbnRUb1JlZihyZXN1bHQ6QkFCWUxPTi5WZWN0b3IzKTogdm9pZCB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNyb3dkOkJBQllMT04uSUNyb3dkID0gQkFCWUxPTi5TY2VuZU1hbmFnZXIuR2V0Q3Jvd2RJbnRlcmZhY2UodGhpcy5zY2VuZSk7XHJcbiAgICAgICAgICAgIGlmIChjcm93ZCAhPSBudWxsICYmIHRoaXMubV9hZ2VudEluZGV4ID49IDApIGNyb3dkLmdldEFnZW50TmV4dFRhcmdldFBhdGhUb1JlZih0aGlzLm1fYWdlbnRJbmRleCwgcmVzdWx0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLyoqIENhbmNlbCBjdXJyZW50IHdheXBvaW50IHBhdGggbmF2aWdhdGlvbi4gKi9cclxuICAgICAgICBwdWJsaWMgY2FuY2VsTmF2aWdhdGlvbigpOnZvaWQge1xyXG4gICAgICAgICAgICB0aGlzLm1fYWdlbnREZXN0aW5hdGlvbiA9IG51bGw7IC8vIE5vdGU6IERpc2FibGUgQXV0byBQb3NpdGlvbiBVcGRhdGVcclxuICAgICAgICAgICAgY29uc3QgY3Jvd2Q6QkFCWUxPTi5JQ3Jvd2QgPSBCQUJZTE9OLlNjZW5lTWFuYWdlci5HZXRDcm93ZEludGVyZmFjZSh0aGlzLnNjZW5lKTtcclxuICAgICAgICAgICAgY29uc3QgcG9zaXRpb246QkFCWUxPTi5WZWN0b3IzID0gdGhpcy5nZXRBZ2VudFBvc2l0aW9uKCk7XHJcbiAgICAgICAgICAgIGlmIChwb3NpdGlvbiAhPSBudWxsICYmIGNyb3dkICE9IG51bGwgJiYgdGhpcy5tX2FnZW50SW5kZXggPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgY3Jvd2QuYWdlbnRUZWxlcG9ydCh0aGlzLm1fYWdlbnRJbmRleCwgcG9zaXRpb24pO1xyXG4gICAgICAgICAgICAgICAgLy8gREVQUkVDSUFURUQ6IHBvc2l0aW9uLnkgKz0gKHRoaXMuYmFzZU9mZnNldCArIHRoaXMuaGVpZ2h0T2Zmc2V0KTtcclxuICAgICAgICAgICAgICAgIC8vIERFUFJFQ0lBVEVEOiB0aGlzLnRyYW5zZm9ybS5wb3NpdGlvbi5jb3B5RnJvbShwb3NpdGlvbik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqICBSZWNhc3QgRGV0b3VyIENyb3dkIEFnZW50IFN0YXRlc1xyXG4gICAgICovXHJcbiAgICBleHBvcnQgZW51bSBDcm93ZEFnZW50U3RhdGUge1xyXG4gICAgICAgIERUX0NST1dEQUdFTlRfU1RBVEVfSU5WQUxJRCA9IDAsXHRcdC8vLzwgVGhlIGFnZW50IGlzIG5vdCBpbiBhIHZhbGlkIHN0YXRlLlxyXG4gICAgICAgIERUX0NST1dEQUdFTlRfU1RBVEVfV0FMS0lORyA9IDEsXHRcdC8vLzwgVGhlIGFnZW50IGlzIHRyYXZlcnNpbmcgYSBub3JtYWwgbmF2aWdhdGlvbiBtZXNoIHBvbHlnb24uXHJcbiAgICAgICAgRFRfQ1JPV0RBR0VOVF9TVEFURV9PRkZNRVNIID0gMixcdFx0Ly8vPCBUaGUgYWdlbnQgaXMgdHJhdmVyc2luZyBhbiBvZmYtbWVzaCBjb25uZWN0aW9uLlxyXG4gICAgfTtcclxufSIsIm1vZHVsZSBCQUJZTE9OIHtcclxuICAgIC8qKlxyXG4gICAgICogQmFieWxvbiByYXljYXN0IHZlaGljbGUgY29udHJvbGxlciBwcm8gY2xhc3MgKE5hdGl2ZSBCdWxsZXQgUGh5c2ljcyAyLjgyKVxyXG4gICAgICogQGNsYXNzIFJheWNhc3RWZWhpY2xlIC0gQWxsIHJpZ2h0cyByZXNlcnZlZCAoYykgMjAyMCBNYWNrZXkgS2luYXJkXHJcbiAgICAgKi9cclxuICAgIGV4cG9ydCBjbGFzcyBSYXljYXN0VmVoaWNsZSB7XHJcbiAgICAgICAgcHJpdmF0ZSBzdGF0aWMgVGVtcEFtbW9WZWN0b3I6YW55ID0gbnVsbDtcclxuXHJcbiAgICAgICAgcHJpdmF0ZSBfY2VudGVyTWFzczpCQUJZTE9OLlZlY3RvcjMgPSBuZXcgQkFCWUxPTi5WZWN0b3IzKDAsMCwwKTtcclxuICAgICAgICBwcml2YXRlIF9jaGFzc2lzTWVzaDpCQUJZTE9OLkFic3RyYWN0TWVzaCA9IG51bGw7XHJcbiAgICAgICAgcHJpdmF0ZSBfdGVtcFZlY3RvclBvczpCQUJZTE9OLlZlY3RvcjMgPSBuZXcgQkFCWUxPTi5WZWN0b3IzKDAsMCwwKTtcclxuXHJcbiAgICAgICAgcHVibGljIGxvY2tlZFdoZWVsSW5kZXhlczpudW1iZXJbXSA9IG51bGw7XHJcbiAgICAgICAgcHVibGljIGdldENlbnRlck1hc3NPZmZzZXQoKTpCQUJZTE9OLlZlY3RvcjMgeyByZXR1cm4gdGhpcy5fY2VudGVyTWFzczsgfVxyXG4gICAgICAgIHB1YmxpYyBnZXRJbnRlcm5hbFZlaGljbGUoKTphbnkgeyByZXR1cm4gdGhpcy5tX3ZlaGljbGU7IH1cclxuICAgICAgICBwdWJsaWMgZ2V0VXBBeGlzKCk6bnVtYmVyIHsgaWYgKHRoaXMubV92ZWhpY2xlICE9IG51bGwpIHJldHVybiB0aGlzLm1fdmVoaWNsZS5nZXRVcEF4aXMoKTsgfVxyXG4gICAgICAgIHB1YmxpYyBnZXRSaWdodEF4aXMoKTpudW1iZXIgeyBpZiAodGhpcy5tX3ZlaGljbGUgIT0gbnVsbCkgcmV0dXJuIHRoaXMubV92ZWhpY2xlLmdldFJpZ2h0QXhpcygpOyB9XHJcbiAgICAgICAgcHVibGljIGdldEZvcndhcmRBeGlzKCk6bnVtYmVyIHsgaWYgKHRoaXMubV92ZWhpY2xlICE9IG51bGwpIHJldHVybiB0aGlzLm1fdmVoaWNsZS5nZXRGb3J3YXJkQXhpcygpOyB9XHJcbiAgICAgICAgcHVibGljIGdldEZvcndhcmRWZWN0b3IoKTphbnkgeyBpZiAodGhpcy5tX3ZlaGljbGUgIT0gbnVsbCkgcmV0dXJuIHRoaXMubV92ZWhpY2xlLmdldEZvcndhcmRWZWN0b3IoKTsgfVxyXG4gICAgICAgIHB1YmxpYyBnZXROdW1XaGVlbHMoKTpudW1iZXIgeyBpZiAodGhpcy5tX3ZlaGljbGUgIT0gbnVsbCkgcmV0dXJuIHRoaXMubV92ZWhpY2xlLmdldE51bVdoZWVscygpOyB9XHJcbiAgICAgICAgcHVibGljIGdldFdoZWVsSW5mbyh3aGVlbDpudW1iZXIpOmFueSB7IGlmICh0aGlzLm1fdmVoaWNsZSAhPSBudWxsKSByZXR1cm4gdGhpcy5tX3ZlaGljbGUuZ2V0V2hlZWxJbmZvKHdoZWVsKTsgfSAvLyBBbW1vLmJ0V2hlZWxJbmZvXHJcbiAgICAgICAgcHVibGljIHJlc2V0U3VzcGVuc2lvbigpOnZvaWQgeyBpZiAodGhpcy5tX3ZlaGljbGUgIT0gbnVsbCkgdGhpcy5tX3ZlaGljbGUucmVzZXRTdXNwZW5zaW9uKCk7IH1cclxuICAgICAgICBwdWJsaWMgc2V0UGl0Y2hDb250cm9sKHBpdGNoOm51bWJlcik6dm9pZCB7IGlmICh0aGlzLm1fdmVoaWNsZSAhPSBudWxsKSB0aGlzLm1fdmVoaWNsZS5zZXRQaXRjaENvbnRyb2wocGl0Y2gpOyB9XHJcbiAgICAgICAgcHVibGljIHNldEVuZ2luZUZvcmNlKHBvd2VyOm51bWJlciwgd2hlZWw6bnVtYmVyKTp2b2lkIHsgaWYgKHRoaXMubV92ZWhpY2xlICE9IG51bGwpIHRoaXMubV92ZWhpY2xlLmFwcGx5RW5naW5lRm9yY2UocG93ZXIsIHdoZWVsKTsgfVxyXG4gICAgICAgIHB1YmxpYyBzZXRCcmFraW5nRm9yY2UoYnJha2U6bnVtYmVyLCB3aGVlbDpudW1iZXIpOnZvaWQgeyBpZiAodGhpcy5tX3ZlaGljbGUgIT0gbnVsbCkgdGhpcy5tX3ZlaGljbGUuc2V0QnJha2UoYnJha2UsIHdoZWVsKTsgfVxyXG4gICAgICAgIHB1YmxpYyBnZXRXaGVlbFRyYW5zZm9ybSh3aGVlbDpudW1iZXIpOmFueSB7IGlmICh0aGlzLm1fdmVoaWNsZSAhPSBudWxsKSByZXR1cm4gdGhpcy5tX3ZlaGljbGUuZ2V0V2hlZWxUcmFuc2Zvcm1XUyh3aGVlbCk7IH0gLy8gQW1tby5idFRyYW5zZm9ybVxyXG4gICAgICAgIHB1YmxpYyB1cGRhdGVXaGVlbFRyYW5zZm9ybSh3aGVlbDpudW1iZXIsIGludGVycG9sYXRlOmJvb2xlYW4pOnZvaWQgeyBpZiAodGhpcy5tX3ZlaGljbGUgIT0gbnVsbCkgdGhpcy5tX3ZlaGljbGUudXBkYXRlV2hlZWxUcmFuc2Zvcm0od2hlZWwsIGludGVycG9sYXRlKTsgfVxyXG4gICAgICAgIHB1YmxpYyBnZXRVc2VyQ29uc3RyYWludFR5cGUoKTpudW1iZXIgeyBpZiAodGhpcy5tX3ZlaGljbGUgIT0gbnVsbCkgcmV0dXJuIHRoaXMubV92ZWhpY2xlLmdldFVzZXJDb25zdHJhaW50VHlwZSgpOyB9XHJcbiAgICAgICAgcHVibGljIHNldFVzZXJDb25zdHJhaW50VHlwZSh1c2VyQ29uc3RyYWludFR5cGU6bnVtYmVyKTp2b2lkIHsgaWYgKHRoaXMubV92ZWhpY2xlICE9IG51bGwpIHRoaXMubV92ZWhpY2xlLnNldFVzZXJDb25zdHJhaW50VHlwZSh1c2VyQ29uc3RyYWludFR5cGUpOyB9XHJcbiAgICAgICAgcHVibGljIHNldFVzZXJDb25zdHJhaW50SWQodWlkOm51bWJlcik6dm9pZCB7IGlmICh0aGlzLm1fdmVoaWNsZSAhPSBudWxsKSB0aGlzLm1fdmVoaWNsZS5zZXRVc2VyQ29uc3RyYWludElkKHVpZCk7IH1cclxuICAgICAgICBwdWJsaWMgZ2V0VXNlckNvbnN0cmFpbnRJZCgpOm51bWJlciB7IGlmICh0aGlzLm1fdmVoaWNsZSAhPSBudWxsKSByZXR1cm4gdGhpcy5tX3ZlaGljbGUuZ2V0VXNlckNvbnN0cmFpbnRJZCgpOyB9XHJcbiAgICAgICAgcHVibGljIGdldFJhd0N1cnJlbnRTcGVlZEtwaCgpOm51bWJlciB7IGlmICh0aGlzLm1fdmVoaWNsZSAhPSBudWxsKSByZXR1cm4gdGhpcy5tX3ZlaGljbGUuZ2V0Q3VycmVudFNwZWVkS21Ib3VyKCk7IH1cclxuICAgICAgICBwdWJsaWMgZ2V0UmF3Q3VycmVudFNwZWVkTXBoKCk6bnVtYmVyIHsgaWYgKHRoaXMubV92ZWhpY2xlICE9IG51bGwpIHJldHVybiB0aGlzLm1fdmVoaWNsZS5nZXRDdXJyZW50U3BlZWRLbUhvdXIoKSAqIEJBQllMT04uU3lzdGVtLktwaDJNcGg7IH1cclxuICAgICAgICBwdWJsaWMgZ2V0QWJzQ3VycmVudFNwZWVkS3BoKCk6bnVtYmVyIHsgaWYgKHRoaXMubV92ZWhpY2xlICE9IG51bGwpIHJldHVybiBNYXRoLmFicyh0aGlzLm1fdmVoaWNsZS5nZXRDdXJyZW50U3BlZWRLbUhvdXIoKSk7IH1cclxuICAgICAgICBwdWJsaWMgZ2V0QWJzQ3VycmVudFNwZWVkTXBoKCk6bnVtYmVyIHsgaWYgKHRoaXMubV92ZWhpY2xlICE9IG51bGwpIHJldHVybiBNYXRoLmFicyh0aGlzLm1fdmVoaWNsZS5nZXRDdXJyZW50U3BlZWRLbUhvdXIoKSkgKiBCQUJZTE9OLlN5c3RlbS5LcGgyTXBoOyB9XHJcbiAgICAgICAgcHVibGljIGdldFZlaGljbGVUdW5pbmdTeXN0ZW0oKTphbnkgeyByZXR1cm4gdGhpcy5tX3ZlaGljbGVUdW5pbmc7IH0gLy8gQW1tby5idFZlaGljbGVUdW5pbmdcclxuICAgICAgICBwdWJsaWMgZ2V0Q2hhc3Npc1dvcmxkVHJhbnNmb3JtKCk6YW55IHsgaWYgKHRoaXMubV92ZWhpY2xlICE9IG51bGwpIHJldHVybiB0aGlzLm1fdmVoaWNsZS5nZXRDaGFzc2lzV29ybGRUcmFuc2Zvcm0oKTsgfSAvLyBBbW1vLmJ0VHJhbnNmb3JtXHJcblxyXG4gICAgICAgIHByb3RlY3RlZCBtX3ZlaGljbGU6YW55ID0gbnVsbDtcclxuICAgICAgICBwcm90ZWN0ZWQgbV92ZWhpY2xlVHVuaW5nOmFueSA9IG51bGw7XHJcbiAgICAgICAgcHJvdGVjdGVkIG1fdmVoaWNsZVJheWNhc3RlcjphbnkgPSBudWxsO1xyXG4gICAgICAgIHByb3RlY3RlZCBtX3ZlaGljbGVDb2xsaWRlcnM6YW55W10gPSBudWxsO1xyXG4gICAgICAgIHByb3RlY3RlZCBtX3RlbXBUcmFuc2Zvcm06YW55ID0gbnVsbDtcclxuICAgICAgICBwcm90ZWN0ZWQgbV90ZW1wUG9zaXRpb246YW55ID0gbnVsbDtcclxuICAgICAgICBwcm90ZWN0ZWQgbV93aGVlbERpcmVjdGlvbkNTMDphbnkgPSBudWxsO1xyXG4gICAgICAgIHByb3RlY3RlZCBtX3doZWVsQXhsZUNTOmFueSA9IG51bGw7XHJcbiAgICAgICAgcHVibGljIGNvbnN0cnVjdG9yKGVudGl0eTpCQUJZTE9OLkFic3RyYWN0TWVzaCwgd29ybGQ6YW55LCBjZW50ZXI6QkFCWUxPTi5WZWN0b3IzLCBkZWZhdWx0QW5ndWxhckZhY3RvcjpCQUJZTE9OLlZlY3RvcjMgPSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2NoYXNzaXNNZXNoID0gZW50aXR5O1xyXG4gICAgICAgICAgICB0aGlzLl9jZW50ZXJNYXNzID0gY2VudGVyO1xyXG4gICAgICAgICAgICB0aGlzLm1fdmVoaWNsZVR1bmluZyA9IG5ldyBBbW1vLmJ0VmVoaWNsZVR1bmluZygpO1xyXG4gICAgICAgICAgICB0aGlzLm1fdmVoaWNsZVJheWNhc3RlciA9IChBbW1vLmJ0U21vb3RoVmVoaWNsZVJheWNhc3RlciAhPSBudWxsKSA/IG5ldyBBbW1vLmJ0U21vb3RoVmVoaWNsZVJheWNhc3Rlcih3b3JsZCkgOiBuZXcgQW1tby5idERlZmF1bHRWZWhpY2xlUmF5Y2FzdGVyKHdvcmxkKTtcclxuICAgICAgICAgICAgdGhpcy5tX3ZlaGljbGVDb2xsaWRlcnMgPSAgKHRoaXMuX2NoYXNzaXNNZXNoLm1ldGFkYXRhICE9IG51bGwgJiYgdGhpcy5fY2hhc3Npc01lc2gubWV0YWRhdGEudW5pdHkgIT0gbnVsbCAmJiB0aGlzLl9jaGFzc2lzTWVzaC5tZXRhZGF0YS51bml0eS53aGVlbHMgIT0gbnVsbCkgPyB0aGlzLl9jaGFzc2lzTWVzaC5tZXRhZGF0YS51bml0eS53aGVlbHMgOiBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLm1fdmVoaWNsZSA9IG5ldyBBbW1vLmJ0UmF5Y2FzdFZlaGljbGUodGhpcy5tX3ZlaGljbGVUdW5pbmcsIHRoaXMuX2NoYXNzaXNNZXNoLnBoeXNpY3NJbXBvc3Rvci5waHlzaWNzQm9keSwgdGhpcy5tX3ZlaGljbGVSYXljYXN0ZXIpO1xyXG4gICAgICAgICAgICB0aGlzLm1fdmVoaWNsZS5zZXRDb29yZGluYXRlU3lzdGVtKDAsIDEsIDIpOyAgICAgICAgICAgICAgICAvLyBZLVVQLUFYSVNcclxuICAgICAgICAgICAgdGhpcy5tX3doZWVsRGlyZWN0aW9uQ1MwID0gbmV3IEFtbW8uYnRWZWN0b3IzKDAsIC0xLCAwKTsgICAgLy8gWS1VUC1BWElTXHJcbiAgICAgICAgICAgIHRoaXMubV93aGVlbEF4bGVDUyA9IG5ldyBBbW1vLmJ0VmVjdG9yMygtMSwgMCwgMCk7ICAgICAgICAgIC8vIFktVVAtQVhJU1xyXG4gICAgICAgICAgICB0aGlzLm1fdGVtcFBvc2l0aW9uID0gbnVsbDtcclxuICAgICAgICAgICAgdGhpcy5tX3RlbXBUcmFuc2Zvcm0gPSBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLnNldHVwV2hlZWxJbmZvcm1hdGlvbihkZWZhdWx0QW5ndWxhckZhY3Rvcik7XHJcbiAgICAgICAgICAgIHdvcmxkLmFkZEFjdGlvbih0aGlzLm1fdmVoaWNsZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHB1YmxpYyBkaXNwb3NlKCk6dm9pZCB7XHJcbiAgICAgICAgICAgIHRoaXMuZGVsZXRlV2hlZWxJbmZvcm1hdGlvbigpO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5tX3ZlaGljbGUgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgQW1tby5kZXN0cm95KHRoaXMubV92ZWhpY2xlKTtcclxuICAgICAgICAgICAgICAgIHRoaXMubV92ZWhpY2xlID0gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy5tX3ZlaGljbGVUdW5pbmcgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgQW1tby5kZXN0cm95KHRoaXMubV92ZWhpY2xlVHVuaW5nKTtcclxuICAgICAgICAgICAgICAgIHRoaXMubV92ZWhpY2xlVHVuaW5nID0gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy5tX3ZlaGljbGVSYXljYXN0ZXIgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgQW1tby5kZXN0cm95KHRoaXMubV92ZWhpY2xlUmF5Y2FzdGVyKTtcclxuICAgICAgICAgICAgICAgIHRoaXMubV92ZWhpY2xlUmF5Y2FzdGVyID0gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy5tX3doZWVsRGlyZWN0aW9uQ1MwICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIEFtbW8uZGVzdHJveSh0aGlzLm1fd2hlZWxEaXJlY3Rpb25DUzApO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tX3doZWVsRGlyZWN0aW9uQ1MwID0gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy5tX3doZWVsQXhsZUNTICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIEFtbW8uZGVzdHJveSh0aGlzLm1fd2hlZWxBeGxlQ1MpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tX3doZWVsQXhsZUNTID0gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy5tX3RlbXBQb3NpdGlvbiAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1fdGVtcFBvc2l0aW9uID0gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy5tX3RlbXBUcmFuc2Zvcm0gIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tX3RlbXBUcmFuc2Zvcm0gPSBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMubV92ZWhpY2xlQ29sbGlkZXJzID0gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuICAgICAgICAvLyBTdGF0aWMgUmF5Y2FzdCBWZWhpY2xlIEluc3RhbmNlIEhlbHBlciBGdW5jdGlvbnNcclxuICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcblxyXG4gICAgICAgIC8qKiBHZXRzIHRoZSByaWdpZGJvZHkgcmF5Y2FzdCB2ZWhpY2xlIGNvbnRyb2xsZXIgZm9yIHRoZSBlbnRpdHkuIE5vdGU6IFdoZWVsIGNvbGxpZGVyIG1ldGFkYXRhIGluZm9ybWFpb24gaXMgcmVxdWlyZWQgZm9yIHJheWNhc3QgdmVoaWNsZSBjb250cm9sLiAqL1xyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgR2V0SW5zdGFuY2Uoc2NlbmU6QkFCWUxPTi5TY2VuZSwgcmlnaWRib2R5OkJBQllMT04uUmlnaWRib2R5UGh5c2ljcywgZGVmYXVsdEFuZ3VsYXJGYWN0b3I6QkFCWUxPTi5WZWN0b3IzID0gbnVsbCk6QkFCWUxPTi5SYXljYXN0VmVoaWNsZSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGFueWJvZHk6YW55ID0gcmlnaWRib2R5O1xyXG4gICAgICAgICAgICBpZiAoYW55Ym9keS5tX3JheWNhc3RWZWhpY2xlID09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIGlmIChyaWdpZGJvZHkuaGFzV2hlZWxDb2xsaWRlcnMoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJpZ2h0SGFuZGVkOmJvb2xlYW4gPSBCQUJZTE9OLlNjZW5lTWFuYWdlci5HZXRSaWdodEhhbmRlZChzY2VuZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJpZ2h0SGFuZGVkID09PSB0cnVlKSBCQUJZTE9OLlRvb2xzLldhcm4oXCJSYXljYXN0IHZlaGljbGUgbm90IHN1cHBvcnRlZCBmb3IgcmlnaHQgaGFuZGVkIHNjZW5lOiBcIiArIGFueWJvZHkuX2Fic3RyYWN0TWVzaC5uYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICBhbnlib2R5Lm1fcmF5Y2FzdFZlaGljbGUgPSBuZXcgQkFCWUxPTi5SYXljYXN0VmVoaWNsZShhbnlib2R5Ll9hYnN0cmFjdE1lc2gsIGFueWJvZHkubV9waHlzaWNzV29ybGQsIGFueWJvZHkuX2NlbnRlck9mTWFzcywgZGVmYXVsdEFuZ3VsYXJGYWN0b3IpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBCQUJZTE9OLlRvb2xzLldhcm4oXCJObyB3aGVlbCBjb2xsaWRlciBtZXRhZGF0YSBmb3VuZCBmb3I6IFwiICsgYW55Ym9keS5fYWJzdHJhY3RNZXNoLm5hbWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBhbnlib2R5Lm1fcmF5Y2FzdFZlaGljbGU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbiAgICAgICAgLy8gU21vb3RoIFJheWNhc3QgVmVoaWNsZSBBZHZhbmNlZCBIZWxwZXIgRnVuY3Rpb25zXHJcbiAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG5cclxuICAgICAgICAvKiogR2V0cyB2ZWhpY2xlIGVuYWJsZSBtdWx0aSByYXljYXN0IGZsYWcgdXNpbmcgcGh5c2ljcyB2ZWhpY2xlIG9iamVjdC4gKEFkdmFudmVkIFVzZSBPbmx5KSAqL1xyXG4gICAgICAgIHB1YmxpYyBnZXRFbmFibGVNdWx0aVJheWNhc3QoKTpib29sZWFuIHtcclxuICAgICAgICAgICAgbGV0IHJlc3VsdDpib29sZWFuID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm1fdmVoaWNsZSAhPSBudWxsICYmIHRoaXMubV92ZWhpY2xlLmdldF9tX2VuYWJsZU11bHRpUmF5Y2FzdCkge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5tX3ZlaGljbGUuZ2V0X21fZW5hYmxlTXVsdGlSYXljYXN0KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9XHJcbiAgICAgICAgLyoqIFNldHMgdmVoaWNsZSBlbmFibGUgbXVsdGkgcmF5Y2FzdCBmbGFnIHVzaW5nIHBoeXNpY3MgdmVoaWNsZSBvYmplY3QuIChBZHZhbnZlZCBVc2UgT25seSkgKi9cclxuICAgICAgICBwdWJsaWMgc2V0RW5hYmxlTXVsdGlSYXljYXN0KGZsYWc6Ym9vbGVhbik6dm9pZCB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm1fdmVoaWNsZSAhPSBudWxsICYmIHRoaXMubV92ZWhpY2xlLnNldF9tX2VuYWJsZU11bHRpUmF5Y2FzdCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tX3ZlaGljbGUuc2V0X21fZW5hYmxlTXVsdGlSYXljYXN0KGZsYWcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8qKiBHZXRzIHZlaGljbGUgc3RhYmxlIGZvcmNlIHVzaW5nIHBoeXNpY3MgdmVoaWNsZSBvYmplY3QuIChBZHZhbnZlZCBVc2UgT25seSkgKi9cclxuICAgICAgICBwdWJsaWMgZ2V0U3RhYmlsaXppbmdGb3JjZSgpOm51bWJlciB7XHJcbiAgICAgICAgICAgIGxldCByZXN1bHQ6bnVtYmVyID0gLTE7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm1fdmVoaWNsZSAhPSBudWxsICYmIHRoaXMubV92ZWhpY2xlLmdldF9tX3N0YWJpbGl6aW5nRm9yY2UpIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMubV92ZWhpY2xlLmdldF9tX3N0YWJpbGl6aW5nRm9yY2UoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH1cclxuICAgICAgICAvKiogU2V0cyB2ZWhpY2xlIHN0YWJsZSBmb3JjZSB1c2luZyBwaHlzaWNzIHZlaGljbGUgb2JqZWN0LiAoQWR2YW52ZWQgVXNlIE9ubHkpICovXHJcbiAgICAgICAgcHVibGljIHNldFN0YWJpbGl6aW5nRm9yY2UoZm9yY2U6bnVtYmVyKTp2b2lkIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMubV92ZWhpY2xlICE9IG51bGwgJiYgdGhpcy5tX3ZlaGljbGUuc2V0X21fc3RhYmlsaXppbmdGb3JjZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tX3ZlaGljbGUuc2V0X21fc3RhYmlsaXppbmdGb3JjZShmb3JjZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLyoqIEdldHMgdmVoaWNsZSBtYXggc3RhYmxlIGZvcmNlIHVzaW5nIHBoeXNpY3MgdmVoaWNsZSBvYmplY3QuIChBZHZhbnZlZCBVc2UgT25seSkgKi9cclxuICAgICAgICBwdWJsaWMgZ2V0TWF4SW1wdWxzZUZvcmNlKCk6bnVtYmVyIHtcclxuICAgICAgICAgICAgbGV0IHJlc3VsdDpudW1iZXIgPSAtMTtcclxuICAgICAgICAgICAgaWYgKHRoaXMubV92ZWhpY2xlICE9IG51bGwgJiYgdGhpcy5tX3ZlaGljbGUuZ2V0X21fbWF4SW1wdWxzZUZvcmNlKSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQgPSB0aGlzLm1fdmVoaWNsZS5nZXRfbV9tYXhJbXB1bHNlRm9yY2UoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH1cclxuICAgICAgICAvKiogU2V0cyB2ZWhpY2xlIG1heCBzdGFibGUgZm9yY2UgdXNpbmcgcGh5c2ljcyB2ZWhpY2xlIG9iamVjdC4gKEFkdmFudmVkIFVzZSBPbmx5KSAqL1xyXG4gICAgICAgIHB1YmxpYyBzZXRNYXhJbXB1bHNlRm9yY2UoZm9yY2U6bnVtYmVyKTp2b2lkIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMubV92ZWhpY2xlICE9IG51bGwgJiYgdGhpcy5tX3ZlaGljbGUuc2V0X21fbWF4SW1wdWxzZUZvcmNlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1fdmVoaWNsZS5zZXRfbV9tYXhJbXB1bHNlRm9yY2UoZm9yY2UpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8qKiBHZXRzIHZlaGljbGUgc21vb3RoIGZseWluZyBpbXB1bHNlIGZvcmNlIHVzaW5nIHBoeXNpY3MgdmVoaWNsZSBvYmplY3QuIChBZHZhbnZlZCBVc2UgT25seSkgKi9cclxuICAgICAgICBwdWJsaWMgZ2V0U21vb3RoRmx5aW5nSW1wdWxzZSgpOm51bWJlciB7XHJcbiAgICAgICAgICAgIGxldCByZXN1bHQ6bnVtYmVyID0gLTE7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm1fdmVoaWNsZSAhPSBudWxsICYmIHRoaXMubV92ZWhpY2xlLmdldF9tX3Ntb290aEZseWluZ0ltcHVsc2UpIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMubV92ZWhpY2xlLmdldF9tX3Ntb290aEZseWluZ0ltcHVsc2UoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH1cclxuICAgICAgICAvKiogU2V0cyB2ZWhpY2xlIHNtb290aCBmbHlpbmcgaW1wdWxzZSB1c2luZyBwaHlzaWNzIHZlaGljbGUgb2JqZWN0LiAoQWR2YW52ZWQgVXNlIE9ubHkpICovXHJcbiAgICAgICAgcHVibGljIHNldFNtb290aEZseWluZ0ltcHVsc2UoaW1wdWxzZTpudW1iZXIpOnZvaWQge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5tX3ZlaGljbGUgIT0gbnVsbCAmJiB0aGlzLm1fdmVoaWNsZS5zZXRfbV9zbW9vdGhGbHlpbmdJbXB1bHNlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1fdmVoaWNsZS5zZXRfbV9zbW9vdGhGbHlpbmdJbXB1bHNlKGltcHVsc2UpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8qKiBHZXRzIHZlaGljbGUgdHJhY2sgY29ubmVjdGlvbiBhY2NlbCBmb3JjZSB1c2luZyBwaHlzaWNzIHZlaGljbGUgb2JqZWN0LiAoQWR2YW52ZWQgVXNlIE9ubHkpICovXHJcbiAgICAgICAgcHVibGljIGdldFRyYWNrQ29ubmVjdGlvbkFjY2VsKCk6bnVtYmVyIHtcclxuICAgICAgICAgICAgbGV0IHJlc3VsdDpudW1iZXIgPSAtMTtcclxuICAgICAgICAgICAgaWYgKHRoaXMubV92ZWhpY2xlICE9IG51bGwgJiYgdGhpcy5tX3ZlaGljbGUuZ2V0X21fdHJhY2tDb25uZWN0aW9uQWNjZWwpIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMubV92ZWhpY2xlLmdldF9tX3RyYWNrQ29ubmVjdGlvbkFjY2VsKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9XHJcbiAgICAgICAgLyoqIFNldHMgdmVoaWNsZSB0cmFjayBjb25uZWN0aW9uIGFjY2VsIGZvcmNlIHVzaW5nIHBoeXNpY3MgdmVoaWNsZSBvYmplY3QuIChBZHZhbnZlZCBVc2UgT25seSkgKi9cclxuICAgICAgICBwdWJsaWMgc2V0VHJhY2tDb25uZWN0aW9uQWNjZWwoZm9yY2U6bnVtYmVyKTp2b2lkIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMubV92ZWhpY2xlICE9IG51bGwgJiYgdGhpcy5tX3ZlaGljbGUuc2V0X21fdHJhY2tDb25uZWN0aW9uQWNjZWwpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubV92ZWhpY2xlLnNldF9tX3RyYWNrQ29ubmVjdGlvbkFjY2VsKGZvcmNlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvKiogR2V0cyB2ZWhpY2xlIG1pbiB3aGVlbCBjb250YWN0IGNvdW50IHVzaW5nIHBoeXNpY3MgdmVoaWNsZSBvYmplY3QuIChBZHZhbnZlZCBVc2UgT25seSkgKi9cclxuICAgICAgICBwdWJsaWMgZ2V0TWluaW11bVdoZWVsQ29udGFjdHMoKTpudW1iZXIge1xyXG4gICAgICAgICAgICBsZXQgcmVzdWx0Om51bWJlciA9IC0xO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5tX3ZlaGljbGUgIT0gbnVsbCAmJiB0aGlzLm1fdmVoaWNsZS5nZXRfbV9taW5pbXVtV2hlZWxDb250YWN0cykge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5tX3ZlaGljbGUuZ2V0X21fbWluaW11bVdoZWVsQ29udGFjdHMoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH1cclxuICAgICAgICAvKiogU2V0cyB2ZWhpY2xlIG1pbiB3aGVlbCBjb250YWN0IGNvdW50IHVzaW5nIHBoeXNpY3MgdmVoaWNsZSBvYmplY3QuIChBZHZhbnZlZCBVc2UgT25seSkgKi9cclxuICAgICAgICBwdWJsaWMgc2V0TWluaW11bVdoZWVsQ29udGFjdHMoZm9yY2U6bnVtYmVyKTp2b2lkIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMubV92ZWhpY2xlICE9IG51bGwgJiYgdGhpcy5tX3ZlaGljbGUuc2V0X21fbWluaW11bVdoZWVsQ29udGFjdHMpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubV92ZWhpY2xlLnNldF9tX21pbmltdW1XaGVlbENvbnRhY3RzKGZvcmNlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvKiogR2V0cyB2ZWhpY2xlIGludGVycG9sYXRlIG1lc2ggbm9ybWFscyBmbGFnIHVzaW5nIHBoeXNpY3MgcmF5Y2FzdGVyIG9iamVjdC4gKEFkdmFudmVkIFVzZSBPbmx5KSAqL1xyXG4gICAgICAgIHB1YmxpYyBnZXRJbnRlcnBvbGF0ZU5vcm1hbHMoKTpib29sZWFuIHtcclxuICAgICAgICAgICAgbGV0IHJlc3VsdDpib29sZWFuID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm1fdmVoaWNsZVJheWNhc3RlciAhPSBudWxsICYmIHRoaXMubV92ZWhpY2xlUmF5Y2FzdGVyLmdldF9tX2ludGVycG9sYXRlTm9ybWFscykge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5tX3ZlaGljbGVSYXljYXN0ZXIuZ2V0X21faW50ZXJwb2xhdGVOb3JtYWxzKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9XHJcbiAgICAgICAgLyoqIFNldHMgdGhlIHZlaGljbGUgaW50ZXJwb2xhdGUgbWVzaCBub3JtYWxzIHVzaW5nIHBoeXNpY3MgcmF5Y2FzdGVyIG9iamVjdC4gKEFkdmFudmVkIFVzZSBPbmx5KSAqL1xyXG4gICAgICAgIHB1YmxpYyBzZXRJbnRlcnBvbGF0ZU5vcm1hbHMoZmxhZzpib29sZWFuKTp2b2lkIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMubV92ZWhpY2xlUmF5Y2FzdGVyICE9IG51bGwgJiYgdGhpcy5tX3ZlaGljbGVSYXljYXN0ZXIuc2V0X21faW50ZXJwb2xhdGVOb3JtYWxzKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1fdmVoaWNsZVJheWNhc3Rlci5zZXRfbV9pbnRlcnBvbGF0ZU5vcm1hbHMoZmxhZyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLyoqIEdldHMgdmVoaWNsZSBzaGFwZSB0ZXN0aW5nIG1vZGUgdXNpbmcgcGh5c2ljcyByYXljYXN0ZXIgb2JqZWN0LiAoQWR2YW52ZWQgVXNlIE9ubHkpICovXHJcbiAgICAgICAgcHVibGljIGdldFNoYXBlVGVzdGluZ01vZGUoKTpib29sZWFuIHtcclxuICAgICAgICAgICAgbGV0IHJlc3VsdDpib29sZWFuID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm1fdmVoaWNsZVJheWNhc3RlciAhPSBudWxsICYmIHRoaXMubV92ZWhpY2xlUmF5Y2FzdGVyLmdldF9tX3NoYXBlVGVzdGluZ01vZGUpIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMubV92ZWhpY2xlUmF5Y2FzdGVyLmdldF9tX3NoYXBlVGVzdGluZ01vZGUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH1cclxuICAgICAgICAvKiogU2V0cyB0aGUgdmVoaWNsZSBzaGFwZSB0ZXN0aW5nIG1vZGUgdXNpbmcgcGh5c2ljcyByYXljYXN0ZXIgb2JqZWN0LiAoQWR2YW52ZWQgVXNlIE9ubHkpICovXHJcbiAgICAgICAgcHVibGljIHNldFNoYXBlVGVzdGluZ01vZGUobW9kZTpib29sZWFuKTp2b2lkIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMubV92ZWhpY2xlUmF5Y2FzdGVyICE9IG51bGwgJiYgdGhpcy5tX3ZlaGljbGVSYXljYXN0ZXIuc2V0X21fc2hhcGVUZXN0aW5nTW9kZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tX3ZlaGljbGVSYXljYXN0ZXIuc2V0X21fc2hhcGVUZXN0aW5nTW9kZShtb2RlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvKiogR2V0cyB2ZWhpY2xlIHNoYXBlIHRlc3Rpbmcgc2l6ZSB1c2luZyBwaHlzaWNzIHJheWNhc3RlciBvYmplY3QuIChBZHZhbnZlZCBVc2UgT25seSkgKi9cclxuICAgICAgICBwdWJsaWMgZ2V0U2hhcGVUZXN0aW5nU2l6ZSgpOmZsb2F0IHtcclxuICAgICAgICAgICAgbGV0IHJlc3VsdDpudW1iZXIgPSAwO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5tX3ZlaGljbGVSYXljYXN0ZXIgIT0gbnVsbCAmJiB0aGlzLm1fdmVoaWNsZVJheWNhc3Rlci5nZXRfbV9zaGFwZVRlc3RpbmdTaXplKSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQgPSB0aGlzLm1fdmVoaWNsZVJheWNhc3Rlci5nZXRfbV9zaGFwZVRlc3RpbmdTaXplKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9XHJcbiAgICAgICAgLyoqIFNldHMgdGhlIHZlaGljbGUgc2hhcGUgdGVzdGluZyBtb2RlIHVzaW5nIHBoeXNpY3MgcmF5Y2FzdGVyIG9iamVjdC4gKEFkdmFudmVkIFVzZSBPbmx5KSAqL1xyXG4gICAgICAgIHB1YmxpYyBzZXRTaGFwZVRlc3RpbmdTaXplKHNpemU6ZmxvYXQpOnZvaWQge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5tX3ZlaGljbGVSYXljYXN0ZXIgIT0gbnVsbCAmJiB0aGlzLm1fdmVoaWNsZVJheWNhc3Rlci5zZXRfbV9zaGFwZVRlc3RpbmdTaXplKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1fdmVoaWNsZVJheWNhc3Rlci5zZXRfbV9zaGFwZVRlc3RpbmdTaXplKHNpemUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8qKiBHZXRzIHZlaGljbGUgc2hhcGUgdGVzdCBwb2ludCBjb3VudCB1c2luZyBwaHlzaWNzIHJheWNhc3RlciBvYmplY3QuIChBZHZhbnZlZCBVc2UgT25seSkgKi9cclxuICAgICAgICBwdWJsaWMgZ2V0U2hhcGVUZXN0aW5nQ291bnQoKTpmbG9hdCB7XHJcbiAgICAgICAgICAgIGxldCByZXN1bHQ6bnVtYmVyID0gMDtcclxuICAgICAgICAgICAgaWYgKHRoaXMubV92ZWhpY2xlUmF5Y2FzdGVyICE9IG51bGwgJiYgdGhpcy5tX3ZlaGljbGVSYXljYXN0ZXIuZ2V0X21fdGVzdFBvaW50Q291bnQpIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMubV92ZWhpY2xlUmF5Y2FzdGVyLmdldF9tX3Rlc3RQb2ludENvdW50KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9XHJcbiAgICAgICAgLyoqIFNldHMgdGhlIHZlaGljbGUgc2hhcGUgdGVzdCBwb2ludCBjb3VudCB1c2luZyBwaHlzaWNzIHJheWNhc3RlciBvYmplY3QuIChBZHZhbnZlZCBVc2UgT25seSkgKi9cclxuICAgICAgICBwdWJsaWMgc2V0U2hhcGVUZXN0aW5nQ291bnQoY291bnQ6ZmxvYXQpOnZvaWQge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5tX3ZlaGljbGVSYXljYXN0ZXIgIT0gbnVsbCAmJiB0aGlzLm1fdmVoaWNsZVJheWNhc3Rlci5zZXRfbV90ZXN0UG9pbnRDb3VudCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tX3ZlaGljbGVSYXljYXN0ZXIuc2V0X21fdGVzdFBvaW50Q291bnQoY291bnQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8qKiBHZXRzIHZlaGljbGUgc3dlZXAgcGVuZXRyYXRpb24gYW1vdW50IHVzaW5nIHBoeXNpY3MgcmF5Y2FzdGVyIG9iamVjdC4gKEFkdmFudmVkIFVzZSBPbmx5KSAqL1xyXG4gICAgICAgIHB1YmxpYyBnZXRTd2VlcFBlbmV0cmF0aW9uKCk6ZmxvYXQge1xyXG4gICAgICAgICAgICBsZXQgcmVzdWx0Om51bWJlciA9IDA7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm1fdmVoaWNsZVJheWNhc3RlciAhPSBudWxsICYmIHRoaXMubV92ZWhpY2xlUmF5Y2FzdGVyLmdldF9tX3N3ZWVwUGVuZXRyYXRpb24pIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMubV92ZWhpY2xlUmF5Y2FzdGVyLmdldF9tX3N3ZWVwUGVuZXRyYXRpb24oKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH1cclxuICAgICAgICAvKiogU2V0cyB0aGUgdmVoaWNsZSBzd2VlcCBwZW5ldHJhdGlvbiBhbW91bnQgdXNpbmcgcGh5c2ljcyByYXljYXN0ZXIgb2JqZWN0LiAoQWR2YW52ZWQgVXNlIE9ubHkpICovXHJcbiAgICAgICAgcHVibGljIHNldFN3ZWVwUGVuZXRyYXRpb24oYW1vdW50OmZsb2F0KTp2b2lkIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMubV92ZWhpY2xlUmF5Y2FzdGVyICE9IG51bGwgJiYgdGhpcy5tX3ZlaGljbGVSYXljYXN0ZXIuc2V0X21fc3dlZXBQZW5ldHJhdGlvbikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tX3ZlaGljbGVSYXljYXN0ZXIuc2V0X21fc3dlZXBQZW5ldHJhdGlvbihhbW91bnQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbiAgICAgICAgLy8gU21vb3RoIFJheWNhc3QgVmVoaWNsZSBBZHZhbmNlZCBDb2xsaXNpb24gRnVuY3Rpb25zXHJcbiAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG5cclxuICAgICAgICAvKiogR2V0cyB2ZWhpY2xlIGNvbGxpc2lvbiBncm91cCBmaWx0ZXIgdXNpbmcgcGh5c2ljcyByYXljYXN0ZXIgb2JqZWN0LiAoQWR2YW52ZWQgVXNlIE9ubHkpICovXHJcbiAgICAgICAgcHVibGljIGdldENvbGxpc2lvbkZpbHRlckdyb3VwKCk6bnVtYmVyIHtcclxuICAgICAgICAgICAgbGV0IHJlc3VsdDpudW1iZXIgPSAtMTtcclxuICAgICAgICAgICAgaWYgKHRoaXMubV92ZWhpY2xlUmF5Y2FzdGVyICE9IG51bGwgJiYgdGhpcy5tX3ZlaGljbGVSYXljYXN0ZXIuZ2V0X21fY29sbGlzaW9uRmlsdGVyR3JvdXApIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMubV92ZWhpY2xlUmF5Y2FzdGVyLmdldF9tX2NvbGxpc2lvbkZpbHRlckdyb3VwKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9XHJcbiAgICAgICAgLyoqIFNldHMgdmVoaWNsZSBjb2xsaXNpb24gZ3JvdXAgZmlsdGVyIHVzaW5nIHBoeXNpY3MgcmF5Y2FzdGVyIG9iamVjdC4gKEFkdmFudmVkIFVzZSBPbmx5KSAqL1xyXG4gICAgICAgIHB1YmxpYyBzZXRDb2xsaXNpb25GaWx0ZXJHcm91cChncm91cDpudW1iZXIpOnZvaWQge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5tX3ZlaGljbGVSYXljYXN0ZXIgIT0gbnVsbCAmJiB0aGlzLm1fdmVoaWNsZVJheWNhc3Rlci5zZXRfbV9jb2xsaXNpb25GaWx0ZXJHcm91cCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tX3ZlaGljbGVSYXljYXN0ZXIuc2V0X21fY29sbGlzaW9uRmlsdGVyR3JvdXAoZ3JvdXApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8qKiBHZXRzIHZlaGljbGUgY29sbGlzaW9uIG1hc2sgZmlsdGVyIHVzaW5nIHBoeXNpY3MgcmF5Y2FzdGVyIG9iamVjdC4gKEFkdmFudmVkIFVzZSBPbmx5KSAqL1xyXG4gICAgICAgIHB1YmxpYyBnZXRDb2xsaXNpb25GaWx0ZXJNYXNrKCk6bnVtYmVyIHtcclxuICAgICAgICAgICAgbGV0IHJlc3VsdDpudW1iZXIgPSAtMTtcclxuICAgICAgICAgICAgaWYgKHRoaXMubV92ZWhpY2xlUmF5Y2FzdGVyICE9IG51bGwgJiYgdGhpcy5tX3ZlaGljbGVSYXljYXN0ZXIuZ2V0X21fY29sbGlzaW9uRmlsdGVyTWFzaykge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5tX3ZlaGljbGVSYXljYXN0ZXIuZ2V0X21fY29sbGlzaW9uRmlsdGVyTWFzaygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8qKiBTZXRzIHRoZSB2ZWhpY2xlIGNvbGxpc2lvbiBtYXNrIGZpbHRlciB1c2luZyBwaHlzaWNzIHJheWNhc3RlciBvYmplY3QuIChBZHZhbnZlZCBVc2UgT25seSkgKi9cclxuICAgICAgICBwdWJsaWMgc2V0Q29sbGlzaW9uRmlsdGVyTWFzayhtYXNrOm51bWJlcik6dm9pZCB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm1fdmVoaWNsZVJheWNhc3RlciAhPSBudWxsICYmIHRoaXMubV92ZWhpY2xlUmF5Y2FzdGVyLnNldF9tX2NvbGxpc2lvbkZpbHRlck1hc2spIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubV92ZWhpY2xlUmF5Y2FzdGVyLnNldF9tX2NvbGxpc2lvbkZpbHRlck1hc2sobWFzayk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuICAgICAgICAvLyBSYXljYXN0IFZlaGljbGUgV2hlZWwgSW5mb3JtYXRpb24gSGVscGVyIEZ1bnRpb25zXHJcbiAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG5cclxuICAgICAgICAvKiogR2V0cyB0aGUgaW50ZXJuYWwgd2hlZWwgaW5kZXggYnkgaWQgc3RyaW5nLiAqL1xyXG4gICAgICAgIHB1YmxpYyBnZXRXaGVlbEluZGV4QnlJRChpZDpzdHJpbmcpOm51bWJlciB7XHJcbiAgICAgICAgICAgIGxldCByZXN1bHQgPSAtMTtcclxuICAgICAgICAgICAgaWYgKHRoaXMubV92ZWhpY2xlQ29sbGlkZXJzICE9IG51bGwgJiYgdGhpcy5tX3ZlaGljbGVDb2xsaWRlcnMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHRoaXMubV92ZWhpY2xlQ29sbGlkZXJzLmxlbmd0aDsgaW5kZXgrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHdoZWVsOmFueSA9IHRoaXMubV92ZWhpY2xlQ29sbGlkZXJzW2luZGV4XTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaWQudG9Mb3dlckNhc2UoKSA9PT0gd2hlZWwuaWQudG9Mb3dlckNhc2UoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBpbmRleDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8qKiBHZXRzIHRoZSBpbnRlcm5hbCB3aGVlbCBpbmRleCBieSBuYW1lIHN0cmluZy4gKi9cclxuICAgICAgICBwdWJsaWMgZ2V0V2hlZWxJbmRleEJ5TmFtZShuYW1lOnN0cmluZyk6bnVtYmVyIHtcclxuICAgICAgICAgICAgbGV0IHJlc3VsdCA9IC0xO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5tX3ZlaGljbGVDb2xsaWRlcnMgIT0gbnVsbCAmJiB0aGlzLm1fdmVoaWNsZUNvbGxpZGVycy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgdGhpcy5tX3ZlaGljbGVDb2xsaWRlcnMubGVuZ3RoOyBpbmRleCsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgd2hlZWw6YW55ID0gdGhpcy5tX3ZlaGljbGVDb2xsaWRlcnNbaW5kZXhdO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChuYW1lLnRvTG93ZXJDYXNlKCkgPT09IHdoZWVsLm5hbWUudG9Mb3dlckNhc2UoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBpbmRleDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8qKiBHZXRzIHRoZSBpbnRlcm5hbCB3aGVlbCBjb2xsaWRlciBpbmZvcm1hdGlvbi4gKi9cclxuICAgICAgICBwdWJsaWMgZ2V0V2hlZWxDb2xsaWRlckluZm8od2hlZWw6bnVtYmVyKTpudW1iZXIge1xyXG4gICAgICAgICAgICBsZXQgcmVzdWx0ID0gLTE7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm1fdmVoaWNsZUNvbGxpZGVycyAhPSBudWxsICYmIHRoaXMubV92ZWhpY2xlQ29sbGlkZXJzLmxlbmd0aCA+IDAgJiYgdGhpcy5tX3ZlaGljbGVDb2xsaWRlcnMubGVuZ3RoID4gd2hlZWwpIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMubV92ZWhpY2xlQ29sbGlkZXJzW3doZWVsXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH1cclxuICAgICAgICAvKiogU2V0cyB0aGUgaW50ZXJuYWwgd2hlZWwgaHViIHRyYW5zZm9ybSBtZXNoIGJ5IGluZGV4LiBVc2VkIHRvIHJvdGF0ZSBhbmQgYm91bmNlIHdoZWVscy4gKi9cclxuICAgICAgICBwdWJsaWMgc2V0V2hlZWxUcmFuc2Zvcm1NZXNoKHdoZWVsOm51bWJlciwgdHJhbnNmb3JtOkJBQllMT04uVHJhbnNmb3JtTm9kZSk6dm9pZCB7XHJcbiAgICAgICAgICAgIGlmICh0cmFuc2Zvcm0gPT0gbnVsbCkgcmV0dXJuO1xyXG4gICAgICAgICAgICBjb25zdCB3aGVlbGluZm86YW55ID0gdGhpcy5nZXRXaGVlbEluZm8od2hlZWwpO1xyXG4gICAgICAgICAgICBpZiAod2hlZWxpbmZvICE9IG51bGwpIHdoZWVsaW5mby50cmFuc2Zvcm0gPSB0cmFuc2Zvcm07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbiAgICAgICAgLy8gU21vb3RoIFJheWNhc3QgVmVoaWNsZSBTZWVyaW5nIEhlbHBlciBGdW5jdGlvbnNcclxuICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcblxyXG4gICAgICAgIHB1YmxpYyBnZXRWaXN1YWxTdGVlcmluZ0FuZ2xlKHdoZWVsOm51bWJlcik6bnVtYmVyIHtcclxuICAgICAgICAgICAgbGV0IHJlc3VsdDpudW1iZXIgPSAwO1xyXG4gICAgICAgICAgICBjb25zdCB3aGVlbGluZm86YW55ID0gdGhpcy5nZXRXaGVlbEluZm8od2hlZWwpO1xyXG4gICAgICAgICAgICBpZiAod2hlZWxpbmZvICE9IG51bGwgJiYgd2hlZWxpbmZvLnN0ZWVyaW5nQW5nbGUgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gd2hlZWxpbmZvLnN0ZWVyaW5nQW5nbGU7IFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHB1YmxpYyBzZXRWaXN1YWxTdGVlcmluZ0FuZ2xlKGFuZ2xlOm51bWJlciwgd2hlZWw6bnVtYmVyKTp2b2lkIHtcclxuICAgICAgICAgICAgY29uc3Qgd2hlZWxpbmZvOmFueSA9IHRoaXMuZ2V0V2hlZWxJbmZvKHdoZWVsKTtcclxuICAgICAgICAgICAgaWYgKHdoZWVsaW5mbyAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICB3aGVlbGluZm8uc3RlZXJpbmdBbmdsZSA9IGFuZ2xlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHB1YmxpYyBnZXRQaHlzaWNzU3RlZXJpbmdBbmdsZSh3aGVlbDpudW1iZXIpOm51bWJlciB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm1fdmVoaWNsZSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5hYnModGhpcy5tX3ZlaGljbGUuZ2V0U3RlZXJpbmdWYWx1ZSh3aGVlbCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHB1YmxpYyBzZXRQaHlzaWNzU3RlZXJpbmdBbmdsZShhbmdsZTpudW1iZXIsIHdoZWVsOm51bWJlcik6dm9pZCB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm1fdmVoaWNsZSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1fdmVoaWNsZS5zZXRTdGVlcmluZ1ZhbHVlKGFuZ2xlLCB3aGVlbCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4gICAgICAgIC8vIFNldHVwIFdoZWVsIEluZm9ybWF0aW9uIEhlbHBlciBGdW50aW9ucyAvL1xyXG4gICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG5cclxuICAgICAgICBwcm90ZWN0ZWQgc2V0dXBXaGVlbEluZm9ybWF0aW9uKGRlZmF1bHRBbmd1bGFyRmFjdG9yOkJBQllMT04uVmVjdG9yMyA9IG51bGwpOnZvaWQge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fY2hhc3Npc01lc2ggIT0gbnVsbCAmJiB0aGlzLl9jaGFzc2lzTWVzaC5waHlzaWNzSW1wb3N0b3IgIT0gbnVsbCAmJiB0aGlzLl9jaGFzc2lzTWVzaC5waHlzaWNzSW1wb3N0b3IucGh5c2ljc0JvZHkgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGRlZmF1bHRBbmd1bGFyRmFjdG9yICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBodHRwczovL3B5YnVsbGV0Lm9yZy9CdWxsZXQvcGhwQkIzL3ZpZXd0b3BpYy5waHA/dD04MTUzXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gcHJldmVudCB2ZWhpY2xlIGZyb20gZmxpcCBvdmVyLCBieSBsaW1pdCB0aGUgcm90YXRpb24gIG9uIGZvcndhcmQgYXhpcyBvciBsaW1pdCBhbmdsZXMgZm9yIHZlaGljbGUgc3RhYmxpemF0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKEJBQllMT04uUmF5Y2FzdFZlaGljbGUuVGVtcEFtbW9WZWN0b3IgPT0gbnVsbCkgQkFCWUxPTi5SYXljYXN0VmVoaWNsZS5UZW1wQW1tb1ZlY3RvciA9IG5ldyBBbW1vLmJ0VmVjdG9yMygwLCAwLCAwKTtcclxuICAgICAgICAgICAgICAgICAgICBCQUJZTE9OLlJheWNhc3RWZWhpY2xlLlRlbXBBbW1vVmVjdG9yLnNldFZhbHVlKGRlZmF1bHRBbmd1bGFyRmFjdG9yLngsIGRlZmF1bHRBbmd1bGFyRmFjdG9yLnksIGRlZmF1bHRBbmd1bGFyRmFjdG9yLnopO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NoYXNzaXNNZXNoLnBoeXNpY3NJbXBvc3Rvci5waHlzaWNzQm9keS5zZXRBbmd1bGFyRmFjdG9yKEJBQllMT04uUmF5Y2FzdFZlaGljbGUuVGVtcEFtbW9WZWN0b3IpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5fY2hhc3Npc01lc2gucGh5c2ljc0ltcG9zdG9yLnBoeXNpY3NCb2R5LnNldEFjdGl2YXRpb25TdGF0ZShCQUJZTE9OLkNvbGxpc2lvblN0YXRlLkRJU0FCTEVfREVBQ1RJVkFUSU9OKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy5tX3ZlaGljbGUgIT0gbnVsbCAmJiB0aGlzLm1fdmVoaWNsZUNvbGxpZGVycyAhPSBudWxsICYmIHRoaXMubV92ZWhpY2xlQ29sbGlkZXJzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIGxldCBpbmRleCA9IC0xO1xyXG4gICAgICAgICAgICAgICAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgdGhpcy5tX3ZlaGljbGVDb2xsaWRlcnMubGVuZ3RoOyBpbmRleCsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgd2hlZWw6YW55ID0gdGhpcy5tX3ZlaGljbGVDb2xsaWRlcnNbaW5kZXhdO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHdoZWVsTmFtZTpzdHJpbmcgPSAod2hlZWwubmFtZSAhPSBudWxsKSA/IHdoZWVsLm5hbWUgOiBcIlVua25vd25cIjtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB3aGVlbFJhZGl1czpudW1iZXIgPSAod2hlZWwucmFkaXVzICE9IG51bGwpID8gd2hlZWwucmFkaXVzIDogMC4zNTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB3aGVlbEhhbGZUcmFjazpudW1iZXIgPSAod2hlZWwucG9zaXRpb24gIT0gbnVsbCAmJiB3aGVlbC5wb3NpdGlvbi5sZW5ndGggPj0gMykgPyB3aGVlbC5wb3NpdGlvblswXSA6IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgd2hlZWxBeGlzUG9zaXRpb246bnVtYmVyID0gKHdoZWVsLnBvc2l0aW9uICE9IG51bGwgJiYgd2hlZWwucG9zaXRpb24ubGVuZ3RoID49IDMpID8gd2hlZWwucG9zaXRpb25bMl0gOiAtMTtcclxuICAgICAgICAgICAgICAgICAgICAvLyAuLlxyXG4gICAgICAgICAgICAgICAgICAgIC8vIFJheWNhc3QgV2hlZWwgU2NyaXB0IFByb3BlcnRpZXNcclxuICAgICAgICAgICAgICAgICAgICAvLyAuLlxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHdoZWVsQ29ubmVjdGlvblBvaW50Om51bWJlciA9ICh3aGVlbC53aGVlbGNvbm5lY3Rpb25wb2ludCAhPSBudWxsKSA/IHdoZWVsLndoZWVsY29ubmVjdGlvbnBvaW50IDogMC41O1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHN1c3BlbnNpb25SZXN0TGVuZ3RoOm51bWJlciA9ICh3aGVlbC5zdXNwZW5zaW9ucmVzdGxlbmd0aCAhPSBudWxsKSA/IHdoZWVsLnN1c3BlbnNpb25yZXN0bGVuZ3RoIDogMC4zO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGlzZnJvbnR3aGVlbDpib29sZWFuID0gKHdoZWVsLmZyb250d2hlZWwgIT0gbnVsbCkgPyB0cnVlIDogKHdoZWVsTmFtZS50b0xvd2VyQ2FzZSgpLmluZGV4T2YoXCJmcm9udFwiKSA+PSAwKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB3aGVlbHBvc2l0aW9uOm51bWJlciA9IHdoZWVsQXhpc1Bvc2l0aW9uO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHdoZWVsdHJhY2tpbmc6bnVtYmVyID0gd2hlZWxIYWxmVHJhY2s7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY2VudGVybWFzc3g6bnVtYmVyID0gLXRoaXMuX2NlbnRlck1hc3MueDtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjZW50ZXJtYXNzejpudW1iZXIgPSAtdGhpcy5fY2VudGVyTWFzcy56O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoQkFCWUxPTi5SYXljYXN0VmVoaWNsZS5UZW1wQW1tb1ZlY3RvciA9PSBudWxsKSBCQUJZTE9OLlJheWNhc3RWZWhpY2xlLlRlbXBBbW1vVmVjdG9yID0gbmV3IEFtbW8uYnRWZWN0b3IzKDAsIDAsIDApO1xyXG4gICAgICAgICAgICAgICAgICAgIEJBQllMT04uUmF5Y2FzdFZlaGljbGUuVGVtcEFtbW9WZWN0b3Iuc2V0VmFsdWUoKHdoZWVsdHJhY2tpbmcgKyBjZW50ZXJtYXNzeCksIHdoZWVsQ29ubmVjdGlvblBvaW50LCAod2hlZWxwb3NpdGlvbiArIGNlbnRlcm1hc3N6KSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tX3ZlaGljbGUuYWRkV2hlZWwoQkFCWUxPTi5SYXljYXN0VmVoaWNsZS5UZW1wQW1tb1ZlY3RvciwgdGhpcy5tX3doZWVsRGlyZWN0aW9uQ1MwLCB0aGlzLm1fd2hlZWxBeGxlQ1MsIHN1c3BlbnNpb25SZXN0TGVuZ3RoLCB3aGVlbFJhZGl1cywgdGhpcy5tX3ZlaGljbGVUdW5pbmcsIGlzZnJvbnR3aGVlbCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5tX3ZlaGljbGUuZ2V0TnVtV2hlZWxzKCkgPT09IHRoaXMubV92ZWhpY2xlQ29sbGlkZXJzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IHRoaXMubV92ZWhpY2xlQ29sbGlkZXJzLmxlbmd0aDsgaW5kZXgrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB3aGVlbDphbnkgPSB0aGlzLm1fdmVoaWNsZUNvbGxpZGVyc1tpbmRleF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRlZmF1bHRGb3JjZTpudW1iZXIgPSAod2hlZWwudG90YWxzdXNwZW5zaW9uZm9yY2VzICE9IG51bGwpID8gd2hlZWwudG90YWxzdXNwZW5zaW9uZm9yY2VzIDogMjUwMDA7ICAgICAgICAvLyBCdWxsZXQ6IDYwMDBcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZGVmYXVsdFRyYXZlbDpudW1iZXIgPSAod2hlZWwuc3VzcGVuc2lvbnRyYXZlbGNtICE9IG51bGwpID8gd2hlZWwuc3VzcGVuc2lvbnRyYXZlbGNtIDogMTAwOyAgICAgICAgICAgICAgIC8vIEJ1bGxldDogNTAwXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRlZmF1bHRSb2xsaW5nOm51bWJlciA9ICh3aGVlbC5yb2xsaW5mbHVlbmNlICE9IG51bGwpID8gd2hlZWwucm9sbGluZmx1ZW5jZSA6IDAuMjsgICAgICAgICAgICAgICAgICAgICAgICAvLyBCdWxsZXQ6IDAuMVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkZWZhdWx0RnJpY3Rpb246bnVtYmVyID0gKHdoZWVsLmZyaWN0aW9uc2xpcCAhPSBudWxsKSA/IHdoZWVsLmZyaWN0aW9uc2xpcCA6IDEwOyAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQnVsbGV0OiAxMC41XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHN1c3BlbnNpb25TdGlmZm5lc3M6bnVtYmVyID0gKHdoZWVsLnN1c3BlbnNpb25zdGlmZm5lc3MgIT0gbnVsbCkgPyB3aGVlbC5zdXNwZW5zaW9uc3RpZmZuZXNzIDogNTA7ICAgICAgICAvLyBCdWxsZXQ6IDUuODhcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3VzcGVuc2lvbkNvbXByZXNzaW9uOm51bWJlciA9ICh3aGVlbC5kYW1waW5nY29tcHJlc3Npb24gIT0gbnVsbCkgPyB3aGVlbC5kYW1waW5nY29tcHJlc3Npb24gOiAyLjU7ICAgICAgIC8vIEJ1bGxldDogMC44M1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzdXNwZW5zaW9uRGFtcGluZzpudW1iZXIgPSAod2hlZWwuZGFtcGluZ3JlbGF4YXRpb24gIT0gbnVsbCkgPyB3aGVlbC5kYW1waW5ncmVsYXhhdGlvbiA6IDQuNTsgICAgICAgICAgICAgLy8gQnVsbGV0OiAwLjg4XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHdoZWVsaW5mbzphbnkgPSB0aGlzLm1fdmVoaWNsZS5nZXRXaGVlbEluZm8oaW5kZXgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAod2hlZWxpbmZvICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoZWVsaW5mby5zdGVlcmluZ0FuZ2xlID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoZWVsaW5mby5yb3RhdGlvbkJvb3N0ID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoZWVsaW5mby5kZWZhdWx0RnJpY3Rpb24gPSBkZWZhdWx0RnJpY3Rpb247XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGVlbGluZm8uc2V0X21fZnJpY3Rpb25TbGlwKGRlZmF1bHRGcmljdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGVlbGluZm8uc2V0X21fcm9sbEluZmx1ZW5jZShkZWZhdWx0Um9sbGluZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGVlbGluZm8uc2V0X21fbWF4U3VzcGVuc2lvbkZvcmNlKGRlZmF1bHRGb3JjZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGVlbGluZm8uc2V0X21fbWF4U3VzcGVuc2lvblRyYXZlbENtKGRlZmF1bHRUcmF2ZWwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hlZWxpbmZvLnNldF9tX3N1c3BlbnNpb25TdGlmZm5lc3Moc3VzcGVuc2lvblN0aWZmbmVzcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGVlbGluZm8uc2V0X21fd2hlZWxzRGFtcGluZ0NvbXByZXNzaW9uKHN1c3BlbnNpb25Db21wcmVzc2lvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGVlbGluZm8uc2V0X21fd2hlZWxzRGFtcGluZ1JlbGF4YXRpb24oc3VzcGVuc2lvbkRhbXBpbmcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBCQUJZTE9OLlRvb2xzLldhcm4oXCJGYWlsZWQgdG8gY3JlYXRlIHByb3BlciBudW1iZXIgb2Ygd2hlZWxzIGZvcjogXCIgKyB0aGlzLl9jaGFzc2lzTWVzaC5uYW1lKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBwcm90ZWN0ZWQgdXBkYXRlV2hlZWxJbmZvcm1hdGlvbigpOnZvaWQge1xyXG4gICAgICAgICAgICBjb25zdCB3aGVlbHM6bnVtYmVyID0gdGhpcy5nZXROdW1XaGVlbHMoKTtcclxuICAgICAgICAgICAgaWYgKHdoZWVscyA+IDApIHtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGluZGV4Om51bWJlciA9IDA7IGluZGV4IDwgd2hlZWxzOyBpbmRleCsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgd2hlZWxpbmZvOmFueSA9IHRoaXMuZ2V0V2hlZWxJbmZvKGluZGV4KTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAod2hlZWxpbmZvICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbG9ja2VkOmJvb2xlYW4gPSB0aGlzLmxvY2tlZFdoZWVsSW5mb3JtYXRpb24oaW5kZXgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVdoZWVsVHJhbnNmb3JtKGluZGV4LCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSBXaGVlbCBJbmZvcm1hdGlvbiBJbnRlcm5hbHNcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tX3RlbXBUcmFuc2Zvcm0gPSB0aGlzLmdldFdoZWVsVHJhbnNmb3JtKGluZGV4KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tX3RlbXBQb3NpdGlvbiA9IHRoaXMubV90ZW1wVHJhbnNmb3JtLmdldE9yaWdpbigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBTeW5jIFdoZWVsIEh1YiBUcmFuc2Zvcm0gVG8gUmF5Y2FzdCBXaGVlbFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAod2hlZWxpbmZvLnRyYW5zZm9ybSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0cmFuc2Zvcm06QkFCWUxPTi5UcmFuc2Zvcm1Ob2RlID0gd2hlZWxpbmZvLnRyYW5zZm9ybSBhcyBCQUJZTE9OLlRyYW5zZm9ybU5vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHJhbnNmb3JtLnBhcmVudCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVXBkYXRlIFdoZWVsIEh1YiBQb3NpdGlvblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJBQllMT04uVXRpbGl0aWVzLkNvbnZlcnRBbW1vVmVjdG9yM1RvUmVmKHRoaXMubV90ZW1wUG9zaXRpb24sIHRoaXMuX3RlbXBWZWN0b3JQb3MpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJBQllMT04uVXRpbGl0aWVzLkludmVyc2VUcmFuc2Zvcm1Qb2ludFRvUmVmKHRyYW5zZm9ybS5wYXJlbnQgYXMgQkFCWUxPTi5UcmFuc2Zvcm1Ob2RlLCB0aGlzLl90ZW1wVmVjdG9yUG9zLCB0aGlzLl90ZW1wVmVjdG9yUG9zKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm0ucG9zaXRpb24ueSA9IHRoaXMuX3RlbXBWZWN0b3JQb3MueTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBVcGRhdGUgV2hlZWwgSHViIFN0ZWVyaW5nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHN0ZWVyaW5nQW5nbGU6bnVtYmVyID0gKHdoZWVsaW5mby5zdGVlcmluZ0FuZ2xlICE9IG51bGwpID8gd2hlZWxpbmZvLnN0ZWVyaW5nQW5nbGUgOiAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJBQllMT04uUXVhdGVybmlvbi5Gcm9tRXVsZXJBbmdsZXNUb1JlZigwLCBzdGVlcmluZ0FuZ2xlLCAwLCB0cmFuc2Zvcm0ucm90YXRpb25RdWF0ZXJuaW9uKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBVcGRhdGUgV2hlZWwgU3Bpbm5lciBSb3RhdGlvblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh3aGVlbGluZm8uc3Bpbm5lciAhPSBudWxsICYmIHdoZWVsaW5mby5zcGlubmVyLmFkZFJvdGF0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsb2NrZWQgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgd2hlZWxyb3RhdGlvbjpudW1iZXIgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGRlbHRhUm90YXRpb246bnVtYmVyID0gKHdoZWVsaW5mby5nZXRfbV9kZWx0YVJvdGF0aW9uICE9IG51bGwpID8gd2hlZWxpbmZvLmdldF9tX2RlbHRhUm90YXRpb24oKSA6IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgcm90YXRpb25Cb29zdDpudW1iZXIgPSAod2hlZWxpbmZvLnJvdGF0aW9uQm9vc3QgIT0gbnVsbCkgPyB3aGVlbGluZm8ucm90YXRpb25Cb29zdCA6IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGVsdGFSb3RhdGlvbiA8IDApIHdoZWVscm90YXRpb24gPSAoZGVsdGFSb3RhdGlvbiArIC1yb3RhdGlvbkJvb3N0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Ugd2hlZWxyb3RhdGlvbiA9IChkZWx0YVJvdGF0aW9uICsgcm90YXRpb25Cb29zdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGVlbGluZm8uc3Bpbm5lci5hZGRSb3RhdGlvbih3aGVlbHJvdGF0aW9uLCAwLCAwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBwcm90ZWN0ZWQgbG9ja2VkV2hlZWxJbmZvcm1hdGlvbih3aGVlbDpudW1iZXIpOmJvb2xlYW4ge1xyXG4gICAgICAgICAgICBsZXQgcmVzdWx0OmJvb2xlYW4gPSBmYWxzZTtcclxuICAgICAgICAgICAgaWYgKHRoaXMubG9ja2VkV2hlZWxJbmRleGVzICE9IG51bGwgJiYgdGhpcy5sb2NrZWRXaGVlbEluZGV4ZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHRoaXMubG9ja2VkV2hlZWxJbmRleGVzLmxlbmd0aDsgaW5kZXgrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmxvY2tlZFdoZWVsSW5kZXhlc1tpbmRleF0gPT09IHdoZWVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH1cclxuICAgICAgICBwcm90ZWN0ZWQgZGVsZXRlV2hlZWxJbmZvcm1hdGlvbigpOnZvaWQge1xyXG4gICAgICAgICAgICBjb25zdCB3aGVlbHM6bnVtYmVyID0gdGhpcy5nZXROdW1XaGVlbHMoKTtcclxuICAgICAgICAgICAgaWYgKHdoZWVscyA+IDApIHtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGluZGV4Om51bWJlciA9IDA7IGluZGV4IDwgd2hlZWxzOyBpbmRleCsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaW5mbzphbnkgPSB0aGlzLmdldFdoZWVsSW5mbyhpbmRleCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluZm8gIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5mby50cmFuc2Zvcm0gIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGluZm8udHJhbnNmb3JtO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbmZvLnNwaW5uZXIgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGluZm8uc3Bpbm5lcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5mby5zdGVlcmluZ0FuZ2xlICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBpbmZvLnN0ZWVyaW5nQW5nbGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGluZm8ucm90YXRpb25Cb29zdCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgaW5mby5yb3RhdGlvbkJvb3N0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbmZvLmRlZmF1bHRGcmljdGlvbiAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgaW5mby5kZWZhdWx0RnJpY3Rpb247XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJtb2R1bGUgQkFCWUxPTiB7XHJcbiAgICAvKipcclxuICAgICAqIEJhYnlsb24gcmVhbHRpbWUgcmVmbGVjdGlvbiBzeXN0ZW0gcHJvIGNsYXNzIChVbml0eSBTdHlsZSBSZWFsdGltZSBSZWZsZWN0aW9uIFByb2JlcylcclxuICAgICAqIEBjbGFzcyBSZWFsdGltZVJlZmxlY3Rpb24gLSBBbGwgcmlnaHRzIHJlc2VydmVkIChjKSAyMDIwIE1hY2tleSBLaW5hcmRcclxuICAgICAqL1xyXG4gICAgZXhwb3J0IGNsYXNzIFJlYWx0aW1lUmVmbGVjdGlvbiBleHRlbmRzIEJBQllMT04uU2NyaXB0Q29tcG9uZW50IHtcclxuICAgICAgICBwcml2YXRlIHN0YXRpYyBTS1lCT1hfRkxBRzpudW1iZXIgPSAxO1xyXG5cclxuICAgICAgICBwcml2YXRlIHJlbmRlckxpc3Q6QkFCWUxPTi5BYnN0cmFjdE1lc2hbXSA9IG51bGw7XHJcbiAgICAgICAgcHJpdmF0ZSBwcm9iZUxpc3Q6QkFCWUxPTi5BYnN0cmFjdE1lc2hbXSA9IG51bGw7XHJcbiAgICAgICAgcHJpdmF0ZSByZWZyZXNoTW9kZTpudW1iZXIgPSAwO1xyXG4gICAgICAgIHByaXZhdGUgY3VsbGluZ01hc2s6bnVtYmVyID0gMDtcclxuICAgICAgICBwcml2YXRlIGNsZWFyRmxhZ3M6bnVtYmVyID0gMDtcclxuICAgICAgICBwcml2YXRlIHByb2JlaWQ6bnVtYmVyID0gMDtcclxuICAgICAgICBwcml2YXRlIHVzZVByb2JlTGlzdDpib29sZWFuID0gZmFsc2U7XHJcbiAgICAgICAgcHJpdmF0ZSBpbmNsdWRlQ2hpbGRyZW46Ym9vbGVhbiA9IGZhbHNlO1xyXG4gICAgICAgIHByaXZhdGUgcmVzb2x1dGlvbjpudW1iZXIgPSAxMjg7XHJcbiAgICAgICAgcHJpdmF0ZSBib3hQb3M6QkFCWUxPTi5WZWN0b3IzID0gbnVsbDtcclxuICAgICAgICBwcml2YXRlIGJveFNpemU6QkFCWUxPTi5WZWN0b3IzID0gbnVsbDtcclxuICAgICAgICBwcml2YXRlIGJveFByb2plY3Rpb246Ym9vbGVhbiA9IGZhbHNlO1xyXG5cclxuICAgICAgICBwdWJsaWMgZ2V0UHJvYmVMaXN0KCk6QkFCWUxPTi5BYnN0cmFjdE1lc2hbXSB7IHJldHVybiB0aGlzLnByb2JlTGlzdDsgfVxyXG4gICAgICAgIHB1YmxpYyBnZXRSZW5kZXJMaXN0KCk6QkFCWUxPTi5BYnN0cmFjdE1lc2hbXSB7IHJldHVybiB0aGlzLnJlbmRlckxpc3Q7IH1cclxuXHJcbiAgICAgICAgcHJvdGVjdGVkIGF3YWtlKCk6IHZvaWQgeyB0aGlzLmF3YWtlUmVhbHRpbVJlZmxlY3Rpb25zKCk7IH1cclxuICAgICAgICBwcm90ZWN0ZWQgc3RhcnQoKTogdm9pZCB7IHRoaXMuc3RhcnRSZWFsdGltUmVmbGVjdGlvbnMoKTsgfVxyXG4gICAgICAgIHByb3RlY3RlZCBkZXN0cm95KCk6IHZvaWQgeyB0aGlzLmRlc3Ryb3lSZWFsdGltUmVmbGVjdGlvbnMoKTsgfVxyXG5cclxuICAgICAgICBwcm90ZWN0ZWQgYXdha2VSZWFsdGltUmVmbGVjdGlvbnMoKTp2b2lkIHtcclxuICAgICAgICAgICAgdGhpcy5wcm9iZWlkID0gdGhpcy5nZXRQcm9wZXJ0eShcImlkXCIsIHRoaXMucHJvYmVpZCk7XHJcbiAgICAgICAgICAgIHRoaXMucmVzb2x1dGlvbiA9IHRoaXMuZ2V0UHJvcGVydHkoXCJyZXNvbHV0aW9uXCIsIHRoaXMucmVzb2x1dGlvbik7XHJcbiAgICAgICAgICAgIHRoaXMuY3VsbGluZ01hc2sgPSB0aGlzLmdldFByb3BlcnR5KFwiY3VsbGluZ1wiLCB0aGlzLmN1bGxpbmdNYXNrKTtcclxuICAgICAgICAgICAgdGhpcy5jbGVhckZsYWdzID0gdGhpcy5nZXRQcm9wZXJ0eShcImNsZWFyZmxhZ3NcIiwgdGhpcy5jbGVhckZsYWdzKTtcclxuICAgICAgICAgICAgdGhpcy5yZWZyZXNoTW9kZSA9IHRoaXMuZ2V0UHJvcGVydHkoXCJyZWZyZXNobW9kZVwiLCB0aGlzLnJlZnJlc2hNb2RlKTtcclxuICAgICAgICAgICAgdGhpcy51c2VQcm9iZUxpc3QgPSB0aGlzLmdldFByb3BlcnR5KFwidXNlcHJvYmVsaXN0XCIsIHRoaXMudXNlUHJvYmVMaXN0KTtcclxuICAgICAgICAgICAgdGhpcy5pbmNsdWRlQ2hpbGRyZW4gPSB0aGlzLmdldFByb3BlcnR5KFwiaW5jbHVkZWNoaWxkcmVuXCIsIHRoaXMuaW5jbHVkZUNoaWxkcmVuKTtcclxuICAgICAgICAgICAgdGhpcy5ib3hQcm9qZWN0aW9uID0gdGhpcy5nZXRQcm9wZXJ0eShcImJveHByb2plY3Rpb25cIiwgdGhpcy5ib3hQcm9qZWN0aW9uKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuYm94UHJvamVjdGlvbiA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYmJwOm51bWJlcltdID0gdGhpcy5nZXRQcm9wZXJ0eShcImJvdW5kaW5nYm94cG9zaXRpb25cIik7XHJcbiAgICAgICAgICAgICAgICBpZiAoYmJwICE9IG51bGwgJiYgYmJwLmxlbmd0aCA+PSAzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ib3hQb3MgPSBuZXcgQkFCWUxPTi5WZWN0b3IzKGJicFswXSwgYmJwWzFdLCBiYnBbMl0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3QgYmJ6Om51bWJlcltdID0gdGhpcy5nZXRQcm9wZXJ0eShcImJvdW5kaW5nYm94c2l6ZVwiKTtcclxuICAgICAgICAgICAgICAgIGlmIChiYnogIT0gbnVsbCAmJiBiYnoubGVuZ3RoID49IDMpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmJveFNpemUgPSBuZXcgQkFCWUxPTi5WZWN0b3IzKGJielswXSwgYmJ6WzFdLCBiYnpbMl0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcm90ZWN0ZWQgc3RhcnRSZWFsdGltUmVmbGVjdGlvbnMoKTp2b2lkIHtcclxuICAgICAgICAgICAgbGV0IGluZGV4ID0gMDtcclxuICAgICAgICAgICAgY29uc3QgcXVhbGl0eTpCQUJZTE9OLlJlbmRlclF1YWxpdHkgPSBCQUJZTE9OLlNjZW5lTWFuYWdlci5HZXRSZW5kZXJRdWFsaXR5KCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGFsbG93UmVmbGVjdGlvbnM6Ym9vbGVhbiA9IChxdWFsaXR5ID09PSBCQUJZTE9OLlJlbmRlclF1YWxpdHkuSGlnaCk7XHJcbiAgICAgICAgICAgIGlmIChhbGxvd1JlZmxlY3Rpb25zID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5jdWxsaW5nTWFzayA9PT0gMCkgeyAvLyBOb3RoaW5nXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuY2xlYXJGbGFncyA9PT0gQkFCWUxPTi5SZWFsdGltZVJlZmxlY3Rpb24uU0tZQk9YX0ZMQUcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2t5Ym94OkJBQllMT04uQWJzdHJhY3RNZXNoID0gQkFCWUxPTi5TY2VuZU1hbmFnZXIuR2V0QW1iaWVudFNreWJveCh0aGlzLnNjZW5lKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNreWJveCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5yZW5kZXJMaXN0ID09IG51bGwpIHRoaXMucmVuZGVyTGlzdCA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJMaXN0LnB1c2goc2t5Ym94KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5jdWxsaW5nTWFzayA9PT0gLTEpIHsgLy8gRXZlcnl0aGluZ1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IHRoaXMuc2NlbmUubWVzaGVzLmxlbmd0aDsgaW5kZXgrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcmVuZGVyOmJvb2xlYW4gPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWVzaDpCQUJZTE9OLkFic3RyYWN0TWVzaCA9IHRoaXMuc2NlbmUubWVzaGVzW2luZGV4XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1lc2ggIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1lc2guaWQgPT09IFwiQW1iaWVudCBTa3lib3hcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlciA9ICh0aGlzLmNsZWFyRmxhZ3MgPT09IEJBQllMT04uUmVhbHRpbWVSZWZsZWN0aW9uLlNLWUJPWF9GTEFHKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVyID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZW5kZXIgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5yZW5kZXJMaXN0ID09IG51bGwpIHRoaXMucmVuZGVyTGlzdCA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyTGlzdC5wdXNoKG1lc2gpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHsgLy8gUGFyc2UgUmVuZGVyIExpc3QgTWV0YSBEYXRhXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVuZGVyTGlzdERhdGE6c3RyaW5nW10gPSB0aGlzLmdldFByb3BlcnR5KFwicmVuZGVybGlzdFwiKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocmVuZGVyTGlzdERhdGEgIT0gbnVsbCAmJiByZW5kZXJMaXN0RGF0YS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IHJlbmRlckxpc3REYXRhLmxlbmd0aDsgaW5kZXgrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVuZGVySWQ6c3RyaW5nID0gcmVuZGVyTGlzdERhdGFbaW5kZXhdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVuZGVyTWVzaDpCQUJZTE9OLkFic3RyYWN0TWVzaCA9IEJBQllMT04uU2NlbmVNYW5hZ2VyLkdldE1lc2hCeUlEKHRoaXMuc2NlbmUsIHJlbmRlcklkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZW5kZXJNZXNoICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5yZW5kZXJMaXN0ID09IG51bGwpIHRoaXMucmVuZGVyTGlzdCA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRldGFpbE5hbWU6c3RyaW5nID0gcmVuZGVyTWVzaC5uYW1lICsgXCIuRGV0YWlsXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZGV0YWlsQ2hpbGRyZW46QkFCWUxPTi5Ob2RlW10gPSByZW5kZXJNZXNoLmdldENoaWxkcmVuKChub2RlOkJBQllMT04uTm9kZSkgPT4geyByZXR1cm4gKG5vZGUubmFtZSA9PT0gZGV0YWlsTmFtZSkgfSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRldGFpbENoaWxkcmVuICE9IG51bGwgJiYgZGV0YWlsQ2hpbGRyZW4ubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbmRlckxpc3QucHVzaChkZXRhaWxDaGlsZHJlblswXSBhcyBCQUJZTE9OLkFic3RyYWN0TWVzaCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJMaXN0LnB1c2gocmVuZGVyTWVzaCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmNsZWFyRmxhZ3MgPT09IEJBQllMT04uUmVhbHRpbWVSZWZsZWN0aW9uLlNLWUJPWF9GTEFHKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNreWJveDpCQUJZTE9OLkFic3RyYWN0TWVzaCA9IEJBQllMT04uU2NlbmVNYW5hZ2VyLkdldEFtYmllbnRTa3lib3godGhpcy5zY2VuZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChza3lib3ggIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucmVuZGVyTGlzdCA9PSBudWxsKSB0aGlzLnJlbmRlckxpc3QgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyTGlzdC5wdXNoKHNreWJveCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyAuLlxyXG4gICAgICAgICAgICAgICAgLy8gR2V0IFByb2JlIFJlbmRlciBMaXN0XHJcbiAgICAgICAgICAgICAgICAvLyAuLlxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMudXNlUHJvYmVMaXN0ID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJvYmVMaXN0RGF0YTpzdHJpbmdbXSA9IHRoaXMuZ2V0UHJvcGVydHkoXCJwcm9iZWxpc3RcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHByb2JlTGlzdERhdGEgIT0gbnVsbCAmJiBwcm9iZUxpc3REYXRhLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgcHJvYmVMaXN0RGF0YS5sZW5ndGg7IGluZGV4KyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHByb2JlSWQ6c3RyaW5nID0gcHJvYmVMaXN0RGF0YVtpbmRleF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwcm9iZU1lc2g6QkFCWUxPTi5BYnN0cmFjdE1lc2ggPSBCQUJZTE9OLlNjZW5lTWFuYWdlci5HZXRNZXNoQnlJRCh0aGlzLnNjZW5lLCBwcm9iZUlkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwcm9iZU1lc2ggIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnByb2JlTGlzdCA9PSBudWxsKSB0aGlzLnByb2JlTGlzdCA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJvYmVMaXN0LnB1c2gocHJvYmVNZXNoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5pbmNsdWRlQ2hpbGRyZW4gPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY2hpbGRNZXNoZXM6QkFCWUxPTi5BYnN0cmFjdE1lc2hbXSA9IHByb2JlTWVzaC5nZXRDaGlsZE1lc2hlcyhmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGlpID0gMDsgaWkgPCBjaGlsZE1lc2hlcy5sZW5ndGg7IGlpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNoaWxkTWVzaCA9IGNoaWxkTWVzaGVzW2lpXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJvYmVMaXN0LnB1c2goY2hpbGRNZXNoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJvYmVUYWcgPSBcIlBST0JFX1wiICsgdGhpcy5wcm9iZWlkLnRvRml4ZWQoMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9iZUxpc3QgPSB0aGlzLnNjZW5lLmdldE1lc2hlc0J5VGFncyhwcm9iZVRhZyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5wcm9iZUxpc3QgIT0gbnVsbCAmJiB0aGlzLnByb2JlTGlzdC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYWJzdHJhY3RNZXNoOkJBQllMT04uQWJzdHJhY3RNZXNoID0gdGhpcy5nZXRBYnN0cmFjdE1lc2goKTtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCB0aGlzLnByb2JlTGlzdC5sZW5ndGg7IGluZGV4KyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJvYmVtZXNoOkJBQllMT04uQWJzdHJhY3RNZXNoID0gdGhpcy5wcm9iZUxpc3RbaW5kZXhdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZWZsZWN0aW9uUHJvYmUgPSBuZXcgQkFCWUxPTi5SZWZsZWN0aW9uUHJvYmUocHJvYmVtZXNoLm5hbWUgKyBcIi5Qcm9iZVwiLCB0aGlzLnJlc29sdXRpb24sIHRoaXMuc2NlbmUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZWZsZWN0aW9uUHJvYmUucmVmcmVzaFJhdGUgPSAodGhpcy5yZWZyZXNoTW9kZSA9PT0gMCkgPyBCQUJZTE9OLlJlbmRlclRhcmdldFRleHR1cmUuUkVGUkVTSFJBVEVfUkVOREVSX09OQ0UgOiBCQUJZTE9OLlJlbmRlclRhcmdldFRleHR1cmUuUkVGUkVTSFJBVEVfUkVOREVSX09ORVZFUllGUkFNRTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVmbGVjdGlvblByb2JlLnJlbmRlckxpc3QucHVzaCguLi50aGlzLnJlbmRlckxpc3QpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWJzdHJhY3RNZXNoICE9IG51bGwpIHJlZmxlY3Rpb25Qcm9iZS5hdHRhY2hUb01lc2goYWJzdHJhY3RNZXNoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuYm94UHJvamVjdGlvbiA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuYm94U2l6ZSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmbGVjdGlvblByb2JlLmN1YmVUZXh0dXJlLmJvdW5kaW5nQm94U2l6ZSA9IHRoaXMuYm94U2l6ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmJveFBvcyAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmbGVjdGlvblByb2JlLmN1YmVUZXh0dXJlLmJvdW5kaW5nQm94UG9zaXRpb24gPSB0aGlzLmJveFBvcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocHJvYmVtZXNoLm1hdGVyaWFsIGluc3RhbmNlb2YgQkFCWUxPTi5NdWx0aU1hdGVyaWFsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtbWF0MTpCQUJZTE9OLk11bHRpTWF0ZXJpYWwgPSBwcm9iZW1lc2gubWF0ZXJpYWwuY2xvbmUocHJvYmVtZXNoLm1hdGVyaWFsLm5hbWUgKyBcIi5cIiArIHByb2JlbWVzaC5uYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IHh4ID0gMDsgeHggPCBtbWF0MS5zdWJNYXRlcmlhbHMubGVuZ3RoOyB4eCsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc21hdDEgPSBtbWF0MS5zdWJNYXRlcmlhbHNbeHhdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHN1Yk1hdGVyaWFsOkJBQllMT04uUEJSTWF0ZXJpYWwgPSBtbWF0MS5zdWJNYXRlcmlhbHNbeHhdLmNsb25lKG1tYXQxLnN1Yk1hdGVyaWFsc1t4eF0ubmFtZSArIFwiX1wiICsgcHJvYmVtZXNoLm5hbWUpIGFzIEJBQllMT04uUEJSTWF0ZXJpYWw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ViTWF0ZXJpYWwudW5mcmVlemUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJNYXRlcmlhbC5yZWZsZWN0aW9uVGV4dHVyZSA9IHJlZmxlY3Rpb25Qcm9iZS5jdWJlVGV4dHVyZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtbWF0MS5zdWJNYXRlcmlhbHNbeHhdID0gc3ViTWF0ZXJpYWw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9iZW1lc2gubWF0ZXJpYWwgPSBtbWF0MTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1lc2hNYXRlcmlhbDpCQUJZTE9OLlBCUk1hdGVyaWFsID0gcHJvYmVtZXNoLm1hdGVyaWFsLmNsb25lKHByb2JlbWVzaC5tYXRlcmlhbC5uYW1lICsgXCIuXCIgKyBwcm9iZW1lc2gubmFtZSkgYXMgQkFCWUxPTi5QQlJNYXRlcmlhbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc2hNYXRlcmlhbC51bmZyZWV6ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzaE1hdGVyaWFsLnJlZmxlY3Rpb25UZXh0dXJlID0gcmVmbGVjdGlvblByb2JlLmN1YmVUZXh0dXJlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvYmVtZXNoLm1hdGVyaWFsID0gbWVzaE1hdGVyaWFsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9ICBcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByb3RlY3RlZCBkZXN0cm95UmVhbHRpbVJlZmxlY3Rpb25zKCk6dm9pZCB7XHJcbiAgICAgICAgICAgIHRoaXMucHJvYmVMaXN0ID0gbnVsbDtcclxuICAgICAgICAgICAgdGhpcy5yZW5kZXJMaXN0ID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwibW9kdWxlIEJBQllMT04ge1xyXG4gICAgLyoqXHJcbiAgICAgKiBCYWJ5bG9uIGZ1bGwgcmlnaWRib2R5IHBoeXNpY3MgcHJvIGNsYXNzIChOYXRpdmUgQnVsbGV0IFBoeXNpY3MgMi44MilcclxuICAgICAqIEBjbGFzcyBSaWdpZGJvZHlQaHlzaWNzIC0gQWxsIHJpZ2h0cyByZXNlcnZlZCAoYykgMjAyMCBNYWNrZXkgS2luYXJkXHJcbiAgICAgKi9cclxuICAgIGV4cG9ydCBjbGFzcyBSaWdpZGJvZHlQaHlzaWNzIGV4dGVuZHMgQkFCWUxPTi5TY3JpcHRDb21wb25lbnQge1xyXG4gICAgICAgIHByaXZhdGUgc3RhdGljIFRlbXBBbW1vVmVjdG9yOmFueSA9IG51bGw7XHJcbiAgICAgICAgcHJpdmF0ZSBzdGF0aWMgVGVtcEFtbW9WZWN0b3JBdXg6YW55ID0gbnVsbDtcclxuICAgICAgICBwcml2YXRlIHN0YXRpYyBUZW1wQ2VudGVyVHJhbnNmb3JtOmFueSA9IG51bGw7XHJcblxyXG4gICAgICAgIHByaXZhdGUgX2Fic3RyYWN0TWVzaDpCQUJZTE9OLkFic3RyYWN0TWVzaCA9IG51bGw7XHJcbiAgICAgICAgcHJpdmF0ZSBfaXNLaW5lbWF0aWM6Ym9vbGVhbiA9IGZhbHNlO1xyXG4gICAgICAgIHByaXZhdGUgX21heENvbGxpc2lvbnM6bnVtYmVyID0gNDtcclxuICAgICAgICBwcml2YXRlIF9pc1BoeXNpY3NSZWFkeTpib29sZWFuID0gZmFsc2U7XHJcbiAgICAgICAgcHJpdmF0ZSBfY29sbGlzaW9uT2JqZWN0OmFueSA9IG51bGw7XHJcbiAgICAgICAgcHJpdmF0ZSBfY2VudGVyT2ZNYXNzOkJBQllMT04uVmVjdG9yMyA9IG5ldyBCQUJZTE9OLlZlY3RvcjMoMCwwLDApO1xyXG4gICAgICAgIHByaXZhdGUgX3RtcExpbmVhckZhY3RvcjpCQUJZTE9OLlZlY3RvcjMgPSBuZXcgQkFCWUxPTi5WZWN0b3IzKDAsMCwwKTtcclxuICAgICAgICBwcml2YXRlIF90bXBBbmd1bGFyRmFjdG9yOkJBQllMT04uVmVjdG9yMyA9IG5ldyBCQUJZTE9OLlZlY3RvcjMoMCwwLDApO1xyXG4gICAgICAgIHByaXZhdGUgX3RtcENlbnRlck9mTWFzczpCQUJZTE9OLlZlY3RvcjMgPSBuZXcgQkFCWUxPTi5WZWN0b3IzKDAsMCwwKTtcclxuICAgICAgICBwcml2YXRlIF90bXBDb2xsaXNpb25Db250YWN0czpDb2xsaXNpb25Db250YWN0SW5mb1tdID0gbnVsbDtcclxuICAgICAgICBwdWJsaWMgZ2V0IGlzS2luZW1hdGljKCk6Ym9vbGVhbiB7IHJldHVybiB0aGlzLl9pc0tpbmVtYXRpYzsgfVxyXG4gICAgICAgIHB1YmxpYyBnZXQgY2VudGVyT2ZNYXNzKCk6QkFCWUxPTi5WZWN0b3IzIHsgcmV0dXJuIHRoaXMuX2NlbnRlck9mTWFzczsgfVxyXG4gICAgICAgIC8qKiBSZWdpc3RlciBoYW5kbGVyIHRoYXQgaXMgdHJpZ2dlcmVkIHdoZW4gdGhlIGEgY29sbGlzaW9uIGNvbnRhY3QgaGFzIGVudGVyZWQgKi9cclxuICAgICAgICBwdWJsaWMgb25Db2xsaXNpb25FbnRlck9ic2VydmFibGUgPSBuZXcgQkFCWUxPTi5PYnNlcnZhYmxlPEJBQllMT04uQWJzdHJhY3RNZXNoPigpO1xyXG4gICAgICAgIC8qKiBSZWdpc3RlciBoYW5kbGVyIHRoYXQgaXMgdHJpZ2dlcmVkIHdoZW4gdGhlIGEgY29sbGlzaW9uIGNvbnRhY3QgaXMgYWN0aXZlICovXHJcbiAgICAgICAgcHVibGljIG9uQ29sbGlzaW9uU3RheU9ic2VydmFibGUgPSBuZXcgQkFCWUxPTi5PYnNlcnZhYmxlPEJBQllMT04uQWJzdHJhY3RNZXNoPigpO1xyXG4gICAgICAgIC8qKiBSZWdpc3RlciBoYW5kbGVyIHRoYXQgaXMgdHJpZ2dlcmVkIHdoZW4gdGhlIGEgY29sbGlzaW9uIGNvbnRhY3QgaGFzIGV4aXRlZCAqL1xyXG4gICAgICAgIHB1YmxpYyBvbkNvbGxpc2lvbkV4aXRPYnNlcnZhYmxlID0gbmV3IEJBQllMT04uT2JzZXJ2YWJsZTxCQUJZTE9OLkFic3RyYWN0TWVzaD4oKTtcclxuXHJcbiAgICAgICAgcHJvdGVjdGVkIG1fcGh5c2ljc1dvcmxkOmFueSA9IG51bGw7XHJcbiAgICAgICAgcHJvdGVjdGVkIG1fcGh5c2ljc0VuZ2luZTpCQUJZTE9OLklQaHlzaWNzRW5naW5lID0gbnVsbDtcclxuICAgICAgICBwcm90ZWN0ZWQgbV9yYXljYXN0VmVoaWNsZTphbnkgPSBudWxsO1xyXG5cclxuICAgICAgICBwcm90ZWN0ZWQgYXdha2UoKTogdm9pZCB7IHRoaXMuYXdha2VSaWdpZGJvZHlTdGF0ZSgpOyB9XHJcbiAgICAgICAgcHJvdGVjdGVkIHVwZGF0ZSgpIDp2b2lkIHsgIHRoaXMudXBkYXRlUmlnaWRib2R5U3RhdGUoKTsgfVxyXG4gICAgICAgIHByb3RlY3RlZCBhZnRlcigpIDp2b2lkIHsgIHRoaXMuYWZ0ZXJSaWdpZGJvZHlTdGF0ZSgpOyB9XHJcbiAgICAgICAgcHJvdGVjdGVkIGRlc3Ryb3koKTogdm9pZCB7IHRoaXMuZGVzdHJveVJpZ2lkYm9keVN0YXRlKCk7IH1cclxuXHJcbiAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4gICAgICAgIC8vIFByb3RlY3RlZCBSaWdpZGJvZHkgUGh5c2ljcyBTdGF0ZSBGdW5jdGlvbnMgLy9cclxuICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcblxyXG4gICAgICAgIHByb3RlY3RlZCBhd2FrZVJpZ2lkYm9keVN0YXRlKCk6dm9pZCB7XHJcbiAgICAgICAgICAgIHRoaXMuX2Fic3RyYWN0TWVzaCA9IHRoaXMuZ2V0QWJzdHJhY3RNZXNoKCk7XHJcbiAgICAgICAgICAgIHRoaXMuX2lzS2luZW1hdGljID0gdGhpcy5nZXRQcm9wZXJ0eShcImlzS2luZW1hdGljXCIsIHRoaXMuX2lzS2luZW1hdGljKTtcclxuICAgICAgICAgICAgdGhpcy5tX3BoeXNpY3NXb3JsZCA9IEJBQllMT04uU2NlbmVNYW5hZ2VyLkdldFBoeXNpY3NXb3JsZCh0aGlzLnNjZW5lKTtcclxuICAgICAgICAgICAgdGhpcy5tX3BoeXNpY3NFbmdpbmUgPSBCQUJZTE9OLlNjZW5lTWFuYWdlci5HZXRQaHlzaWNzRW5naW5lKHRoaXMuc2NlbmUpO1xyXG4gICAgICAgICAgICBpZiAodGhpcy50cmFuc2Zvcm0ubWV0YWRhdGEgIT0gbnVsbCAmJiB0aGlzLnRyYW5zZm9ybS5tZXRhZGF0YS51bml0eSAhPSBudWxsICYmIHRoaXMudHJhbnNmb3JtLm1ldGFkYXRhLnVuaXR5LnBoeXNpY3MgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fY2VudGVyT2ZNYXNzID0gKHRoaXMudHJhbnNmb3JtLm1ldGFkYXRhLnVuaXR5LnBoeXNpY3MuY2VudGVyICE9IG51bGwpID8gQkFCWUxPTi5VdGlsaXRpZXMuUGFyc2VWZWN0b3IzKHRoaXMudHJhbnNmb3JtLm1ldGFkYXRhLnVuaXR5LnBoeXNpY3MuY2VudGVyLCB0aGlzLl9jZW50ZXJPZk1hc3MpIDogdGhpcy5fY2VudGVyT2ZNYXNzO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vY29uc29sZS53YXJuKFwiU3RhcnRpbmcgUmlnaWRib2R5IFBoeXNpY3MgRm9yOiBcIiArIHRoaXMudHJhbnNmb3JtLm5hbWUpO1xyXG4gICAgICAgICAgICB0aGlzLnNldE1heE5vdGlmaWNhdGlvbnModGhpcy5fbWF4Q29sbGlzaW9ucyk7XHJcbiAgICAgICAgICAgIEJBQllMT04uVXRpbGl0aWVzLlZhbGlkYXRlVHJhbnNmb3JtUXVhdGVybmlvbih0aGlzLnRyYW5zZm9ybSk7XHJcbiAgICAgICAgICAgIHRoaXMuX2lzUGh5c2ljc1JlYWR5ID0gKHRoaXMubV9waHlzaWNzRW5naW5lICE9IG51bGwgJiYgdGhpcy5fdG1wQ29sbGlzaW9uQ29udGFjdHMgIT0gbnVsbCAmJiB0aGlzLl9hYnN0cmFjdE1lc2ggIT0gbnVsbCAmJiB0aGlzLl9hYnN0cmFjdE1lc2gucGh5c2ljc0ltcG9zdG9yICE9IG51bGwgJiYgdGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3Rvci5waHlzaWNzQm9keSAhPSBudWxsKTtcclxuICAgICAgICAgICAgY29uc3QgY29sbGlzaW9uR3JvdXA6bnVtYmVyID0gKHRoaXMuX2lzS2luZW1hdGljID09PSB0cnVlKSA/IEJBQllMT04uQ29sbGlzaW9uRmlsdGVycy5TdGF0aWNGaWx0ZXIgOiBCQUJZTE9OLkNvbGxpc2lvbkZpbHRlcnMuRGVmYXVsdEZpbHRlcjtcclxuICAgICAgICAgICAgY29uc3QgY29sbGlzaW9uTWFzazpudW1iZXIgPSAodGhpcy5faXNLaW5lbWF0aWMgPT09IHRydWUpID8gQkFCWUxPTi5Db2xsaXNpb25GaWx0ZXJzLkFsbEZpbHRlciBeIEJBQllMT04uQ29sbGlzaW9uRmlsdGVycy5TdGF0aWNGaWx0ZXIgOiBCQUJZTE9OLkNvbGxpc2lvbkZpbHRlcnMuQWxsRmlsdGVyO1xyXG4gICAgICAgICAgICB0aGlzLnNldENvbGxpc2lvbkZpbHRlckdyb3VwKGNvbGxpc2lvbkdyb3VwKTtcclxuICAgICAgICAgICAgdGhpcy5zZXRDb2xsaXNpb25GaWx0ZXJNYXNrKGNvbGxpc2lvbk1hc2spO1xyXG4gICAgICAgICAgICB0aGlzLnJlc2V0Qm9keUNvbGxpc2lvbkNvbnRhY3RzKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHByb3RlY3RlZCB1cGRhdGVSaWdpZGJvZHlTdGF0ZSgpOnZvaWQge1xyXG4gICAgICAgICAgICB0aGlzLnN5bmNyb25pemVWZWhpY2xlQ29udHJvbGxlcigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBwcm90ZWN0ZWQgYWZ0ZXJSaWdpZGJvZHlTdGF0ZSgpOnZvaWQge1xyXG4gICAgICAgICAgICB0aGlzLnBhcnNlQm9keUNvbGxpc2lvbkNvbnRhY3RzKCk7XHJcbiAgICAgICAgICAgIHRoaXMucmVzZXRCb2R5Q29sbGlzaW9uQ29udGFjdHMoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcHJvdGVjdGVkIGRlc3Ryb3lSaWdpZGJvZHlTdGF0ZSgpOnZvaWQge1xyXG4gICAgICAgICAgICB0aGlzLm1fcGh5c2ljc1dvcmxkID0gbnVsbDtcclxuICAgICAgICAgICAgdGhpcy5tX3BoeXNpY3NFbmdpbmUgPSBudWxsO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5tX3JheWNhc3RWZWhpY2xlICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLm1fcmF5Y2FzdFZlaGljbGUuZGlzcG9zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubV9yYXljYXN0VmVoaWNsZS5kaXNwb3NlKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1fcmF5Y2FzdFZlaGljbGUgPSBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMub25Db2xsaXNpb25FbnRlck9ic2VydmFibGUuY2xlYXIoKTtcclxuICAgICAgICAgICAgdGhpcy5vbkNvbGxpc2lvbkVudGVyT2JzZXJ2YWJsZSA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMub25Db2xsaXNpb25TdGF5T2JzZXJ2YWJsZS5jbGVhcigpO1xyXG4gICAgICAgICAgICB0aGlzLm9uQ29sbGlzaW9uU3RheU9ic2VydmFibGUgPSBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLm9uQ29sbGlzaW9uRXhpdE9ic2VydmFibGUuY2xlYXIoKTtcclxuICAgICAgICAgICAgdGhpcy5vbkNvbGxpc2lvbkV4aXRPYnNlcnZhYmxlID0gbnVsbDtcclxuICAgICAgICAgICAgdGhpcy5fdG1wQ29sbGlzaW9uQ29udGFjdHMgPSBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLl9jb2xsaXNpb25PYmplY3QgPSBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLl9hYnN0cmFjdE1lc2ggPSBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuICAgICAgICAvLyBSaWdpZGJvZHkgUGh5c2ljcyBMaWZlIEN5Y2xlIEV2ZW50IEZ1bmN0aW9ucyAvL1xyXG4gICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcblxyXG4gICAgICAgIHByb3RlY3RlZCBzeW5jcm9uaXplVmVoaWNsZUNvbnRyb2xsZXIoKTp2b2lkIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMubV9yYXljYXN0VmVoaWNsZSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5tX3JheWNhc3RWZWhpY2xlLnVwZGF0ZVdoZWVsSW5mb3JtYXRpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1fcmF5Y2FzdFZlaGljbGUudXBkYXRlV2hlZWxJbmZvcm1hdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHByb3RlY3RlZCBwYXJzZUJvZHlDb2xsaXNpb25Db250YWN0cygpOnZvaWQge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5faXNQaHlzaWNzUmVhZHkgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGhhc0VudGVyT2JzZXJ2ZXJzOmJvb2xlYW4gPSB0aGlzLm9uQ29sbGlzaW9uRW50ZXJPYnNlcnZhYmxlLmhhc09ic2VydmVycygpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaGFzU3RheU9ic2VydmVyczpib29sZWFuID0gdGhpcy5vbkNvbGxpc2lvblN0YXlPYnNlcnZhYmxlLmhhc09ic2VydmVycygpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaGFzRXhpdE9ic2VydmVyczpib29sZWFuID0gdGhpcy5vbkNvbGxpc2lvbkV4aXRPYnNlcnZhYmxlLmhhc09ic2VydmVycygpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGhhc0VudGVyT2JzZXJ2ZXJzIHx8IGhhc1N0YXlPYnNlcnZlcnMgfHwgaGFzRXhpdE9ic2VydmVycykge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBpbmRleCA9IDA7IC8vIE5vdGU6IEZsYWcgQWxsIENvbGxpc2lvbiBMaXN0IEl0ZW1zIEZvciBFbmQgQ29udGFjdCBTdGF0ZVxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IHRoaXMuX3RtcENvbGxpc2lvbkNvbnRhY3RzLmxlbmd0aDsgaW5kZXgrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl90bXBDb2xsaXNpb25Db250YWN0c1tpbmRleF0ucmVzZXQgPSB0cnVlOyBcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gLi5cclxuICAgICAgICAgICAgICAgICAgICAvLyBQYXJzZSBPdmVybGFwcGluZyBCb2R5IENvbnRhY3QgT2JqZWN0c1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIC4uXHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNvbGxpc2lvbkNvdW50Om51bWJlciA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCg8YW55PnRoaXMuX2Fic3RyYWN0TWVzaC5waHlzaWNzSW1wb3N0b3IpLnRtcENvbGxpc2lvbk9iamVjdHMgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0bXBDb2xsaXNpb25PYmplY3RNYXA6YW55ID0gKDxhbnk+dGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3RvcikudG1wQ29sbGlzaW9uT2JqZWN0cztcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBjb250YWN0S2V5IGluIHRtcENvbGxpc2lvbk9iamVjdE1hcCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGZvdW5kaW5kZXg6bnVtYmVyID0gLTE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjb250YWN0TWVzaDpCQUJZTE9OLkFic3RyYWN0TWVzaCA9IHRtcENvbGxpc2lvbk9iamVjdE1hcFtjb250YWN0S2V5XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IHRoaXMuX3RtcENvbGxpc2lvbkNvbnRhY3RzLmxlbmd0aDsgaW5kZXgrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNoZWNrOkJBQllMT04uQ29sbGlzaW9uQ29udGFjdEluZm8gPSB0aGlzLl90bXBDb2xsaXNpb25Db250YWN0c1tpbmRleF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNoZWNrLm1lc2ggIT0gbnVsbCAmJiBjaGVjay5tZXNoID09PSBjb250YWN0TWVzaCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGVjay5zdGF0ZSA9IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrLnJlc2V0ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvdW5kaW5kZXggPSBpbmRleDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZvdW5kaW5kZXggPT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgdGhpcy5fdG1wQ29sbGlzaW9uQ29udGFjdHMubGVuZ3RoOyBpbmRleCsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGluc2VydDpCQUJZTE9OLkNvbGxpc2lvbkNvbnRhY3RJbmZvID0gdGhpcy5fdG1wQ29sbGlzaW9uQ29udGFjdHNbaW5kZXhdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5zZXJ0Lm1lc2ggPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zZXJ0Lm1lc2ggPSBjb250YWN0TWVzaDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc2VydC5zdGF0ZSA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnNlcnQucmVzZXQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sbGlzaW9uQ291bnQrKztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb2xsaXNpb25Db3VudCA+IHRoaXMuX21heENvbGxpc2lvbnMpIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIC4uXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gRGlzcGF0Y2ggQm9keSBDb2xsaXNpb24gQ29udGFjdCBTdGF0ZVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIC4uXHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgdGhpcy5fdG1wQ29sbGlzaW9uQ29udGFjdHMubGVuZ3RoOyBpbmRleCsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGluZm86QkFCWUxPTi5Db2xsaXNpb25Db250YWN0SW5mbyA9IHRoaXMuX3RtcENvbGxpc2lvbkNvbnRhY3RzW2luZGV4XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGluZm8ucmVzZXQgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIERpc3BhdGNoIE9uIENvbGxpc2lvbiBFeGl0IEV2ZW50XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaGFzRXhpdE9ic2VydmVycyAmJiBpbmZvLm1lc2ggIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub25Db2xsaXNpb25FeGl0T2JzZXJ2YWJsZS5ub3RpZnlPYnNlcnZlcnMoaW5mby5tZXNoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJlc2V0IENvbGxpc2lvbiBDb250YWN0IEluZm8gSXRlbVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5mby5tZXNoID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZm8uc3RhdGUgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5mby5yZXNldCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGluZm8uc3RhdGUgPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBEaXNwYXRjaCBPbiBDb2xsaXNpb24gRW50ZXIgRXZlbnRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaGFzRW50ZXJPYnNlcnZlcnMgJiYgaW5mby5tZXNoICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vbkNvbGxpc2lvbkVudGVyT2JzZXJ2YWJsZS5ub3RpZnlPYnNlcnZlcnMoaW5mby5tZXNoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIERpc3BhdGNoIE9uIENvbGxpc2lvbiBTdGF5IEV2ZW50XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhhc1N0YXlPYnNlcnZlcnMgJiYgaW5mby5tZXNoICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vbkNvbGxpc2lvblN0YXlPYnNlcnZhYmxlLm5vdGlmeU9ic2VydmVycyhpbmZvLm1lc2gpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBwcm90ZWN0ZWQgcmVzZXRCb2R5Q29sbGlzaW9uQ29udGFjdHMoKTp2b2lkIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX2lzUGh5c2ljc1JlYWR5ID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBoYXNFbnRlck9ic2VydmVyczpib29sZWFuID0gdGhpcy5vbkNvbGxpc2lvbkVudGVyT2JzZXJ2YWJsZS5oYXNPYnNlcnZlcnMoKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGhhc1N0YXlPYnNlcnZlcnM6Ym9vbGVhbiA9IHRoaXMub25Db2xsaXNpb25TdGF5T2JzZXJ2YWJsZS5oYXNPYnNlcnZlcnMoKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGhhc0V4aXRPYnNlcnZlcnM6Ym9vbGVhbiA9IHRoaXMub25Db2xsaXNpb25FeGl0T2JzZXJ2YWJsZS5oYXNPYnNlcnZlcnMoKTtcclxuICAgICAgICAgICAgICAgIGlmIChoYXNFbnRlck9ic2VydmVycyB8fCBoYXNTdGF5T2JzZXJ2ZXJzIHx8IGhhc0V4aXRPYnNlcnZlcnMpIHtcclxuICAgICAgICAgICAgICAgICAgICAoPGFueT50aGlzLl9hYnN0cmFjdE1lc2gucGh5c2ljc0ltcG9zdG9yKS50bXBDb2xsaXNpb25PYmplY3RzID0ge307XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICg8YW55PnRoaXMuX2Fic3RyYWN0TWVzaC5waHlzaWNzSW1wb3N0b3IpLnRtcENvbGxpc2lvbk9iamVjdHMgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuICAgICAgICAvLyBSaWdpZGJvZHkgUGh5c2ljcyBHcmF2aXR5IEFkdmFuY2VkIEhlbHBlciBGdW5jdGlvbnNcclxuICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuXHJcbiAgICAgICAgLyoqIFNldHMgZW50aXR5IGdyYXZpdHkgdmFsdWUgdXNpbmcgcGh5c2ljcyBpbXBvc3RvciBib2R5LiAqL1xyXG4gICAgICAgIHB1YmxpYyBzZXRHcmF2aXR5KGdyYXZpdHk6QkFCWUxPTi5WZWN0b3IzKTp2b2lkIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX2Fic3RyYWN0TWVzaCAhPSBudWxsICYmIHRoaXMuX2Fic3RyYWN0TWVzaC5waHlzaWNzSW1wb3N0b3IgIT0gbnVsbCAmJiB0aGlzLl9hYnN0cmFjdE1lc2gucGh5c2ljc0ltcG9zdG9yLnBoeXNpY3NCb2R5ICE9IG51bGwgJiYgdGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3Rvci5waHlzaWNzQm9keS5zZXRHcmF2aXR5KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZ3Jhdml0eSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKEJBQllMT04uUmlnaWRib2R5UGh5c2ljcy5UZW1wQW1tb1ZlY3RvciA9PSBudWxsKSBCQUJZTE9OLlJpZ2lkYm9keVBoeXNpY3MuVGVtcEFtbW9WZWN0b3IgPSBuZXcgQW1tby5idFZlY3RvcjMoMCwgMCwgMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgQkFCWUxPTi5SaWdpZGJvZHlQaHlzaWNzLlRlbXBBbW1vVmVjdG9yLnNldFZhbHVlKGdyYXZpdHkueCwgZ3Jhdml0eS55LCBncmF2aXR5LnopO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2Fic3RyYWN0TWVzaC5waHlzaWNzSW1wb3N0b3IucGh5c2ljc0JvZHkuc2V0R3Jhdml0eShCQUJZTE9OLlJpZ2lkYm9keVBoeXNpY3MuVGVtcEFtbW9WZWN0b3IpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8qKiBHZXRzIGVudGl0eSBncmF2aXR5IHZhbHVlIHVzaW5nIHBoeXNpY3MgaW1wb3N0b3IgYm9keS4gKi9cclxuICAgICAgICBwdWJsaWMgZ2V0R3Jhdml0eSgpOkJBQllMT04uTnVsbGFibGU8QkFCWUxPTi5WZWN0b3IzPiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdDpCQUJZTE9OLlZlY3RvcjMgPSBuZXcgQkFCWUxPTi5WZWN0b3IzKDAsMCwwKTtcclxuICAgICAgICAgICAgdGhpcy5nZXRHcmF2aXR5VG9SZWYocmVzdWx0KTtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9XHJcbiAgICAgICAgLyoqIEdldHMgZW50aXR5IGdyYXZpdHkgdmFsdWUgdXNpbmcgcGh5c2ljcyBpbXBvc3RvciBib2R5LiAqL1xyXG4gICAgICAgIHB1YmxpYyBnZXRHcmF2aXR5VG9SZWYocmVzdWx0OkJBQllMT04uVmVjdG9yMyk6dm9pZCB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9hYnN0cmFjdE1lc2ggIT0gbnVsbCAmJiB0aGlzLl9hYnN0cmFjdE1lc2gucGh5c2ljc0ltcG9zdG9yICE9IG51bGwgJiYgdGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3Rvci5waHlzaWNzQm9keSAhPSBudWxsICYmIHRoaXMuX2Fic3RyYWN0TWVzaC5waHlzaWNzSW1wb3N0b3IucGh5c2ljc0JvZHkuZ2V0R3Jhdml0eSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZ3Jhdml0eTphbnkgPSB0aGlzLl9hYnN0cmFjdE1lc2gucGh5c2ljc0ltcG9zdG9yLnBoeXNpY3NCb2R5LmdldEdyYXZpdHkoKTtcclxuICAgICAgICAgICAgICAgIEJBQllMT04uVXRpbGl0aWVzLkNvbnZlcnRBbW1vVmVjdG9yM1RvUmVmKGdyYXZpdHksIHJlc3VsdCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4gICAgICAgIC8vIFJpZ2lkYm9keSBQaHlzaWNzIEltcG9zdG9yIEhlbHBlciBGdW5jdGlvbnMgLSAgVE9ETyAtIFVzZSBOYXRpdmUgUGh5c2ljcyBBUEkgLSA/Pz9cclxuICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuXHJcbiAgICAgICAgLyoqIEdldHMgbWFzcyBvZiBlbnRpdHkgdXNpbmcgcGh5c2ljcyBpbXBvc3Rvci4gKi9cclxuICAgICAgICBwdWJsaWMgZ2V0TWFzcygpOm51bWJlciB7XHJcbiAgICAgICAgICAgIGxldCByZXN1bHQ6bnVtYmVyID0gMDtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX2Fic3RyYWN0TWVzaCAhPSBudWxsICYmIHRoaXMuX2Fic3RyYWN0TWVzaC5waHlzaWNzSW1wb3N0b3IgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3Rvci5tYXNzO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8qKiBTZXRzIG1hc3MgdG8gZW50aXR5IHVzaW5nIHBoeXNpY3MgaW1wb3N0b3IuICovXHJcbiAgICAgICAgcHVibGljIHNldE1hc3MobWFzczpudW1iZXIpOnZvaWQge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fYWJzdHJhY3RNZXNoICE9IG51bGwgJiYgdGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3RvciAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3Rvci5tYXNzICE9PSBtYXNzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3Rvci5tYXNzID0gbWFzcztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvKiogR2V0cyBlbnRpdHkgZnJpY3Rpb24gbGV2ZWwgdXNpbmcgcGh5c2ljcyBpbXBvc3Rvci4gKi9cclxuICAgICAgICBwdWJsaWMgZ2V0RnJpY3Rpb24oKTpudW1iZXIge1xyXG4gICAgICAgICAgICBsZXQgcmVzdWx0Om51bWJlciA9IDA7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9hYnN0cmFjdE1lc2ggIT0gbnVsbCAmJiB0aGlzLl9hYnN0cmFjdE1lc2gucGh5c2ljc0ltcG9zdG9yICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMuX2Fic3RyYWN0TWVzaC5waHlzaWNzSW1wb3N0b3IuZnJpY3Rpb247XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9XHJcbiAgICAgICAgLyoqIEFwcGxpZXMgZnJpY3Rpb24gdG8gZW50aXR5IHVzaW5nIHBoeXNpY3MgaW1wb3N0b3IuICovXHJcbiAgICAgICAgcHVibGljIHNldEZyaWN0aW9uKGZyaWN0aW9uOm51bWJlcik6dm9pZCB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9hYnN0cmFjdE1lc2ggIT0gbnVsbCAmJiB0aGlzLl9hYnN0cmFjdE1lc2gucGh5c2ljc0ltcG9zdG9yICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9hYnN0cmFjdE1lc2gucGh5c2ljc0ltcG9zdG9yLmZyaWN0aW9uICE9PSBmcmljdGlvbikge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2Fic3RyYWN0TWVzaC5waHlzaWNzSW1wb3N0b3IuZnJpY3Rpb24gPSBmcmljdGlvbjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvKiogR2V0cyByZXN0aXR1dGlvbiBvZiBlbnRpdHkgdXNpbmcgcGh5c2ljcyBpbXBvc3Rvci4gKi9cclxuICAgICAgICBwdWJsaWMgZ2V0UmVzdGl0dXRpb24oKTpudW1iZXIge1xyXG4gICAgICAgICAgICBsZXQgcmVzdWx0Om51bWJlciA9IDA7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9hYnN0cmFjdE1lc2ggIT0gbnVsbCAmJiB0aGlzLl9hYnN0cmFjdE1lc2gucGh5c2ljc0ltcG9zdG9yICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMuX2Fic3RyYWN0TWVzaC5waHlzaWNzSW1wb3N0b3IucmVzdGl0dXRpb247XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9XHJcbiAgICAgICAgLyoqIFNldHMgcmVzdGl0dXRpb24gdG8gZW50aXR5IHVzaW5nIHBoeXNpY3MgaW1wb3N0b3IuICovXHJcbiAgICAgICAgcHVibGljIHNldFJlc3RpdHV0aW9uKHJlc3RpdHV0aW9uOm51bWJlcik6dm9pZCB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9hYnN0cmFjdE1lc2ggIT0gbnVsbCAmJiB0aGlzLl9hYnN0cmFjdE1lc2gucGh5c2ljc0ltcG9zdG9yICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9hYnN0cmFjdE1lc2gucGh5c2ljc0ltcG9zdG9yLnJlc3RpdHV0aW9uICE9PSByZXN0aXR1dGlvbikge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2Fic3RyYWN0TWVzaC5waHlzaWNzSW1wb3N0b3IucmVzdGl0dXRpb24gPSByZXN0aXR1dGlvbjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvKiogR2V0cyBlbnRpdHkgbGluZWFyIHZlbG9jaXR5IHVzaW5nIHBoeXNpY3MgaW1wb3N0b3IuICovXHJcbiAgICAgICAgcHVibGljIGdldExpbmVhclZlbG9jaXR5KCk6QkFCWUxPTi5OdWxsYWJsZTxCQUJZTE9OLlZlY3RvcjM+IHtcclxuICAgICAgICAgICAgbGV0IHJlc3VsdDpCQUJZTE9OLlZlY3RvcjMgPSBudWxsO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fYWJzdHJhY3RNZXNoICE9IG51bGwgJiYgdGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3RvciAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQgPSB0aGlzLl9hYnN0cmFjdE1lc2gucGh5c2ljc0ltcG9zdG9yLmdldExpbmVhclZlbG9jaXR5KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9XHJcbiAgICAgICAgLyoqIFNldHMgZW50aXR5IGxpbmVhciB2ZWxvY2l0eSB1c2luZyBwaHlzaWNzIGltcG9zdG9yLiAqL1xyXG4gICAgICAgIHB1YmxpYyBzZXRMaW5lYXJWZWxvY2l0eSh2ZWxvY2l0eTpCQUJZTE9OLlZlY3RvcjMpOnZvaWQge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fYWJzdHJhY3RNZXNoICE9IG51bGwgJiYgdGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3RvciAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodmVsb2NpdHkgIT0gbnVsbCkgdGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3Rvci5zZXRMaW5lYXJWZWxvY2l0eSh2ZWxvY2l0eSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLyoqIEdldHMgZW50aXR5IGFuZ3VsYXIgdmVsb2NpdHkgdXNpbmcgcGh5c2ljcyBpbXBvc3Rvci4gKi9cclxuICAgICAgICBwdWJsaWMgZ2V0QW5ndWxhclZlbG9jaXR5KCk6QkFCWUxPTi5OdWxsYWJsZTxCQUJZTE9OLlZlY3RvcjM+IHtcclxuICAgICAgICAgICAgbGV0IHJlc3VsdDpCQUJZTE9OLlZlY3RvcjMgPSBudWxsO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fYWJzdHJhY3RNZXNoICE9IG51bGwgJiYgdGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3RvciAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQgPSB0aGlzLl9hYnN0cmFjdE1lc2gucGh5c2ljc0ltcG9zdG9yLmdldEFuZ3VsYXJWZWxvY2l0eSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8qKiBTZXRzIGVudGl0eSBhbmd1bGFyIHZlbG9jaXR5IHVzaW5nIHBoeXNpY3MgaW1wb3N0b3IuICovXHJcbiAgICAgICAgcHVibGljIHNldEFuZ3VsYXJWZWxvY2l0eSh2ZWxvY2l0eTpCQUJZTE9OLlZlY3RvcjMpOnZvaWQge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fYWJzdHJhY3RNZXNoICE9IG51bGwgJiYgdGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3RvciAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodmVsb2NpdHkgIT0gbnVsbCkgdGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3Rvci5zZXRBbmd1bGFyVmVsb2NpdHkodmVsb2NpdHkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuICAgICAgICAvLyBSaWdpZGJvZHkgUGh5c2ljcyBUcmFuc2Zvcm0gSGVscGVyIEZ1bmN0aW9uc1xyXG4gICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG5cclxuICAgICAgICAvKiogR2V0cyB0aGUgbmF0aXZlIHBoeXNpY3Mgd29ybGQgdHJhbnNmb3JtIG9iamVjdCB1c2luZyBwaHlzaWNzIGltcG9zdG9yIGJvZHkuIChBbW1vLmJ0VHJhbnNmb3JtKSAqL1xyXG4gICAgICAgIHB1YmxpYyBnZXRXb3JsZFRyYW5zZm9ybSgpOmFueSB7XHJcbiAgICAgICAgICAgIGxldCByZXN1bHQ6YW55ID0gbnVsbDtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX2Fic3RyYWN0TWVzaCAhPSBudWxsICYmIHRoaXMuX2Fic3RyYWN0TWVzaC5waHlzaWNzSW1wb3N0b3IgIT0gbnVsbCAmJiB0aGlzLl9hYnN0cmFjdE1lc2gucGh5c2ljc0ltcG9zdG9yLnBoeXNpY3NCb2R5ICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9jb2xsaXNpb25PYmplY3QgPT0gbnVsbCkgdGhpcy5fY29sbGlzaW9uT2JqZWN0ID0gQW1tby5jYXN0T2JqZWN0KHRoaXMuX2Fic3RyYWN0TWVzaC5waHlzaWNzSW1wb3N0b3IucGh5c2ljc0JvZHksIEFtbW8uYnRDb2xsaXNpb25PYmplY3QpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2NvbGxpc2lvbk9iamVjdCAhPSBudWxsICYmIHRoaXMuX2NvbGxpc2lvbk9iamVjdC5nZXRXb3JsZFRyYW5zZm9ybSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMuX2NvbGxpc2lvbk9iamVjdC5nZXRXb3JsZFRyYW5zZm9ybSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8qKiBzZXRzIHRoZSBuYXRpdmUgcGh5c2ljcyB3b3JsZCB0cmFuc2Zvcm0gb2JqZWN0IHVzaW5nIHBoeXNpY3MgaW1wb3N0b3IgYm9keS4gKEFtbW8uYnRUcmFuc2Zvcm0pICovXHJcbiAgICAgICAgcHVibGljIHNldFdvcmxkVHJhbnNmb3JtKGJ0VHJhbnNmb3JtOmFueSk6YW55IHtcclxuICAgICAgICAgICAgbGV0IHJlc3VsdDphbnkgPSBudWxsO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fYWJzdHJhY3RNZXNoICE9IG51bGwgJiYgdGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3RvciAhPSBudWxsICYmIHRoaXMuX2Fic3RyYWN0TWVzaC5waHlzaWNzSW1wb3N0b3IucGh5c2ljc0JvZHkgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2NvbGxpc2lvbk9iamVjdCA9PSBudWxsKSB0aGlzLl9jb2xsaXNpb25PYmplY3QgPSBBbW1vLmNhc3RPYmplY3QodGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3Rvci5waHlzaWNzQm9keSwgQW1tby5idENvbGxpc2lvbk9iamVjdCk7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fY29sbGlzaW9uT2JqZWN0ICE9IG51bGwgJiYgdGhpcy5fY29sbGlzaW9uT2JqZWN0LnNldFdvcmxkVHJhbnNmb3JtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY29sbGlzaW9uT2JqZWN0LnNldFdvcmxkVHJhbnNmb3JtKGJ0VHJhbnNmb3JtKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9hYnN0cmFjdE1lc2gucGh5c2ljc0ltcG9zdG9yLm1hc3MgPT09IDAgJiYgdGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3Rvci5waHlzaWNzQm9keS5nZXRNb3Rpb25TdGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG1vdGlvblN0YXRlOmFueSA9IHRoaXMuX2Fic3RyYWN0TWVzaC5waHlzaWNzSW1wb3N0b3IucGh5c2ljc0JvZHkuZ2V0TW90aW9uU3RhdGUoKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobW90aW9uU3RhdGUgIT0gbnVsbCAmJiBtb3Rpb25TdGF0ZS5zZXRXb3JsZFRyYW5zZm9ybSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb3Rpb25TdGF0ZS5zZXRXb3JsZFRyYW5zZm9ybShidFRyYW5zZm9ybSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuICAgICAgICAvLyBSaWdpZGJvZHkgQXBwbGllZCBQaHlzaWNzIE1vdmVtZW50IEZ1bmN0aW9uc1xyXG4gICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG5cclxuICAgICAgICBwdWJsaWMgY2xlYXJGb3JjZXMoKTogdm9pZCB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9hYnN0cmFjdE1lc2ggIT0gbnVsbCAmJiB0aGlzLl9hYnN0cmFjdE1lc2gucGh5c2ljc0ltcG9zdG9yICE9IG51bGwgJiYgdGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3Rvci5waHlzaWNzQm9keSAhPSBudWxsICYmIHRoaXMuX2Fic3RyYWN0TWVzaC5waHlzaWNzSW1wb3N0b3IucGh5c2ljc0JvZHkuY2xlYXJGb3JjZXMpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2Fic3RyYWN0TWVzaC5waHlzaWNzSW1wb3N0b3IucGh5c2ljc0JvZHkuY2xlYXJGb3JjZXMoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8gXHJcbiAgICAgICAgLy8gVE9ETyAtIFVzZSBGdW5jdGlvbiBTcGVjaWZpYyBUZW1wIEFtbW8gQnVmZmVyIC8vXHJcbiAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8gXHJcblxyXG4gICAgICAgIHB1YmxpYyBhcHBseVRvcnF1ZSh0b3JxdWU6IEJBQllMT04uVmVjdG9yMyk6IHZvaWQge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fYWJzdHJhY3RNZXNoICE9IG51bGwgJiYgdGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3RvciAhPSBudWxsICYmIHRoaXMuX2Fic3RyYWN0TWVzaC5waHlzaWNzSW1wb3N0b3IucGh5c2ljc0JvZHkgIT0gbnVsbCAmJiB0aGlzLl9hYnN0cmFjdE1lc2gucGh5c2ljc0ltcG9zdG9yLnBoeXNpY3NCb2R5LmFwcGx5VG9ycXVlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodG9ycXVlICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoQkFCWUxPTi5SaWdpZGJvZHlQaHlzaWNzLlRlbXBBbW1vVmVjdG9yID09IG51bGwpIEJBQllMT04uUmlnaWRib2R5UGh5c2ljcy5UZW1wQW1tb1ZlY3RvciA9IG5ldyBBbW1vLmJ0VmVjdG9yMygwLCAwLCAwKTtcclxuICAgICAgICAgICAgICAgICAgICBCQUJZTE9OLlJpZ2lkYm9keVBoeXNpY3MuVGVtcEFtbW9WZWN0b3Iuc2V0VmFsdWUodG9ycXVlLngsIHRvcnF1ZS55LCB0b3JxdWUueik7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3Rvci5waHlzaWNzQm9keS5hcHBseVRvcnF1ZShCQUJZTE9OLlJpZ2lkYm9keVBoeXNpY3MuVGVtcEFtbW9WZWN0b3IpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHB1YmxpYyBhcHBseUxvY2FsVG9ycXVlKHRvcnF1ZTogQkFCWUxPTi5WZWN0b3IzKTogdm9pZCB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9hYnN0cmFjdE1lc2ggIT0gbnVsbCAmJiB0aGlzLl9hYnN0cmFjdE1lc2gucGh5c2ljc0ltcG9zdG9yICE9IG51bGwgJiYgdGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3Rvci5waHlzaWNzQm9keSAhPSBudWxsICYmIHRoaXMuX2Fic3RyYWN0TWVzaC5waHlzaWNzSW1wb3N0b3IucGh5c2ljc0JvZHkuYXBwbHlMb2NhbFRvcnF1ZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRvcnF1ZSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKEJBQllMT04uUmlnaWRib2R5UGh5c2ljcy5UZW1wQW1tb1ZlY3RvciA9PSBudWxsKSBCQUJZTE9OLlJpZ2lkYm9keVBoeXNpY3MuVGVtcEFtbW9WZWN0b3IgPSBuZXcgQW1tby5idFZlY3RvcjMoMCwgMCwgMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgQkFCWUxPTi5SaWdpZGJvZHlQaHlzaWNzLlRlbXBBbW1vVmVjdG9yLnNldFZhbHVlKHRvcnF1ZS54LCB0b3JxdWUueSwgdG9ycXVlLnopO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2Fic3RyYWN0TWVzaC5waHlzaWNzSW1wb3N0b3IucGh5c2ljc0JvZHkuYXBwbHlMb2NhbFRvcnF1ZShCQUJZTE9OLlJpZ2lkYm9keVBoeXNpY3MuVGVtcEFtbW9WZWN0b3IpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgYXBwbHlJbXB1bHNlKGltcHVsc2U6IEJBQllMT04uVmVjdG9yMywgcmVsX3BvczogQkFCWUxPTi5WZWN0b3IzKTogdm9pZCB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9hYnN0cmFjdE1lc2ggIT0gbnVsbCAmJiB0aGlzLl9hYnN0cmFjdE1lc2gucGh5c2ljc0ltcG9zdG9yICE9IG51bGwgJiYgdGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3Rvci5waHlzaWNzQm9keSAhPSBudWxsICYmIHRoaXMuX2Fic3RyYWN0TWVzaC5waHlzaWNzSW1wb3N0b3IucGh5c2ljc0JvZHkuYXBwbHlJbXB1bHNlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaW1wdWxzZSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKEJBQllMT04uUmlnaWRib2R5UGh5c2ljcy5UZW1wQW1tb1ZlY3RvciA9PSBudWxsKSBCQUJZTE9OLlJpZ2lkYm9keVBoeXNpY3MuVGVtcEFtbW9WZWN0b3IgPSBuZXcgQW1tby5idFZlY3RvcjMoMCwgMCwgMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKEJBQllMT04uUmlnaWRib2R5UGh5c2ljcy5UZW1wQW1tb1ZlY3RvckF1eCA9PSBudWxsKSBCQUJZTE9OLlJpZ2lkYm9keVBoeXNpY3MuVGVtcEFtbW9WZWN0b3JBdXggPSBuZXcgQW1tby5idFZlY3RvcjMoMCwgMCwgMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgQkFCWUxPTi5SaWdpZGJvZHlQaHlzaWNzLlRlbXBBbW1vVmVjdG9yLnNldFZhbHVlKGltcHVsc2UueCwgaW1wdWxzZS55LCBpbXB1bHNlLnopO1xyXG4gICAgICAgICAgICAgICAgICAgIEJBQllMT04uUmlnaWRib2R5UGh5c2ljcy5UZW1wQW1tb1ZlY3RvckF1eC5zZXRWYWx1ZShyZWxfcG9zLngsIHJlbF9wb3MueSwgcmVsX3Bvcy56KTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9hYnN0cmFjdE1lc2gucGh5c2ljc0ltcG9zdG9yLnBoeXNpY3NCb2R5LmFwcGx5SW1wdWxzZShCQUJZTE9OLlJpZ2lkYm9keVBoeXNpY3MuVGVtcEFtbW9WZWN0b3IsIEJBQllMT04uUmlnaWRib2R5UGh5c2ljcy5UZW1wQW1tb1ZlY3RvckF1eCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcHVibGljIGFwcGx5Q2VudHJhbEltcHVsc2UoaW1wdWxzZTogQkFCWUxPTi5WZWN0b3IzKTogdm9pZCB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9hYnN0cmFjdE1lc2ggIT0gbnVsbCAmJiB0aGlzLl9hYnN0cmFjdE1lc2gucGh5c2ljc0ltcG9zdG9yICE9IG51bGwgJiYgdGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3Rvci5waHlzaWNzQm9keSAhPSBudWxsICYmIHRoaXMuX2Fic3RyYWN0TWVzaC5waHlzaWNzSW1wb3N0b3IucGh5c2ljc0JvZHkuYXBwbHlDZW50cmFsSW1wdWxzZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGltcHVsc2UgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChCQUJZTE9OLlJpZ2lkYm9keVBoeXNpY3MuVGVtcEFtbW9WZWN0b3IgPT0gbnVsbCkgQkFCWUxPTi5SaWdpZGJvZHlQaHlzaWNzLlRlbXBBbW1vVmVjdG9yID0gbmV3IEFtbW8uYnRWZWN0b3IzKDAsIDAsIDApO1xyXG4gICAgICAgICAgICAgICAgICAgIEJBQllMT04uUmlnaWRib2R5UGh5c2ljcy5UZW1wQW1tb1ZlY3Rvci5zZXRWYWx1ZShpbXB1bHNlLngsIGltcHVsc2UueSwgaW1wdWxzZS56KTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9hYnN0cmFjdE1lc2gucGh5c2ljc0ltcG9zdG9yLnBoeXNpY3NCb2R5LmFwcGx5Q2VudHJhbEltcHVsc2UoQkFCWUxPTi5SaWdpZGJvZHlQaHlzaWNzLlRlbXBBbW1vVmVjdG9yKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBwdWJsaWMgYXBwbHlUb3JxdWVJbXB1bHNlKHRvcnF1ZTogQkFCWUxPTi5WZWN0b3IzKTogdm9pZCB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9hYnN0cmFjdE1lc2ggIT0gbnVsbCAmJiB0aGlzLl9hYnN0cmFjdE1lc2gucGh5c2ljc0ltcG9zdG9yICE9IG51bGwgJiYgdGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3Rvci5waHlzaWNzQm9keSAhPSBudWxsICYmIHRoaXMuX2Fic3RyYWN0TWVzaC5waHlzaWNzSW1wb3N0b3IucGh5c2ljc0JvZHkuYXBwbHlUb3JxdWVJbXB1bHNlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodG9ycXVlICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoQkFCWUxPTi5SaWdpZGJvZHlQaHlzaWNzLlRlbXBBbW1vVmVjdG9yID09IG51bGwpIEJBQllMT04uUmlnaWRib2R5UGh5c2ljcy5UZW1wQW1tb1ZlY3RvciA9IG5ldyBBbW1vLmJ0VmVjdG9yMygwLCAwLCAwKTtcclxuICAgICAgICAgICAgICAgICAgICBCQUJZTE9OLlJpZ2lkYm9keVBoeXNpY3MuVGVtcEFtbW9WZWN0b3Iuc2V0VmFsdWUodG9ycXVlLngsIHRvcnF1ZS55LCB0b3JxdWUueik7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3Rvci5waHlzaWNzQm9keS5hcHBseVRvcnF1ZUltcHVsc2UoQkFCWUxPTi5SaWdpZGJvZHlQaHlzaWNzLlRlbXBBbW1vVmVjdG9yKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBwdWJsaWMgYXBwbHlGb3JjZShmb3JjZTogQkFCWUxPTi5WZWN0b3IzLCByZWxfcG9zOiBCQUJZTE9OLlZlY3RvcjMpOiB2b2lkIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX2Fic3RyYWN0TWVzaCAhPSBudWxsICYmIHRoaXMuX2Fic3RyYWN0TWVzaC5waHlzaWNzSW1wb3N0b3IgIT0gbnVsbCAmJiB0aGlzLl9hYnN0cmFjdE1lc2gucGh5c2ljc0ltcG9zdG9yLnBoeXNpY3NCb2R5ICE9IG51bGwgJiYgdGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3Rvci5waHlzaWNzQm9keS5hcHBseUZvcmNlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZm9yY2UgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChCQUJZTE9OLlJpZ2lkYm9keVBoeXNpY3MuVGVtcEFtbW9WZWN0b3IgPT0gbnVsbCkgQkFCWUxPTi5SaWdpZGJvZHlQaHlzaWNzLlRlbXBBbW1vVmVjdG9yID0gbmV3IEFtbW8uYnRWZWN0b3IzKDAsIDAsIDApO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChCQUJZTE9OLlJpZ2lkYm9keVBoeXNpY3MuVGVtcEFtbW9WZWN0b3JBdXggPT0gbnVsbCkgQkFCWUxPTi5SaWdpZGJvZHlQaHlzaWNzLlRlbXBBbW1vVmVjdG9yQXV4ID0gbmV3IEFtbW8uYnRWZWN0b3IzKDAsIDAsIDApO1xyXG4gICAgICAgICAgICAgICAgICAgIEJBQllMT04uUmlnaWRib2R5UGh5c2ljcy5UZW1wQW1tb1ZlY3Rvci5zZXRWYWx1ZShmb3JjZS54LCBmb3JjZS55LCBmb3JjZS56KTtcclxuICAgICAgICAgICAgICAgICAgICBCQUJZTE9OLlJpZ2lkYm9keVBoeXNpY3MuVGVtcEFtbW9WZWN0b3JBdXguc2V0VmFsdWUocmVsX3Bvcy54LCByZWxfcG9zLnksIHJlbF9wb3Mueik7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3Rvci5waHlzaWNzQm9keS5hcHBseUZvcmNlKEJBQllMT04uUmlnaWRib2R5UGh5c2ljcy5UZW1wQW1tb1ZlY3RvciwgQkFCWUxPTi5SaWdpZGJvZHlQaHlzaWNzLlRlbXBBbW1vVmVjdG9yQXV4KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBwdWJsaWMgYXBwbHlDZW50cmFsRm9yY2UoZm9yY2U6IEJBQllMT04uVmVjdG9yMyk6IHZvaWQge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fYWJzdHJhY3RNZXNoICE9IG51bGwgJiYgdGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3RvciAhPSBudWxsICYmIHRoaXMuX2Fic3RyYWN0TWVzaC5waHlzaWNzSW1wb3N0b3IucGh5c2ljc0JvZHkgIT0gbnVsbCAmJiB0aGlzLl9hYnN0cmFjdE1lc2gucGh5c2ljc0ltcG9zdG9yLnBoeXNpY3NCb2R5LmFwcGx5Q2VudHJhbEZvcmNlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZm9yY2UgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChCQUJZTE9OLlJpZ2lkYm9keVBoeXNpY3MuVGVtcEFtbW9WZWN0b3IgPT0gbnVsbCkgQkFCWUxPTi5SaWdpZGJvZHlQaHlzaWNzLlRlbXBBbW1vVmVjdG9yID0gbmV3IEFtbW8uYnRWZWN0b3IzKDAsIDAsIDApO1xyXG4gICAgICAgICAgICAgICAgICAgIEJBQllMT04uUmlnaWRib2R5UGh5c2ljcy5UZW1wQW1tb1ZlY3Rvci5zZXRWYWx1ZShmb3JjZS54LCBmb3JjZS55LCBmb3JjZS56KTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9hYnN0cmFjdE1lc2gucGh5c2ljc0ltcG9zdG9yLnBoeXNpY3NCb2R5LmFwcGx5Q2VudHJhbEZvcmNlKEJBQllMT04uUmlnaWRib2R5UGh5c2ljcy5UZW1wQW1tb1ZlY3Rvcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcHVibGljIGFwcGx5Q2VudHJhbExvY2FsRm9yY2UoZm9yY2U6IEJBQllMT04uVmVjdG9yMyk6IHZvaWQge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fYWJzdHJhY3RNZXNoICE9IG51bGwgJiYgdGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3RvciAhPSBudWxsICYmIHRoaXMuX2Fic3RyYWN0TWVzaC5waHlzaWNzSW1wb3N0b3IucGh5c2ljc0JvZHkgIT0gbnVsbCAmJiB0aGlzLl9hYnN0cmFjdE1lc2gucGh5c2ljc0ltcG9zdG9yLnBoeXNpY3NCb2R5LmFwcGx5Q2VudHJhbExvY2FsRm9yY2UpIHtcclxuICAgICAgICAgICAgICAgIGlmIChmb3JjZSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKEJBQllMT04uUmlnaWRib2R5UGh5c2ljcy5UZW1wQW1tb1ZlY3RvciA9PSBudWxsKSBCQUJZTE9OLlJpZ2lkYm9keVBoeXNpY3MuVGVtcEFtbW9WZWN0b3IgPSBuZXcgQW1tby5idFZlY3RvcjMoMCwgMCwgMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgQkFCWUxPTi5SaWdpZGJvZHlQaHlzaWNzLlRlbXBBbW1vVmVjdG9yLnNldFZhbHVlKGZvcmNlLngsIGZvcmNlLnksIGZvcmNlLnopO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2Fic3RyYWN0TWVzaC5waHlzaWNzSW1wb3N0b3IucGh5c2ljc0JvZHkuYXBwbHlDZW50cmFsTG9jYWxGb3JjZShCQUJZTE9OLlJpZ2lkYm9keVBoeXNpY3MuVGVtcEFtbW9WZWN0b3IpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8qKiBnZXRzIHJpZ2lkYm9keSBjZW50ZXIgb2YgbWFzcyAqL1xyXG4gICAgICAgIHB1YmxpYyBnZXRDZW50ZXJPZk1hc3NUcmFuc2Zvcm0oKTpCQUJZTE9OLlZlY3RvcjMge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fYWJzdHJhY3RNZXNoICE9IG51bGwgJiYgdGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3RvciAhPSBudWxsICYmIHRoaXMuX2Fic3RyYWN0TWVzaC5waHlzaWNzSW1wb3N0b3IucGh5c2ljc0JvZHkgIT0gbnVsbCAmJiB0aGlzLl9hYnN0cmFjdE1lc2gucGh5c2ljc0ltcG9zdG9yLnBoeXNpY3NCb2R5LmdldENlbnRlck9mTWFzc1RyYW5zZm9ybSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYnR0cmFuc2Zvcm06YW55ID0gdGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3Rvci5waHlzaWNzQm9keS5nZXRDZW50ZXJPZk1hc3NUcmFuc2Zvcm0oKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGJ0cG9zaXRpb246YW55ID0gYnR0cmFuc2Zvcm0uZ2V0T3JpZ2luKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl90bXBDZW50ZXJPZk1hc3Muc2V0KGJ0cG9zaXRpb24ueCgpLCBidHBvc2l0aW9uLnkoKSwgYnRwb3NpdGlvbi56KCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl90bXBDZW50ZXJPZk1hc3M7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8qKiBTZXRzIHJpZ2lkYm9keSBjZW50ZXIgb2YgbWFzcyAqL1xyXG4gICAgICAgIHB1YmxpYyBzZXRDZW50ZXJPZk1hc3NUcmFuc2Zvcm0oY2VudGVyOiBCQUJZTE9OLlZlY3RvcjMpOiB2b2lkIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX2Fic3RyYWN0TWVzaCAhPSBudWxsICYmIHRoaXMuX2Fic3RyYWN0TWVzaC5waHlzaWNzSW1wb3N0b3IgIT0gbnVsbCAmJiB0aGlzLl9hYnN0cmFjdE1lc2gucGh5c2ljc0ltcG9zdG9yLnBoeXNpY3NCb2R5ICE9IG51bGwgJiYgdGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3Rvci5waHlzaWNzQm9keS5zZXRDZW50ZXJPZk1hc3NUcmFuc2Zvcm0pIHtcclxuICAgICAgICAgICAgICAgIGlmIChjZW50ZXIgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChCQUJZTE9OLlJpZ2lkYm9keVBoeXNpY3MuVGVtcEFtbW9WZWN0b3IgPT0gbnVsbCkgQkFCWUxPTi5SaWdpZGJvZHlQaHlzaWNzLlRlbXBBbW1vVmVjdG9yID0gbmV3IEFtbW8uYnRWZWN0b3IzKDAsIDAsIDApO1xyXG4gICAgICAgICAgICAgICAgICAgIEJBQllMT04uUmlnaWRib2R5UGh5c2ljcy5UZW1wQW1tb1ZlY3Rvci5zZXRWYWx1ZShjZW50ZXIueCwgY2VudGVyLnksIGNlbnRlci56KTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoQkFCWUxPTi5SaWdpZGJvZHlQaHlzaWNzLlRlbXBDZW50ZXJUcmFuc2Zvcm0gPT0gbnVsbCkgQkFCWUxPTi5SaWdpZGJvZHlQaHlzaWNzLlRlbXBDZW50ZXJUcmFuc2Zvcm0gPSBuZXcgQW1tby5idFRyYW5zZm9ybSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIEJBQllMT04uUmlnaWRib2R5UGh5c2ljcy5UZW1wQ2VudGVyVHJhbnNmb3JtLnNldElkZW50aXR5KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgQkFCWUxPTi5SaWdpZGJvZHlQaHlzaWNzLlRlbXBDZW50ZXJUcmFuc2Zvcm0uc2V0T3JpZ2luKEJBQllMT04uUmlnaWRib2R5UGh5c2ljcy5UZW1wQW1tb1ZlY3Rvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3Rvci5waHlzaWNzQm9keS5zZXRDZW50ZXJPZk1hc3NUcmFuc2Zvcm0oQkFCWUxPTi5SaWdpZGJvZHlQaHlzaWNzLlRlbXBDZW50ZXJUcmFuc2Zvcm0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuICAgICAgICAvLyBSaWdpZGJvZHkgUGh5c2ljcyBOYXRpdmUgQm9keSBIZWxwZXIgRnVuY3Rpb25zXHJcbiAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcblxyXG4gICAgICAgIC8qKiBHZXRzIGVudGl0eSBsaW5lYXIgZmFjdG9yIHVzaW5nIHBoeXNpY3MgaW1wb3N0b3IgYm9keS4gKi9cclxuICAgICAgICBwdWJsaWMgZ2V0TGluZWFyRmFjdG9yKCk6QkFCWUxPTi5WZWN0b3IzIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX2Fic3RyYWN0TWVzaCAhPSBudWxsICYmIHRoaXMuX2Fic3RyYWN0TWVzaC5waHlzaWNzSW1wb3N0b3IgIT0gbnVsbCAmJiB0aGlzLl9hYnN0cmFjdE1lc2gucGh5c2ljc0ltcG9zdG9yLnBoeXNpY3NCb2R5ICE9IG51bGwgJiYgdGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3Rvci5waHlzaWNzQm9keS5nZXRMaW5lYXJGYWN0b3IpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGxpbmVhckZhY3RvcjphbnkgPSB0aGlzLl9hYnN0cmFjdE1lc2gucGh5c2ljc0ltcG9zdG9yLnBoeXNpY3NCb2R5LmdldExpbmVhckZhY3RvcigpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdG1wTGluZWFyRmFjdG9yLnNldChsaW5lYXJGYWN0b3IueCgpLCBsaW5lYXJGYWN0b3IueSgpLCBsaW5lYXJGYWN0b3IueigpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fdG1wTGluZWFyRmFjdG9yO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvKiogU2V0cyBlbnRpdHkgbGluZWFyIGZhY3RvciB1c2luZyBwaHlzaWNzIGltcG9zdG9yIGJvZHkuICovXHJcbiAgICAgICAgcHVibGljIHNldExpbmVhckZhY3RvcihmYWN0b3I6QkFCWUxPTi5WZWN0b3IzKTp2b2lkIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX2Fic3RyYWN0TWVzaCAhPSBudWxsICYmIHRoaXMuX2Fic3RyYWN0TWVzaC5waHlzaWNzSW1wb3N0b3IgIT0gbnVsbCAmJiB0aGlzLl9hYnN0cmFjdE1lc2gucGh5c2ljc0ltcG9zdG9yLnBoeXNpY3NCb2R5ICE9IG51bGwgJiYgdGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3Rvci5waHlzaWNzQm9keS5zZXRMaW5lYXJGYWN0b3IpIHtcclxuICAgICAgICAgICAgICAgIGlmIChCQUJZTE9OLlJpZ2lkYm9keVBoeXNpY3MuVGVtcEFtbW9WZWN0b3IgPT0gbnVsbCkgQkFCWUxPTi5SaWdpZGJvZHlQaHlzaWNzLlRlbXBBbW1vVmVjdG9yID0gbmV3IEFtbW8uYnRWZWN0b3IzKDAsIDAsIDApO1xyXG4gICAgICAgICAgICAgICAgQkFCWUxPTi5SaWdpZGJvZHlQaHlzaWNzLlRlbXBBbW1vVmVjdG9yLnNldFZhbHVlKGZhY3Rvci54LCBmYWN0b3IueSwgZmFjdG9yLnopO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3Rvci5waHlzaWNzQm9keS5zZXRMaW5lYXJGYWN0b3IoQkFCWUxPTi5SaWdpZGJvZHlQaHlzaWNzLlRlbXBBbW1vVmVjdG9yKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvKiogR2V0cyBlbnRpdHkgYW5ndWxhciBmYWN0b3IgdXNpbmcgcGh5c2ljcyBpbXBvc3RvciBib2R5LiAqL1xyXG4gICAgICAgIHB1YmxpYyBnZXRBbmd1bGFyRmFjdG9yKCk6QkFCWUxPTi5WZWN0b3IzIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX2Fic3RyYWN0TWVzaCAhPSBudWxsICYmIHRoaXMuX2Fic3RyYWN0TWVzaC5waHlzaWNzSW1wb3N0b3IgIT0gbnVsbCAmJiB0aGlzLl9hYnN0cmFjdE1lc2gucGh5c2ljc0ltcG9zdG9yLnBoeXNpY3NCb2R5ICE9IG51bGwgJiYgdGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3Rvci5waHlzaWNzQm9keS5nZXRBbmd1bGFyRmFjdG9yKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBhbmd1bGFyRmFjdG9yOmFueSA9IHRoaXMuX2Fic3RyYWN0TWVzaC5waHlzaWNzSW1wb3N0b3IucGh5c2ljc0JvZHkuZ2V0QW5ndWxhckZhY3RvcigpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdG1wQW5ndWxhckZhY3Rvci5zZXQoYW5ndWxhckZhY3Rvci54KCksIGFuZ3VsYXJGYWN0b3IueSgpLCBhbmd1bGFyRmFjdG9yLnooKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3RtcEFuZ3VsYXJGYWN0b3I7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8qKiBTZXRzIGVudGl0eSBhbmd1bGFyIGZhY3RvciB1c2luZyBwaHlzaWNzIGltcG9zdG9yIGJvZHkuICovXHJcbiAgICAgICAgcHVibGljIHNldEFuZ3VsYXJGYWN0b3IoZmFjdG9yOkJBQllMT04uVmVjdG9yMyk6dm9pZCB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9hYnN0cmFjdE1lc2ggIT0gbnVsbCAmJiB0aGlzLl9hYnN0cmFjdE1lc2gucGh5c2ljc0ltcG9zdG9yICE9IG51bGwgJiYgdGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3Rvci5waHlzaWNzQm9keSAhPSBudWxsICYmIHRoaXMuX2Fic3RyYWN0TWVzaC5waHlzaWNzSW1wb3N0b3IucGh5c2ljc0JvZHkuc2V0QW5ndWxhckZhY3Rvcikge1xyXG4gICAgICAgICAgICAgICAgaWYgKEJBQllMT04uUmlnaWRib2R5UGh5c2ljcy5UZW1wQW1tb1ZlY3RvciA9PSBudWxsKSBCQUJZTE9OLlJpZ2lkYm9keVBoeXNpY3MuVGVtcEFtbW9WZWN0b3IgPSBuZXcgQW1tby5idFZlY3RvcjMoMCwgMCwgMCk7XHJcbiAgICAgICAgICAgICAgICBCQUJZTE9OLlJpZ2lkYm9keVBoeXNpY3MuVGVtcEFtbW9WZWN0b3Iuc2V0VmFsdWUoZmFjdG9yLngsIGZhY3Rvci55LCBmYWN0b3Iueik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9hYnN0cmFjdE1lc2gucGh5c2ljc0ltcG9zdG9yLnBoeXNpY3NCb2R5LnNldEFuZ3VsYXJGYWN0b3IoQkFCWUxPTi5SaWdpZGJvZHlQaHlzaWNzLlRlbXBBbW1vVmVjdG9yKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvKiogR2V0cyBlbnRpdHkgYW5ndWxhciBkYW1waW5nIHVzaW5nIHBoeXNpY3MgaW1wb3N0b3IgYm9keS4gKi9cclxuICAgICAgICBwdWJsaWMgZ2V0QW5ndWxhckRhbXBpbmcoKTpudW1iZXIge1xyXG4gICAgICAgICAgICBsZXQgcmVzdWx0Om51bWJlciA9IDA7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9hYnN0cmFjdE1lc2ggIT0gbnVsbCAmJiB0aGlzLl9hYnN0cmFjdE1lc2gucGh5c2ljc0ltcG9zdG9yICE9IG51bGwgJiYgdGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3Rvci5waHlzaWNzQm9keSAhPSBudWxsICYmIHRoaXMuX2Fic3RyYWN0TWVzaC5waHlzaWNzSW1wb3N0b3IucGh5c2ljc0JvZHkuZ2V0QW5ndWxhckRhbXBpbmcpIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMuX2Fic3RyYWN0TWVzaC5waHlzaWNzSW1wb3N0b3IucGh5c2ljc0JvZHkuZ2V0QW5ndWxhckRhbXBpbmcoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH1cclxuICAgICAgICAvKiogR2V0cyBlbnRpdHkgbGluZWFyIGRhbXBpbmcgdXNpbmcgcGh5c2ljcyBpbXBvc3RvciBib2R5LiAqL1xyXG4gICAgICAgIHB1YmxpYyBnZXRMaW5lYXJEYW1waW5nKCk6bnVtYmVyIHtcclxuICAgICAgICAgICAgbGV0IHJlc3VsdDpudW1iZXIgPSAwO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fYWJzdHJhY3RNZXNoICE9IG51bGwgJiYgdGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3RvciAhPSBudWxsICYmIHRoaXMuX2Fic3RyYWN0TWVzaC5waHlzaWNzSW1wb3N0b3IucGh5c2ljc0JvZHkgIT0gbnVsbCAmJiB0aGlzLl9hYnN0cmFjdE1lc2gucGh5c2ljc0ltcG9zdG9yLnBoeXNpY3NCb2R5LmdldExpbmVhckRhbXBpbmcpIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMuX2Fic3RyYWN0TWVzaC5waHlzaWNzSW1wb3N0b3IucGh5c2ljc0JvZHkuZ2V0TGluZWFyRGFtcGluZygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8qKiBTZXRzIGVudGl0eSBkcmFnIGRhbXBpbmcgdXNpbmcgcGh5c2ljcyBpbXBvc3RvciBib2R5LiAqL1xyXG4gICAgICAgIHB1YmxpYyBzZXREYW1waW5nKGxpbmVhcjpudW1iZXIsIGFuZ3VsYXI6bnVtYmVyKTp2b2lkIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX2Fic3RyYWN0TWVzaCAhPSBudWxsICYmIHRoaXMuX2Fic3RyYWN0TWVzaC5waHlzaWNzSW1wb3N0b3IgIT0gbnVsbCAmJiB0aGlzLl9hYnN0cmFjdE1lc2gucGh5c2ljc0ltcG9zdG9yLnBoeXNpY3NCb2R5ICE9IG51bGwgJiYgdGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3Rvci5waHlzaWNzQm9keS5zZXREYW1waW5nKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9hYnN0cmFjdE1lc2gucGh5c2ljc0ltcG9zdG9yLnBoeXNpY3NCb2R5LnNldERhbXBpbmcobGluZWFyLCBhbmd1bGFyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvKiogU2V0cyBlbnRpdHkgc2xlZXBpbmcgdGhyZXNob2xkIHVzaW5nIHBoeXNpY3MgaW1wb3N0b3IgYm9keS4gKi9cclxuICAgICAgICBwdWJsaWMgc2V0U2xlZXBpbmdUaHJlc2hvbGRzKGxpbmVhcjpudW1iZXIsIGFuZ3VsYXI6bnVtYmVyKTp2b2lkIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX2Fic3RyYWN0TWVzaCAhPSBudWxsICYmIHRoaXMuX2Fic3RyYWN0TWVzaC5waHlzaWNzSW1wb3N0b3IgIT0gbnVsbCAmJiB0aGlzLl9hYnN0cmFjdE1lc2gucGh5c2ljc0ltcG9zdG9yLnBoeXNpY3NCb2R5ICE9IG51bGwgJiYgdGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3Rvci5waHlzaWNzQm9keS5zZXRTbGVlcGluZ1RocmVzaG9sZHMpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2Fic3RyYWN0TWVzaC5waHlzaWNzSW1wb3N0b3IucGh5c2ljc0JvZHkuc2V0U2xlZXBpbmdUaHJlc2hvbGRzKGxpbmVhciwgYW5ndWxhcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4gICAgICAgIC8vIFJpZ2lkYm9keSBQaHlzaWNzIE5hdGl2ZSBBZHZhbmNlZCBIZWxwZXIgRnVuY3Rpb25zXHJcbiAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbiAgICAgICAgXHJcbiAgICAgICAgLyoqIENoZWNrcyBpZiByaWdpZGJvZHkgaGFzIHdoZWVsIGNvbGxpZGVyIG1ldGFkYXRhIGZvciB0aGUgZW50aXR5LiBOb3RlOiBXaGVlbCBjb2xsaWRlciBtZXRhZGF0YSBpbmZvcm1haW9uIGlzIHJlcXVpcmVkIGZvciB2ZWhpY2xlIGNvbnRyb2wuICovXHJcbiAgICAgICAgcHVibGljIGhhc1doZWVsQ29sbGlkZXJzKCk6Ym9vbGVhbiB7XHJcbiAgICAgICAgICAgIHJldHVybiAodGhpcy5faXNQaHlzaWNzUmVhZHkgPT09IHRydWUgJiYgdGhpcy5fYWJzdHJhY3RNZXNoLm1ldGFkYXRhICE9IG51bGwgJiYgdGhpcy5fYWJzdHJhY3RNZXNoLm1ldGFkYXRhLnVuaXR5ICE9IG51bGwgJiYgdGhpcy5fYWJzdHJhY3RNZXNoLm1ldGFkYXRhLnVuaXR5LndoZWVscyAhPSBudWxsKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLyoqIFNldHMgdGhlIG1heGltdW0gbnVtYmVyIG9mIHNpbXVsdGFuZW91cyBjb250YWN0IG5vdGZpY2F0aW9ucyB0byBkaXNwYXRjaCBwZXIgZnJhbWUuIERlZmF1bHRzIHZhbHVlIGlzIDQuIChBZHZhbnZlZCBVc2UgT25seSkgKi9cclxuICAgICAgICBwdWJsaWMgc2V0TWF4Tm90aWZpY2F0aW9ucyhtYXg6bnVtYmVyKTogdm9pZCB7XHJcbiAgICAgICAgICAgIHRoaXMuX21heENvbGxpc2lvbnMgPSBtYXg7XHJcbiAgICAgICAgICAgIHRoaXMuX3RtcENvbGxpc2lvbkNvbnRhY3RzID0gW107ICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCB0aGlzLl9tYXhDb2xsaXNpb25zOyBpbmRleCsrKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl90bXBDb2xsaXNpb25Db250YWN0cy5wdXNoKG5ldyBDb2xsaXNpb25Db250YWN0SW5mbygpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvKiogU2V0cyBlbnRpdHkgY29sbGlzaW9uIGFjdGl2YXRpb24gc3RhdGUgdXNpbmcgcGh5c2ljcyBpbXBvc3RvciBib2R5LiAoQWR2YW52ZWQgVXNlIE9ubHkpICovXHJcbiAgICAgICAgcHVibGljIHNldEFjdGl2YXRpb25TdGF0ZShzdGF0ZTpudW1iZXIpOnZvaWQge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fYWJzdHJhY3RNZXNoICE9IG51bGwgJiYgdGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3RvciAhPSBudWxsICYmIHRoaXMuX2Fic3RyYWN0TWVzaC5waHlzaWNzSW1wb3N0b3IucGh5c2ljc0JvZHkgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2NvbGxpc2lvbk9iamVjdCA9PSBudWxsKSB0aGlzLl9jb2xsaXNpb25PYmplY3QgPSBBbW1vLmNhc3RPYmplY3QodGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3Rvci5waHlzaWNzQm9keSwgQW1tby5idENvbGxpc2lvbk9iamVjdCk7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fY29sbGlzaW9uT2JqZWN0ICE9IG51bGwgJiYgdGhpcy5fY29sbGlzaW9uT2JqZWN0LnNldEFjdGl2YXRpb25TdGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NvbGxpc2lvbk9iamVjdC5zZXRBY3RpdmF0aW9uU3RhdGUoc3RhdGUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8qKiBHZXRzIGVudGl0eSBjb2xsaXNpb24gZmlsdGVyIGdyb3VwIHVzaW5nIHBoeXNpY3MgaW1wb3N0b3IgYm9keS4gKEFkdmFudmVkIFVzZSBPbmx5KSAqL1xyXG4gICAgICAgIHB1YmxpYyBnZXRDb2xsaXNpb25GaWx0ZXJHcm91cCgpOm51bWJlciB7XHJcbiAgICAgICAgICAgIGxldCByZXN1bHQ6bnVtYmVyID0gLTE7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9hYnN0cmFjdE1lc2ggIT0gbnVsbCAmJiB0aGlzLl9hYnN0cmFjdE1lc2gucGh5c2ljc0ltcG9zdG9yICE9IG51bGwgJiYgdGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3Rvci5waHlzaWNzQm9keSAhPSBudWxsICYmIHRoaXMuX2Fic3RyYWN0TWVzaC5waHlzaWNzSW1wb3N0b3IucGh5c2ljc0JvZHkuZ2V0QnJvYWRwaGFzZVByb3h5KSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQgPSB0aGlzLl9hYnN0cmFjdE1lc2gucGh5c2ljc0ltcG9zdG9yLnBoeXNpY3NCb2R5LmdldEJyb2FkcGhhc2VQcm94eSgpLmdldF9tX2NvbGxpc2lvbkZpbHRlckdyb3VwKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9XHJcbiAgICAgICAgLyoqIFNldHMgZW50aXR5IGNvbGxpc2lvbiBmaWx0ZXIgZ3JvdXAgdXNpbmcgcGh5c2ljcyBpbXBvc3RvciBib2R5LiAoQWR2YW52ZWQgVXNlIE9ubHkpICovXHJcbiAgICAgICAgcHVibGljIHNldENvbGxpc2lvbkZpbHRlckdyb3VwKGdyb3VwOm51bWJlcik6dm9pZCB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9hYnN0cmFjdE1lc2ggIT0gbnVsbCAmJiB0aGlzLl9hYnN0cmFjdE1lc2gucGh5c2ljc0ltcG9zdG9yICE9IG51bGwgJiYgdGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3Rvci5waHlzaWNzQm9keSAhPSBudWxsICYmIHRoaXMuX2Fic3RyYWN0TWVzaC5waHlzaWNzSW1wb3N0b3IucGh5c2ljc0JvZHkuZ2V0QnJvYWRwaGFzZVByb3h5KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9hYnN0cmFjdE1lc2gucGh5c2ljc0ltcG9zdG9yLnBoeXNpY3NCb2R5LmdldEJyb2FkcGhhc2VQcm94eSgpLnNldF9tX2NvbGxpc2lvbkZpbHRlckdyb3VwKGdyb3VwKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvKiogR2V0cyBlbnRpdHkgY29sbGlzaW9uIGZpbHRlciBtYXNrIHVzaW5nIHBoeXNpY3MgaW1wb3N0b3IgYm9keS4gKEFkdmFudmVkIFVzZSBPbmx5KSAqL1xyXG4gICAgICAgIHB1YmxpYyBnZXRDb2xsaXNpb25GaWx0ZXJNYXNrKCk6bnVtYmVyIHtcclxuICAgICAgICAgICAgbGV0IHJlc3VsdDpudW1iZXIgPSAtMTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX2Fic3RyYWN0TWVzaCAhPSBudWxsICYmIHRoaXMuX2Fic3RyYWN0TWVzaC5waHlzaWNzSW1wb3N0b3IgIT0gbnVsbCAmJiB0aGlzLl9hYnN0cmFjdE1lc2gucGh5c2ljc0ltcG9zdG9yLnBoeXNpY3NCb2R5ICE9IG51bGwgJiYgdGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3Rvci5waHlzaWNzQm9keS5nZXRCcm9hZHBoYXNlUHJveHkpIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMuX2Fic3RyYWN0TWVzaC5waHlzaWNzSW1wb3N0b3IucGh5c2ljc0JvZHkuZ2V0QnJvYWRwaGFzZVByb3h5KCkuZ2V0X21fY29sbGlzaW9uRmlsdGVyTWFzaygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8qKiBTZXRzIGVudGl0eSBjb2xsaXNpb24gZmlsdGVyIG1hc2sgdXNpbmcgcGh5c2ljcyBpbXBvc3RvciBib2R5LiAoQWR2YW52ZWQgVXNlIE9ubHkpICovXHJcbiAgICAgICAgcHVibGljIHNldENvbGxpc2lvbkZpbHRlck1hc2sobWFzazpudW1iZXIpOnZvaWQge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fYWJzdHJhY3RNZXNoICE9IG51bGwgJiYgdGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3RvciAhPSBudWxsICYmIHRoaXMuX2Fic3RyYWN0TWVzaC5waHlzaWNzSW1wb3N0b3IucGh5c2ljc0JvZHkgIT0gbnVsbCAmJiB0aGlzLl9hYnN0cmFjdE1lc2gucGh5c2ljc0ltcG9zdG9yLnBoeXNpY3NCb2R5LmdldEJyb2FkcGhhc2VQcm94eSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3Rvci5waHlzaWNzQm9keS5nZXRCcm9hZHBoYXNlUHJveHkoKS5zZXRfbV9jb2xsaXNpb25GaWx0ZXJNYXNrKG1hc2spO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8qKiBHZXRzIHRoZSBlbnRpdHkgY29sbGlzaW9uIHNoYXBlIHR5cGUgdXNpbmcgcGh5c2ljcyBpbXBvc3RvciBib2R5LiAoQWR2YW52ZWQgVXNlIE9ubHkpICovXHJcbiAgICAgICAgcHVibGljIGdldENvbGxpc2lvblNoYXBlVHlwZSgpOm51bWJlciB7XHJcbiAgICAgICAgICAgIGxldCByZXN1bHQ6bnVtYmVyID0gLTE7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9hYnN0cmFjdE1lc2ggIT0gbnVsbCAmJiB0aGlzLl9hYnN0cmFjdE1lc2gucGh5c2ljc0ltcG9zdG9yICE9IG51bGwgJiYgdGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3Rvci5waHlzaWNzQm9keSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fY29sbGlzaW9uT2JqZWN0ID09IG51bGwpIHRoaXMuX2NvbGxpc2lvbk9iamVjdCA9IEFtbW8uY2FzdE9iamVjdCh0aGlzLl9hYnN0cmFjdE1lc2gucGh5c2ljc0ltcG9zdG9yLnBoeXNpY3NCb2R5LCBBbW1vLmJ0Q29sbGlzaW9uT2JqZWN0KTtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9jb2xsaXNpb25PYmplY3QgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbGxpc2lvblNoYXBlOmFueSA9IHRoaXMuX2NvbGxpc2lvbk9iamVjdC5nZXRDb2xsaXNpb25TaGFwZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjb2xsaXNpb25TaGFwZSAhPSBudWxsICYmIGNvbGxpc2lvblNoYXBlLmdldFNoYXBlVHlwZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBjb2xsaXNpb25TaGFwZS5nZXRTaGFwZVR5cGUoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9XHJcbiAgICAgICAgLyoqIEdldHMgdGhlIGVudGl0eSBjb2xsaXNpb24gc2hhcGUgbWFyZ2luIHVzaW5nIHBoeXNpY3MgaW1wb3N0b3IgYm9keS4gKEFkdmFudmVkIFVzZSBPbmx5KSAqL1xyXG4gICAgICAgIHB1YmxpYyBnZXRDb2xsaXNpb25TaGFwZU1hcmdpbigpOm51bWJlciB7XHJcbiAgICAgICAgICAgIGxldCByZXN1bHQ6bnVtYmVyID0gLTE7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9hYnN0cmFjdE1lc2ggIT0gbnVsbCAmJiB0aGlzLl9hYnN0cmFjdE1lc2gucGh5c2ljc0ltcG9zdG9yICE9IG51bGwgJiYgdGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3Rvci5waHlzaWNzQm9keSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fY29sbGlzaW9uT2JqZWN0ID09IG51bGwpIHRoaXMuX2NvbGxpc2lvbk9iamVjdCA9IEFtbW8uY2FzdE9iamVjdCh0aGlzLl9hYnN0cmFjdE1lc2gucGh5c2ljc0ltcG9zdG9yLnBoeXNpY3NCb2R5LCBBbW1vLmJ0Q29sbGlzaW9uT2JqZWN0KTtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9jb2xsaXNpb25PYmplY3QgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbGxpc2lvblNoYXBlOmFueSA9IHRoaXMuX2NvbGxpc2lvbk9iamVjdC5nZXRDb2xsaXNpb25TaGFwZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjb2xsaXNpb25TaGFwZSAhPSBudWxsICYmIGNvbGxpc2lvblNoYXBlLmdldE1hcmdpbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBjb2xsaXNpb25TaGFwZS5nZXRNYXJnaW4oKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9XHJcbiAgICAgICAgLyoqIFNldHMgZW50aXR5IGNvbGxpc2lvbiBzaGFwZSBtYXJnaW4gdXNpbmcgcGh5c2ljcyBpbXBvc3RvciBib2R5LiAoQWR2YW52ZWQgVXNlIE9ubHkpICovXHJcbiAgICAgICAgcHVibGljIHNldENvbGxpc2lvblNoYXBlTWFyZ2luKG1hcmdpbjpudW1iZXIpOnZvaWQge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fYWJzdHJhY3RNZXNoICE9IG51bGwgJiYgdGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3RvciAhPSBudWxsICYmIHRoaXMuX2Fic3RyYWN0TWVzaC5waHlzaWNzSW1wb3N0b3IucGh5c2ljc0JvZHkgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2NvbGxpc2lvbk9iamVjdCA9PSBudWxsKSB0aGlzLl9jb2xsaXNpb25PYmplY3QgPSBBbW1vLmNhc3RPYmplY3QodGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3Rvci5waHlzaWNzQm9keSwgQW1tby5idENvbGxpc2lvbk9iamVjdCk7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fY29sbGlzaW9uT2JqZWN0ICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjb2xsaXNpb25TaGFwZTphbnkgPSB0aGlzLl9jb2xsaXNpb25PYmplY3QuZ2V0Q29sbGlzaW9uU2hhcGUoKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY29sbGlzaW9uU2hhcGUgIT0gbnVsbCAmJiBjb2xsaXNpb25TaGFwZS5zZXRNYXJnaW4pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29sbGlzaW9uU2hhcGUuc2V0TWFyZ2luKG1hcmdpbik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8qKiBHZXRzIHRoZSBlbnRpdHkgY29udGFjdCBwcm9jZXNzaW5nIHRocmVzaG9sZCB1c2luZyBwaHlzaWNzIGltcG9zdG9yIGJvZHkuIChBZHZhbnZlZCBVc2UgT25seSkgKi9cclxuICAgICAgICAvKiBERVBSRUNJQVRFRDogVE9ETyAtIE11c3QgRXhwb3NlIFRoaXMgRnVuY3Rpb24gSW4gQW1tby5pZGxcclxuICAgICAgICBwdWJsaWMgZ2V0Q29udGFjdFByb2Nlc3NpbmdUaHJlc2hvbGQoKTpudW1iZXIge1xyXG4gICAgICAgICAgICBsZXQgcmVzdWx0Om51bWJlciA9IC0xO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fYWJzdHJhY3RNZXNoICE9IG51bGwgJiYgdGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3RvciAhPSBudWxsICYmIHRoaXMuX2Fic3RyYWN0TWVzaC5waHlzaWNzSW1wb3N0b3IucGh5c2ljc0JvZHkgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2NvbGxpc2lvbk9iamVjdCA9PSBudWxsKSB0aGlzLl9jb2xsaXNpb25PYmplY3QgPSBBbW1vLmNhc3RPYmplY3QodGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3Rvci5waHlzaWNzQm9keSwgQW1tby5idENvbGxpc2lvbk9iamVjdCk7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fY29sbGlzaW9uT2JqZWN0ICE9IG51bGwgJiYgdGhpcy5fY29sbGlzaW9uT2JqZWN0LmdldENvbnRhY3RQcm9jZXNzaW5nVGhyZXNob2xkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5fY29sbGlzaW9uT2JqZWN0LmdldENvbnRhY3RQcm9jZXNzaW5nVGhyZXNob2xkKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9Ki9cclxuICAgICAgICAvKiogU2V0cyBlbnRpdHkgY29udGFjdCBwcm9jZXNzaW5nIHRocmVzaG9sZCB1c2luZyBwaHlzaWNzIGltcG9zdG9yIGJvZHkuIChBZHZhbnZlZCBVc2UgT25seSkgKi9cclxuICAgICAgICBwdWJsaWMgc2V0Q29udGFjdFByb2Nlc3NpbmdUaHJlc2hvbGQodGhyZXNob2xkOm51bWJlcik6dm9pZCB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9hYnN0cmFjdE1lc2ggIT0gbnVsbCAmJiB0aGlzLl9hYnN0cmFjdE1lc2gucGh5c2ljc0ltcG9zdG9yICE9IG51bGwgJiYgdGhpcy5fYWJzdHJhY3RNZXNoLnBoeXNpY3NJbXBvc3Rvci5waHlzaWNzQm9keSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fY29sbGlzaW9uT2JqZWN0ID09IG51bGwpIHRoaXMuX2NvbGxpc2lvbk9iamVjdCA9IEFtbW8uY2FzdE9iamVjdCh0aGlzLl9hYnN0cmFjdE1lc2gucGh5c2ljc0ltcG9zdG9yLnBoeXNpY3NCb2R5LCBBbW1vLmJ0Q29sbGlzaW9uT2JqZWN0KTtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9jb2xsaXNpb25PYmplY3QgIT0gbnVsbCAmJiB0aGlzLl9jb2xsaXNpb25PYmplY3Quc2V0Q29udGFjdFByb2Nlc3NpbmdUaHJlc2hvbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jb2xsaXNpb25PYmplY3Quc2V0Q29udGFjdFByb2Nlc3NpbmdUaHJlc2hvbGQodGhyZXNob2xkKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICAvLyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogLy9cclxuICAgICAgICAvLyAqIFBoeXNpY3MgUGh5c2ljcyBIZWxwZXIgRnVuY3Rpb25zICogLy9cclxuICAgICAgICAvLyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogLy9cclxuXHJcbiAgICAgICAgLyoqIFRPRE8gKi9cclxuICAgICAgICBwdWJsaWMgc3RhdGljIENyZWF0ZVBoeXNpY3NNZXRhZGF0YShtYXNzOm51bWJlciwgZHJhZzpudW1iZXIgPSAwLjAsIGFuZ3VsYXJEcmFnOm51bWJlciA9IDAuMDUsIGNlbnRlck1hc3M6VmVjdG9yMyA9IG51bGwpOiBhbnkge1xyXG4gICAgICAgICAgICBjb25zdCBjZW50ZXI6QkFCWUxPTi5WZWN0b3IzID0gKGNlbnRlck1hc3MgIT0gbnVsbCkgPyBjZW50ZXJNYXNzIDogbmV3IEJBQllMT04uVmVjdG9yMygwLDAsMCk7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJyaWdpZGJvZHlcIixcclxuICAgICAgICAgICAgICAgIFwibWFzc1wiOiBtYXNzLFxyXG4gICAgICAgICAgICAgICAgXCJsZHJhZ1wiOiBkcmFnLFxyXG4gICAgICAgICAgICAgICAgXCJhZHJhZ1wiOiBhbmd1bGFyRHJhZyxcclxuICAgICAgICAgICAgICAgIFwiY2VudGVyXCI6IHtcclxuICAgICAgICAgICAgICAgICAgICBcInhcIjogY2VudGVyLngsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ5XCI6IGNlbnRlci55LFxyXG4gICAgICAgICAgICAgICAgICAgIFwielwiOiBjZW50ZXIuelxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8qKiBUT0RPICovXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBDcmVhdGVDb2xsaXNpb25NZXRhZGF0YSh0eXBlOnN0cmluZywgdHJpZ2dlcjpib29sZWFuID0gZmFsc2UsIGNvbnZleG1lc2g6Ym9vbGVhbiA9IGZhbHNlLCByZXN0aXR1dGlvbjpudW1iZXIgPSAwLjAsIGR5bmFtaWNmcmljdGlvbjpudW1iZXIgPSAwLjYsIHN0YXRpY2ZyaWN0aW9uOm51bWJlciA9IDAuNik6IGFueSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogdHlwZSxcclxuICAgICAgICAgICAgICAgIFwidHJpZ2dlclwiOiB0cmlnZ2VyLFxyXG4gICAgICAgICAgICAgICAgXCJjb252ZXhtZXNoXCI6IGNvbnZleG1lc2gsXHJcbiAgICAgICAgICAgICAgICBcInJlc3RpdHV0aW9uXCI6IHJlc3RpdHV0aW9uLFxyXG4gICAgICAgICAgICAgICAgXCJkeW5hbWljZnJpY3Rpb25cIjogZHluYW1pY2ZyaWN0aW9uLFxyXG4gICAgICAgICAgICAgICAgXCJzdGF0aWNmcmljdGlvblwiOiBzdGF0aWNmcmljdGlvbixcclxuICAgICAgICAgICAgICAgIFwid2hlZWxpbmZvcm1hdGlvblwiOiBudWxsXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLyoqIFRPRE8gKi9cclxuICAgICAgICBwdWJsaWMgc3RhdGljIENyZWF0ZVBoeXNpY3NQcm9wZXJ0aWVzKG1hc3M6bnVtYmVyLCBkcmFnOm51bWJlciA9IDAuMCwgYW5ndWxhckRyYWc6bnVtYmVyID0gMC4wNSwgdXNlR3Jhdml0eTpib29sZWFuID0gdHJ1ZSwgaXNLaW5lbWF0aWM6Ym9vbGVhbiA9IGZhbHNlKTogYW55IHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIFwibWFzc1wiOiBtYXNzLFxyXG4gICAgICAgICAgICAgICAgXCJkcmFnXCI6IGRyYWcsXHJcbiAgICAgICAgICAgICAgICBcImFuZ3VsYXJEcmFnXCI6IGFuZ3VsYXJEcmFnLFxyXG4gICAgICAgICAgICAgICAgXCJ1c2VHcmF2aXR5XCI6IHVzZUdyYXZpdHksXHJcbiAgICAgICAgICAgICAgICBcImlzS2luZW1hdGljXCI6IGlzS2luZW1hdGljXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLyoqIFRPRE8gKi9cclxuICAgICAgICBwdWJsaWMgc3RhdGljIFNldHVwUGh5c2ljc0NvbXBvbmVudChzY2VuZTpCQUJZTE9OLlNjZW5lLCBlbnRpdHk6IEJBQllMT04uQWJzdHJhY3RNZXNoKTogdm9pZCB7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUud2FybihcIlNldHVwIFBoeXNpY3MgQ29tcG9uZW50OiBcIiArIGVudGl0eS5uYW1lKTtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coZW50aXR5KTtcclxuICAgICAgICAgICAgY29uc3QgbWV0YWRhdGE6YW55ID0gKGVudGl0eS5tZXRhZGF0YSAhPSBudWxsICYmIGVudGl0eS5tZXRhZGF0YS51bml0eSAhPSBudWxsKSA/IGVudGl0eS5tZXRhZGF0YS51bml0eSA6IG51bGw7XHJcbiAgICAgICAgICAgIGlmIChtZXRhZGF0YSAhPSBudWxsICYmIChtZXRhZGF0YS5waHlzaWNzICE9IG51bGwgfHwgbWV0YWRhdGEuY29sbGlzaW9uICE9IG51bGwpKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBQaHlzaWNzIE1ldGFkYXRhXHJcbiAgICAgICAgICAgICAgICBjb25zdCBoYXNwaHlzaWNzOmJvb2xlYW4gPSAobWV0YWRhdGEucGh5c2ljcyAhPSBudWxsKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGlzcm9vdDpib29sZWFuID0gKG1ldGFkYXRhLnBoeXNpY3MgIT0gbnVsbCAmJiBtZXRhZGF0YS5waHlzaWNzLnJvb3QgIT0gbnVsbCkgPyBtZXRhZGF0YS5waHlzaWNzLnJvb3QgOiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1hc3M6bnVtYmVyID0gKG1ldGFkYXRhLnBoeXNpY3MgIT0gbnVsbCAmJiBtZXRhZGF0YS5waHlzaWNzLm1hc3MgIT0gbnVsbCkgPyBtZXRhZGF0YS5waHlzaWNzLm1hc3MgOiAwO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaXNzdGF0aWM6Ym9vbGVhbiA9IChtYXNzID09PSAwKTtcclxuICAgICAgICAgICAgICAgIC8vIENyZWF0ZSBQaHlzaWNzIEltcG9zdG9yIE5vZGVcclxuICAgICAgICAgICAgICAgIGlmIChoYXNwaHlzaWNzID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzcm9vdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgZndoZWVsczphbnlbXSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBmZHluYW1pY2ZyaWN0aW9uOm51bWJlciA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBmc3RhdGljZnJpY3Rpb246bnVtYmVyID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGZyZXN0aXR1dGlvbjpudW1iZXIgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgZnRyaWdnZXI6Ym9vbGVhbiA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgZmNvdW50Om51bWJlciA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5vdGU6IEJ1bGxldCBQaHlzaWNzIENlbnRlciBNYXNzIE11c3QgT2Zmc2V0IE1lc2hlcyAoTm8gV29ya2luZyBTZXQgQ2VudGVyIE1hc3MgUHJvcGVydHkgU3VwcG9ydClcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY2VudGVyOkJBQllMT04uVmVjdG9yMyA9IChtZXRhZGF0YS5waHlzaWNzICE9IG51bGwgJiYgbWV0YWRhdGEucGh5c2ljcy5jZW50ZXIgIT0gbnVsbCkgPyBCQUJZTE9OLlV0aWxpdGllcy5QYXJzZVZlY3RvcjMobWV0YWRhdGEucGh5c2ljcy5jZW50ZXIsIEJBQllMT04uVmVjdG9yMy5aZXJvKCkpIDogQkFCWUxPTi5WZWN0b3IzLlplcm8oKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNlbnRlcm5vZGVzOkJBQllMT04uVHJhbnNmb3JtTm9kZVtdID0gZW50aXR5LmdldENoaWxkcmVuKG51bGwsIHRydWUpIGFzIEJBQllMT04uVHJhbnNmb3JtTm9kZVtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2VudGVybm9kZXMgIT0gbnVsbCAmJiBjZW50ZXJub2Rlcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZW50ZXJub2Rlcy5mb3JFYWNoKChjZW50ZXJub2RlOkJBQllMT04uQWJzdHJhY3RNZXNoKSA9PiB7IGNlbnRlcm5vZGUucG9zaXRpb24uc3VidHJhY3RJblBsYWNlKGNlbnRlcik7IH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjaGlsZG5vZGVzOkJBQllMT04uQWJzdHJhY3RNZXNoW10gPSBlbnRpdHkuZ2V0Q2hpbGRyZW4obnVsbCwgZmFsc2UpIGFzIEJBQllMT04uQWJzdHJhY3RNZXNoW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaGlsZG5vZGVzICE9IG51bGwgJiYgY2hpbGRub2Rlcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZG5vZGVzLmZvckVhY2goKGNoaWxkbm9kZTpCQUJZTE9OLkFic3RyYWN0TWVzaCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaGlsZG5vZGUubWV0YWRhdGEgIT0gbnVsbCAmJiBjaGlsZG5vZGUubWV0YWRhdGEudW5pdHkgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hpbGRub2RlLm1ldGFkYXRhLnVuaXR5LmNvbGxpc2lvbiAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjY29sbGlzaW9uOmFueSA9IGNoaWxkbm9kZS5tZXRhZGF0YS51bml0eS5jb2xsaXNpb247XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjd2hlZWxpbmZvcm1hdGlvbjphbnkgPSAoY2NvbGxpc2lvbi53aGVlbGluZm9ybWF0aW9uICE9IG51bGwpID8gY2NvbGxpc2lvbi53aGVlbGluZm9ybWF0aW9uIDogbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjd2hlZWxpbmZvcm1hdGlvbiAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVHJhY2UgV2hlZWwgQ29sbGlkZXJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBCQUJZTE9OLlNjZW5lTWFuYWdlci5Mb2dXYXJuaW5nKFwiPj4+IFNldHVwIHJheWNhc3Qgd2hlZWwgY29sbGlkZXI6IFwiICsgY2hpbGRub2RlLm5hbWUgKyBcIiAtLT4gb24gdG86IFwiICsgZW50aXR5Lm5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmd2hlZWxzID09IG51bGwpIGZ3aGVlbHMgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmd2hlZWxzLnB1c2goY3doZWVsaW5mb3JtYXRpb24pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjZHluYW1pY2ZyaWN0aW9uOm51bWJlciA9IChjY29sbGlzaW9uLmR5bmFtaWNmcmljdGlvbiAhPSBudWxsKSA/IGNjb2xsaXNpb24uZHluYW1pY2ZyaWN0aW9uIDogMC42O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNzdGF0aWNmcmljdGlvbjpudW1iZXIgPSAoY2NvbGxpc2lvbi5zdGF0aWNmcmljdGlvbiAhPSBudWxsKSA/IGNjb2xsaXNpb24uc3RhdGljZnJpY3Rpb24gOiAwLjY7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY3Jlc3RpdHV0aW9uOm51bWJlciA9IChjY29sbGlzaW9uLnJlc3RpdHV0aW9uICE9IG51bGwpID8gY2NvbGxpc2lvbi5yZXN0aXR1dGlvbiA6IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY2lzdHJpZ2dlcjpib29sZWFuID0gKGNjb2xsaXNpb24udHJpZ2dlciAhPSBudWxsKSA/IGNjb2xsaXNpb24udHJpZ2dlciA6IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNjb2xsaWRlcjpzdHJpbmcgPSAoY2NvbGxpc2lvbi50eXBlICE9IG51bGwpID8gY2NvbGxpc2lvbi50eXBlIDogXCJCb3hDb2xsaWRlclwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjaW1wb3N0b3J0eXBlOm51bWJlciA9IEJBQllMT04uUGh5c2ljc0ltcG9zdG9yLkJveEltcG9zdG9yO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjY29sbGlkZXIgPT09IFwiTWVzaENvbGxpZGVyXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTm90ZTogQWx3YXlzIEZvcmNlIENvbnZleCBIdWxsIEltcG9zdG9yIFVzYWdlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNpbXBvc3RvcnR5cGUgPSBCQUJZTE9OLlBoeXNpY3NJbXBvc3Rvci5Db252ZXhIdWxsSW1wb3N0b3I7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjY29sbGlkZXIgPT09IFwiQ2Fwc3VsZUNvbGxpZGVyXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2ltcG9zdG9ydHlwZSA9IEJBQllMT04uUGh5c2ljc0ltcG9zdG9yLkNhcHN1bGVJbXBvc3RvcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNjb2xsaWRlciA9PT0gXCJTcGhlcmVDb2xsaWRlclwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNpbXBvc3RvcnR5cGUgPSBCQUJZTE9OLlBoeXNpY3NJbXBvc3Rvci5TcGhlcmVJbXBvc3RvcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaW1wb3N0b3J0eXBlID0gQkFCWUxPTi5QaHlzaWNzSW1wb3N0b3IuQm94SW1wb3N0b3I7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjZHluYW1pY2ZyaWN0aW9uID4gZmR5bmFtaWNmcmljdGlvbikgZmR5bmFtaWNmcmljdGlvbiA9IGNkeW5hbWljZnJpY3Rpb247XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNzdGF0aWNmcmljdGlvbiA+IGZzdGF0aWNmcmljdGlvbikgZnN0YXRpY2ZyaWN0aW9uID0gY3N0YXRpY2ZyaWN0aW9uO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjcmVzdGl0dXRpb24gPiBmcmVzdGl0dXRpb24pIGZyZXN0aXR1dGlvbiA9IGNyZXN0aXR1dGlvbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2lzdHJpZ2dlciA9PSB0cnVlKSBmdHJpZ2dlciA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVHJhY2UgQ29tcG91bmQgQ29sbGlkZXJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBCQUJZTE9OLlNjZW5lTWFuYWdlci5Mb2dXYXJuaW5nKFwiPj4+IFNldHVwIFwiICsgQkFCWUxPTi5TY2VuZU1hbmFnZXIuR2V0UGh5c2ljc0ltcG9zdGVyVHlwZShjaW1wb3N0b3J0eXBlKS50b0xvd2VyQ2FzZSgpICsgXCIgY29tcG91bmQgaW1wb3N0ZXIgZm9yOiBcIiArIGNoaWxkbm9kZS5uYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBCQUJZTE9OLlNjZW5lTWFuYWdlci5DcmVhdGVQaHlzaWNzSW1wb3N0b3Ioc2NlbmUsIGNoaWxkbm9kZSwgY2ltcG9zdG9ydHlwZSwgeyBtYXNzOiAwLCBmcmljdGlvbjogMCwgcmVzdGl0dXRpb246IDAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQkFCWUxPTi5SaWdpZGJvZHlQaHlzaWNzLkNvbmZpZ1JpZ2lkYm9keVBoeXNpY3Moc2NlbmUsIGNoaWxkbm9kZSwgdHJ1ZSwgZmFsc2UsIG1ldGFkYXRhLnBoeXNpY3MpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZjb3VudCsrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZjb3VudCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRyYWNlIFBoeXNpY3MgUm9vdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQkFCWUxPTi5TY2VuZU1hbmFnZXIuTG9nV2FybmluZyhcIj4+PiBTZXR1cCBwaHlzaWNzIHJvb3Qgbm8gaW1wb3N0ZXIgZm9yOiBcIiArIGVudGl0eS5uYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJBQllMT04uU2NlbmVNYW5hZ2VyLkNyZWF0ZVBoeXNpY3NJbXBvc3RvcihzY2VuZSwgZW50aXR5LCBCQUJZTE9OLlBoeXNpY3NJbXBvc3Rvci5Ob0ltcG9zdG9yLCB7IG1hc3M6IG1hc3MsIGZyaWN0aW9uOiBmZHluYW1pY2ZyaWN0aW9uLCByZXN0aXR1dGlvbjogZnJlc3RpdHV0aW9uIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQkFCWUxPTi5SaWdpZGJvZHlQaHlzaWNzLkNvbmZpZ1JpZ2lkYm9keVBoeXNpY3Moc2NlbmUsIGVudGl0eSwgZmFsc2UsIGZ0cmlnZ2VyLCBtZXRhZGF0YS5waHlzaWNzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZndoZWVscyAhPSBudWxsICYmIGZ3aGVlbHMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVudGl0eS5tZXRhZGF0YSA9PSBudWxsKSBlbnRpdHkubWV0YWRhdGEgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbnRpdHkubWV0YWRhdGEudW5pdHkgPT0gbnVsbCkgZW50aXR5Lm1ldGFkYXRhLnVuaXR5ID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbnRpdHkubWV0YWRhdGEudW5pdHkud2hlZWxzID0gZndoZWVscztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZG5vZGVzID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG1ldGFkYXRhLmNvbGxpc2lvbiAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbGxpZGVyOnN0cmluZyA9IChtZXRhZGF0YS5jb2xsaXNpb24udHlwZSAhPSBudWxsKSA/IG1ldGFkYXRhLmNvbGxpc2lvbi50eXBlIDogXCJCb3hDb2xsaWRlclwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjb252ZXhtZXNoOmJvb2xlYW4gPSAobWV0YWRhdGEuY29sbGlzaW9uLmNvbnZleG1lc2ggIT0gbnVsbCkgPyBtZXRhZGF0YS5jb2xsaXNpb24uY29udmV4bWVzaCA6IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkeW5hbWljZnJpY3Rpb246bnVtYmVyID0gKG1ldGFkYXRhLmNvbGxpc2lvbi5keW5hbWljZnJpY3Rpb24gIT0gbnVsbCkgPyBtZXRhZGF0YS5jb2xsaXNpb24uZHluYW1pY2ZyaWN0aW9uIDogMC42O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzdGF0aWNmcmljdGlvbjpudW1iZXIgPSAobWV0YWRhdGEuY29sbGlzaW9uLnN0YXRpY2ZyaWN0aW9uICE9IG51bGwpID8gbWV0YWRhdGEuY29sbGlzaW9uLnN0YXRpY2ZyaWN0aW9uIDogMC42O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZXN0aXR1dGlvbjpudW1iZXIgPSAobWV0YWRhdGEuY29sbGlzaW9uLnJlc3RpdHV0aW9uICE9IG51bGwpID8gbWV0YWRhdGEuY29sbGlzaW9uLnJlc3RpdHV0aW9uIDogMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaXN0cmlnZ2VyOmJvb2xlYW4gPSAobWV0YWRhdGEuY29sbGlzaW9uLnRyaWdnZXIgIT0gbnVsbCkgPyBtZXRhZGF0YS5jb2xsaXNpb24udHJpZ2dlciA6IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgaW1wb3N0b3J0eXBlOm51bWJlciA9IEJBQllMT04uUGh5c2ljc0ltcG9zdG9yLkJveEltcG9zdG9yO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBDb25maWcgUGh5c2ljcyBJbXBvc3RvclxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29sbGlkZXIgPT09IFwiTWVzaENvbGxpZGVyXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltcG9zdG9ydHlwZSA9IChjb252ZXhtZXNoID09PSB0cnVlKSA/IEJBQllMT04uUGh5c2ljc0ltcG9zdG9yLkNvbnZleEh1bGxJbXBvc3RvciA6IEJBQllMT04uUGh5c2ljc0ltcG9zdG9yLk1lc2hJbXBvc3RvcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjb2xsaWRlciA9PT0gXCJDYXBzdWxlQ29sbGlkZXJcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW1wb3N0b3J0eXBlID0gQkFCWUxPTi5QaHlzaWNzSW1wb3N0b3IuQ2Fwc3VsZUltcG9zdG9yO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNvbGxpZGVyID09PSBcIlNwaGVyZUNvbGxpZGVyXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltcG9zdG9ydHlwZSA9IEJBQllMT04uUGh5c2ljc0ltcG9zdG9yLlNwaGVyZUltcG9zdG9yO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW1wb3N0b3J0eXBlID0gQkFCWUxPTi5QaHlzaWNzSW1wb3N0b3IuQm94SW1wb3N0b3I7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVHJhY2UgUGh5c2ljcyBJbXBvc3RvclxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBCQUJZTE9OLlNjZW5lTWFuYWdlci5Mb2dXYXJuaW5nKFwiPj4+IFNldHVwIFwiICsgQkFCWUxPTi5TY2VuZU1hbmFnZXIuR2V0UGh5c2ljc0ltcG9zdGVyVHlwZShpbXBvc3RvcnR5cGUpLnRvTG93ZXJDYXNlKCkgKyBcIiBwaHlzaWNzIGltcG9zdG9yIGZvcjogXCIgKyBlbnRpdHkubmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIEJBQllMT04uU2NlbmVNYW5hZ2VyLkNyZWF0ZVBoeXNpY3NJbXBvc3RvcihzY2VuZSwgZW50aXR5LCBpbXBvc3RvcnR5cGUsIHsgbWFzczogbWFzcywgZnJpY3Rpb246IChpc3N0YXRpYykgPyBzdGF0aWNmcmljdGlvbiA6IGR5bmFtaWNmcmljdGlvbiwgcmVzdGl0dXRpb246IHJlc3RpdHV0aW9uIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBCQUJZTE9OLlJpZ2lkYm9keVBoeXNpY3MuQ29uZmlnUmlnaWRib2R5UGh5c2ljcyhzY2VuZSwgZW50aXR5LCBmYWxzZSwgaXN0cmlnZ2VyLCBtZXRhZGF0YS5waHlzaWNzKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcHJpdmF0ZSBzdGF0aWMgQ29uZmlnUmlnaWRib2R5UGh5c2ljcyhzY2VuZTpCQUJZTE9OLlNjZW5lLCBlbnRpdHk6IEJBQllMT04uQWJzdHJhY3RNZXNoLCBjaGlsZDpib29sZWFuLCB0cmlnZ2VyOmJvb2xlYW4sIHBoeXNpY3M6YW55KTp2b2lkIHtcclxuICAgICAgICAgICAgaWYgKGVudGl0eSA9PSBudWxsKSByZXR1cm47XHJcbiAgICAgICAgICAgIGlmIChlbnRpdHkucGh5c2ljc0ltcG9zdG9yICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIGVudGl0eS5waHlzaWNzSW1wb3N0b3IuZXhlY3V0ZU5hdGl2ZUZ1bmN0aW9uKCh3b3JkOmFueSwgYm9keTphbnkpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYm9keS5hY3RpdmF0ZSkgYm9keS5hY3RpdmF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbG9iajphbnkgPSBBbW1vLmNhc3RPYmplY3QoYm9keSwgQW1tby5idENvbGxpc2lvbk9iamVjdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29sb2JqLmVudGl0eSA9IGVudGl0eTtcclxuICAgICAgICAgICAgICAgICAgICAvLyAuLlxyXG4gICAgICAgICAgICAgICAgICAgIC8vIExlZ2FjeSBFZGdlIENvbnRhY3QgKERFUFJFQ0lBVEVEOiBLRUVQIEZPUiBSRUZFUkVOQ0UpXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gLi5cclxuICAgICAgICAgICAgICAgICAgICAvL2NvbnN0IHdvcmxkOmFueSA9IEJBQllMT04uU2NlbmVNYW5hZ2VyLkdldFBoeXNpY3NXb3JsZChzY2VuZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9pZiAod29ybGQgIT0gbnVsbCAmJiB3b3JsZC5nZW5lcmF0ZUludGVybmFsRWRnZUluZm8pIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyAgICBjb25zdCBjb2xsaXNpb25TaGFwZTphbnkgPSBjb2xvYmouZ2V0Q29sbGlzaW9uU2hhcGUoKTtcclxuICAgICAgICAgICAgICAgICAgICAvLyAgICBpZiAoY29sbGlzaW9uU2hhcGUgIT0gbnVsbCAmJiBjb2xsaXNpb25TaGFwZS5nZXRTaGFwZVR5cGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgY29uc3Qgc2hhcGVUeXBlOm51bWJlciA9IGNvbGxpc2lvblNoYXBlLmdldFNoYXBlVHlwZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgICBpZiAoc2hhcGVUeXBlID09PSAyMSkgeyAvLyBUUklBTkdMRV9NRVNIX1NIQVBFX1BST1hZVFlQRVxyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgY29uc3QgdHJpYW5nbGVTaGFwZTphbnkgPSBBbW1vLmNhc3RPYmplY3QoY29sbGlzaW9uU2hhcGUsIEFtbW8uYnRCdmhUcmlhbmdsZU1lc2hTaGFwZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICAgICBpZiAodHJpYW5nbGVTaGFwZSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgICAgY29sb2JqLnRyaWFuZ2xlTWFwSW5mbyA9IG5ldyBBbW1vLmJ0VHJpYW5nbGVJbmZvTWFwKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgICAgd29ybGQuZ2VuZXJhdGVJbnRlcm5hbEVkZ2VJbmZvKHRyaWFuZ2xlU2hhcGUsIGNvbG9iai50cmlhbmdsZU1hcEluZm8pO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIC8vfVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIC4uXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gU2V0dXAgTWFpbiBHcmF2aXR5XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gLi5cclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBncmF2aXR5OmJvb2xlYW4gPSAocGh5c2ljcyAhPSBudWxsICYmIHBoeXNpY3MuZ3Jhdml0eSAhPSBudWxsKSA/IHBoeXNpY3MuZ3Jhdml0eSA6IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGdyYXZpdHkgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChib2R5LnNldEdyYXZpdHkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChCQUJZTE9OLlJpZ2lkYm9keVBoeXNpY3MuVGVtcEFtbW9WZWN0b3IgPT0gbnVsbCkgQkFCWUxPTi5SaWdpZGJvZHlQaHlzaWNzLlRlbXBBbW1vVmVjdG9yID0gbmV3IEFtbW8uYnRWZWN0b3IzKDAsIDAsIDApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQkFCWUxPTi5SaWdpZGJvZHlQaHlzaWNzLlRlbXBBbW1vVmVjdG9yLnNldFZhbHVlKDAsMCwwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvZHkuc2V0R3Jhdml0eShCQUJZTE9OLlJpZ2lkYm9keVBoeXNpY3MuVGVtcEFtbW9WZWN0b3IpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQkFCWUxPTi5Ub29scy5XYXJuKFwiUGh5c2ljcyBlbmdpbmUgc2V0IGdyYXZpdHkgb3ZlcnJpZGUgbm90IHN1cHBvcnRlZCBmb3I6IFwiICsgZW50aXR5Lm5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIC4uXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gU2V0dXAgRHJhZyBEYW1waW5nXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gLi5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoYm9keS5zZXREYW1waW5nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGxkcmFnOm51bWJlciA9IChwaHlzaWNzICE9IG51bGwgJiYgcGh5c2ljcy5sZHJhZyAhPSBudWxsKSA/IHBoeXNpY3MubGRyYWcgOiAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhZHJhZzpudW1iZXIgPSAocGh5c2ljcyAhPSBudWxsICYmIHBoeXNpY3MuYWRyYWcgIT0gbnVsbCkgPyBwaHlzaWNzLmFkcmFnIDogMC4wNTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYm9keS5zZXREYW1waW5nKGxkcmFnLCBhZHJhZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgQkFCWUxPTi5Ub29scy5XYXJuKFwiUGh5c2ljcyBlbmdpbmUgc2V0IGRyYWcgZGFtcGluZyBub3Qgc3VwcG9ydGVkIGZvcjogXCIgKyBlbnRpdHkubmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIC4uXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gU2V0dXAgQ29sbGlzaW9uIEZsYWdzXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gLi5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoYm9keS5zZXRDb2xsaXNpb25GbGFncyAmJiBib2R5LmdldENvbGxpc2lvbkZsYWdzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIERFUFJFQ0lBVEVEOiBpZiAodHJpZ2dlciA9PT0gdHJ1ZSkgYm9keS5zZXRDb2xsaXNpb25GbGFncyhib2R5LmdldENvbGxpc2lvbkZsYWdzKCkgfCBCQUJZTE9OLkNvbGxpc2lvbkZsYWdzLkNGX05PX0NPTlRBQ1RfUkVTUE9OU0UgfCBCQUJZTE9OLkNvbGxpc2lvbkZsYWdzLkNGX0NVU1RPTV9NQVRFUklBTF9DQUxMQkFDSyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIERFUFJFQ0lBVEVEOiBlbHNlIGJvZHkuc2V0Q29sbGlzaW9uRmxhZ3MoYm9keS5nZXRDb2xsaXNpb25GbGFncygpIHwgQkFCWUxPTi5Db2xsaXNpb25GbGFncy5DRl9DVVNUT01fTUFURVJJQUxfQ0FMTEJBQ0spO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUT0RPOiBpZiAobWFzcyA9PT0gMCkgYm9keS5zZXRDb2xsaXNpb25GbGFncyhib2R5LmdldENvbGxpc2lvbkZsYWdzKCkgfCBCQUJZTE9OLkNvbGxpc2lvbkZsYWdzLkNGX0tJTkVNQVRJQ19PQkpFQ1QpOyAvLyBTVEFUSUNfT0JKRUNUXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0cmlnZ2VyID09PSB0cnVlKSBib2R5LnNldENvbGxpc2lvbkZsYWdzKGJvZHkuZ2V0Q29sbGlzaW9uRmxhZ3MoKSB8IEJBQllMT04uQ29sbGlzaW9uRmxhZ3MuQ0ZfTk9fQ09OVEFDVF9SRVNQT05TRSk7IC8vIFRSSUdHRVJfT0JKRUNUXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvZHkuc2V0Q29sbGlzaW9uRmxhZ3MoYm9keS5nZXRDb2xsaXNpb25GbGFncygpIHwgQkFCWUxPTi5Db2xsaXNpb25GbGFncy5DRl9DVVNUT01fTUFURVJJQUxfQ0FMTEJBQ0spOyAgICAgICAgICAgICAgICAgIC8vIENVU1RPTV9NQVRFUklBTFxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIEJBQllMT04uVG9vbHMuV2FybihcIlBoeXNpY3MgZW5naW5lIHNldCBjb2xsaXNpb24gZmxhZ3Mgbm90IHN1cHBvcnRlZCBmb3I6IFwiICsgZW50aXR5Lm5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAvLyAuLlxyXG4gICAgICAgICAgICAgICAgICAgIC8vIFNldHVwIEZyZWV6ZSBDb25zdHJhaW50c1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIC4uXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZnJlZXplOmFueSA9IChwaHlzaWNzICE9IG51bGwgJiYgcGh5c2ljcy5mcmVlemUgIT0gbnVsbCkgPyBwaHlzaWNzLmZyZWV6ZSA6IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZyZWV6ZSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChib2R5LnNldExpbmVhckZhY3Rvcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZnJlZXplX3Bvc194Om51bWJlciA9IChmcmVlemUucG9zaXRpb254ICE9IG51bGwgJiYgZnJlZXplLnBvc2l0aW9ueCA9PT0gdHJ1ZSkgPyAwIDogMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZyZWV6ZV9wb3NfeTpudW1iZXIgPSAoZnJlZXplLnBvc2l0aW9ueSAhPSBudWxsICYmIGZyZWV6ZS5wb3NpdGlvbnkgPT09IHRydWUpID8gMCA6IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBmcmVlemVfcG9zX3o6bnVtYmVyID0gKGZyZWV6ZS5wb3NpdGlvbnogIT0gbnVsbCAmJiBmcmVlemUucG9zaXRpb256ID09PSB0cnVlKSA/IDAgOiAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKEJBQllMT04uUmlnaWRib2R5UGh5c2ljcy5UZW1wQW1tb1ZlY3RvciA9PSBudWxsKSBCQUJZTE9OLlJpZ2lkYm9keVBoeXNpY3MuVGVtcEFtbW9WZWN0b3IgPSBuZXcgQW1tby5idFZlY3RvcjMoMCwgMCwgMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBCQUJZTE9OLlJpZ2lkYm9keVBoeXNpY3MuVGVtcEFtbW9WZWN0b3Iuc2V0VmFsdWUoZnJlZXplX3Bvc194LCBmcmVlemVfcG9zX3ksIGZyZWV6ZV9wb3Nfeik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBib2R5LnNldExpbmVhckZhY3RvcihCQUJZTE9OLlJpZ2lkYm9keVBoeXNpY3MuVGVtcEFtbW9WZWN0b3IpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQkFCWUxPTi5Ub29scy5XYXJuKFwiUGh5c2ljcyBlbmdpbmUgc2V0IGxpbmVhciBmYWN0b3Igbm90IHN1cHBvcnRlZCBmb3I6IFwiICsgZW50aXR5Lm5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChib2R5LnNldEFuZ3VsYXJGYWN0b3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZyZWV6ZV9yb3RfeDpudW1iZXIgPSAoZnJlZXplLnJvdGF0aW9ueCAhPSBudWxsICYmIGZyZWV6ZS5yb3RhdGlvbnggPT09IHRydWUpID8gMCA6IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBmcmVlemVfcm90X3k6bnVtYmVyID0gKGZyZWV6ZS5yb3RhdGlvbnkgIT0gbnVsbCAmJiBmcmVlemUucm90YXRpb255ID09PSB0cnVlKSA/IDAgOiAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZnJlZXplX3JvdF96Om51bWJlciA9IChmcmVlemUucm90YXRpb256ICE9IG51bGwgJiYgZnJlZXplLnJvdGF0aW9ueiA9PT0gdHJ1ZSkgPyAwIDogMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChCQUJZTE9OLlJpZ2lkYm9keVBoeXNpY3MuVGVtcEFtbW9WZWN0b3IgPT0gbnVsbCkgQkFCWUxPTi5SaWdpZGJvZHlQaHlzaWNzLlRlbXBBbW1vVmVjdG9yID0gbmV3IEFtbW8uYnRWZWN0b3IzKDAsIDAsIDApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQkFCWUxPTi5SaWdpZGJvZHlQaHlzaWNzLlRlbXBBbW1vVmVjdG9yLnNldFZhbHVlKGZyZWV6ZV9yb3RfeCwgZnJlZXplX3JvdF95LCBmcmVlemVfcm90X3opO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9keS5zZXRBbmd1bGFyRmFjdG9yKEJBQllMT04uUmlnaWRib2R5UGh5c2ljcy5UZW1wQW1tb1ZlY3Rvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBCQUJZTE9OLlRvb2xzLldhcm4oXCJQaHlzaWNzIGVuZ2luZSBzZXQgYW5ndWxhciBmYWN0b3Igbm90IHN1cHBvcnRlZCBmb3I6IFwiICsgZW50aXR5Lm5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBCQUJZTE9OLlRvb2xzLldhcm4oXCJObyB2YWxpZCBwaHlzaWNzIGltcG9zdG9yIHRvIHNldHVwIGZvciBcIiArIGVudGl0eS5uYW1lKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQmFieWxvbiBjb2xsaXNpb24gY29udGFjdCBpbmZvIHBybyBjbGFzcyAoTmF0aXZlIEJ1bGxldCBQaHlzaWNzIDIuODIpXHJcbiAgICAgKiBAY2xhc3MgQ29sbGlzaW9uQ29udGFjdEluZm8gLSBBbGwgcmlnaHRzIHJlc2VydmVkIChjKSAyMDIwIE1hY2tleSBLaW5hcmRcclxuICAgICAqL1xyXG4gICAgZXhwb3J0IGNsYXNzIENvbGxpc2lvbkNvbnRhY3RJbmZvIHtcclxuICAgICAgICBwdWJsaWMgbWVzaDpCQUJZTE9OLkFic3RyYWN0TWVzaCA9IG51bGw7XHJcbiAgICAgICAgcHVibGljIHN0YXRlOm51bWJlciA9IDA7XHJcbiAgICAgICAgcHVibGljIHJlc2V0OmJvb2xlYW4gPSBmYWxzZTtcclxuICAgIH0gICAgXHJcbn0iLCJtb2R1bGUgQkFCWUxPTiB7XHJcbiAgICAvKipcclxuICAgICAqIEJhYnlsb24gc2h1cmlrZW4gcGFydGljbGUgc3lzdGVtIHBybyBjbGFzcyAoVW5pdHkgU3R5bGUgU2h1cmlrZW4gUGFydGljbGUgU3lzdGVtKVxyXG4gICAgICogQGNsYXNzIFNodXJpa2VuUGFydGljbGVzIC0gQWxsIHJpZ2h0cyByZXNlcnZlZCAoYykgMjAyMCBNYWNrZXkgS2luYXJkXHJcbiAgICAgKi9cclxuICAgIGV4cG9ydCBjbGFzcyBTaHVyaWtlblBhcnRpY2xlcyBleHRlbmRzIEJBQllMT04uU2NyaXB0Q29tcG9uZW50IHtcclxuICAgICAgICBwcm90ZWN0ZWQgYXdha2UoKTogdm9pZCB7IC8qIEF3YWtlIGNvbXBvbmVudCBmdW5jdGlvbiAqLyB9XHJcbiAgICAgICAgcHJvdGVjdGVkIHN0YXJ0KCk6IHZvaWQgeyAvKiBTdGFydCByZW5kZXIgbG9vcCBmdW5jdGlvbiAqLyB9XHJcbiAgICAgICAgcHJvdGVjdGVkIHJlYWR5KCk6IHZvaWQgeyAvKiBFeGVjdXRlIHdoZW4gcmVhZHkgZnVuY3Rpb24gKi8gfVxyXG4gICAgICAgIHByb3RlY3RlZCB1cGRhdGUoKTogdm9pZCB7IC8qIFVwZGF0ZSByZW5kZXIgbG9vcCBmdW5jdGlvbiAqLyB9XHJcbiAgICAgICAgcHJvdGVjdGVkIGxhdGUoKTogdm9pZCB7IC8qIExhdGUgdXBkYXRlIHJlbmRlciBsb29wIGZ1bmN0aW9uICovIH1cclxuICAgICAgICBwcm90ZWN0ZWQgYWZ0ZXIoKTogdm9pZCB7IC8qIEFmdGVyIHJlbmRlciBsb29wIGZ1bmN0aW9uICovIH1cclxuICAgICAgICBwcm90ZWN0ZWQgZml4ZWQoKTogdm9pZCB7IC8qIEZpeGVkIHVwZGF0ZSBwaHlzaWNzIHN0ZXAgZnVuY3Rpb24gKi8gfVxyXG4gICAgICAgIHByb3RlY3RlZCBkZXN0cm95KCk6IHZvaWQgeyAvKiBEZXN0cm95IGNvbXBvbmVudCBmdW5jdGlvbiAqLyB9XHJcbiAgICB9XHJcbn0iLCJtb2R1bGUgQkFCWUxPTiB7XHJcbiAgICAvKipcclxuICAgICAqIEJhYnlsb24gdGVycmFpbiBidWlsZGluZyBzeXN0ZW0gcHJvIGNsYXNzIChVbml0eSBTdHlsZSBUZXJyYWluIEJ1aWxkaW5nIFN5c3RlbSlcclxuICAgICAqIEBjbGFzcyBUZXJyYWluR2VuZXJhdG9yIC0gQWxsIHJpZ2h0cyByZXNlcnZlZCAoYykgMjAyMCBNYWNrZXkgS2luYXJkXHJcbiAgICAgKi9cclxuICAgIGV4cG9ydCBjbGFzcyBUZXJyYWluR2VuZXJhdG9yIGV4dGVuZHMgQkFCWUxPTi5TY3JpcHRDb21wb25lbnQge1xyXG4gICAgICAgIHByaXZhdGUgdHJlZUluc3RhbmNlczpCQUJZTE9OLlRyYW5zZm9ybU5vZGVbXSA9IG51bGw7XHJcblxyXG4gICAgICAgIHByb3RlY3RlZCBhd2FrZSgpOiB2b2lkIHtcclxuICAgICAgICAgICAgLyogSW5pdCBjb21wb25lbnQgZnVuY3Rpb24gKi9cclxuICAgICAgICAgICAgLy8gVEVTVElORyBPTkxZOiBjb25zdCB0cmVlcyA9IHRoaXMuZ2V0Q2hpbGROb2RlKFwiX3RyZWVzXCIsIEJBQllMT04uU2VhcmNoVHlwZS5FbmRzV2l0aCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgIC8vIFRFU1RJTkcgT05MWTogaWYgKHRyZWVzICE9IG51bGwpIHRoaXMudHJlZUluc3RhbmNlcyA9IHRyZWVzLmdldENoaWxkcmVuKG51bGwsIHRydWUpIGFzIEJBQllMT04uVHJhbnNmb3JtTm9kZVtdO1xyXG5cclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJUZXJyYWluIEdlbmVyYXRvcjogXCIgKyB0aGlzLnRyYW5zZm9ybS5uYW1lKTtcclxuICAgICAgICAgICAgY29uc29sZS5sb2codGhpcyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcm90ZWN0ZWQgc3RhcnQoKTogdm9pZCB7XHJcbiAgICAgICAgICAgIC8qIFN0YXJ0IHJlbmRlciBsb29wIGZ1bmN0aW9uICovXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcm90ZWN0ZWQgcmVhZHkoKTogdm9pZCB7XHJcbiAgICAgICAgICAgIC8qIEV4ZWN1dGUgd2hlbiByZWFkeSBmdW5jdGlvbiAqL1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJvdGVjdGVkIHVwZGF0ZSgpOiB2b2lkIHtcclxuICAgICAgICAgICAgLyogVXBkYXRlIHJlbmRlciBsb29wIGZ1bmN0aW9uICovXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcm90ZWN0ZWQgbGF0ZSgpOiB2b2lkIHtcclxuICAgICAgICAgICAgLyogTGF0ZSB1cGRhdGUgcmVuZGVyIGxvb3AgZnVuY3Rpb24gKi9cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByb3RlY3RlZCBhZnRlcigpOiB2b2lkIHtcclxuICAgICAgICAgICAgLyogQWZ0ZXIgdXBkYXRlIHJlbmRlciBsb29wIGZ1bmN0aW9uICovXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcm90ZWN0ZWQgZml4ZWQoKTogdm9pZCB7XHJcbiAgICAgICAgICAgIC8qIEZpeGVkIHVwZGF0ZSBwaHlzaWNzIHN0ZXAgZnVuY3Rpb24gKi9cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByb3RlY3RlZCBkZXN0cm95KCk6IHZvaWQge1xyXG4gICAgICAgICAgICAvKiBEZXN0cm95IGNvbXBvbmVudCBmdW5jdGlvbiAqL1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsIm1vZHVsZSBCQUJZTE9OIHtcclxuICAgIC8qKlxyXG4gICAgICogQmFieWxvbiB3ZWIgdmlkZW8gcGxheWVyIHBybyBjbGFzcyAoVW5pdHkgU3R5bGUgU2h1cmlrZW4gUGFydGljbGUgU3lzdGVtKVxyXG4gICAgICogQGNsYXNzIFdlYlZpZGVvUGxheWVyIC0gQWxsIHJpZ2h0cyByZXNlcnZlZCAoYykgMjAyMCBNYWNrZXkgS2luYXJkXHJcbiAgICAgKi9cclxuICAgIGV4cG9ydCBjbGFzcyBXZWJWaWRlb1BsYXllciBleHRlbmRzIEJBQllMT04uU2NyaXB0Q29tcG9uZW50IGltcGxlbWVudHMgQkFCWUxPTi5JQXNzZXRQcmVsb2FkZXIge1xyXG4gICAgICAgIHByaXZhdGUgdmlkZW9Mb29wOmJvb2xlYW4gPSBmYWxzZTtcclxuICAgICAgICBwcml2YXRlIHZpZGVvTXV0ZWQ6Ym9vbGVhbiA9IGZhbHNlO1xyXG4gICAgICAgIHByaXZhdGUgdmlkZW9BbHBoYTpib29sZWFuID0gZmFsc2U7XHJcbiAgICAgICAgcHJpdmF0ZSB2aWRlb0ZhZGVkOmJvb2xlYW4gPSBmYWxzZTtcclxuICAgICAgICBwcml2YXRlIHZpZGVvUG9zdGVyOnN0cmluZyA9IG51bGw7XHJcbiAgICAgICAgcHJpdmF0ZSB2aWRlb0ludmVydDpib29sZWFuID0gdHJ1ZTtcclxuICAgICAgICBwcml2YXRlIHZpZGVvU2FtcGxlOm51bWJlciA9IDM7XHJcbiAgICAgICAgcHJpdmF0ZSB2aWRlb1ZvbHVtZTpudW1iZXIgPSAxLjA7XHJcbiAgICAgICAgcHJpdmF0ZSB2aWRlb01pcG1hcHM6Ym9vbGVhbiA9IGZhbHNlO1xyXG4gICAgICAgIHByaXZhdGUgdmlkZW9QbGF5YmFjazpudW1iZXIgPSAxLjA7XHJcbiAgICAgICAgcHJpdmF0ZSB2aWRlb1BsYXlPbkF3YWtlOmJvb2xlYW4gPSB0cnVlO1xyXG4gICAgICAgIHByaXZhdGUgdmlkZW9QcmVsb2FkZXJVcmw6c3RyaW5nID0gbnVsbDtcclxuICAgICAgICBwcml2YXRlIHZpZGVvQmxvYlVybDpzdHJpbmcgPSBudWxsO1xyXG4gICAgICAgIHByaXZhdGUgdmlkZW9QcmVsb2FkOmJvb2xlYW4gPSBmYWxzZTtcclxuICAgICAgICBwcml2YXRlIF9pbml0aWFsaXplZFJlYWR5SW5zdGFuY2U6Ym9vbGVhbiA9IGZhbHNlO1xyXG5cclxuICAgICAgICBwdWJsaWMgZ2V0VmlkZW9NYXRlcmlhbCgpOkJBQllMT04uU3RhbmRhcmRNYXRlcmlhbCB7IHJldHVybiB0aGlzLm1fdmlkZW9NYXRlcmlhbDsgfVxyXG4gICAgICAgIHB1YmxpYyBnZXRWaWRlb1RleHR1cmUoKTpCQUJZTE9OLlZpZGVvVGV4dHVyZSB7IHJldHVybiB0aGlzLm1fdmlkZW9UZXh0dXJlOyB9XHJcbiAgICAgICAgcHVibGljIGdldFZpZGVvRWxlbWVudCgpOkhUTUxWaWRlb0VsZW1lbnQgeyByZXR1cm4gKHRoaXMubV92aWRlb1RleHR1cmUgIT0gbnVsbCkgPyB0aGlzLm1fdmlkZW9UZXh0dXJlLnZpZGVvIDogbnVsbDsgfVxyXG4gICAgICAgIHB1YmxpYyBnZXRWaWRlb1NjcmVlbigpOkJBQllMT04uQWJzdHJhY3RNZXNoIHsgcmV0dXJuIHRoaXMubV9hYnN0cmFjdE1lc2g7IH1cclxuICAgICAgICBwdWJsaWMgZ2V0VmlkZW9CbG9iVXJsKCk6c3RyaW5nIHsgcmV0dXJuIHRoaXMudmlkZW9CbG9iVXJsOyB9XHJcbiAgICAgICAgLyoqIFJlZ2lzdGVyIGhhbmRsZXIgdGhhdCBpcyB0cmlnZ2VyZWQgd2hlbiB0aGUgdmlkZW8gY2xpcCBpcyByZWFkeSAqL1xyXG4gICAgICAgIHB1YmxpYyBvblJlYWR5T2JzZXJ2YWJsZSA9IG5ldyBCQUJZTE9OLk9ic2VydmFibGU8QkFCWUxPTi5WaWRlb1RleHR1cmU+KCk7XHJcblxyXG4gICAgICAgIHByb3RlY3RlZCBtX2Fic3RyYWN0TWVzaDpCQUJZTE9OLkFic3RyYWN0TWVzaCA9IG51bGw7XHJcbiAgICAgICAgcHJvdGVjdGVkIG1fdmlkZW9UZXh0dXJlOkJBQllMT04uVmlkZW9UZXh0dXJlID0gbnVsbDtcclxuICAgICAgICBwcm90ZWN0ZWQgbV92aWRlb01hdGVyaWFsOkJBQllMT04uU3RhbmRhcmRNYXRlcmlhbCA9IG51bGw7XHJcbiAgICAgICAgcHJvdGVjdGVkIG1fZGlmZnVzZUludGVuc2l0eTpudW1iZXIgPSAxLjA7XHJcblxyXG4gICAgICAgIHByb3RlY3RlZCBhd2FrZSgpOiB2b2lkIHsgdGhpcy5hd2FrZVdlYlZpZGVvUGxheWVyKCk7IH1cclxuICAgICAgICBwcm90ZWN0ZWQgZGVzdHJveSgpOiB2b2lkIHsgdGhpcy5kZXN0cm95V2ViVmlkZW9QbGF5ZXIoKTsgfVxyXG5cclxuICAgICAgICBwcm90ZWN0ZWQgYXdha2VXZWJWaWRlb1BsYXllcigpOnZvaWQge1xyXG4gICAgICAgICAgICB0aGlzLnZpZGVvTG9vcCA9IHRoaXMuZ2V0UHJvcGVydHkoXCJsb29waW5nXCIsIGZhbHNlKTtcclxuICAgICAgICAgICAgdGhpcy52aWRlb011dGVkID0gdGhpcy5nZXRQcm9wZXJ0eShcIm11dGVkXCIsIGZhbHNlKTtcclxuICAgICAgICAgICAgdGhpcy52aWRlb0ludmVydCA9IHRoaXMuZ2V0UHJvcGVydHkoXCJpbnZlcnR5XCIsIHRydWUpO1xyXG4gICAgICAgICAgICB0aGlzLnZpZGVvU2FtcGxlID0gdGhpcy5nZXRQcm9wZXJ0eShcInNhbXBsaW5nXCIsIDMpO1xyXG4gICAgICAgICAgICB0aGlzLnZpZGVvVm9sdW1lID0gdGhpcy5nZXRQcm9wZXJ0eShcInZvbHVtZVwiLCAxLjApO1xyXG4gICAgICAgICAgICB0aGlzLnZpZGVvTWlwbWFwcyA9IHRoaXMuZ2V0UHJvcGVydHkoXCJtaXBtYXBzXCIsIGZhbHNlKTtcclxuICAgICAgICAgICAgdGhpcy52aWRlb0FscGhhID0gdGhpcy5nZXRQcm9wZXJ0eShcInRleHR1cmVhbHBoYVwiLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIHRoaXMudmlkZW9GYWRlZCA9IHRoaXMuZ2V0UHJvcGVydHkoXCJkaWZmdXNlYWxwaGFcIiwgZmFsc2UpO1xyXG4gICAgICAgICAgICB0aGlzLnZpZGVvUGxheWJhY2sgPSB0aGlzLmdldFByb3BlcnR5KFwicGxheWJhY2tzcGVlZFwiLCAxLjApO1xyXG4gICAgICAgICAgICB0aGlzLnZpZGVvUGxheU9uQXdha2UgPSB0aGlzLmdldFByb3BlcnR5KFwicGxheW9uYXdha2VcIiwgdHJ1ZSk7XHJcbiAgICAgICAgICAgIHRoaXMudmlkZW9QcmVsb2FkID0gdGhpcy5nZXRQcm9wZXJ0eShcInByZWxvYWRcIiwgdGhpcy52aWRlb1ByZWxvYWQpO1xyXG4gICAgICAgICAgICB0aGlzLm1fZGlmZnVzZUludGVuc2l0eSA9IHRoaXMuZ2V0UHJvcGVydHkoXCJpbnRlbnNpdHlcIiwgMS4wKTtcclxuICAgICAgICAgICAgdGhpcy5tX2Fic3RyYWN0TWVzaCA9IHRoaXMuZ2V0QWJzdHJhY3RNZXNoKCk7XHJcbiAgICAgICAgICAgIC8vIC4uXHJcbiAgICAgICAgICAgIGNvbnN0IHNldFBvc3Rlcjpib29sZWFuID0gdGhpcy5nZXRQcm9wZXJ0eShcInBvc3RlclwiKTtcclxuICAgICAgICAgICAgaWYgKHNldFBvc3RlciA9PT0gdHJ1ZSAmJiB0aGlzLm1fYWJzdHJhY3RNZXNoICE9IG51bGwgJiYgdGhpcy5tX2Fic3RyYWN0TWVzaC5tYXRlcmlhbCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5tX2Fic3RyYWN0TWVzaC5tYXRlcmlhbCBpbnN0YW5jZW9mIEJBQllMT04uUEJSTWF0ZXJpYWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5tX2Fic3RyYWN0TWVzaC5tYXRlcmlhbC5hbGJlZG9UZXh0dXJlICE9IG51bGwgJiYgKDxhbnk+dGhpcy5tX2Fic3RyYWN0TWVzaC5tYXRlcmlhbC5hbGJlZG9UZXh0dXJlKS51cmwgIT0gbnVsbCAmJiAoPGFueT50aGlzLm1fYWJzdHJhY3RNZXNoLm1hdGVyaWFsLmFsYmVkb1RleHR1cmUpLnVybCAhPT0gXCJcIikgeyAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy52aWRlb1Bvc3RlciA9ICg8YW55PnRoaXMubV9hYnN0cmFjdE1lc2gubWF0ZXJpYWwuYWxiZWRvVGV4dHVyZSkudXJsLnJlcGxhY2UoXCJkYXRhOlwiLCBcIlwiKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMubV9hYnN0cmFjdE1lc2gubWF0ZXJpYWwgaW5zdGFuY2VvZiBCQUJZTE9OLlN0YW5kYXJkTWF0ZXJpYWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5tX2Fic3RyYWN0TWVzaC5tYXRlcmlhbC5kaWZmdXNlVGV4dHVyZSAhPSBudWxsICYmICg8YW55PnRoaXMubV9hYnN0cmFjdE1lc2gubWF0ZXJpYWwuZGlmZnVzZVRleHR1cmUpLnVybCAhPSBudWxsICYmICg8YW55PnRoaXMubV9hYnN0cmFjdE1lc2gubWF0ZXJpYWwuZGlmZnVzZVRleHR1cmUpLnVybCAhPT0gXCJcIikgeyAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy52aWRlb1Bvc3RlciA9ICg8YW55PnRoaXMubV9hYnN0cmFjdE1lc2gubWF0ZXJpYWwuZGlmZnVzZVRleHR1cmUpLnVybC5yZXBsYWNlKFwiZGF0YTpcIiwgXCJcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIC4uXHJcbiAgICAgICAgICAgIGNvbnN0IHZpZGVvVXJsOnN0cmluZyA9IHRoaXMuZ2V0UHJvcGVydHkoXCJ1cmxcIiwgbnVsbCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHZpZGVvU3JjOkJBQllMT04uSVVuaXR5VmlkZW9DbGlwID0gdGhpcy5nZXRQcm9wZXJ0eShcInNvdXJjZVwiLCBudWxsKTtcclxuICAgICAgICAgICAgbGV0IHBsYXlVcmw6c3RyaW5nID0gdmlkZW9Vcmw7XHJcbiAgICAgICAgICAgIGlmICh2aWRlb1NyYyAhPSBudWxsICYmIHZpZGVvU3JjLmZpbGVuYW1lICE9IG51bGwgJiYgdmlkZW9TcmMuZmlsZW5hbWUgIT09IFwiXCIpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJvb3RVcmw6c3RyaW5nID0gQkFCWUxPTi5TY2VuZU1hbmFnZXIuR2V0Um9vdFVybCh0aGlzLnNjZW5lKTtcclxuICAgICAgICAgICAgICAgIHBsYXlVcmwgPSAocm9vdFVybCArIHZpZGVvU3JjLmZpbGVuYW1lKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAocGxheVVybCAhPSBudWxsICYmIHBsYXlVcmwgIT09IFwiXCIpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnZpZGVvUHJlbG9hZCA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudmlkZW9QcmVsb2FkZXJVcmwgPSBwbGF5VXJsO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldERhdGFTb3VyY2UocGxheVVybCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcHJvdGVjdGVkIGRlc3Ryb3lXZWJWaWRlb1BsYXllcigpOnZvaWQge1xyXG4gICAgICAgICAgICB0aGlzLm1fYWJzdHJhY3RNZXNoID0gbnVsbDtcclxuICAgICAgICAgICAgaWYgKHRoaXMubV92aWRlb1RleHR1cmUgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tX3ZpZGVvVGV4dHVyZS5kaXNwb3NlKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1fdmlkZW9UZXh0dXJlID0gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy5tX3ZpZGVvTWF0ZXJpYWwgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tX3ZpZGVvTWF0ZXJpYWwuZGlzcG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tX3ZpZGVvTWF0ZXJpYWwgPSBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMucmV2b2tlVmlkZW9CbG9iVXJsKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEdldHMgdGhlIHZpZGVvIHJlYWR5IHN0YXR1c1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBpc1JlYWR5KCk6Ym9vbGVhbiB7XHJcbiAgICAgICAgICAgIHJldHVybiAodGhpcy5nZXRWaWRlb0VsZW1lbnQoKSAhPSBudWxsKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogR2V0cyB0aGUgdmlkZW8gcGxheWluZyBzdGF0dXNcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgaXNQbGF5aW5nKCk6Ym9vbGVhbiB7XHJcbiAgICAgICAgICAgIGxldCByZXN1bHQ6Ym9vbGVhbiA9IGZhbHNlO1xyXG4gICAgICAgICAgICBjb25zdCB2aWRlbzpIVE1MVmlkZW9FbGVtZW50ID0gdGhpcy5nZXRWaWRlb0VsZW1lbnQoKTtcclxuICAgICAgICAgICAgaWYgKHZpZGVvICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9ICh2aWRlby5wYXVzZWQgPT09IGZhbHNlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH1cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBHZXRzIHRoZSB2aWRlbyBwYXVzZWQgc3RhdHVzXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGlzUGF1c2VkKCk6Ym9vbGVhbiB7XHJcbiAgICAgICAgICAgIGxldCByZXN1bHQ6Ym9vbGVhbiA9IGZhbHNlO1xyXG4gICAgICAgICAgICBjb25zdCB2aWRlbzpIVE1MVmlkZW9FbGVtZW50ID0gdGhpcy5nZXRWaWRlb0VsZW1lbnQoKTtcclxuICAgICAgICAgICAgaWYgKHZpZGVvICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9ICh2aWRlby5wYXVzZWQgPT09IHRydWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFBsYXkgdGhlIHZpZGVvIHRyYWNrXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIHBsYXkoKTpib29sZWFuIHtcclxuICAgICAgICAgICAgaWYgKEJBQllMT04uU2NlbmVNYW5hZ2VyLkhhc0F1ZGlvQ29udGV4dCgpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmludGVybmFsUGxheSgpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgQkFCWUxPTi5FbmdpbmUuYXVkaW9FbmdpbmUub25BdWRpb1VubG9ja2VkT2JzZXJ2YWJsZS5hZGRPbmNlKCgpPT57IHRoaXMuaW50ZXJuYWxQbGF5KCk7IH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBwcml2YXRlIGludGVybmFsUGxheSgpOnZvaWQge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5faW5pdGlhbGl6ZWRSZWFkeUluc3RhbmNlID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNoZWNrZWRQbGF5KCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9uUmVhZHlPYnNlcnZhYmxlLmFkZE9uY2UoKCk9PnsgdGhpcy5jaGVja2VkUGxheSgpOyB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBwcml2YXRlIGNoZWNrZWRQbGF5KCk6dm9pZCB7XHJcbiAgICAgICAgICAgIGNvbnN0IHZpZGVvOkhUTUxWaWRlb0VsZW1lbnQgPSB0aGlzLmdldFZpZGVvRWxlbWVudCgpO1xyXG4gICAgICAgICAgICBpZiAodmlkZW8gIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdmlkZW8ucGxheSgpLnRoZW4oKCk9PntcclxuICAgICAgICAgICAgICAgICAgICBpZiAodmlkZW8ucGF1c2VkID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2hlY2tlZFJlUGxheSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHByaXZhdGUgY2hlY2tlZFJlUGxheSgpOnZvaWQge1xyXG4gICAgICAgICAgICBjb25zdCB2aWRlbzpIVE1MVmlkZW9FbGVtZW50ID0gdGhpcy5nZXRWaWRlb0VsZW1lbnQoKTtcclxuICAgICAgICAgICAgaWYgKHZpZGVvICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHZpZGVvLnBsYXkoKS50aGVuKCgpID0+IHsgLyogRG8gTm90aGluZyAqL30pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFBhdXNlIHRoZSB2aWRlbyB0cmFja1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBwYXVzZSgpOmJvb2xlYW4ge1xyXG4gICAgICAgICAgICBsZXQgcmVzdWx0OmJvb2xlYW4gPSBmYWxzZTtcclxuICAgICAgICAgICAgY29uc3QgdmlkZW86SFRNTFZpZGVvRWxlbWVudCA9IHRoaXMuZ2V0VmlkZW9FbGVtZW50KCk7XHJcbiAgICAgICAgICAgIGlmICh2aWRlbyAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICB2aWRlby5wYXVzZSgpO1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH1cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBNdXRlIHRoZSB2aWRlbyB0cmFja1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBtdXRlKCk6Ym9vbGVhbiB7XHJcbiAgICAgICAgICAgIGxldCByZXN1bHQ6Ym9vbGVhbiA9IGZhbHNlO1xyXG4gICAgICAgICAgICBjb25zdCB2aWRlbzpIVE1MVmlkZW9FbGVtZW50ID0gdGhpcy5nZXRWaWRlb0VsZW1lbnQoKTtcclxuICAgICAgICAgICAgaWYgKHZpZGVvICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHZpZGVvLm11dGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVW5tdXRlIHRoZSB2aWRlbyB0cmFja1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyB1bm11dGUoKTpib29sZWFuIHtcclxuICAgICAgICAgICAgbGV0IHJlc3VsdDpib29sZWFuID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGNvbnN0IHZpZGVvOkhUTUxWaWRlb0VsZW1lbnQgPSB0aGlzLmdldFZpZGVvRWxlbWVudCgpO1xyXG4gICAgICAgICAgICBpZiAodmlkZW8gIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdmlkZW8ubXV0ZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogR2V0cyB0aGUgdmlkZW8gdm9sdW1lXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGdldFZvbHVtZSgpOm51bWJlciB7XHJcbiAgICAgICAgICAgIGxldCByZXN1bHQ6bnVtYmVyID0gMDtcclxuICAgICAgICAgICAgY29uc3QgdmlkZW86SFRNTFZpZGVvRWxlbWVudCA9IHRoaXMuZ2V0VmlkZW9FbGVtZW50KCk7XHJcbiAgICAgICAgICAgIGlmICh2aWRlbyAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQgPSB2aWRlby52b2x1bWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogU2V0cyB0aGUgdmlkZW8gdm9sdW1lXHJcbiAgICAgICAgICogQHBhcmFtIHZvbHVtZSBEZWZpbmUgdGhlIG5ldyB2b2x1bWUgb2YgdGhlIHNvdW5kXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIHNldFZvbHVtZSh2b2x1bWU6bnVtYmVyKTpib29sZWFuIHtcclxuICAgICAgICAgICAgbGV0IHJlc3VsdDpib29sZWFuID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGNvbnN0IHZpZGVvOkhUTUxWaWRlb0VsZW1lbnQgPSB0aGlzLmdldFZpZGVvRWxlbWVudCgpO1xyXG4gICAgICAgICAgICBpZiAodmlkZW8gIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdmlkZW8udm9sdW1lID0gdm9sdW1lO1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH1cclxuICAgICAgICAvKiogU2V0IHZpZGVvIGRhdGEgc291cmNlICovXHJcbiAgICAgICAgcHVibGljIHNldERhdGFTb3VyY2Uoc291cmNlOnN0cmluZ3xzdHJpbmdbXXxIVE1MVmlkZW9FbGVtZW50KTp2b2lkIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMubV9hYnN0cmFjdE1lc2ggIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgLy8gLi5cclxuICAgICAgICAgICAgICAgIC8vIENyZWF0ZSBWaWRlbyBNYXRlcmlhbFxyXG4gICAgICAgICAgICAgICAgLy8gLi5cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLm1fdmlkZW9NYXRlcmlhbCA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tX3ZpZGVvTWF0ZXJpYWwgPSBuZXcgQkFCWUxPTi5TdGFuZGFyZE1hdGVyaWFsKHRoaXMudHJhbnNmb3JtLm5hbWUgKyBcIi5WaWRlb01hdFwiLCB0aGlzLnNjZW5lKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1fdmlkZW9NYXRlcmlhbC5yb3VnaG5lc3MgPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubV92aWRlb01hdGVyaWFsLmRpZmZ1c2VDb2xvciA9IG5ldyBCQUJZTE9OLkNvbG9yMygxLDEsMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tX3ZpZGVvTWF0ZXJpYWwuZW1pc3NpdmVDb2xvciA9IG5ldyBCQUJZTE9OLkNvbG9yMygxLDEsMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tX3ZpZGVvTWF0ZXJpYWwudXNlQWxwaGFGcm9tRGlmZnVzZVRleHR1cmUgPSB0aGlzLnZpZGVvRmFkZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tX2Fic3RyYWN0TWVzaC5tYXRlcmlhbCA9IHRoaXMubV92aWRlb01hdGVyaWFsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gLi5cclxuICAgICAgICAgICAgICAgIC8vIFNldHVwIFZpZGVvIFRleHR1cmVcclxuICAgICAgICAgICAgICAgIC8vIC4uXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5tX3ZpZGVvTWF0ZXJpYWwgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubV92aWRlb01hdGVyaWFsLmRpZmZ1c2VUZXh0dXJlID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5tX3ZpZGVvVGV4dHVyZSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubV92aWRlb1RleHR1cmUuZGlzcG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1fdmlkZW9UZXh0dXJlID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faW5pdGlhbGl6ZWRSZWFkeUluc3RhbmNlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tX3ZpZGVvVGV4dHVyZSA9IG5ldyBCQUJZTE9OLlZpZGVvVGV4dHVyZSh0aGlzLnRyYW5zZm9ybS5uYW1lICsgXCIuVmlkZW9UZXhcIiwgc291cmNlLCB0aGlzLnNjZW5lLCB0aGlzLnZpZGVvTWlwbWFwcywgdGhpcy52aWRlb0ludmVydCwgdGhpcy52aWRlb1NhbXBsZSwgeyBhdXRvVXBkYXRlVGV4dHVyZTogdHJ1ZSwgcG9zdGVyOiB0aGlzLnZpZGVvUG9zdGVyIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm1fdmlkZW9UZXh0dXJlICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tX3ZpZGVvVGV4dHVyZS5oYXNBbHBoYSA9IHRoaXMudmlkZW9BbHBoYTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubV92aWRlb1RleHR1cmUudmlkZW8gIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tX3ZpZGVvVGV4dHVyZS52aWRlby5sb29wID0gdGhpcy52aWRlb0xvb3A7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1fdmlkZW9UZXh0dXJlLnZpZGVvLm11dGVkID0gdGhpcy52aWRlb011dGVkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tX3ZpZGVvVGV4dHVyZS52aWRlby52b2x1bWUgPSB0aGlzLnZpZGVvVm9sdW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tX3ZpZGVvVGV4dHVyZS52aWRlby5wbGF5YmFja1JhdGUgPSB0aGlzLnZpZGVvUGxheWJhY2s7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1fdmlkZW9UZXh0dXJlLnZpZGVvLmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkZWRkYXRhXCIsICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9pbml0aWFsaXplZFJlYWR5SW5zdGFuY2UgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm9uUmVhZHlPYnNlcnZhYmxlLmhhc09ic2VydmVycygpID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub25SZWFkeU9ic2VydmFibGUubm90aWZ5T2JzZXJ2ZXJzKHRoaXMubV92aWRlb1RleHR1cmUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy52aWRlb1BsYXlPbkF3YWtlID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGxheSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tX3ZpZGVvVGV4dHVyZS52aWRlby5sb2FkKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubV92aWRlb1RleHR1cmUgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1fdmlkZW9UZXh0dXJlLmxldmVsID0gdGhpcy5tX2RpZmZ1c2VJbnRlbnNpdHk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubV92aWRlb01hdGVyaWFsLmRpZmZ1c2VUZXh0dXJlID0gdGhpcy5tX3ZpZGVvVGV4dHVyZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIEJBQllMT04uVG9vbHMuV2FybihcIk5vIHZpZGVvIG1lc2ggb3IgbWF0ZXJpYWwgYXZhaWxhYmxlIGZvcjogXCIgKyB0aGlzLnRyYW5zZm9ybS5uYW1lKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvKiogUmV2b2tlcyB0aGUgY3VycmVudCB2aWRlbyBibG9iIHVybCBhbmQgcmVsZWFzZXMgcmVzb3VjZXMgKi9cclxuICAgICAgICBwdWJsaWMgcmV2b2tlVmlkZW9CbG9iVXJsKCk6dm9pZCB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnZpZGVvQmxvYlVybCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBVUkwucmV2b2tlT2JqZWN0VVJMKHRoaXMudmlkZW9CbG9iVXJsKTtcclxuICAgICAgICAgICAgICAgIHRoaXMudmlkZW9CbG9iVXJsID0gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvKiogQWRkIHZpZGVvIHByZWxvYWRlciBhc3NldCB0YXNrcyAoaHR0cHM6Ly9kb2MuYmFieWxvbmpzLmNvbS9kaXZpbmdEZWVwZXIvaW1wb3J0ZXJzL2Fzc2V0TWFuYWdlcikgKi9cclxuICAgICAgICBwdWJsaWMgYWRkUHJlbG9hZGVyVGFza3MoYXNzZXRzTWFuYWdlcjpCQUJZTE9OLlByZWxvYWRBc3NldHNNYW5hZ2VyKTp2b2lkIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMudmlkZW9QcmVsb2FkID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBhc3NldFRhc2s6QkFCWUxPTi5CaW5hcnlGaWxlQXNzZXRUYXNrID0gYXNzZXRzTWFuYWdlci5hZGRCaW5hcnlGaWxlVGFzaygodGhpcy50cmFuc2Zvcm0ubmFtZSArIFwiLlZpZGVvVGFza1wiKSwgdGhpcy52aWRlb1ByZWxvYWRlclVybCk7XHJcbiAgICAgICAgICAgICAgICBhc3NldFRhc2sub25TdWNjZXNzID0gKHRhc2s6QkFCWUxPTi5CaW5hcnlGaWxlQXNzZXRUYXNrKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXZva2VWaWRlb0Jsb2JVcmwoKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnZpZGVvQmxvYlVybCA9IFVSTC5jcmVhdGVPYmplY3RVUkwobmV3IEJsb2IoW3Rhc2suZGF0YV0pKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldERhdGFTb3VyY2UodGhpcy52aWRlb0Jsb2JVcmwpO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIGFzc2V0VGFzay5vbkVycm9yID0gKHRhc2s6IEJBQllMT04uQmluYXJ5RmlsZUFzc2V0VGFzaywgbWVzc2FnZT86IHN0cmluZywgZXhjZXB0aW9uPzogYW55KSA9PiB7IGNvbnNvbGUuZXJyb3IobWVzc2FnZSwgZXhjZXB0aW9uKTsgfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufSJdfQ==

// Project Shader Fixes
if (BABYLON.Effect.IncludesShadersStore["pbrBlockFinalColorComposition"]) BABYLON.Effect.IncludesShadersStore["pbrBlockFinalColorComposition"] = BABYLON.Effect.IncludesShadersStore["pbrBlockFinalColorComposition"].replace("finalColor.rgb*=lightmapColor.rgb", "finalColor.rgb*=(lightmapColor.rgb+finalEmissive.rgb)");
if (BABYLON.Effect.ShadersStore["defaultPixelShader"]) BABYLON.Effect.ShadersStore["defaultPixelShader"] = BABYLON.Effect.ShadersStore["defaultPixelShader"].replace("color.rgb *= lightmapColor.rgb", "color.rgb *= (lightmapColor.rgb + finalEmissive.rgb)");
